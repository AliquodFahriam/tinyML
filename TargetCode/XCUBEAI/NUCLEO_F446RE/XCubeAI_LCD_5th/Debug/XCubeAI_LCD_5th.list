
XCubeAI_LCD_5th.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e1f0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037b7c  0800e3c0  0800e3c0  0001e3c0  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045f3c  08045f3c  00060e34  2**0
                  CONTENTS
  4 .ARM          00000008  08045f3c  08045f3c  00055f3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045f44  08045f44  00060e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045f44  08045f44  00055f44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045f48  08045f48  00055f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e34  20000000  08045f4c  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003794  20000e34  08046d80  00060e34  2**2
                  ALLOC
 10 ._user_heap_stack 00001000  200045c8  08046d80  000645c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060e34  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00060e64  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001060e  00000000  00000000  00060ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002adf  00000000  00000000  00071505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d78  00000000  00000000  00073fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a4d  00000000  00000000  00074d60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a4f  00000000  00000000  000757ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001259d  00000000  00000000  0009a1fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d973e  00000000  00000000  000ac799  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e08  00000000  00000000  00185ed8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005e  00000000  00000000  0018ace0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000e34 	.word	0x20000e34
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e3a8 	.word	0x0800e3a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000e38 	.word	0x20000e38
 800020c:	0800e3a8 	.word	0x0800e3a8

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800103a:	4a38      	ldr	r2, [pc, #224]	; (800111c <HD44780_Init+0xec>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HD44780_Init+0xf0>)
 8001042:	2208      	movs	r2, #8
 8001044:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <HD44780_Init+0xf4>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <HD44780_Init+0xec>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d907      	bls.n	8001064 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HD44780_Init+0xf4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HD44780_Init+0xf4>)
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e006      	b.n	8001072 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HD44780_Init+0xf4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HD44780_Init+0xf4>)
 8001070:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001072:	f000 f985 	bl	8001380 <DelayInit>
  HAL_Delay(50);
 8001076:	2032      	movs	r0, #50	; 0x32
 8001078:	f000 ff9a 	bl	8001fb0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HD44780_Init+0xf0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f943 	bl	800130c <ExpanderWrite>
  HAL_Delay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108a:	f000 ff91 	bl	8001fb0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	f000 f92b 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 8001094:	f241 1094 	movw	r0, #4500	; 0x1194
 8001098:	f000 f99c 	bl	80013d4 <DelayUS>

  Write4Bits(0x03 << 4);
 800109c:	2030      	movs	r0, #48	; 0x30
 800109e:	f000 f924 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 80010a2:	f241 1094 	movw	r0, #4500	; 0x1194
 80010a6:	f000 f995 	bl	80013d4 <DelayUS>

  Write4Bits(0x03 << 4);
 80010aa:	2030      	movs	r0, #48	; 0x30
 80010ac:	f000 f91d 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 80010b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80010b4:	f000 f98e 	bl	80013d4 <DelayUS>

  Write4Bits(0x02 << 4);
 80010b8:	2020      	movs	r0, #32
 80010ba:	f000 f916 	bl	80012ea <Write4Bits>
  DelayUS(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 f988 	bl	80013d4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HD44780_Init+0xf4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f8ce 	bl	8001270 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HD44780_Init+0xf8>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010da:	f000 f875 	bl	80011c8 <HD44780_Display>
  HD44780_Clear();
 80010de:	f000 f82b 	bl	8001138 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HD44780_Init+0xfc>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <HD44780_Init+0xfc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8bc 	bl	8001270 <SendCommand>
  DelayUS(4500);
 80010f8:	f241 1094 	movw	r0, #4500	; 0x1194
 80010fc:	f000 f96a 	bl	80013d4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001100:	490b      	ldr	r1, [pc, #44]	; (8001130 <HD44780_Init+0x100>)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f876 	bl	80011f4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001108:	490a      	ldr	r1, [pc, #40]	; (8001134 <HD44780_Init+0x104>)
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f872 	bl	80011f4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001110:	f000 f81d 	bl	800114e <HD44780_Home>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000e53 	.word	0x20000e53
 8001120:	20000e54 	.word	0x20000e54
 8001124:	20000e50 	.word	0x20000e50
 8001128:	20000e51 	.word	0x20000e51
 800112c:	20000e52 	.word	0x20000e52
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008

08001138 <HD44780_Clear>:

void HD44780_Clear()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 f897 	bl	8001270 <SendCommand>
  DelayUS(2000);
 8001142:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001146:	f000 f945 	bl	80013d4 <DelayUS>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <HD44780_Home>:

void HD44780_Home()
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001152:	2002      	movs	r0, #2
 8001154:	f000 f88c 	bl	8001270 <SendCommand>
  DelayUS(2000);
 8001158:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800115c:	f000 f93a 	bl	80013d4 <DelayUS>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HD44780_SetCursor+0x5c>)
 8001176:	f107 0408 	add.w	r4, r7, #8
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HD44780_SetCursor+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	429a      	cmp	r2, r3
 8001188:	d303      	bcc.n	8001192 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HD44780_SetCursor+0x60>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f85d 	bl	8001270 <SendCommand>
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800e3c0 	.word	0x0800e3c0
 80011c4:	20000e53 	.word	0x20000e53

080011c8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HD44780_Display+0x28>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HD44780_Display+0x28>)
 80011d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HD44780_Display+0x28>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f843 	bl	8001270 <SendCommand>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000e51 	.word	0x20000e51

080011f4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f82a 	bl	8001270 <SendCommand>
  for (int i=0; i<8; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e009      	b.n	8001236 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f82e 	bl	800128c <SendChar>
  for (int i=0; i<8; i++)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b07      	cmp	r3, #7
 800123a:	ddf2      	ble.n	8001222 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800124e:	e006      	b.n	800125e <HD44780_PrintStr+0x18>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f817 	bl	800128c <SendChar>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f4      	bne.n	8001250 <HD44780_PrintStr+0xa>
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f812 	bl	80012a8 <Send>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <SendChar>:

static void SendChar(uint8_t ch)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f804 	bl	80012a8 <Send>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f80b 	bl	80012ea <Write4Bits>
  Write4Bits((lownib)|mode);
 80012d4:	7bba      	ldrb	r2, [r7, #14]
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f804 	bl	80012ea <Write4Bits>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f808 	bl	800130c <ExpanderWrite>
  PulseEnable(value);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f820 	bl	8001344 <PulseEnable>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <ExpanderWrite+0x30>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4313      	orrs	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001322:	f107 020f 	add.w	r2, r7, #15
 8001326:	230a      	movs	r3, #10
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	217e      	movs	r1, #126	; 0x7e
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <ExpanderWrite+0x34>)
 8001330:	f001 fe84 	bl	800303c <HAL_I2C_Master_Transmit>
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000e54 	.word	0x20000e54
 8001340:	20000e60 	.word	0x20000e60

08001344 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ffd8 	bl	800130c <ExpanderWrite>
  DelayUS(20);
 800135c:	2014      	movs	r0, #20
 800135e:	f000 f839 	bl	80013d4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffce 	bl	800130c <ExpanderWrite>
  DelayUS(20);
 8001370:	2014      	movs	r0, #20
 8001372:	f000 f82f 	bl	80013d4 <DelayUS>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DelayInit>:

static void DelayInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <DelayInit+0x4c>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a10      	ldr	r2, [pc, #64]	; (80013cc <DelayInit+0x4c>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <DelayInit+0x4c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <DelayInit+0x4c>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <DelayInit+0x50>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <DelayInit+0x50>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <DelayInit+0x50>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <DelayInit+0x50>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <DelayInit+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80013ba:	bf00      	nop
  __ASM volatile ("NOP");
 80013bc:	bf00      	nop
  __ASM volatile ("NOP");
 80013be:	bf00      	nop
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000edf0 	.word	0xe000edf0
 80013d0:	e0001000 	.word	0xe0001000

080013d4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <DelayUS+0x44>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <DelayUS+0x48>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9a      	lsrs	r2, r3, #18
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <DelayUS+0x4c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <DelayUS+0x4c>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f6      	bhi.n	80013f6 <DelayUS+0x22>
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000014 	.word	0x20000014
 800141c:	431bde83 	.word	0x431bde83
 8001420:	e0001000 	.word	0xe0001000

08001424 <HAL_UARTEx_RxEventCallback>:
unsigned char rx_buffer[11];
uint16_t counter = 0;
uint8_t response[] = "OK\n";

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
  {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
	 if(huart -> Instance == USART2){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_UARTEx_RxEventCallback+0x68>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_UARTEx_RxEventCallback+0x5e>
		 if(counter < 420 ){
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001442:	d21e      	bcs.n	8001482 <HAL_UARTEx_RxEventCallback+0x5e>
		 		aiInData[counter] = atof((char *)rx_buffer);
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <HAL_UARTEx_RxEventCallback+0x70>)
 8001446:	f008 f861 	bl	800950c <atof>
 800144a:	ec51 0b10 	vmov	r0, r1, d0
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	461c      	mov	r4, r3
 8001454:	f7ff fbe8 	bl	8000c28 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	490f      	ldr	r1, [pc, #60]	; (8001498 <HAL_UARTEx_RxEventCallback+0x74>)
 800145c:	00a3      	lsls	r3, r4, #2
 800145e:	440b      	add	r3, r1
 8001460:	601a      	str	r2, [r3, #0]
		 		counter++;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 800146c:	801a      	strh	r2, [r3, #0]
		 		memset(rx_buffer, 0, sizeof(rx_buffer));
 800146e:	220b      	movs	r2, #11
 8001470:	2100      	movs	r1, #0
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <HAL_UARTEx_RxEventCallback+0x70>)
 8001474:	f00a f824 	bl	800b4c0 <memset>
		 		HAL_UART_Transmit_DMA(&huart2, response, sizeof(response));
 8001478:	2204      	movs	r2, #4
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <HAL_UARTEx_RxEventCallback+0x78>)
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x7c>)
 800147e:	f002 ff6b 	bl	8004358 <HAL_UART_Transmit_DMA>
		 }

	 }
  }
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	200043dc 	.word	0x200043dc
 8001494:	200043d0 	.word	0x200043d0
 8001498:	20000fbc 	.word	0x20000fbc
 800149c:	20000010 	.word	0x20000010
 80014a0:	20000eb4 	.word	0x20000eb4

080014a4 <HAL_UART_TxCpltCallback>:


}
*/

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 10);
 80014ac:	220a      	movs	r2, #10
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <HAL_UART_TxCpltCallback+0x2c>)
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <HAL_UART_TxCpltCallback+0x30>)
 80014b2:	f002 ffcf 	bl	8004454 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_UART_TxCpltCallback+0x34>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_UART_TxCpltCallback+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0208 	bic.w	r2, r2, #8
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200043d0 	.word	0x200043d0
 80014d4:	20000eb4 	.word	0x20000eb4
 80014d8:	20000ef8 	.word	0x20000ef8

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f000 fcf3 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f873 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f000 f977 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 80014ee:	f000 f94d 	bl	800178c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80014f2:	f000 f921 	bl	8001738 <MX_USART2_UART_Init>
  MX_CRC_Init();
 80014f6:	f000 f8dd 	bl	80016b4 <MX_CRC_Init>
  MX_I2C1_Init();
 80014fa:	f000 f8ef 	bl	80016dc <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	HD44780_Init(2);
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fd96 	bl	8001030 <HD44780_Init>
  	HD44780_Clear();
 8001504:	f7ff fe18 	bl	8001138 <HD44780_Clear>
  	HD44780_SetCursor(0,0);
 8001508:	2100      	movs	r1, #0
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fe2a 	bl	8001164 <HD44780_SetCursor>
  	HD44780_PrintStr("Ready for Data");
 8001510:	4825      	ldr	r0, [pc, #148]	; (80015a8 <main+0xcc>)
 8001512:	f7ff fe98 	bl	8001246 <HD44780_PrintStr>

  	//USART
  	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, sizeof(rx_buffer));
 8001516:	220b      	movs	r2, #11
 8001518:	4924      	ldr	r1, [pc, #144]	; (80015ac <main+0xd0>)
 800151a:	4825      	ldr	r0, [pc, #148]	; (80015b0 <main+0xd4>)
 800151c:	f002 ff9a 	bl	8004454 <HAL_UARTEx_ReceiveToIdle_DMA>
  	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <main+0xd8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <main+0xd8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	601a      	str	r2, [r3, #0]
  	//AI_INIT
  	AI_Init();
 8001530:	f000 f9c2 	bl	80018b8 <AI_Init>
	  HD44780_Clear();
	  HD44780_SetCursor(0, 0);
	  HD44780_PrintStr(uint16String);
	  HAL_Delay(500);
	  DEBUG*/
	  if(counter ==  AI_NETWORK_IN_1_SIZE){
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <main+0xdc>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800153c:	d1fa      	bne.n	8001534 <main+0x58>
	  		  	HD44780_Clear();
 800153e:	f7ff fdfb 	bl	8001138 <HD44780_Clear>
	  		  	HD44780_SetCursor(0,0);
 8001542:	2100      	movs	r1, #0
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fe0d 	bl	8001164 <HD44780_SetCursor>
	  		  	HD44780_PrintStr("Inference");
 800154a:	481c      	ldr	r0, [pc, #112]	; (80015bc <main+0xe0>)
 800154c:	f7ff fe7b 	bl	8001246 <HD44780_PrintStr>
	  	        printf("Running inference\r\n");
 8001550:	481b      	ldr	r0, [pc, #108]	; (80015c0 <main+0xe4>)
 8001552:	f009 fe81 	bl	800b258 <puts>
	  	        HAL_Delay(2000);
 8001556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155a:	f000 fd29 	bl	8001fb0 <HAL_Delay>

	  	        AI_Run(aiInData, aiOutData);
 800155e:	4919      	ldr	r1, [pc, #100]	; (80015c4 <main+0xe8>)
 8001560:	4819      	ldr	r0, [pc, #100]	; (80015c8 <main+0xec>)
 8001562:	f000 f9e5 	bl	8001930 <AI_Run>
	  	        HD44780_Clear();
 8001566:	f7ff fde7 	bl	8001138 <HD44780_Clear>
	  	        HD44780_SetCursor(0,0);
 800156a:	2100      	movs	r1, #0
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fdf9 	bl	8001164 <HD44780_SetCursor>

	  	        //OUTPUT PRINT ON LCD
	  	        char floatString[12];
	  	        snprintf(floatString, sizeof(floatString), "%f", aiOutData[0]);
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <main+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f806 	bl	8000588 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	1d38      	adds	r0, r7, #4
 8001582:	e9cd 2300 	strd	r2, r3, [sp]
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <main+0xf0>)
 8001588:	210c      	movs	r1, #12
 800158a:	f009 fe6d 	bl	800b268 <sniprintf>

	  	        HD44780_PrintStr(floatString);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fe58 	bl	8001246 <HD44780_PrintStr>
	  	        HAL_Delay(2000);
 8001596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800159a:	f000 fd09 	bl	8001fb0 <HAL_Delay>
	  	        counter = 0;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <main+0xdc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
	  if(counter ==  AI_NETWORK_IN_1_SIZE){
 80015a4:	e7c6      	b.n	8001534 <main+0x58>
 80015a6:	bf00      	nop
 80015a8:	0800e3d0 	.word	0x0800e3d0
 80015ac:	200043d0 	.word	0x200043d0
 80015b0:	20000eb4 	.word	0x20000eb4
 80015b4:	20000ef8 	.word	0x20000ef8
 80015b8:	200043dc 	.word	0x200043dc
 80015bc:	0800e3e0 	.word	0x0800e3e0
 80015c0:	0800e3ec 	.word	0x0800e3ec
 80015c4:	2000164c 	.word	0x2000164c
 80015c8:	20000fbc 	.word	0x20000fbc
 80015cc:	0800e400 	.word	0x0800e400

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2234      	movs	r2, #52	; 0x34
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f009 ff6e 	bl	800b4c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <SystemClock_Config+0xdc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <SystemClock_Config+0xdc>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <SystemClock_Config+0xdc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <SystemClock_Config+0xe0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <SystemClock_Config+0xe0>)
 800161a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <SystemClock_Config+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001640:	2308      	movs	r3, #8
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001644:	23b4      	movs	r3, #180	; 0xb4
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800164c:	2302      	movs	r3, #2
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fb91 	bl	8003d80 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001664:	f000 f99c 	bl	80019a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001668:	f001 fff0 	bl	800364c <HAL_PWREx_EnableOverDrive>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001672:	f000 f995 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	2105      	movs	r1, #5
 8001694:	4618      	mov	r0, r3
 8001696:	f002 f829 	bl	80036ec <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016a0:	f000 f97e 	bl	80019a0 <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_CRC_Init+0x20>)
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <MX_CRC_Init+0x24>)
 80016bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_CRC_Init+0x20>)
 80016c0:	f000 fdab 	bl	800221a <HAL_CRC_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016ca:	f000 f969 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000e58 	.word	0x20000e58
 80016d8:	40023000 	.word	0x40023000

080016dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_I2C1_Init+0x50>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <MX_I2C1_Init+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_I2C1_Init+0x50>)
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_I2C1_Init+0x58>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_I2C1_Init+0x50>)
 80016fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_I2C1_Init+0x50>)
 800171a:	f001 fb4b 	bl	8002db4 <HAL_I2C_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001724:	f000 f93c 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000e60 	.word	0x20000e60
 8001730:	40005400 	.word	0x40005400
 8001734:	000186a0 	.word	0x000186a0

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001770:	f002 fda4 	bl	80042bc <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 f911 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000eb4 	.word	0x20000eb4
 8001788:	40004400 	.word	0x40004400

0800178c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_DMA_Init+0x4c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <MX_DMA_Init+0x4c>)
 800179c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_DMA_Init+0x4c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2010      	movs	r0, #16
 80017b4:	f000 fcfb 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017b8:	2010      	movs	r0, #16
 80017ba:	f000 fd14 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2011      	movs	r0, #17
 80017c4:	f000 fcf3 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017c8:	2011      	movs	r0, #17
 80017ca:	f000 fd0c 	bl	80021e6 <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <MX_GPIO_Init+0xd0>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a25      	ldr	r2, [pc, #148]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_GPIO_Init+0xd0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <MX_GPIO_Init+0xd4>)
 8001868:	f001 fa8a 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001872:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_GPIO_Init+0xd8>)
 8001884:	f001 f8e8 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001888:	2320      	movs	r3, #32
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_GPIO_Init+0xd4>)
 80018a0:	f001 f8da 	bl	8002a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020800 	.word	0x40020800

080018b8 <AI_Init>:

/* USER CODE BEGIN 4 */
static void AI_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <AI_Init+0x64>)
 80018c0:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4815      	ldr	r0, [pc, #84]	; (8001920 <AI_Init+0x68>)
 80018ca:	f004 f927 	bl	8005b1c <ai_network_create_and_init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00a      	beq.n	80018ee <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80018d8:	793b      	ldrb	r3, [r7, #4]
 80018da:	4619      	mov	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80018e2:	461a      	mov	r2, r3
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <AI_Init+0x6c>)
 80018e6:	f009 fc51 	bl	800b18c <iprintf>
    Error_Handler();
 80018ea:	f000 f859 	bl	80019a0 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <AI_Init+0x68>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 f985 	bl	8005c04 <ai_network_inputs_get>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <AI_Init+0x70>)
 80018fe:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <AI_Init+0x68>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f996 	bl	8005c38 <ai_network_outputs_get>
 800190c:	4603      	mov	r3, r0
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <AI_Init+0x74>)
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20001650 	.word	0x20001650
 8001920:	20000fb8 	.word	0x20000fb8
 8001924:	0800e404 	.word	0x0800e404
 8001928:	200043c8 	.word	0x200043c8
 800192c:	200043cc 	.word	0x200043cc

08001930 <AI_Run>:


static void AI_Run(float *pIn, float *pOut)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <AI_Run+0x60>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <AI_Run+0x64>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <AI_Run+0x68>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <AI_Run+0x60>)
 8001950:	6811      	ldr	r1, [r2, #0]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <AI_Run+0x64>)
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f004 f9c4 	bl	8005ce4 <ai_network_run>
 800195c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d011      	beq.n	8001988 <AI_Run+0x58>
    err = ai_network_get_error(network);
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <AI_Run+0x68>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f004 f8b5 	bl	8005ad8 <ai_network_get_error>
 800196e:	4603      	mov	r3, r0
 8001970:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001972:	7a3b      	ldrb	r3, [r7, #8]
 8001974:	4619      	mov	r1, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800197c:	461a      	mov	r2, r3
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <AI_Run+0x6c>)
 8001980:	f009 fc04 	bl	800b18c <iprintf>
    Error_Handler();
 8001984:	f000 f80c 	bl	80019a0 <Error_Handler>
  }
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200043c8 	.word	0x200043c8
 8001994:	200043cc 	.word	0x200043cc
 8001998:	20000fb8 	.word	0x20000fb8
 800199c:	0800e430 	.word	0x0800e430

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f000 fbd4 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_CRC_MspInit+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10d      	bne.n	8001a2a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_CRC_MspInit+0x40>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_CRC_MspInit+0x40>)
 8001a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_CRC_MspInit+0x40>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023000 	.word	0x40023000
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_I2C_MspInit+0x84>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12c      	bne.n	8001abc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a84:	2312      	movs	r3, #18
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a90:	2304      	movs	r3, #4
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480c      	ldr	r0, [pc, #48]	; (8001acc <HAL_I2C_MspInit+0x8c>)
 8001a9c:	f000 ffdc 	bl	8002a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020400 	.word	0x40020400

08001ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <HAL_UART_MspInit+0x14c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	f040 8090 	bne.w	8001c14 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a41      	ldr	r2, [pc, #260]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b2c:	230c      	movs	r3, #12
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4837      	ldr	r0, [pc, #220]	; (8001c24 <HAL_UART_MspInit+0x154>)
 8001b48:	f000 ff86 	bl	8002a58 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b4e:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b8c:	4826      	ldr	r0, [pc, #152]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b8e:	f000 fb61 	bl	8002254 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b98:	f7ff ff02 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001ba0:	639a      	str	r2, [r3, #56]	; 0x38
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_UART_MspInit+0x164>)
 8001bac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001be8:	4811      	ldr	r0, [pc, #68]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bea:	f000 fb33 	bl	8002254 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001bf4:	f7ff fed4 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2026      	movs	r0, #38	; 0x26
 8001c0a:	f000 fad0 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c0e:	2026      	movs	r0, #38	; 0x26
 8001c10:	f000 fae9 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	20000ef8 	.word	0x20000ef8
 8001c2c:	40026088 	.word	0x40026088
 8001c30:	20000f58 	.word	0x20000f58
 8001c34:	400260a0 	.word	0x400260a0

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 f974 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA1_Stream5_IRQHandler+0x10>)
 8001c92:	f000 fc77 	bl	8002584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000ef8 	.word	0x20000ef8

08001ca0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ca6:	f000 fc6d 	bl	8002584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000f58 	.word	0x20000f58

08001cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART2_IRQHandler+0x10>)
 8001cba:	f002 fc31 	bl	8004520 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000eb4 	.word	0x20000eb4

08001cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_kill>:

int _kill(int pid, int sig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce2:	f009 fc61 	bl	800b5a8 <__errno>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2216      	movs	r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_exit>:

void _exit (int status)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffe7 	bl	8001cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d0a:	e7fe      	b.n	8001d0a <_exit+0x12>

08001d0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4601      	mov	r1, r0
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <_read+0x12>
  }

  return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e009      	b.n	8001d6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf1      	blt.n	8001d58 <_write+0x12>
  }
  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f009 fbc6 	bl	800b5a8 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20020000 	.word	0x20020000
 8001e48:	00000800 	.word	0x00000800
 8001e4c:	200043e0 	.word	0x200043e0
 8001e50:	200045c8 	.word	0x200045c8

08001e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <SystemInit+0x20>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <SystemInit+0x20>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e7c:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e7e:	490e      	ldr	r1, [pc, #56]	; (8001eb8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e80:	4a0e      	ldr	r2, [pc, #56]	; (8001ebc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e84:	e002      	b.n	8001e8c <LoopCopyDataInit>

08001e86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8a:	3304      	adds	r3, #4

08001e8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e90:	d3f9      	bcc.n	8001e86 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e92:	4a0b      	ldr	r2, [pc, #44]	; (8001ec0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001e94:	4c0b      	ldr	r4, [pc, #44]	; (8001ec4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001e96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e98:	e001      	b.n	8001e9e <LoopFillZerobss>

08001e9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e9c:	3204      	adds	r2, #4

08001e9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea0:	d3fb      	bcc.n	8001e9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ea2:	f7ff ffd7 	bl	8001e54 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f009 fb85 	bl	800b5b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eaa:	f7ff fb17 	bl	80014dc <main>
  bx  lr    
 8001eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	20000e34 	.word	0x20000e34
  ldr r2, =_sidata
 8001ebc:	08045f4c 	.word	0x08045f4c
  ldr r2, =_sbss
 8001ec0:	20000e34 	.word	0x20000e34
  ldr r4, =_ebss
 8001ec4:	200045c8 	.word	0x200045c8

08001ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f94f 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fd54 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f967 	bl	8002202 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f92f 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000014 	.word	0x20000014
 8001f68:	2000001c 	.word	0x2000001c
 8001f6c:	20000018 	.word	0x20000018

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000001c 	.word	0x2000001c
 8001f94:	200043e4 	.word	0x200043e4

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200043e4 	.word	0x200043e4

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000001c 	.word	0x2000001c

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e00e      	b.n	800224a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	795b      	ldrb	r3, [r3, #5]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fbdd 	bl	80019fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff fe9a 	bl	8001f98 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e099      	b.n	80023a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002290:	e00f      	b.n	80022b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002292:	f7ff fe81 	bl	8001f98 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b05      	cmp	r3, #5
 800229e:	d908      	bls.n	80022b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e078      	b.n	80023a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e8      	bne.n	8002292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_DMA_Init+0x158>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b04      	cmp	r3, #4
 800230a:	d107      	bne.n	800231c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4313      	orrs	r3, r2
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f023 0307 	bic.w	r3, r3, #7
 8002332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b04      	cmp	r3, #4
 8002344:	d117      	bne.n	8002376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fb01 	bl	8002960 <DMA_CheckFifoParam>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002372:	2301      	movs	r3, #1
 8002374:	e016      	b.n	80023a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fab8 	bl	80028f4 <DMA_CalcBaseAndBitshift>
 8002384:	4603      	mov	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	f010803f 	.word	0xf010803f

080023b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Start_IT+0x26>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e040      	b.n	8002458 <HAL_DMA_Start_IT+0xa8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d12f      	bne.n	800244a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fa4a 	bl	8002898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	223f      	movs	r2, #63	; 0x3f
 800240a:	409a      	lsls	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0216 	orr.w	r2, r2, #22
 800241e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0208 	orr.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e005      	b.n	8002456 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800246e:	f7ff fd93 	bl	8001f98 <HAL_GetTick>
 8002472:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d008      	beq.n	8002492 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e052      	b.n	8002538 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0216 	bic.w	r2, r2, #22
 80024a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_DMA_Abort+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0208 	bic.w	r2, r2, #8
 80024d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	e013      	b.n	800250c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e4:	f7ff fd58 	bl	8001f98 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d90c      	bls.n	800250c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2203      	movs	r2, #3
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e015      	b.n	8002538 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e4      	bne.n	80024e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	223f      	movs	r2, #63	; 0x3f
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00c      	b.n	8002578 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2205      	movs	r2, #5
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002590:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_DMA_IRQHandler+0x248>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a8e      	ldr	r2, [pc, #568]	; (80027d0 <HAL_DMA_IRQHandler+0x24c>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0a9b      	lsrs	r3, r3, #10
 800259c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2208      	movs	r2, #8
 80025b0:	409a      	lsls	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01a      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0204 	bic.w	r2, r2, #4
 80025d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2208      	movs	r2, #8
 80025de:	409a      	lsls	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	2201      	movs	r2, #1
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2204      	movs	r2, #4
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2204      	movs	r2, #4
 800264a:	409a      	lsls	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	2210      	movs	r2, #16
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d043      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d03c      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2210      	movs	r2, #16
 8002680:	409a      	lsls	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d024      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
 80026b2:	e01f      	b.n	80026f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01b      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
 80026c4:	e016      	b.n	80026f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0208 	bic.w	r2, r2, #8
 80026e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	2220      	movs	r2, #32
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 808f 	beq.w	8002824 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8087 	beq.w	8002824 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2220      	movs	r2, #32
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b05      	cmp	r3, #5
 800272c:	d136      	bne.n	800279c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0216 	bic.w	r2, r2, #22
 800273c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <HAL_DMA_IRQHandler+0x1da>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0208 	bic.w	r2, r2, #8
 800276c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	223f      	movs	r2, #63	; 0x3f
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d07e      	beq.n	8002890 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
        }
        return;
 800279a:	e079      	b.n	8002890 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d031      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
 80027c8:	e02c      	b.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
 80027ca:	bf00      	nop
 80027cc:	20000014 	.word	0x20000014
 80027d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d023      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e01e      	b.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10f      	bne.n	8002814 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b00      	cmp	r3, #0
 800282a:	d032      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d022      	beq.n	800287e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2205      	movs	r2, #5
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	3301      	adds	r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d307      	bcc.n	800286c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f2      	bne.n	8002850 <HAL_DMA_IRQHandler+0x2cc>
 800286a:	e000      	b.n	800286e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800286c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
 800288e:	e000      	b.n	8002892 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002890:	bf00      	nop
    }
  }
}
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d108      	bne.n	80028d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028d6:	e007      	b.n	80028e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3b10      	subs	r3, #16
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <DMA_CalcBaseAndBitshift+0x64>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <DMA_CalcBaseAndBitshift+0x68>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d909      	bls.n	8002936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	; 0x58
 8002934:	e007      	b.n	8002946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	aaaaaaab 	.word	0xaaaaaaab
 800295c:	0800e4a4 	.word	0x0800e4a4

08002960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11f      	bne.n	80029ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d856      	bhi.n	8002a2e <DMA_CheckFifoParam+0xce>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <DMA_CheckFifoParam+0x28>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002999 	.word	0x08002999
 800298c:	080029ab 	.word	0x080029ab
 8002990:	08002999 	.word	0x08002999
 8002994:	08002a2f 	.word	0x08002a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d046      	beq.n	8002a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e043      	b.n	8002a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b2:	d140      	bne.n	8002a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e03d      	b.n	8002a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	d121      	bne.n	8002a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d837      	bhi.n	8002a3a <DMA_CheckFifoParam+0xda>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <DMA_CheckFifoParam+0x70>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029e7 	.word	0x080029e7
 80029d8:	080029e1 	.word	0x080029e1
 80029dc:	080029f9 	.word	0x080029f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e030      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d025      	beq.n	8002a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f6:	e022      	b.n	8002a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a00:	d11f      	bne.n	8002a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a06:	e01c      	b.n	8002a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d903      	bls.n	8002a16 <DMA_CheckFifoParam+0xb6>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d003      	beq.n	8002a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a14:	e018      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1a:	e015      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	e00b      	b.n	8002a46 <DMA_CheckFifoParam+0xe6>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e00a      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e008      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e006      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e004      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
    }
  } 
  
  return status; 
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e165      	b.n	8002d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8154 	bne.w	8002d3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80ae 	beq.w	8002d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a5c      	ldr	r2, [pc, #368]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b5a      	ldr	r3, [pc, #360]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x308>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_GPIO_Init+0x30c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x216>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_GPIO_Init+0x310>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x212>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_GPIO_Init+0x314>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_GPIO_Init+0x318>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x20a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_GPIO_Init+0x31c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x206>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	; (8002d78 <HAL_GPIO_Init+0x320>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x202>
 8002c56:	2306      	movs	r3, #6
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae96 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40021400 	.word	0x40021400
 8002d78:	40021800 	.word	0x40021800
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d9c:	e003      	b.n	8002da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	041a      	lsls	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	619a      	str	r2, [r3, #24]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fe30 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f000 fd5a 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
 800304c:	4613      	mov	r3, r2
 800304e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7fe ffa2 	bl	8001f98 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	f040 80e0 	bne.w	8003224 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	4970      	ldr	r1, [pc, #448]	; (8003230 <HAL_I2C_Master_Transmit+0x1f4>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f964 	bl	800333c <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	e0d3      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2C_Master_Transmit+0x50>
 8003088:	2302      	movs	r3, #2
 800308a:	e0cc      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d007      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f89c 	bl	8003238 <I2C_MasterRequestWrite>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08d      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003120:	e066      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 f9de 	bl	80034e8 <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06b      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 f9ce 	bl	800356a <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01a      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d194      	bne.n	8003122 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	00100002 	.word	0x00100002
 8003234:	ffff0000 	.word	0xffff0000

08003238 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d006      	beq.n	8003262 <I2C_MasterRequestWrite+0x2a>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d003      	beq.n	8003262 <I2C_MasterRequestWrite+0x2a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	2b12      	cmp	r3, #18
 800327a:	d107      	bne.n	800328c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f84f 	bl	800333c <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d103      	bne.n	80032bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e035      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d108      	bne.n	80032dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e01b      	b.n	8003314 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	11db      	asrs	r3, r3, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f063 030f 	orn	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <I2C_MasterRequestWrite+0xfc>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f875 	bl	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e010      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <I2C_MasterRequestWrite+0x100>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f865 	bl	80033ea <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	00010008 	.word	0x00010008
 8003338:	00010002 	.word	0x00010002

0800333c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334c:	e025      	b.n	800339a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d021      	beq.n	800339a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fe fe1f 	bl	8001f98 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d116      	bne.n	800339a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	2200      	movs	r2, #0
 8003370:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2200      	movs	r2, #0
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f043 0220 	orr.w	r2, r3, #32
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e023      	b.n	80033e2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	0c1b      	lsrs	r3, r3, #16
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	2b01      	cmp	r3, #1
 80033a2:	d10d      	bne.n	80033c0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	43da      	mvns	r2, r3
 80033ac:	68bb      	ldr	r3, [r7, #8]
 80033ae:	4013      	ands	r3, r2
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	bf0c      	ite	eq
 80033b6:	2301      	moveq	r3, #1
 80033b8:	2300      	movne	r3, #0
 80033ba:	b2db      	uxtb	r3, r3
 80033bc:	461a      	mov	r2, r3
 80033be:	e00c      	b.n	80033da <I2C_WaitOnFlagUntilTimeout+0x9e>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	699b      	ldr	r3, [r3, #24]
 80033c6:	43da      	mvns	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	4013      	ands	r3, r2
 80033cc:	b29b      	uxth	r3, r3
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	bf0c      	ite	eq
 80033d2:	2301      	moveq	r3, #1
 80033d4:	2300      	movne	r3, #0
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461a      	mov	r2, r3
 80033da:	79fb      	ldrb	r3, [r7, #7]
 80033dc:	429a      	cmp	r2, r3
 80033de:	d0b6      	beq.n	800334e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3710      	adds	r7, #16
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}

080033ea <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80033ea:	b580      	push	{r7, lr}
 80033ec:	b084      	sub	sp, #16
 80033ee:	af00      	add	r7, sp, #0
 80033f0:	60f8      	str	r0, [r7, #12]
 80033f2:	60b9      	str	r1, [r7, #8]
 80033f4:	607a      	str	r2, [r7, #4]
 80033f6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80033f8:	e051      	b.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	695b      	ldr	r3, [r3, #20]
 8003400:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003404:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003408:	d123      	bne.n	8003452 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	681a      	ldr	r2, [r3, #0]
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003418:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003422:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	2220      	movs	r2, #32
 800342e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f043 0204 	orr.w	r2, r3, #4
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	e046      	b.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003458:	d021      	beq.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800345a:	f7fe fd9d 	bl	8001f98 <HAL_GetTick>
 800345e:	4602      	mov	r2, r0
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	1ad3      	subs	r3, r2, r3
 8003464:	687a      	ldr	r2, [r7, #4]
 8003466:	429a      	cmp	r2, r3
 8003468:	d302      	bcc.n	8003470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d116      	bne.n	800349e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	2220      	movs	r2, #32
 800347a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800348a:	f043 0220 	orr.w	r2, r3, #32
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
 800349c:	e020      	b.n	80034e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800349e:	68bb      	ldr	r3, [r7, #8]
 80034a0:	0c1b      	lsrs	r3, r3, #16
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b01      	cmp	r3, #1
 80034a6:	d10c      	bne.n	80034c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	695b      	ldr	r3, [r3, #20]
 80034ae:	43da      	mvns	r2, r3
 80034b0:	68bb      	ldr	r3, [r7, #8]
 80034b2:	4013      	ands	r3, r2
 80034b4:	b29b      	uxth	r3, r3
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	bf14      	ite	ne
 80034ba:	2301      	movne	r3, #1
 80034bc:	2300      	moveq	r3, #0
 80034be:	b2db      	uxtb	r3, r3
 80034c0:	e00b      	b.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	699b      	ldr	r3, [r3, #24]
 80034c8:	43da      	mvns	r2, r3
 80034ca:	68bb      	ldr	r3, [r7, #8]
 80034cc:	4013      	ands	r3, r2
 80034ce:	b29b      	uxth	r3, r3
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	bf14      	ite	ne
 80034d4:	2301      	movne	r3, #1
 80034d6:	2300      	moveq	r3, #0
 80034d8:	b2db      	uxtb	r3, r3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d18d      	bne.n	80033fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3710      	adds	r7, #16
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	60b9      	str	r1, [r7, #8]
 80034f2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80034f4:	e02d      	b.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80034f6:	68f8      	ldr	r0, [r7, #12]
 80034f8:	f000 f878 	bl	80035ec <I2C_IsAcknowledgeFailed>
 80034fc:	4603      	mov	r3, r0
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	e02d      	b.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003506:	68bb      	ldr	r3, [r7, #8]
 8003508:	f1b3 3fff 	cmp.w	r3, #4294967295
 800350c:	d021      	beq.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800350e:	f7fe fd43 	bl	8001f98 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	68ba      	ldr	r2, [r7, #8]
 800351a:	429a      	cmp	r2, r3
 800351c:	d302      	bcc.n	8003524 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800351e:	68bb      	ldr	r3, [r7, #8]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d116      	bne.n	8003552 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2200      	movs	r2, #0
 8003528:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2220      	movs	r2, #32
 800352e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2200      	movs	r2, #0
 8003536:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353e:	f043 0220 	orr.w	r2, r3, #32
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e007      	b.n	8003562 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	695b      	ldr	r3, [r3, #20]
 8003558:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800355c:	2b80      	cmp	r3, #128	; 0x80
 800355e:	d1ca      	bne.n	80034f6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003560:	2300      	movs	r3, #0
}
 8003562:	4618      	mov	r0, r3
 8003564:	3710      	adds	r7, #16
 8003566:	46bd      	mov	sp, r7
 8003568:	bd80      	pop	{r7, pc}

0800356a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800356a:	b580      	push	{r7, lr}
 800356c:	b084      	sub	sp, #16
 800356e:	af00      	add	r7, sp, #0
 8003570:	60f8      	str	r0, [r7, #12]
 8003572:	60b9      	str	r1, [r7, #8]
 8003574:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003576:	e02d      	b.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f000 f837 	bl	80035ec <I2C_IsAcknowledgeFailed>
 800357e:	4603      	mov	r3, r0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d001      	beq.n	8003588 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003584:	2301      	movs	r3, #1
 8003586:	e02d      	b.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800358e:	d021      	beq.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003590:	f7fe fd02 	bl	8001f98 <HAL_GetTick>
 8003594:	4602      	mov	r2, r0
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	1ad3      	subs	r3, r2, r3
 800359a:	68ba      	ldr	r2, [r7, #8]
 800359c:	429a      	cmp	r2, r3
 800359e:	d302      	bcc.n	80035a6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d116      	bne.n	80035d4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2220      	movs	r2, #32
 80035b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	f043 0220 	orr.w	r2, r3, #32
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e007      	b.n	80035e4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	695b      	ldr	r3, [r3, #20]
 80035da:	f003 0304 	and.w	r3, r3, #4
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d1ca      	bne.n	8003578 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80035e2:	2300      	movs	r3, #0
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3710      	adds	r7, #16
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003602:	d11b      	bne.n	800363c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800360c:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	2200      	movs	r2, #0
 8003612:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2220      	movs	r2, #32
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003628:	f043 0204 	orr.w	r2, r3, #4
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2200      	movs	r2, #0
 8003634:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003638:	2301      	movs	r3, #1
 800363a:	e000      	b.n	800363e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800363c:	2300      	movs	r3, #0
}
 800363e:	4618      	mov	r0, r3
 8003640:	370c      	adds	r7, #12
 8003642:	46bd      	mov	sp, r7
 8003644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003648:	4770      	bx	lr
	...

0800364c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003652:	2300      	movs	r3, #0
 8003654:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	603b      	str	r3, [r7, #0]
 800365a:	4b20      	ldr	r3, [pc, #128]	; (80036dc <HAL_PWREx_EnableOverDrive+0x90>)
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	4a1f      	ldr	r2, [pc, #124]	; (80036dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003660:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003664:	6413      	str	r3, [r2, #64]	; 0x40
 8003666:	4b1d      	ldr	r3, [pc, #116]	; (80036dc <HAL_PWREx_EnableOverDrive+0x90>)
 8003668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800366e:	603b      	str	r3, [r7, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003672:	4b1b      	ldr	r3, [pc, #108]	; (80036e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003674:	2201      	movs	r2, #1
 8003676:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003678:	f7fe fc8e 	bl	8001f98 <HAL_GetTick>
 800367c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800367e:	e009      	b.n	8003694 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003680:	f7fe fc8a 	bl	8001f98 <HAL_GetTick>
 8003684:	4602      	mov	r2, r0
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	1ad3      	subs	r3, r2, r3
 800368a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800368e:	d901      	bls.n	8003694 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003690:	2303      	movs	r3, #3
 8003692:	e01f      	b.n	80036d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003694:	4b13      	ldr	r3, [pc, #76]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800369c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036a0:	d1ee      	bne.n	8003680 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80036a2:	4b11      	ldr	r3, [pc, #68]	; (80036e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80036a4:	2201      	movs	r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80036a8:	f7fe fc76 	bl	8001f98 <HAL_GetTick>
 80036ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036ae:	e009      	b.n	80036c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80036b0:	f7fe fc72 	bl	8001f98 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80036be:	d901      	bls.n	80036c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e007      	b.n	80036d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80036c4:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036cc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80036d0:	d1ee      	bne.n	80036b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	3708      	adds	r7, #8
 80036d8:	46bd      	mov	sp, r7
 80036da:	bd80      	pop	{r7, pc}
 80036dc:	40023800 	.word	0x40023800
 80036e0:	420e0040 	.word	0x420e0040
 80036e4:	40007000 	.word	0x40007000
 80036e8:	420e0044 	.word	0x420e0044

080036ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b084      	sub	sp, #16
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
 80036f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036fc:	2301      	movs	r3, #1
 80036fe:	e0cc      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003700:	4b68      	ldr	r3, [pc, #416]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	f003 030f 	and.w	r3, r3, #15
 8003708:	683a      	ldr	r2, [r7, #0]
 800370a:	429a      	cmp	r2, r3
 800370c:	d90c      	bls.n	8003728 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800370e:	4b65      	ldr	r3, [pc, #404]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003710:	683a      	ldr	r2, [r7, #0]
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003716:	4b63      	ldr	r3, [pc, #396]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f003 030f 	and.w	r3, r3, #15
 800371e:	683a      	ldr	r2, [r7, #0]
 8003720:	429a      	cmp	r2, r3
 8003722:	d001      	beq.n	8003728 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0b8      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	2b00      	cmp	r3, #0
 8003732:	d020      	beq.n	8003776 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b00      	cmp	r3, #0
 800373e:	d005      	beq.n	800374c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003740:	4b59      	ldr	r3, [pc, #356]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003742:	689b      	ldr	r3, [r3, #8]
 8003744:	4a58      	ldr	r2, [pc, #352]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003746:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800374a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0308 	and.w	r3, r3, #8
 8003754:	2b00      	cmp	r3, #0
 8003756:	d005      	beq.n	8003764 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003758:	4b53      	ldr	r3, [pc, #332]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	4a52      	ldr	r2, [pc, #328]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003762:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003764:	4b50      	ldr	r3, [pc, #320]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	494d      	ldr	r1, [pc, #308]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003772:	4313      	orrs	r3, r2
 8003774:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d044      	beq.n	800380c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	2b01      	cmp	r3, #1
 8003788:	d107      	bne.n	800379a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800378a:	4b47      	ldr	r3, [pc, #284]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003792:	2b00      	cmp	r3, #0
 8003794:	d119      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003796:	2301      	movs	r3, #1
 8003798:	e07f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	2b02      	cmp	r3, #2
 80037a0:	d003      	beq.n	80037aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037a6:	2b03      	cmp	r3, #3
 80037a8:	d107      	bne.n	80037ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037aa:	4b3f      	ldr	r3, [pc, #252]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d109      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e06f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037ba:	4b3b      	ldr	r3, [pc, #236]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 0302 	and.w	r3, r3, #2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e067      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037ca:	4b37      	ldr	r3, [pc, #220]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f023 0203 	bic.w	r2, r3, #3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	4934      	ldr	r1, [pc, #208]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037d8:	4313      	orrs	r3, r2
 80037da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80037dc:	f7fe fbdc 	bl	8001f98 <HAL_GetTick>
 80037e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037e2:	e00a      	b.n	80037fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037e4:	f7fe fbd8 	bl	8001f98 <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d901      	bls.n	80037fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e04f      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037fa:	4b2b      	ldr	r3, [pc, #172]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	f003 020c 	and.w	r2, r3, #12
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	685b      	ldr	r3, [r3, #4]
 8003806:	009b      	lsls	r3, r3, #2
 8003808:	429a      	cmp	r2, r3
 800380a:	d1eb      	bne.n	80037e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800380c:	4b25      	ldr	r3, [pc, #148]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 030f 	and.w	r3, r3, #15
 8003814:	683a      	ldr	r2, [r7, #0]
 8003816:	429a      	cmp	r2, r3
 8003818:	d20c      	bcs.n	8003834 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800381a:	4b22      	ldr	r3, [pc, #136]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 800381c:	683a      	ldr	r2, [r7, #0]
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003822:	4b20      	ldr	r3, [pc, #128]	; (80038a4 <HAL_RCC_ClockConfig+0x1b8>)
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 030f 	and.w	r3, r3, #15
 800382a:	683a      	ldr	r2, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	d001      	beq.n	8003834 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003830:	2301      	movs	r3, #1
 8003832:	e032      	b.n	800389a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0304 	and.w	r3, r3, #4
 800383c:	2b00      	cmp	r3, #0
 800383e:	d008      	beq.n	8003852 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003840:	4b19      	ldr	r3, [pc, #100]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	4916      	ldr	r1, [pc, #88]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800384e:	4313      	orrs	r3, r2
 8003850:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0308 	and.w	r3, r3, #8
 800385a:	2b00      	cmp	r3, #0
 800385c:	d009      	beq.n	8003872 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800385e:	4b12      	ldr	r3, [pc, #72]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	689b      	ldr	r3, [r3, #8]
 8003862:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	691b      	ldr	r3, [r3, #16]
 800386a:	00db      	lsls	r3, r3, #3
 800386c:	490e      	ldr	r1, [pc, #56]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800386e:	4313      	orrs	r3, r2
 8003870:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003872:	f000 f855 	bl	8003920 <HAL_RCC_GetSysClockFreq>
 8003876:	4602      	mov	r2, r0
 8003878:	4b0b      	ldr	r3, [pc, #44]	; (80038a8 <HAL_RCC_ClockConfig+0x1bc>)
 800387a:	689b      	ldr	r3, [r3, #8]
 800387c:	091b      	lsrs	r3, r3, #4
 800387e:	f003 030f 	and.w	r3, r3, #15
 8003882:	490a      	ldr	r1, [pc, #40]	; (80038ac <HAL_RCC_ClockConfig+0x1c0>)
 8003884:	5ccb      	ldrb	r3, [r1, r3]
 8003886:	fa22 f303 	lsr.w	r3, r2, r3
 800388a:	4a09      	ldr	r2, [pc, #36]	; (80038b0 <HAL_RCC_ClockConfig+0x1c4>)
 800388c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800388e:	4b09      	ldr	r3, [pc, #36]	; (80038b4 <HAL_RCC_ClockConfig+0x1c8>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fe fb3c 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 8003898:	2300      	movs	r3, #0
}
 800389a:	4618      	mov	r0, r3
 800389c:	3710      	adds	r7, #16
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	40023c00 	.word	0x40023c00
 80038a8:	40023800 	.word	0x40023800
 80038ac:	0800e48c 	.word	0x0800e48c
 80038b0:	20000014 	.word	0x20000014
 80038b4:	20000018 	.word	0x20000018

080038b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038b8:	b480      	push	{r7}
 80038ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038bc:	4b03      	ldr	r3, [pc, #12]	; (80038cc <HAL_RCC_GetHCLKFreq+0x14>)
 80038be:	681b      	ldr	r3, [r3, #0]
}
 80038c0:	4618      	mov	r0, r3
 80038c2:	46bd      	mov	sp, r7
 80038c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c8:	4770      	bx	lr
 80038ca:	bf00      	nop
 80038cc:	20000014 	.word	0x20000014

080038d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038d4:	f7ff fff0 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 80038d8:	4602      	mov	r2, r0
 80038da:	4b05      	ldr	r3, [pc, #20]	; (80038f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	0a9b      	lsrs	r3, r3, #10
 80038e0:	f003 0307 	and.w	r3, r3, #7
 80038e4:	4903      	ldr	r1, [pc, #12]	; (80038f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038e6:	5ccb      	ldrb	r3, [r1, r3]
 80038e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	bd80      	pop	{r7, pc}
 80038f0:	40023800 	.word	0x40023800
 80038f4:	0800e49c 	.word	0x0800e49c

080038f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80038fc:	f7ff ffdc 	bl	80038b8 <HAL_RCC_GetHCLKFreq>
 8003900:	4602      	mov	r2, r0
 8003902:	4b05      	ldr	r3, [pc, #20]	; (8003918 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	0b5b      	lsrs	r3, r3, #13
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	4903      	ldr	r1, [pc, #12]	; (800391c <HAL_RCC_GetPCLK2Freq+0x24>)
 800390e:	5ccb      	ldrb	r3, [r1, r3]
 8003910:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003914:	4618      	mov	r0, r3
 8003916:	bd80      	pop	{r7, pc}
 8003918:	40023800 	.word	0x40023800
 800391c:	0800e49c 	.word	0x0800e49c

08003920 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003924:	b0ae      	sub	sp, #184	; 0xb8
 8003926:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800392e:	2300      	movs	r3, #0
 8003930:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 8003934:	2300      	movs	r3, #0
 8003936:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800393a:	2300      	movs	r3, #0
 800393c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 8003940:	2300      	movs	r3, #0
 8003942:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003946:	4bcb      	ldr	r3, [pc, #812]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003948:	689b      	ldr	r3, [r3, #8]
 800394a:	f003 030c 	and.w	r3, r3, #12
 800394e:	2b0c      	cmp	r3, #12
 8003950:	f200 8206 	bhi.w	8003d60 <HAL_RCC_GetSysClockFreq+0x440>
 8003954:	a201      	add	r2, pc, #4	; (adr r2, 800395c <HAL_RCC_GetSysClockFreq+0x3c>)
 8003956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800395a:	bf00      	nop
 800395c:	08003991 	.word	0x08003991
 8003960:	08003d61 	.word	0x08003d61
 8003964:	08003d61 	.word	0x08003d61
 8003968:	08003d61 	.word	0x08003d61
 800396c:	08003999 	.word	0x08003999
 8003970:	08003d61 	.word	0x08003d61
 8003974:	08003d61 	.word	0x08003d61
 8003978:	08003d61 	.word	0x08003d61
 800397c:	080039a1 	.word	0x080039a1
 8003980:	08003d61 	.word	0x08003d61
 8003984:	08003d61 	.word	0x08003d61
 8003988:	08003d61 	.word	0x08003d61
 800398c:	08003b91 	.word	0x08003b91
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003990:	4bb9      	ldr	r3, [pc, #740]	; (8003c78 <HAL_RCC_GetSysClockFreq+0x358>)
 8003992:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003996:	e1e7      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003998:	4bb8      	ldr	r3, [pc, #736]	; (8003c7c <HAL_RCC_GetSysClockFreq+0x35c>)
 800399a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800399e:	e1e3      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039a0:	4bb4      	ldr	r3, [pc, #720]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039ac:	4bb1      	ldr	r3, [pc, #708]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d071      	beq.n	8003a9c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039b8:	4bae      	ldr	r3, [pc, #696]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	099b      	lsrs	r3, r3, #6
 80039be:	2200      	movs	r2, #0
 80039c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80039c4:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80039c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80039cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80039d0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80039d4:	2300      	movs	r3, #0
 80039d6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80039da:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80039de:	4622      	mov	r2, r4
 80039e0:	462b      	mov	r3, r5
 80039e2:	f04f 0000 	mov.w	r0, #0
 80039e6:	f04f 0100 	mov.w	r1, #0
 80039ea:	0159      	lsls	r1, r3, #5
 80039ec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80039f0:	0150      	lsls	r0, r2, #5
 80039f2:	4602      	mov	r2, r0
 80039f4:	460b      	mov	r3, r1
 80039f6:	4621      	mov	r1, r4
 80039f8:	1a51      	subs	r1, r2, r1
 80039fa:	6439      	str	r1, [r7, #64]	; 0x40
 80039fc:	4629      	mov	r1, r5
 80039fe:	eb63 0301 	sbc.w	r3, r3, r1
 8003a02:	647b      	str	r3, [r7, #68]	; 0x44
 8003a04:	f04f 0200 	mov.w	r2, #0
 8003a08:	f04f 0300 	mov.w	r3, #0
 8003a0c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003a10:	4649      	mov	r1, r9
 8003a12:	018b      	lsls	r3, r1, #6
 8003a14:	4641      	mov	r1, r8
 8003a16:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a1a:	4641      	mov	r1, r8
 8003a1c:	018a      	lsls	r2, r1, #6
 8003a1e:	4641      	mov	r1, r8
 8003a20:	1a51      	subs	r1, r2, r1
 8003a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8003a24:	4649      	mov	r1, r9
 8003a26:	eb63 0301 	sbc.w	r3, r3, r1
 8003a2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003a2c:	f04f 0200 	mov.w	r2, #0
 8003a30:	f04f 0300 	mov.w	r3, #0
 8003a34:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003a38:	4649      	mov	r1, r9
 8003a3a:	00cb      	lsls	r3, r1, #3
 8003a3c:	4641      	mov	r1, r8
 8003a3e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003a42:	4641      	mov	r1, r8
 8003a44:	00ca      	lsls	r2, r1, #3
 8003a46:	4610      	mov	r0, r2
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	4622      	mov	r2, r4
 8003a4e:	189b      	adds	r3, r3, r2
 8003a50:	633b      	str	r3, [r7, #48]	; 0x30
 8003a52:	462b      	mov	r3, r5
 8003a54:	460a      	mov	r2, r1
 8003a56:	eb42 0303 	adc.w	r3, r2, r3
 8003a5a:	637b      	str	r3, [r7, #52]	; 0x34
 8003a5c:	f04f 0200 	mov.w	r2, #0
 8003a60:	f04f 0300 	mov.w	r3, #0
 8003a64:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003a68:	4629      	mov	r1, r5
 8003a6a:	024b      	lsls	r3, r1, #9
 8003a6c:	4621      	mov	r1, r4
 8003a6e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a72:	4621      	mov	r1, r4
 8003a74:	024a      	lsls	r2, r1, #9
 8003a76:	4610      	mov	r0, r2
 8003a78:	4619      	mov	r1, r3
 8003a7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003a7e:	2200      	movs	r2, #0
 8003a80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003a84:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003a88:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a8c:	f7fd f91c 	bl	8000cc8 <__aeabi_uldivmod>
 8003a90:	4602      	mov	r2, r0
 8003a92:	460b      	mov	r3, r1
 8003a94:	4613      	mov	r3, r2
 8003a96:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a9a:	e067      	b.n	8003b6c <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a9c:	4b75      	ldr	r3, [pc, #468]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	099b      	lsrs	r3, r3, #6
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003aa8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003ab0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003ab4:	67bb      	str	r3, [r7, #120]	; 0x78
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003aba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003abe:	4622      	mov	r2, r4
 8003ac0:	462b      	mov	r3, r5
 8003ac2:	f04f 0000 	mov.w	r0, #0
 8003ac6:	f04f 0100 	mov.w	r1, #0
 8003aca:	0159      	lsls	r1, r3, #5
 8003acc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ad0:	0150      	lsls	r0, r2, #5
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	1a51      	subs	r1, r2, r1
 8003ada:	62b9      	str	r1, [r7, #40]	; 0x28
 8003adc:	4629      	mov	r1, r5
 8003ade:	eb63 0301 	sbc.w	r3, r3, r1
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	f04f 0300 	mov.w	r3, #0
 8003aec:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003af0:	4649      	mov	r1, r9
 8003af2:	018b      	lsls	r3, r1, #6
 8003af4:	4641      	mov	r1, r8
 8003af6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003afa:	4641      	mov	r1, r8
 8003afc:	018a      	lsls	r2, r1, #6
 8003afe:	4641      	mov	r1, r8
 8003b00:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b04:	4649      	mov	r1, r9
 8003b06:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b0a:	f04f 0200 	mov.w	r2, #0
 8003b0e:	f04f 0300 	mov.w	r3, #0
 8003b12:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003b16:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003b1a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003b1e:	4692      	mov	sl, r2
 8003b20:	469b      	mov	fp, r3
 8003b22:	4623      	mov	r3, r4
 8003b24:	eb1a 0303 	adds.w	r3, sl, r3
 8003b28:	623b      	str	r3, [r7, #32]
 8003b2a:	462b      	mov	r3, r5
 8003b2c:	eb4b 0303 	adc.w	r3, fp, r3
 8003b30:	627b      	str	r3, [r7, #36]	; 0x24
 8003b32:	f04f 0200 	mov.w	r2, #0
 8003b36:	f04f 0300 	mov.w	r3, #0
 8003b3a:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003b3e:	4629      	mov	r1, r5
 8003b40:	028b      	lsls	r3, r1, #10
 8003b42:	4621      	mov	r1, r4
 8003b44:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003b48:	4621      	mov	r1, r4
 8003b4a:	028a      	lsls	r2, r1, #10
 8003b4c:	4610      	mov	r0, r2
 8003b4e:	4619      	mov	r1, r3
 8003b50:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b54:	2200      	movs	r2, #0
 8003b56:	673b      	str	r3, [r7, #112]	; 0x70
 8003b58:	677a      	str	r2, [r7, #116]	; 0x74
 8003b5a:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003b5e:	f7fd f8b3 	bl	8000cc8 <__aeabi_uldivmod>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4613      	mov	r3, r2
 8003b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003b6c:	4b41      	ldr	r3, [pc, #260]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	0c1b      	lsrs	r3, r3, #16
 8003b72:	f003 0303 	and.w	r3, r3, #3
 8003b76:	3301      	adds	r3, #1
 8003b78:	005b      	lsls	r3, r3, #1
 8003b7a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003b7e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003b82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b8e:	e0eb      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b90:	4b38      	ldr	r3, [pc, #224]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b9c:	4b35      	ldr	r3, [pc, #212]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d06b      	beq.n	8003c80 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ba8:	4b32      	ldr	r3, [pc, #200]	; (8003c74 <HAL_RCC_GetSysClockFreq+0x354>)
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	099b      	lsrs	r3, r3, #6
 8003bae:	2200      	movs	r2, #0
 8003bb0:	66bb      	str	r3, [r7, #104]	; 0x68
 8003bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003bb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003bb6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bba:	663b      	str	r3, [r7, #96]	; 0x60
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	667b      	str	r3, [r7, #100]	; 0x64
 8003bc0:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	462b      	mov	r3, r5
 8003bc8:	f04f 0000 	mov.w	r0, #0
 8003bcc:	f04f 0100 	mov.w	r1, #0
 8003bd0:	0159      	lsls	r1, r3, #5
 8003bd2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003bd6:	0150      	lsls	r0, r2, #5
 8003bd8:	4602      	mov	r2, r0
 8003bda:	460b      	mov	r3, r1
 8003bdc:	4621      	mov	r1, r4
 8003bde:	1a51      	subs	r1, r2, r1
 8003be0:	61b9      	str	r1, [r7, #24]
 8003be2:	4629      	mov	r1, r5
 8003be4:	eb63 0301 	sbc.w	r3, r3, r1
 8003be8:	61fb      	str	r3, [r7, #28]
 8003bea:	f04f 0200 	mov.w	r2, #0
 8003bee:	f04f 0300 	mov.w	r3, #0
 8003bf2:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003bf6:	4659      	mov	r1, fp
 8003bf8:	018b      	lsls	r3, r1, #6
 8003bfa:	4651      	mov	r1, sl
 8003bfc:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c00:	4651      	mov	r1, sl
 8003c02:	018a      	lsls	r2, r1, #6
 8003c04:	4651      	mov	r1, sl
 8003c06:	ebb2 0801 	subs.w	r8, r2, r1
 8003c0a:	4659      	mov	r1, fp
 8003c0c:	eb63 0901 	sbc.w	r9, r3, r1
 8003c10:	f04f 0200 	mov.w	r2, #0
 8003c14:	f04f 0300 	mov.w	r3, #0
 8003c18:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003c1c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003c20:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003c24:	4690      	mov	r8, r2
 8003c26:	4699      	mov	r9, r3
 8003c28:	4623      	mov	r3, r4
 8003c2a:	eb18 0303 	adds.w	r3, r8, r3
 8003c2e:	613b      	str	r3, [r7, #16]
 8003c30:	462b      	mov	r3, r5
 8003c32:	eb49 0303 	adc.w	r3, r9, r3
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	f04f 0200 	mov.w	r2, #0
 8003c3c:	f04f 0300 	mov.w	r3, #0
 8003c40:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003c44:	4629      	mov	r1, r5
 8003c46:	024b      	lsls	r3, r1, #9
 8003c48:	4621      	mov	r1, r4
 8003c4a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003c4e:	4621      	mov	r1, r4
 8003c50:	024a      	lsls	r2, r1, #9
 8003c52:	4610      	mov	r0, r2
 8003c54:	4619      	mov	r1, r3
 8003c56:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c5e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003c60:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003c64:	f7fd f830 	bl	8000cc8 <__aeabi_uldivmod>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4613      	mov	r3, r2
 8003c6e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003c72:	e065      	b.n	8003d40 <HAL_RCC_GetSysClockFreq+0x420>
 8003c74:	40023800 	.word	0x40023800
 8003c78:	00f42400 	.word	0x00f42400
 8003c7c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c80:	4b3d      	ldr	r3, [pc, #244]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	2200      	movs	r2, #0
 8003c88:	4618      	mov	r0, r3
 8003c8a:	4611      	mov	r1, r2
 8003c8c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c90:	653b      	str	r3, [r7, #80]	; 0x50
 8003c92:	2300      	movs	r3, #0
 8003c94:	657b      	str	r3, [r7, #84]	; 0x54
 8003c96:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c9a:	4642      	mov	r2, r8
 8003c9c:	464b      	mov	r3, r9
 8003c9e:	f04f 0000 	mov.w	r0, #0
 8003ca2:	f04f 0100 	mov.w	r1, #0
 8003ca6:	0159      	lsls	r1, r3, #5
 8003ca8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003cac:	0150      	lsls	r0, r2, #5
 8003cae:	4602      	mov	r2, r0
 8003cb0:	460b      	mov	r3, r1
 8003cb2:	4641      	mov	r1, r8
 8003cb4:	1a51      	subs	r1, r2, r1
 8003cb6:	60b9      	str	r1, [r7, #8]
 8003cb8:	4649      	mov	r1, r9
 8003cba:	eb63 0301 	sbc.w	r3, r3, r1
 8003cbe:	60fb      	str	r3, [r7, #12]
 8003cc0:	f04f 0200 	mov.w	r2, #0
 8003cc4:	f04f 0300 	mov.w	r3, #0
 8003cc8:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003ccc:	4659      	mov	r1, fp
 8003cce:	018b      	lsls	r3, r1, #6
 8003cd0:	4651      	mov	r1, sl
 8003cd2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003cd6:	4651      	mov	r1, sl
 8003cd8:	018a      	lsls	r2, r1, #6
 8003cda:	4651      	mov	r1, sl
 8003cdc:	1a54      	subs	r4, r2, r1
 8003cde:	4659      	mov	r1, fp
 8003ce0:	eb63 0501 	sbc.w	r5, r3, r1
 8003ce4:	f04f 0200 	mov.w	r2, #0
 8003ce8:	f04f 0300 	mov.w	r3, #0
 8003cec:	00eb      	lsls	r3, r5, #3
 8003cee:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cf2:	00e2      	lsls	r2, r4, #3
 8003cf4:	4614      	mov	r4, r2
 8003cf6:	461d      	mov	r5, r3
 8003cf8:	4643      	mov	r3, r8
 8003cfa:	18e3      	adds	r3, r4, r3
 8003cfc:	603b      	str	r3, [r7, #0]
 8003cfe:	464b      	mov	r3, r9
 8003d00:	eb45 0303 	adc.w	r3, r5, r3
 8003d04:	607b      	str	r3, [r7, #4]
 8003d06:	f04f 0200 	mov.w	r2, #0
 8003d0a:	f04f 0300 	mov.w	r3, #0
 8003d0e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d12:	4629      	mov	r1, r5
 8003d14:	028b      	lsls	r3, r1, #10
 8003d16:	4621      	mov	r1, r4
 8003d18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d1c:	4621      	mov	r1, r4
 8003d1e:	028a      	lsls	r2, r1, #10
 8003d20:	4610      	mov	r0, r2
 8003d22:	4619      	mov	r1, r3
 8003d24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003d28:	2200      	movs	r2, #0
 8003d2a:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d2c:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003d2e:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003d32:	f7fc ffc9 	bl	8000cc8 <__aeabi_uldivmod>
 8003d36:	4602      	mov	r2, r0
 8003d38:	460b      	mov	r3, r1
 8003d3a:	4613      	mov	r3, r2
 8003d3c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003d40:	4b0d      	ldr	r3, [pc, #52]	; (8003d78 <HAL_RCC_GetSysClockFreq+0x458>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	0f1b      	lsrs	r3, r3, #28
 8003d46:	f003 0307 	and.w	r3, r3, #7
 8003d4a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003d4e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003d52:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003d56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d5a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d5e:	e003      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d60:	4b06      	ldr	r3, [pc, #24]	; (8003d7c <HAL_RCC_GetSysClockFreq+0x45c>)
 8003d62:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003d66:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d68:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	37b8      	adds	r7, #184	; 0xb8
 8003d70:	46bd      	mov	sp, r7
 8003d72:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d76:	bf00      	nop
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	00f42400 	.word	0x00f42400

08003d80 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b086      	sub	sp, #24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e28d      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	f000 8083 	beq.w	8003ea6 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003da0:	4b94      	ldr	r3, [pc, #592]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003da2:	689b      	ldr	r3, [r3, #8]
 8003da4:	f003 030c 	and.w	r3, r3, #12
 8003da8:	2b04      	cmp	r3, #4
 8003daa:	d019      	beq.n	8003de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dac:	4b91      	ldr	r3, [pc, #580]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003db4:	2b08      	cmp	r3, #8
 8003db6:	d106      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003db8:	4b8e      	ldr	r3, [pc, #568]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dc4:	d00c      	beq.n	8003de0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dc6:	4b8b      	ldr	r3, [pc, #556]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003dce:	2b0c      	cmp	r3, #12
 8003dd0:	d112      	bne.n	8003df8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003dd2:	4b88      	ldr	r3, [pc, #544]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003dd4:	685b      	ldr	r3, [r3, #4]
 8003dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dda:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003dde:	d10b      	bne.n	8003df8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de0:	4b84      	ldr	r3, [pc, #528]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d05b      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x124>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d157      	bne.n	8003ea4 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e25a      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	685b      	ldr	r3, [r3, #4]
 8003dfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e00:	d106      	bne.n	8003e10 <HAL_RCC_OscConfig+0x90>
 8003e02:	4b7c      	ldr	r3, [pc, #496]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a7b      	ldr	r2, [pc, #492]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e0c:	6013      	str	r3, [r2, #0]
 8003e0e:	e01d      	b.n	8003e4c <HAL_RCC_OscConfig+0xcc>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003e18:	d10c      	bne.n	8003e34 <HAL_RCC_OscConfig+0xb4>
 8003e1a:	4b76      	ldr	r3, [pc, #472]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a75      	ldr	r2, [pc, #468]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e20:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003e24:	6013      	str	r3, [r2, #0]
 8003e26:	4b73      	ldr	r3, [pc, #460]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4a72      	ldr	r2, [pc, #456]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e30:	6013      	str	r3, [r2, #0]
 8003e32:	e00b      	b.n	8003e4c <HAL_RCC_OscConfig+0xcc>
 8003e34:	4b6f      	ldr	r3, [pc, #444]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4a6e      	ldr	r2, [pc, #440]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e3a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e3e:	6013      	str	r3, [r2, #0]
 8003e40:	4b6c      	ldr	r3, [pc, #432]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a6b      	ldr	r2, [pc, #428]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e46:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003e4a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d013      	beq.n	8003e7c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e54:	f7fe f8a0 	bl	8001f98 <HAL_GetTick>
 8003e58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e5a:	e008      	b.n	8003e6e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e5c:	f7fe f89c 	bl	8001f98 <HAL_GetTick>
 8003e60:	4602      	mov	r2, r0
 8003e62:	693b      	ldr	r3, [r7, #16]
 8003e64:	1ad3      	subs	r3, r2, r3
 8003e66:	2b64      	cmp	r3, #100	; 0x64
 8003e68:	d901      	bls.n	8003e6e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003e6a:	2303      	movs	r3, #3
 8003e6c:	e21f      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e6e:	4b61      	ldr	r3, [pc, #388]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d0f0      	beq.n	8003e5c <HAL_RCC_OscConfig+0xdc>
 8003e7a:	e014      	b.n	8003ea6 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fe f88c 	bl	8001f98 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e84:	f7fe f888 	bl	8001f98 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b64      	cmp	r3, #100	; 0x64
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e20b      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e96:	4b57      	ldr	r3, [pc, #348]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x104>
 8003ea2:	e000      	b.n	8003ea6 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ea4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	f003 0302 	and.w	r3, r3, #2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d06f      	beq.n	8003f92 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003eb2:	4b50      	ldr	r3, [pc, #320]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	f003 030c 	and.w	r3, r3, #12
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d017      	beq.n	8003eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ebe:	4b4d      	ldr	r3, [pc, #308]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003eca:	4b4a      	ldr	r3, [pc, #296]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d00b      	beq.n	8003eee <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ed6:	4b47      	ldr	r3, [pc, #284]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003ede:	2b0c      	cmp	r3, #12
 8003ee0:	d11c      	bne.n	8003f1c <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003ee2:	4b44      	ldr	r3, [pc, #272]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d116      	bne.n	8003f1c <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003eee:	4b41      	ldr	r3, [pc, #260]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d005      	beq.n	8003f06 <HAL_RCC_OscConfig+0x186>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	68db      	ldr	r3, [r3, #12]
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d001      	beq.n	8003f06 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e1d3      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f06:	4b3b      	ldr	r3, [pc, #236]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	00db      	lsls	r3, r3, #3
 8003f14:	4937      	ldr	r1, [pc, #220]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f16:	4313      	orrs	r3, r2
 8003f18:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f1a:	e03a      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d020      	beq.n	8003f66 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f24:	4b34      	ldr	r3, [pc, #208]	; (8003ff8 <HAL_RCC_OscConfig+0x278>)
 8003f26:	2201      	movs	r2, #1
 8003f28:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fe f835 	bl	8001f98 <HAL_GetTick>
 8003f2e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f30:	e008      	b.n	8003f44 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f32:	f7fe f831 	bl	8001f98 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	2b02      	cmp	r3, #2
 8003f3e:	d901      	bls.n	8003f44 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003f40:	2303      	movs	r3, #3
 8003f42:	e1b4      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f44:	4b2b      	ldr	r3, [pc, #172]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d0f0      	beq.n	8003f32 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f50:	4b28      	ldr	r3, [pc, #160]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	691b      	ldr	r3, [r3, #16]
 8003f5c:	00db      	lsls	r3, r3, #3
 8003f5e:	4925      	ldr	r1, [pc, #148]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f60:	4313      	orrs	r3, r2
 8003f62:	600b      	str	r3, [r1, #0]
 8003f64:	e015      	b.n	8003f92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f66:	4b24      	ldr	r3, [pc, #144]	; (8003ff8 <HAL_RCC_OscConfig+0x278>)
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f6c:	f7fe f814 	bl	8001f98 <HAL_GetTick>
 8003f70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f72:	e008      	b.n	8003f86 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003f74:	f7fe f810 	bl	8001f98 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	2b02      	cmp	r3, #2
 8003f80:	d901      	bls.n	8003f86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003f82:	2303      	movs	r3, #3
 8003f84:	e193      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003f86:	4b1b      	ldr	r3, [pc, #108]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0302 	and.w	r3, r3, #2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1f0      	bne.n	8003f74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0308 	and.w	r3, r3, #8
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d036      	beq.n	800400c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d016      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003fa6:	4b15      	ldr	r3, [pc, #84]	; (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fa8:	2201      	movs	r2, #1
 8003faa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fac:	f7fd fff4 	bl	8001f98 <HAL_GetTick>
 8003fb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fb2:	e008      	b.n	8003fc6 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fb4:	f7fd fff0 	bl	8001f98 <HAL_GetTick>
 8003fb8:	4602      	mov	r2, r0
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	1ad3      	subs	r3, r2, r3
 8003fbe:	2b02      	cmp	r3, #2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e173      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003fc6:	4b0b      	ldr	r3, [pc, #44]	; (8003ff4 <HAL_RCC_OscConfig+0x274>)
 8003fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d0f0      	beq.n	8003fb4 <HAL_RCC_OscConfig+0x234>
 8003fd2:	e01b      	b.n	800400c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd4:	4b09      	ldr	r3, [pc, #36]	; (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fda:	f7fd ffdd 	bl	8001f98 <HAL_GetTick>
 8003fde:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003fe0:	e00e      	b.n	8004000 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003fe2:	f7fd ffd9 	bl	8001f98 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b02      	cmp	r3, #2
 8003fee:	d907      	bls.n	8004000 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003ff0:	2303      	movs	r3, #3
 8003ff2:	e15c      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
 8003ff4:	40023800 	.word	0x40023800
 8003ff8:	42470000 	.word	0x42470000
 8003ffc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004000:	4b8a      	ldr	r3, [pc, #552]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004002:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004004:	f003 0302 	and.w	r3, r3, #2
 8004008:	2b00      	cmp	r3, #0
 800400a:	d1ea      	bne.n	8003fe2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	f000 8097 	beq.w	8004148 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800401a:	2300      	movs	r3, #0
 800401c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800401e:	4b83      	ldr	r3, [pc, #524]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	60bb      	str	r3, [r7, #8]
 800402e:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004032:	4a7e      	ldr	r2, [pc, #504]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004034:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004038:	6413      	str	r3, [r2, #64]	; 0x40
 800403a:	4b7c      	ldr	r3, [pc, #496]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 800403c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800403e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004042:	60bb      	str	r3, [r7, #8]
 8004044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004046:	2301      	movs	r3, #1
 8004048:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800404a:	4b79      	ldr	r3, [pc, #484]	; (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004052:	2b00      	cmp	r3, #0
 8004054:	d118      	bne.n	8004088 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004056:	4b76      	ldr	r3, [pc, #472]	; (8004230 <HAL_RCC_OscConfig+0x4b0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4a75      	ldr	r2, [pc, #468]	; (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800405c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004060:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004062:	f7fd ff99 	bl	8001f98 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800406a:	f7fd ff95 	bl	8001f98 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e118      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800407c:	4b6c      	ldr	r3, [pc, #432]	; (8004230 <HAL_RCC_OscConfig+0x4b0>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	2b01      	cmp	r3, #1
 800408e:	d106      	bne.n	800409e <HAL_RCC_OscConfig+0x31e>
 8004090:	4b66      	ldr	r3, [pc, #408]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004092:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004094:	4a65      	ldr	r2, [pc, #404]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004096:	f043 0301 	orr.w	r3, r3, #1
 800409a:	6713      	str	r3, [r2, #112]	; 0x70
 800409c:	e01c      	b.n	80040d8 <HAL_RCC_OscConfig+0x358>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	2b05      	cmp	r3, #5
 80040a4:	d10c      	bne.n	80040c0 <HAL_RCC_OscConfig+0x340>
 80040a6:	4b61      	ldr	r3, [pc, #388]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040aa:	4a60      	ldr	r2, [pc, #384]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040ac:	f043 0304 	orr.w	r3, r3, #4
 80040b0:	6713      	str	r3, [r2, #112]	; 0x70
 80040b2:	4b5e      	ldr	r3, [pc, #376]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040b6:	4a5d      	ldr	r2, [pc, #372]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040b8:	f043 0301 	orr.w	r3, r3, #1
 80040bc:	6713      	str	r3, [r2, #112]	; 0x70
 80040be:	e00b      	b.n	80040d8 <HAL_RCC_OscConfig+0x358>
 80040c0:	4b5a      	ldr	r3, [pc, #360]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040c4:	4a59      	ldr	r2, [pc, #356]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040c6:	f023 0301 	bic.w	r3, r3, #1
 80040ca:	6713      	str	r3, [r2, #112]	; 0x70
 80040cc:	4b57      	ldr	r3, [pc, #348]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040d0:	4a56      	ldr	r2, [pc, #344]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80040d2:	f023 0304 	bic.w	r3, r3, #4
 80040d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	2b00      	cmp	r3, #0
 80040de:	d015      	beq.n	800410c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040e0:	f7fd ff5a 	bl	8001f98 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040e6:	e00a      	b.n	80040fe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80040e8:	f7fd ff56 	bl	8001f98 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d901      	bls.n	80040fe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e0d7      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80040fe:	4b4b      	ldr	r3, [pc, #300]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004102:	f003 0302 	and.w	r3, r3, #2
 8004106:	2b00      	cmp	r3, #0
 8004108:	d0ee      	beq.n	80040e8 <HAL_RCC_OscConfig+0x368>
 800410a:	e014      	b.n	8004136 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800410c:	f7fd ff44 	bl	8001f98 <HAL_GetTick>
 8004110:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004112:	e00a      	b.n	800412a <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004114:	f7fd ff40 	bl	8001f98 <HAL_GetTick>
 8004118:	4602      	mov	r2, r0
 800411a:	693b      	ldr	r3, [r7, #16]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004122:	4293      	cmp	r3, r2
 8004124:	d901      	bls.n	800412a <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8004126:	2303      	movs	r3, #3
 8004128:	e0c1      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800412a:	4b40      	ldr	r3, [pc, #256]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 800412c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1ee      	bne.n	8004114 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004136:	7dfb      	ldrb	r3, [r7, #23]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d105      	bne.n	8004148 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 800413e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004140:	4a3a      	ldr	r2, [pc, #232]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004142:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004146:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	699b      	ldr	r3, [r3, #24]
 800414c:	2b00      	cmp	r3, #0
 800414e:	f000 80ad 	beq.w	80042ac <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004152:	4b36      	ldr	r3, [pc, #216]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004154:	689b      	ldr	r3, [r3, #8]
 8004156:	f003 030c 	and.w	r3, r3, #12
 800415a:	2b08      	cmp	r3, #8
 800415c:	d060      	beq.n	8004220 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d145      	bne.n	80041f2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b33      	ldr	r3, [pc, #204]	; (8004234 <HAL_RCC_OscConfig+0x4b4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fd ff14 	bl	8001f98 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fd ff10 	bl	8001f98 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e093      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b29      	ldr	r3, [pc, #164]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	69da      	ldr	r2, [r3, #28]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	431a      	orrs	r2, r3
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a0:	019b      	lsls	r3, r3, #6
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041a8:	085b      	lsrs	r3, r3, #1
 80041aa:	3b01      	subs	r3, #1
 80041ac:	041b      	lsls	r3, r3, #16
 80041ae:	431a      	orrs	r2, r3
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b4:	061b      	lsls	r3, r3, #24
 80041b6:	431a      	orrs	r2, r3
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041bc:	071b      	lsls	r3, r3, #28
 80041be:	491b      	ldr	r1, [pc, #108]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041c4:	4b1b      	ldr	r3, [pc, #108]	; (8004234 <HAL_RCC_OscConfig+0x4b4>)
 80041c6:	2201      	movs	r2, #1
 80041c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041ca:	f7fd fee5 	bl	8001f98 <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80041d2:	f7fd fee1 	bl	8001f98 <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e064      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d0f0      	beq.n	80041d2 <HAL_RCC_OscConfig+0x452>
 80041f0:	e05c      	b.n	80042ac <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041f2:	4b10      	ldr	r3, [pc, #64]	; (8004234 <HAL_RCC_OscConfig+0x4b4>)
 80041f4:	2200      	movs	r2, #0
 80041f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041f8:	f7fd fece 	bl	8001f98 <HAL_GetTick>
 80041fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80041fe:	e008      	b.n	8004212 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004200:	f7fd feca 	bl	8001f98 <HAL_GetTick>
 8004204:	4602      	mov	r2, r0
 8004206:	693b      	ldr	r3, [r7, #16]
 8004208:	1ad3      	subs	r3, r2, r3
 800420a:	2b02      	cmp	r3, #2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e04d      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004212:	4b06      	ldr	r3, [pc, #24]	; (800422c <HAL_RCC_OscConfig+0x4ac>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421a:	2b00      	cmp	r3, #0
 800421c:	d1f0      	bne.n	8004200 <HAL_RCC_OscConfig+0x480>
 800421e:	e045      	b.n	80042ac <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	699b      	ldr	r3, [r3, #24]
 8004224:	2b01      	cmp	r3, #1
 8004226:	d107      	bne.n	8004238 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e040      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
 800422c:	40023800 	.word	0x40023800
 8004230:	40007000 	.word	0x40007000
 8004234:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004238:	4b1f      	ldr	r3, [pc, #124]	; (80042b8 <HAL_RCC_OscConfig+0x538>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	699b      	ldr	r3, [r3, #24]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d030      	beq.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004250:	429a      	cmp	r2, r3
 8004252:	d129      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800425e:	429a      	cmp	r2, r3
 8004260:	d122      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004262:	68fa      	ldr	r2, [r7, #12]
 8004264:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004268:	4013      	ands	r3, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800426e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004270:	4293      	cmp	r3, r2
 8004272:	d119      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800427e:	085b      	lsrs	r3, r3, #1
 8004280:	3b01      	subs	r3, #1
 8004282:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004284:	429a      	cmp	r2, r3
 8004286:	d10f      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004292:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004294:	429a      	cmp	r2, r3
 8004296:	d107      	bne.n	80042a8 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a2:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d001      	beq.n	80042ac <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e000      	b.n	80042ae <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3718      	adds	r7, #24
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40023800 	.word	0x40023800

080042bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042bc:	b580      	push	{r7, lr}
 80042be:	b082      	sub	sp, #8
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d101      	bne.n	80042ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	e03f      	b.n	800434e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d4:	b2db      	uxtb	r3, r3
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d106      	bne.n	80042e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2200      	movs	r2, #0
 80042de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042e2:	6878      	ldr	r0, [r7, #4]
 80042e4:	f7fd fbf4 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2224      	movs	r2, #36	; 0x24
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80042fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 ff77 	bl	80051f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	691a      	ldr	r2, [r3, #16]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	695a      	ldr	r2, [r3, #20]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	68da      	ldr	r2, [r3, #12]
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2220      	movs	r2, #32
 8004340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2220      	movs	r2, #32
 8004348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800434c:	2300      	movs	r3, #0
}
 800434e:	4618      	mov	r0, r3
 8004350:	3708      	adds	r7, #8
 8004352:	46bd      	mov	sp, r7
 8004354:	bd80      	pop	{r7, pc}
	...

08004358 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004358:	b580      	push	{r7, lr}
 800435a:	b08c      	sub	sp, #48	; 0x30
 800435c:	af00      	add	r7, sp, #0
 800435e:	60f8      	str	r0, [r7, #12]
 8004360:	60b9      	str	r1, [r7, #8]
 8004362:	4613      	mov	r3, r2
 8004364:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004366:	68fb      	ldr	r3, [r7, #12]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	b2db      	uxtb	r3, r3
 800436e:	2b20      	cmp	r3, #32
 8004370:	d165      	bne.n	800443e <HAL_UART_Transmit_DMA+0xe6>
  {
    if ((pData == NULL) || (Size == 0U))
 8004372:	68bb      	ldr	r3, [r7, #8]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d002      	beq.n	800437e <HAL_UART_Transmit_DMA+0x26>
 8004378:	88fb      	ldrh	r3, [r7, #6]
 800437a:	2b00      	cmp	r3, #0
 800437c:	d101      	bne.n	8004382 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	e05e      	b.n	8004440 <HAL_UART_Transmit_DMA+0xe8>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004388:	2b01      	cmp	r3, #1
 800438a:	d101      	bne.n	8004390 <HAL_UART_Transmit_DMA+0x38>
 800438c:	2302      	movs	r3, #2
 800438e:	e057      	b.n	8004440 <HAL_UART_Transmit_DMA+0xe8>
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	2201      	movs	r2, #1
 8004394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	88fa      	ldrh	r2, [r7, #6]
 80043a2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	88fa      	ldrh	r2, [r7, #6]
 80043a8:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2200      	movs	r2, #0
 80043ae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2221      	movs	r2, #33	; 0x21
 80043b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043bc:	4a22      	ldr	r2, [pc, #136]	; (8004448 <HAL_UART_Transmit_DMA+0xf0>)
 80043be:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043c4:	4a21      	ldr	r2, [pc, #132]	; (800444c <HAL_UART_Transmit_DMA+0xf4>)
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043cc:	4a20      	ldr	r2, [pc, #128]	; (8004450 <HAL_UART_Transmit_DMA+0xf8>)
 80043ce:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80043d4:	2200      	movs	r2, #0
 80043d6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 80043d8:	f107 0308 	add.w	r3, r7, #8
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6b58      	ldr	r0, [r3, #52]	; 0x34
 80043e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043e4:	6819      	ldr	r1, [r3, #0]
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	3304      	adds	r3, #4
 80043ec:	461a      	mov	r2, r3
 80043ee:	88fb      	ldrh	r3, [r7, #6]
 80043f0:	f7fd ffde 	bl	80023b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80043fc:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2200      	movs	r2, #0
 8004402:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	3314      	adds	r3, #20
 800440c:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800440e:	69bb      	ldr	r3, [r7, #24]
 8004410:	e853 3f00 	ldrex	r3, [r3]
 8004414:	617b      	str	r3, [r7, #20]
   return(result);
 8004416:	697b      	ldr	r3, [r7, #20]
 8004418:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800441c:	62bb      	str	r3, [r7, #40]	; 0x28
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	3314      	adds	r3, #20
 8004424:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004426:	627a      	str	r2, [r7, #36]	; 0x24
 8004428:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800442a:	6a39      	ldr	r1, [r7, #32]
 800442c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800442e:	e841 2300 	strex	r3, r2, [r1]
 8004432:	61fb      	str	r3, [r7, #28]
   return(result);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d1e5      	bne.n	8004406 <HAL_UART_Transmit_DMA+0xae>

    return HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	e000      	b.n	8004440 <HAL_UART_Transmit_DMA+0xe8>
  }
  else
  {
    return HAL_BUSY;
 800443e:	2302      	movs	r3, #2
  }
}
 8004440:	4618      	mov	r0, r3
 8004442:	3730      	adds	r7, #48	; 0x30
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}
 8004448:	08004a8d 	.word	0x08004a8d
 800444c:	08004b27 	.word	0x08004b27
 8004450:	08004c9f 	.word	0x08004c9f

08004454 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08c      	sub	sp, #48	; 0x30
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	4613      	mov	r3, r2
 8004460:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004468:	b2db      	uxtb	r3, r3
 800446a:	2b20      	cmp	r3, #32
 800446c:	d152      	bne.n	8004514 <HAL_UARTEx_ReceiveToIdle_DMA+0xc0>
  {
    if ((pData == NULL) || (Size == 0U))
 800446e:	68bb      	ldr	r3, [r7, #8]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d002      	beq.n	800447a <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004474:	88fb      	ldrh	r3, [r7, #6]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d101      	bne.n	800447e <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	e04b      	b.n	8004516 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
    }

    __HAL_LOCK(huart);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004484:	2b01      	cmp	r3, #1
 8004486:	d101      	bne.n	800448c <HAL_UARTEx_ReceiveToIdle_DMA+0x38>
 8004488:	2302      	movs	r3, #2
 800448a:	e044      	b.n	8004516 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	2201      	movs	r2, #1
 8004490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	2201      	movs	r2, #1
 8004498:	631a      	str	r2, [r3, #48]	; 0x30

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 800449a:	88fb      	ldrh	r3, [r7, #6]
 800449c:	461a      	mov	r2, r3
 800449e:	68b9      	ldr	r1, [r7, #8]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 fc47 	bl	8004d34 <UART_Start_Receive_DMA>
 80044a6:	4603      	mov	r3, r0
 80044a8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80044ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d12c      	bne.n	800450e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	d125      	bne.n	8004508 <HAL_UARTEx_ReceiveToIdle_DMA+0xb4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044bc:	2300      	movs	r3, #0
 80044be:	613b      	str	r3, [r7, #16]
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	e853 3f00 	ldrex	r3, [r3]
 80044e0:	617b      	str	r3, [r7, #20]
   return(result);
 80044e2:	697b      	ldr	r3, [r7, #20]
 80044e4:	f043 0310 	orr.w	r3, r3, #16
 80044e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	330c      	adds	r3, #12
 80044f0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044f2:	627a      	str	r2, [r7, #36]	; 0x24
 80044f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	6a39      	ldr	r1, [r7, #32]
 80044f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044fa:	e841 2300 	strex	r3, r2, [r1]
 80044fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8004500:	69fb      	ldr	r3, [r7, #28]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d1e5      	bne.n	80044d2 <HAL_UARTEx_ReceiveToIdle_DMA+0x7e>
 8004506:	e002      	b.n	800450e <HAL_UARTEx_ReceiveToIdle_DMA+0xba>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800450e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8004512:	e000      	b.n	8004516 <HAL_UARTEx_ReceiveToIdle_DMA+0xc2>
  }
  else
  {
    return HAL_BUSY;
 8004514:	2302      	movs	r3, #2
  }
}
 8004516:	4618      	mov	r0, r3
 8004518:	3730      	adds	r7, #48	; 0x30
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
	...

08004520 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004520:	b580      	push	{r7, lr}
 8004522:	b0ba      	sub	sp, #232	; 0xe8
 8004524:	af00      	add	r7, sp, #0
 8004526:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	68db      	ldr	r3, [r3, #12]
 8004538:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	695b      	ldr	r3, [r3, #20]
 8004542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004546:	2300      	movs	r3, #0
 8004548:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800454c:	2300      	movs	r3, #0
 800454e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004552:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004556:	f003 030f 	and.w	r3, r3, #15
 800455a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800455e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004562:	2b00      	cmp	r3, #0
 8004564:	d10f      	bne.n	8004586 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004566:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800456a:	f003 0320 	and.w	r3, r3, #32
 800456e:	2b00      	cmp	r3, #0
 8004570:	d009      	beq.n	8004586 <HAL_UART_IRQHandler+0x66>
 8004572:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004576:	f003 0320 	and.w	r3, r3, #32
 800457a:	2b00      	cmp	r3, #0
 800457c:	d003      	beq.n	8004586 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800457e:	6878      	ldr	r0, [r7, #4]
 8004580:	f000 fd7d 	bl	800507e <UART_Receive_IT>
      return;
 8004584:	e256      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004586:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800458a:	2b00      	cmp	r3, #0
 800458c:	f000 80de 	beq.w	800474c <HAL_UART_IRQHandler+0x22c>
 8004590:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004594:	f003 0301 	and.w	r3, r3, #1
 8004598:	2b00      	cmp	r3, #0
 800459a:	d106      	bne.n	80045aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800459c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045a0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	f000 80d1 	beq.w	800474c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045ae:	f003 0301 	and.w	r3, r3, #1
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <HAL_UART_IRQHandler+0xae>
 80045b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045c6:	f043 0201 	orr.w	r2, r3, #1
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d2:	f003 0304 	and.w	r3, r3, #4
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d00b      	beq.n	80045f2 <HAL_UART_IRQHandler+0xd2>
 80045da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d005      	beq.n	80045f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	f043 0202 	orr.w	r2, r3, #2
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045f6:	f003 0302 	and.w	r3, r3, #2
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00b      	beq.n	8004616 <HAL_UART_IRQHandler+0xf6>
 80045fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004602:	f003 0301 	and.w	r3, r3, #1
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460e:	f043 0204 	orr.w	r2, r3, #4
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004616:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800461a:	f003 0308 	and.w	r3, r3, #8
 800461e:	2b00      	cmp	r3, #0
 8004620:	d011      	beq.n	8004646 <HAL_UART_IRQHandler+0x126>
 8004622:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004626:	f003 0320 	and.w	r3, r3, #32
 800462a:	2b00      	cmp	r3, #0
 800462c:	d105      	bne.n	800463a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800462e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004632:	f003 0301 	and.w	r3, r3, #1
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463e:	f043 0208 	orr.w	r2, r3, #8
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464a:	2b00      	cmp	r3, #0
 800464c:	f000 81ed 	beq.w	8004a2a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004650:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004654:	f003 0320 	and.w	r3, r3, #32
 8004658:	2b00      	cmp	r3, #0
 800465a:	d008      	beq.n	800466e <HAL_UART_IRQHandler+0x14e>
 800465c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b00      	cmp	r3, #0
 8004666:	d002      	beq.n	800466e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004668:	6878      	ldr	r0, [r7, #4]
 800466a:	f000 fd08 	bl	800507e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	695b      	ldr	r3, [r3, #20]
 8004674:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004678:	2b40      	cmp	r3, #64	; 0x40
 800467a:	bf0c      	ite	eq
 800467c:	2301      	moveq	r3, #1
 800467e:	2300      	movne	r3, #0
 8004680:	b2db      	uxtb	r3, r3
 8004682:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800468a:	f003 0308 	and.w	r3, r3, #8
 800468e:	2b00      	cmp	r3, #0
 8004690:	d103      	bne.n	800469a <HAL_UART_IRQHandler+0x17a>
 8004692:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004696:	2b00      	cmp	r3, #0
 8004698:	d04f      	beq.n	800473a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 fc10 	bl	8004ec0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	695b      	ldr	r3, [r3, #20]
 80046a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046aa:	2b40      	cmp	r3, #64	; 0x40
 80046ac:	d141      	bne.n	8004732 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	3314      	adds	r3, #20
 80046b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80046bc:	e853 3f00 	ldrex	r3, [r3]
 80046c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80046c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80046c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80046cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	3314      	adds	r3, #20
 80046d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80046da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80046de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80046e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80046ea:	e841 2300 	strex	r3, r2, [r1]
 80046ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80046f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d1d9      	bne.n	80046ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d013      	beq.n	800472a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004706:	4a7d      	ldr	r2, [pc, #500]	; (80048fc <HAL_UART_IRQHandler+0x3dc>)
 8004708:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470e:	4618      	mov	r0, r3
 8004710:	f7fd ff16 	bl	8002540 <HAL_DMA_Abort_IT>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d016      	beq.n	8004748 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800471e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004720:	687a      	ldr	r2, [r7, #4]
 8004722:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004724:	4610      	mov	r0, r2
 8004726:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004728:	e00e      	b.n	8004748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 f9a4 	bl	8004a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004730:	e00a      	b.n	8004748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f000 f9a0 	bl	8004a78 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004738:	e006      	b.n	8004748 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f000 f99c 	bl	8004a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004746:	e170      	b.n	8004a2a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004748:	bf00      	nop
    return;
 800474a:	e16e      	b.n	8004a2a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004750:	2b01      	cmp	r3, #1
 8004752:	f040 814a 	bne.w	80049ea <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800475a:	f003 0310 	and.w	r3, r3, #16
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 8143 	beq.w	80049ea <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004764:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004768:	f003 0310 	and.w	r3, r3, #16
 800476c:	2b00      	cmp	r3, #0
 800476e:	f000 813c 	beq.w	80049ea <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004772:	2300      	movs	r3, #0
 8004774:	60bb      	str	r3, [r7, #8]
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	60bb      	str	r3, [r7, #8]
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	685b      	ldr	r3, [r3, #4]
 8004784:	60bb      	str	r3, [r7, #8]
 8004786:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	695b      	ldr	r3, [r3, #20]
 800478e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004792:	2b40      	cmp	r3, #64	; 0x40
 8004794:	f040 80b4 	bne.w	8004900 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	f000 8140 	beq.w	8004a2e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80047b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047b6:	429a      	cmp	r2, r3
 80047b8:	f080 8139 	bcs.w	8004a2e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80047c2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047ce:	f000 8088 	beq.w	80048e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	330c      	adds	r3, #12
 80047d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80047e0:	e853 3f00 	ldrex	r3, [r3]
 80047e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80047e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80047ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80047f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	330c      	adds	r3, #12
 80047fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80047fe:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004802:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004806:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800480a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800480e:	e841 2300 	strex	r3, r2, [r1]
 8004812:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004816:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800481a:	2b00      	cmp	r3, #0
 800481c:	d1d9      	bne.n	80047d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3314      	adds	r3, #20
 8004824:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004826:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004828:	e853 3f00 	ldrex	r3, [r3]
 800482c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800482e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004830:	f023 0301 	bic.w	r3, r3, #1
 8004834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	3314      	adds	r3, #20
 800483e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004842:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004846:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004848:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800484a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800484e:	e841 2300 	strex	r3, r2, [r1]
 8004852:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004854:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004856:	2b00      	cmp	r3, #0
 8004858:	d1e1      	bne.n	800481e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	3314      	adds	r3, #20
 8004860:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004862:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004864:	e853 3f00 	ldrex	r3, [r3]
 8004868:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800486a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800486c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004870:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800487e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004880:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004884:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004886:	e841 2300 	strex	r3, r2, [r1]
 800488a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800488c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800488e:	2b00      	cmp	r3, #0
 8004890:	d1e3      	bne.n	800485a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2220      	movs	r2, #32
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2200      	movs	r2, #0
 800489e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	330c      	adds	r3, #12
 80048a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048aa:	e853 3f00 	ldrex	r3, [r3]
 80048ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80048b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80048b2:	f023 0310 	bic.w	r3, r3, #16
 80048b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	330c      	adds	r3, #12
 80048c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80048c4:	65ba      	str	r2, [r7, #88]	; 0x58
 80048c6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80048ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80048cc:	e841 2300 	strex	r3, r2, [r1]
 80048d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80048d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1e3      	bne.n	80048a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048dc:	4618      	mov	r0, r3
 80048de:	f7fd fdbf 	bl	8002460 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048ea:	b29b      	uxth	r3, r3
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	b29b      	uxth	r3, r3
 80048f0:	4619      	mov	r1, r3
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f7fc fd96 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80048f8:	e099      	b.n	8004a2e <HAL_UART_IRQHandler+0x50e>
 80048fa:	bf00      	nop
 80048fc:	08004f87 	.word	0x08004f87
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004908:	b29b      	uxth	r3, r3
 800490a:	1ad3      	subs	r3, r2, r3
 800490c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004914:	b29b      	uxth	r3, r3
 8004916:	2b00      	cmp	r3, #0
 8004918:	f000 808b 	beq.w	8004a32 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800491c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004920:	2b00      	cmp	r3, #0
 8004922:	f000 8086 	beq.w	8004a32 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	330c      	adds	r3, #12
 800492c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800492e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004930:	e853 3f00 	ldrex	r3, [r3]
 8004934:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004938:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800493c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	330c      	adds	r3, #12
 8004946:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800494a:	647a      	str	r2, [r7, #68]	; 0x44
 800494c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800494e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004950:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004952:	e841 2300 	strex	r3, r2, [r1]
 8004956:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004958:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1e3      	bne.n	8004926 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	3314      	adds	r3, #20
 8004964:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004968:	e853 3f00 	ldrex	r3, [r3]
 800496c:	623b      	str	r3, [r7, #32]
   return(result);
 800496e:	6a3b      	ldr	r3, [r7, #32]
 8004970:	f023 0301 	bic.w	r3, r3, #1
 8004974:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	3314      	adds	r3, #20
 800497e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004982:	633a      	str	r2, [r7, #48]	; 0x30
 8004984:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004986:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800498a:	e841 2300 	strex	r3, r2, [r1]
 800498e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1e3      	bne.n	800495e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2220      	movs	r2, #32
 800499a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	330c      	adds	r3, #12
 80049aa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ac:	693b      	ldr	r3, [r7, #16]
 80049ae:	e853 3f00 	ldrex	r3, [r3]
 80049b2:	60fb      	str	r3, [r7, #12]
   return(result);
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f023 0310 	bic.w	r3, r3, #16
 80049ba:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	330c      	adds	r3, #12
 80049c4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80049c8:	61fa      	str	r2, [r7, #28]
 80049ca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049cc:	69b9      	ldr	r1, [r7, #24]
 80049ce:	69fa      	ldr	r2, [r7, #28]
 80049d0:	e841 2300 	strex	r3, r2, [r1]
 80049d4:	617b      	str	r3, [r7, #20]
   return(result);
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1e3      	bne.n	80049a4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80049dc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049e0:	4619      	mov	r1, r3
 80049e2:	6878      	ldr	r0, [r7, #4]
 80049e4:	f7fc fd1e 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80049e8:	e023      	b.n	8004a32 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80049ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d009      	beq.n	8004a0a <HAL_UART_IRQHandler+0x4ea>
 80049f6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fad3 	bl	8004fae <UART_Transmit_IT>
    return;
 8004a08:	e014      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00e      	beq.n	8004a34 <HAL_UART_IRQHandler+0x514>
 8004a16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d008      	beq.n	8004a34 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8004a22:	6878      	ldr	r0, [r7, #4]
 8004a24:	f000 fb13 	bl	800504e <UART_EndTransmit_IT>
    return;
 8004a28:	e004      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
    return;
 8004a2a:	bf00      	nop
 8004a2c:	e002      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
      return;
 8004a2e:	bf00      	nop
 8004a30:	e000      	b.n	8004a34 <HAL_UART_IRQHandler+0x514>
      return;
 8004a32:	bf00      	nop
  }
}
 8004a34:	37e8      	adds	r7, #232	; 0xe8
 8004a36:	46bd      	mov	sp, r7
 8004a38:	bd80      	pop	{r7, pc}
 8004a3a:	bf00      	nop

08004a3c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b083      	sub	sp, #12
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004a58:	bf00      	nop
 8004a5a:	370c      	adds	r7, #12
 8004a5c:	46bd      	mov	sp, r7
 8004a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a62:	4770      	bx	lr

08004a64 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004a6c:	bf00      	nop
 8004a6e:	370c      	adds	r7, #12
 8004a70:	46bd      	mov	sp, r7
 8004a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a76:	4770      	bx	lr

08004a78 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b090      	sub	sp, #64	; 0x40
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d137      	bne.n	8004b18 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004aa8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aaa:	2200      	movs	r2, #0
 8004aac:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004aae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	3314      	adds	r3, #20
 8004ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab8:	e853 3f00 	ldrex	r3, [r3]
 8004abc:	623b      	str	r3, [r7, #32]
   return(result);
 8004abe:	6a3b      	ldr	r3, [r7, #32]
 8004ac0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	3314      	adds	r3, #20
 8004acc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ace:	633a      	str	r2, [r7, #48]	; 0x30
 8004ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ad6:	e841 2300 	strex	r3, r2, [r1]
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d1e5      	bne.n	8004aae <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ae2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	330c      	adds	r3, #12
 8004ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004aea:	693b      	ldr	r3, [r7, #16]
 8004aec:	e853 3f00 	ldrex	r3, [r3]
 8004af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004af8:	637b      	str	r3, [r7, #52]	; 0x34
 8004afa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	330c      	adds	r3, #12
 8004b00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b02:	61fa      	str	r2, [r7, #28]
 8004b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b06:	69b9      	ldr	r1, [r7, #24]
 8004b08:	69fa      	ldr	r2, [r7, #28]
 8004b0a:	e841 2300 	strex	r3, r2, [r1]
 8004b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8004b10:	697b      	ldr	r3, [r7, #20]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1e5      	bne.n	8004ae2 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b16:	e002      	b.n	8004b1e <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004b18:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b1a:	f7fc fcc3 	bl	80014a4 <HAL_UART_TxCpltCallback>
}
 8004b1e:	bf00      	nop
 8004b20:	3740      	adds	r7, #64	; 0x40
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}

08004b26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b26:	b580      	push	{r7, lr}
 8004b28:	b084      	sub	sp, #16
 8004b2a:	af00      	add	r7, sp, #0
 8004b2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004b34:	68f8      	ldr	r0, [r7, #12]
 8004b36:	f7ff ff81 	bl	8004a3c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004b3a:	bf00      	nop
 8004b3c:	3710      	adds	r7, #16
 8004b3e:	46bd      	mov	sp, r7
 8004b40:	bd80      	pop	{r7, pc}

08004b42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b09c      	sub	sp, #112	; 0x70
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b4e:	66fb      	str	r3, [r7, #108]	; 0x6c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d172      	bne.n	8004c44 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004b5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b60:	2200      	movs	r2, #0
 8004b62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	330c      	adds	r3, #12
 8004b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b6e:	e853 3f00 	ldrex	r3, [r3]
 8004b72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b76:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b7a:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004b84:	65ba      	str	r2, [r7, #88]	; 0x58
 8004b86:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b88:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004b8a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004b8c:	e841 2300 	strex	r3, r2, [r1]
 8004b90:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004b92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d1e5      	bne.n	8004b64 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3314      	adds	r3, #20
 8004b9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ba2:	e853 3f00 	ldrex	r3, [r3]
 8004ba6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	f023 0301 	bic.w	r3, r3, #1
 8004bae:	667b      	str	r3, [r7, #100]	; 0x64
 8004bb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	3314      	adds	r3, #20
 8004bb6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004bb8:	647a      	str	r2, [r7, #68]	; 0x44
 8004bba:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bbc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004bbe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004bc0:	e841 2300 	strex	r3, r2, [r1]
 8004bc4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004bc6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d1e5      	bne.n	8004b98 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd6:	e853 3f00 	ldrex	r3, [r3]
 8004bda:	623b      	str	r3, [r7, #32]
   return(result);
 8004bdc:	6a3b      	ldr	r3, [r7, #32]
 8004bde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004be2:	663b      	str	r3, [r7, #96]	; 0x60
 8004be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	3314      	adds	r3, #20
 8004bea:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004bec:	633a      	str	r2, [r7, #48]	; 0x30
 8004bee:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004bf2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004bf4:	e841 2300 	strex	r3, r2, [r1]
 8004bf8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d1e5      	bne.n	8004bcc <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	2220      	movs	r2, #32
 8004c04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d119      	bne.n	8004c44 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c18:	693b      	ldr	r3, [r7, #16]
 8004c1a:	e853 3f00 	ldrex	r3, [r3]
 8004c1e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	f023 0310 	bic.w	r3, r3, #16
 8004c26:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	330c      	adds	r3, #12
 8004c2e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c30:	61fa      	str	r2, [r7, #28]
 8004c32:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c34:	69b9      	ldr	r1, [r7, #24]
 8004c36:	69fa      	ldr	r2, [r7, #28]
 8004c38:	e841 2300 	strex	r3, r2, [r1]
 8004c3c:	617b      	str	r3, [r7, #20]
   return(result);
 8004c3e:	697b      	ldr	r3, [r7, #20]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d1e5      	bne.n	8004c10 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c48:	2b01      	cmp	r3, #1
 8004c4a:	d106      	bne.n	8004c5a <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c4e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c50:	4619      	mov	r1, r3
 8004c52:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c54:	f7fc fbe6 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c58:	e002      	b.n	8004c60 <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004c5a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004c5c:	f7ff fef8 	bl	8004a50 <HAL_UART_RxCpltCallback>
}
 8004c60:	bf00      	nop
 8004c62:	3770      	adds	r7, #112	; 0x70
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d108      	bne.n	8004c90 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004c82:	085b      	lsrs	r3, r3, #1
 8004c84:	b29b      	uxth	r3, r3
 8004c86:	4619      	mov	r1, r3
 8004c88:	68f8      	ldr	r0, [r7, #12]
 8004c8a:	f7fc fbcb 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004c8e:	e002      	b.n	8004c96 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8004c90:	68f8      	ldr	r0, [r7, #12]
 8004c92:	f7ff fee7 	bl	8004a64 <HAL_UART_RxHalfCpltCallback>
}
 8004c96:	bf00      	nop
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}

08004c9e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004c9e:	b580      	push	{r7, lr}
 8004ca0:	b084      	sub	sp, #16
 8004ca2:	af00      	add	r7, sp, #0
 8004ca4:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cae:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cba:	2b80      	cmp	r3, #128	; 0x80
 8004cbc:	bf0c      	ite	eq
 8004cbe:	2301      	moveq	r3, #1
 8004cc0:	2300      	movne	r3, #0
 8004cc2:	b2db      	uxtb	r3, r3
 8004cc4:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ccc:	b2db      	uxtb	r3, r3
 8004cce:	2b21      	cmp	r3, #33	; 0x21
 8004cd0:	d108      	bne.n	8004ce4 <UART_DMAError+0x46>
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d005      	beq.n	8004ce4 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004cd8:	68bb      	ldr	r3, [r7, #8]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004cde:	68b8      	ldr	r0, [r7, #8]
 8004ce0:	f000 f8c6 	bl	8004e70 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004ce4:	68bb      	ldr	r3, [r7, #8]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	695b      	ldr	r3, [r3, #20]
 8004cea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cee:	2b40      	cmp	r3, #64	; 0x40
 8004cf0:	bf0c      	ite	eq
 8004cf2:	2301      	moveq	r3, #1
 8004cf4:	2300      	movne	r3, #0
 8004cf6:	b2db      	uxtb	r3, r3
 8004cf8:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d00:	b2db      	uxtb	r3, r3
 8004d02:	2b22      	cmp	r3, #34	; 0x22
 8004d04:	d108      	bne.n	8004d18 <UART_DMAError+0x7a>
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d005      	beq.n	8004d18 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004d12:	68b8      	ldr	r0, [r7, #8]
 8004d14:	f000 f8d4 	bl	8004ec0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d1c:	f043 0210 	orr.w	r2, r3, #16
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d24:	68b8      	ldr	r0, [r7, #8]
 8004d26:	f7ff fea7 	bl	8004a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d2a:	bf00      	nop
 8004d2c:	3710      	adds	r7, #16
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	bd80      	pop	{r7, pc}
	...

08004d34 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b098      	sub	sp, #96	; 0x60
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	4613      	mov	r3, r2
 8004d40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004d42:	68ba      	ldr	r2, [r7, #8]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	88fa      	ldrh	r2, [r7, #6]
 8004d4c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2200      	movs	r2, #0
 8004d52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2222      	movs	r2, #34	; 0x22
 8004d58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d60:	4a40      	ldr	r2, [pc, #256]	; (8004e64 <UART_Start_Receive_DMA+0x130>)
 8004d62:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d68:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <UART_Start_Receive_DMA+0x134>)
 8004d6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d70:	4a3e      	ldr	r2, [pc, #248]	; (8004e6c <UART_Start_Receive_DMA+0x138>)
 8004d72:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d78:	2200      	movs	r2, #0
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004d7c:	f107 0308 	add.w	r3, r7, #8
 8004d80:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	3304      	adds	r3, #4
 8004d8c:	4619      	mov	r1, r3
 8004d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004d90:	681a      	ldr	r2, [r3, #0]
 8004d92:	88fb      	ldrh	r3, [r7, #6]
 8004d94:	f7fd fb0c 	bl	80023b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004d98:	2300      	movs	r3, #0
 8004d9a:	613b      	str	r3, [r7, #16]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	613b      	str	r3, [r7, #16]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	613b      	str	r3, [r7, #16]
 8004dac:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	2200      	movs	r2, #0
 8004db2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	691b      	ldr	r3, [r3, #16]
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d019      	beq.n	8004df2 <UART_Start_Receive_DMA+0xbe>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	330c      	adds	r3, #12
 8004dc4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dc8:	e853 3f00 	ldrex	r3, [r3]
 8004dcc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004dce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dd4:	65bb      	str	r3, [r7, #88]	; 0x58
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	330c      	adds	r3, #12
 8004ddc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004dde:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004de0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004de2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004de4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004de6:	e841 2300 	strex	r3, r2, [r1]
 8004dea:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004dec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1e5      	bne.n	8004dbe <UART_Start_Receive_DMA+0x8a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	3314      	adds	r3, #20
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dfc:	e853 3f00 	ldrex	r3, [r3]
 8004e00:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e04:	f043 0301 	orr.w	r3, r3, #1
 8004e08:	657b      	str	r3, [r7, #84]	; 0x54
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	3314      	adds	r3, #20
 8004e10:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e12:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e14:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e16:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004e18:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d1e5      	bne.n	8004df2 <UART_Start_Receive_DMA+0xbe>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	3314      	adds	r3, #20
 8004e2c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	69bb      	ldr	r3, [r7, #24]
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	617b      	str	r3, [r7, #20]
   return(result);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004e3c:	653b      	str	r3, [r7, #80]	; 0x50
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3314      	adds	r3, #20
 8004e44:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004e46:	627a      	str	r2, [r7, #36]	; 0x24
 8004e48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4a:	6a39      	ldr	r1, [r7, #32]
 8004e4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004e4e:	e841 2300 	strex	r3, r2, [r1]
 8004e52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e54:	69fb      	ldr	r3, [r7, #28]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d1e5      	bne.n	8004e26 <UART_Start_Receive_DMA+0xf2>

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3760      	adds	r7, #96	; 0x60
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	08004b43 	.word	0x08004b43
 8004e68:	08004c69 	.word	0x08004c69
 8004e6c:	08004c9f 	.word	0x08004c9f

08004e70 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b089      	sub	sp, #36	; 0x24
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	330c      	adds	r3, #12
 8004e7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	e853 3f00 	ldrex	r3, [r3]
 8004e86:	60bb      	str	r3, [r7, #8]
   return(result);
 8004e88:	68bb      	ldr	r3, [r7, #8]
 8004e8a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004e8e:	61fb      	str	r3, [r7, #28]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	330c      	adds	r3, #12
 8004e96:	69fa      	ldr	r2, [r7, #28]
 8004e98:	61ba      	str	r2, [r7, #24]
 8004e9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9c:	6979      	ldr	r1, [r7, #20]
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	e841 2300 	strex	r3, r2, [r1]
 8004ea4:	613b      	str	r3, [r7, #16]
   return(result);
 8004ea6:	693b      	ldr	r3, [r7, #16]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1e5      	bne.n	8004e78 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2220      	movs	r2, #32
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8004eb4:	bf00      	nop
 8004eb6:	3724      	adds	r7, #36	; 0x24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr

08004ec0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ec0:	b480      	push	{r7}
 8004ec2:	b095      	sub	sp, #84	; 0x54
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	330c      	adds	r3, #12
 8004ece:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ed2:	e853 3f00 	ldrex	r3, [r3]
 8004ed6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eda:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	330c      	adds	r3, #12
 8004ee6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004ee8:	643a      	str	r2, [r7, #64]	; 0x40
 8004eea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004eee:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004ef0:	e841 2300 	strex	r3, r2, [r1]
 8004ef4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d1e5      	bne.n	8004ec8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	3314      	adds	r3, #20
 8004f02:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f04:	6a3b      	ldr	r3, [r7, #32]
 8004f06:	e853 3f00 	ldrex	r3, [r3]
 8004f0a:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	f023 0301 	bic.w	r3, r3, #1
 8004f12:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	3314      	adds	r3, #20
 8004f1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004f1c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f20:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004f24:	e841 2300 	strex	r3, r2, [r1]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1e5      	bne.n	8004efc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d119      	bne.n	8004f6c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	330c      	adds	r3, #12
 8004f3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	e853 3f00 	ldrex	r3, [r3]
 8004f46:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f48:	68bb      	ldr	r3, [r7, #8]
 8004f4a:	f023 0310 	bic.w	r3, r3, #16
 8004f4e:	647b      	str	r3, [r7, #68]	; 0x44
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f58:	61ba      	str	r2, [r7, #24]
 8004f5a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5c:	6979      	ldr	r1, [r7, #20]
 8004f5e:	69ba      	ldr	r2, [r7, #24]
 8004f60:	e841 2300 	strex	r3, r2, [r1]
 8004f64:	613b      	str	r3, [r7, #16]
   return(result);
 8004f66:	693b      	ldr	r3, [r7, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1e5      	bne.n	8004f38 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2200      	movs	r2, #0
 8004f78:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004f7a:	bf00      	nop
 8004f7c:	3754      	adds	r7, #84	; 0x54
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b084      	sub	sp, #16
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f92:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004fa0:	68f8      	ldr	r0, [r7, #12]
 8004fa2:	f7ff fd69 	bl	8004a78 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004fa6:	bf00      	nop
 8004fa8:	3710      	adds	r7, #16
 8004faa:	46bd      	mov	sp, r7
 8004fac:	bd80      	pop	{r7, pc}

08004fae <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b085      	sub	sp, #20
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b21      	cmp	r3, #33	; 0x21
 8004fc0:	d13e      	bne.n	8005040 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	689b      	ldr	r3, [r3, #8]
 8004fc6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004fca:	d114      	bne.n	8004ff6 <UART_Transmit_IT+0x48>
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	691b      	ldr	r3, [r3, #16]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d110      	bne.n	8004ff6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	881b      	ldrh	r3, [r3, #0]
 8004fde:	461a      	mov	r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004fe8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6a1b      	ldr	r3, [r3, #32]
 8004fee:	1c9a      	adds	r2, r3, #2
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	621a      	str	r2, [r3, #32]
 8004ff4:	e008      	b.n	8005008 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	6a1b      	ldr	r3, [r3, #32]
 8004ffa:	1c59      	adds	r1, r3, #1
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	6211      	str	r1, [r2, #32]
 8005000:	781a      	ldrb	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800500c:	b29b      	uxth	r3, r3
 800500e:	3b01      	subs	r3, #1
 8005010:	b29b      	uxth	r3, r3
 8005012:	687a      	ldr	r2, [r7, #4]
 8005014:	4619      	mov	r1, r3
 8005016:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10f      	bne.n	800503c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800502a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	68da      	ldr	r2, [r3, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800503a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800503c:	2300      	movs	r3, #0
 800503e:	e000      	b.n	8005042 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
  }
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr

0800504e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800504e:	b580      	push	{r7, lr}
 8005050:	b082      	sub	sp, #8
 8005052:	af00      	add	r7, sp, #0
 8005054:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68da      	ldr	r2, [r3, #12]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005064:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2220      	movs	r2, #32
 800506a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f7fc fa18 	bl	80014a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005074:	2300      	movs	r3, #0
}
 8005076:	4618      	mov	r0, r3
 8005078:	3708      	adds	r7, #8
 800507a:	46bd      	mov	sp, r7
 800507c:	bd80      	pop	{r7, pc}

0800507e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800507e:	b580      	push	{r7, lr}
 8005080:	b08c      	sub	sp, #48	; 0x30
 8005082:	af00      	add	r7, sp, #0
 8005084:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b22      	cmp	r3, #34	; 0x22
 8005090:	f040 80ab 	bne.w	80051ea <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800509c:	d117      	bne.n	80050ce <UART_Receive_IT+0x50>
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	691b      	ldr	r3, [r3, #16]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d113      	bne.n	80050ce <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80050a6:	2300      	movs	r3, #0
 80050a8:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050ae:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	b29b      	uxth	r3, r3
 80050b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050bc:	b29a      	uxth	r2, r3
 80050be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050c6:	1c9a      	adds	r2, r3, #2
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	629a      	str	r2, [r3, #40]	; 0x28
 80050cc:	e026      	b.n	800511c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050d2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80050d4:	2300      	movs	r3, #0
 80050d6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	689b      	ldr	r3, [r3, #8]
 80050dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050e0:	d007      	beq.n	80050f2 <UART_Receive_IT+0x74>
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d10a      	bne.n	8005100 <UART_Receive_IT+0x82>
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	691b      	ldr	r3, [r3, #16]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d106      	bne.n	8005100 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e008      	b.n	8005112 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	b2db      	uxtb	r3, r3
 8005108:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800510c:	b2da      	uxtb	r2, r3
 800510e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005110:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005116:	1c5a      	adds	r2, r3, #1
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005120:	b29b      	uxth	r3, r3
 8005122:	3b01      	subs	r3, #1
 8005124:	b29b      	uxth	r3, r3
 8005126:	687a      	ldr	r2, [r7, #4]
 8005128:	4619      	mov	r1, r3
 800512a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800512c:	2b00      	cmp	r3, #0
 800512e:	d15a      	bne.n	80051e6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f022 0220 	bic.w	r2, r2, #32
 800513e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68da      	ldr	r2, [r3, #12]
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800514e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	695a      	ldr	r2, [r3, #20]
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	f022 0201 	bic.w	r2, r2, #1
 800515e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2220      	movs	r2, #32
 8005164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800516c:	2b01      	cmp	r3, #1
 800516e:	d135      	bne.n	80051dc <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2200      	movs	r2, #0
 8005174:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	330c      	adds	r3, #12
 800517c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	613b      	str	r3, [r7, #16]
   return(result);
 8005186:	693b      	ldr	r3, [r7, #16]
 8005188:	f023 0310 	bic.w	r3, r3, #16
 800518c:	627b      	str	r3, [r7, #36]	; 0x24
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	330c      	adds	r3, #12
 8005194:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005196:	623a      	str	r2, [r7, #32]
 8005198:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800519a:	69f9      	ldr	r1, [r7, #28]
 800519c:	6a3a      	ldr	r2, [r7, #32]
 800519e:	e841 2300 	strex	r3, r2, [r1]
 80051a2:	61bb      	str	r3, [r7, #24]
   return(result);
 80051a4:	69bb      	ldr	r3, [r7, #24]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d1e5      	bne.n	8005176 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f003 0310 	and.w	r3, r3, #16
 80051b4:	2b10      	cmp	r3, #16
 80051b6:	d10a      	bne.n	80051ce <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80051b8:	2300      	movs	r3, #0
 80051ba:	60fb      	str	r3, [r7, #12]
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	60fb      	str	r3, [r7, #12]
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	685b      	ldr	r3, [r3, #4]
 80051ca:	60fb      	str	r3, [r7, #12]
 80051cc:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80051d2:	4619      	mov	r1, r3
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f7fc f925 	bl	8001424 <HAL_UARTEx_RxEventCallback>
 80051da:	e002      	b.n	80051e2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80051dc:	6878      	ldr	r0, [r7, #4]
 80051de:	f7ff fc37 	bl	8004a50 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80051e2:	2300      	movs	r3, #0
 80051e4:	e002      	b.n	80051ec <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e000      	b.n	80051ec <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80051ea:	2302      	movs	r3, #2
  }
}
 80051ec:	4618      	mov	r0, r3
 80051ee:	3730      	adds	r7, #48	; 0x30
 80051f0:	46bd      	mov	sp, r7
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80051f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051f8:	b0c0      	sub	sp, #256	; 0x100
 80051fa:	af00      	add	r7, sp, #0
 80051fc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005200:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800520c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005210:	68d9      	ldr	r1, [r3, #12]
 8005212:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	ea40 0301 	orr.w	r3, r0, r1
 800521c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800521e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	431a      	orrs	r2, r3
 800522c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005230:	695b      	ldr	r3, [r3, #20]
 8005232:	431a      	orrs	r2, r3
 8005234:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	4313      	orrs	r3, r2
 800523c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800524c:	f021 010c 	bic.w	r1, r1, #12
 8005250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800525a:	430b      	orrs	r3, r1
 800525c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800525e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800526a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800526e:	6999      	ldr	r1, [r3, #24]
 8005270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005274:	681a      	ldr	r2, [r3, #0]
 8005276:	ea40 0301 	orr.w	r3, r0, r1
 800527a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800527c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005280:	681a      	ldr	r2, [r3, #0]
 8005282:	4b8f      	ldr	r3, [pc, #572]	; (80054c0 <UART_SetConfig+0x2cc>)
 8005284:	429a      	cmp	r2, r3
 8005286:	d005      	beq.n	8005294 <UART_SetConfig+0xa0>
 8005288:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	4b8d      	ldr	r3, [pc, #564]	; (80054c4 <UART_SetConfig+0x2d0>)
 8005290:	429a      	cmp	r2, r3
 8005292:	d104      	bne.n	800529e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005294:	f7fe fb30 	bl	80038f8 <HAL_RCC_GetPCLK2Freq>
 8005298:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800529c:	e003      	b.n	80052a6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800529e:	f7fe fb17 	bl	80038d0 <HAL_RCC_GetPCLK1Freq>
 80052a2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80052a6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80052b0:	f040 810c 	bne.w	80054cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80052b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052b8:	2200      	movs	r2, #0
 80052ba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80052be:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80052c2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80052c6:	4622      	mov	r2, r4
 80052c8:	462b      	mov	r3, r5
 80052ca:	1891      	adds	r1, r2, r2
 80052cc:	65b9      	str	r1, [r7, #88]	; 0x58
 80052ce:	415b      	adcs	r3, r3
 80052d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80052d2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80052d6:	4621      	mov	r1, r4
 80052d8:	eb12 0801 	adds.w	r8, r2, r1
 80052dc:	4629      	mov	r1, r5
 80052de:	eb43 0901 	adc.w	r9, r3, r1
 80052e2:	f04f 0200 	mov.w	r2, #0
 80052e6:	f04f 0300 	mov.w	r3, #0
 80052ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052f6:	4690      	mov	r8, r2
 80052f8:	4699      	mov	r9, r3
 80052fa:	4623      	mov	r3, r4
 80052fc:	eb18 0303 	adds.w	r3, r8, r3
 8005300:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005304:	462b      	mov	r3, r5
 8005306:	eb49 0303 	adc.w	r3, r9, r3
 800530a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800530e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005312:	685b      	ldr	r3, [r3, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800531a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800531e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005322:	460b      	mov	r3, r1
 8005324:	18db      	adds	r3, r3, r3
 8005326:	653b      	str	r3, [r7, #80]	; 0x50
 8005328:	4613      	mov	r3, r2
 800532a:	eb42 0303 	adc.w	r3, r2, r3
 800532e:	657b      	str	r3, [r7, #84]	; 0x54
 8005330:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005334:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005338:	f7fb fcc6 	bl	8000cc8 <__aeabi_uldivmod>
 800533c:	4602      	mov	r2, r0
 800533e:	460b      	mov	r3, r1
 8005340:	4b61      	ldr	r3, [pc, #388]	; (80054c8 <UART_SetConfig+0x2d4>)
 8005342:	fba3 2302 	umull	r2, r3, r3, r2
 8005346:	095b      	lsrs	r3, r3, #5
 8005348:	011c      	lsls	r4, r3, #4
 800534a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800534e:	2200      	movs	r2, #0
 8005350:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005354:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005358:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800535c:	4642      	mov	r2, r8
 800535e:	464b      	mov	r3, r9
 8005360:	1891      	adds	r1, r2, r2
 8005362:	64b9      	str	r1, [r7, #72]	; 0x48
 8005364:	415b      	adcs	r3, r3
 8005366:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005368:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800536c:	4641      	mov	r1, r8
 800536e:	eb12 0a01 	adds.w	sl, r2, r1
 8005372:	4649      	mov	r1, r9
 8005374:	eb43 0b01 	adc.w	fp, r3, r1
 8005378:	f04f 0200 	mov.w	r2, #0
 800537c:	f04f 0300 	mov.w	r3, #0
 8005380:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005384:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005388:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800538c:	4692      	mov	sl, r2
 800538e:	469b      	mov	fp, r3
 8005390:	4643      	mov	r3, r8
 8005392:	eb1a 0303 	adds.w	r3, sl, r3
 8005396:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800539a:	464b      	mov	r3, r9
 800539c:	eb4b 0303 	adc.w	r3, fp, r3
 80053a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	2200      	movs	r2, #0
 80053ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80053b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80053b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80053b8:	460b      	mov	r3, r1
 80053ba:	18db      	adds	r3, r3, r3
 80053bc:	643b      	str	r3, [r7, #64]	; 0x40
 80053be:	4613      	mov	r3, r2
 80053c0:	eb42 0303 	adc.w	r3, r2, r3
 80053c4:	647b      	str	r3, [r7, #68]	; 0x44
 80053c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80053ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80053ce:	f7fb fc7b 	bl	8000cc8 <__aeabi_uldivmod>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	4611      	mov	r1, r2
 80053d8:	4b3b      	ldr	r3, [pc, #236]	; (80054c8 <UART_SetConfig+0x2d4>)
 80053da:	fba3 2301 	umull	r2, r3, r3, r1
 80053de:	095b      	lsrs	r3, r3, #5
 80053e0:	2264      	movs	r2, #100	; 0x64
 80053e2:	fb02 f303 	mul.w	r3, r2, r3
 80053e6:	1acb      	subs	r3, r1, r3
 80053e8:	00db      	lsls	r3, r3, #3
 80053ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80053ee:	4b36      	ldr	r3, [pc, #216]	; (80054c8 <UART_SetConfig+0x2d4>)
 80053f0:	fba3 2302 	umull	r2, r3, r3, r2
 80053f4:	095b      	lsrs	r3, r3, #5
 80053f6:	005b      	lsls	r3, r3, #1
 80053f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80053fc:	441c      	add	r4, r3
 80053fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005402:	2200      	movs	r2, #0
 8005404:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005408:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800540c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005410:	4642      	mov	r2, r8
 8005412:	464b      	mov	r3, r9
 8005414:	1891      	adds	r1, r2, r2
 8005416:	63b9      	str	r1, [r7, #56]	; 0x38
 8005418:	415b      	adcs	r3, r3
 800541a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800541c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005420:	4641      	mov	r1, r8
 8005422:	1851      	adds	r1, r2, r1
 8005424:	6339      	str	r1, [r7, #48]	; 0x30
 8005426:	4649      	mov	r1, r9
 8005428:	414b      	adcs	r3, r1
 800542a:	637b      	str	r3, [r7, #52]	; 0x34
 800542c:	f04f 0200 	mov.w	r2, #0
 8005430:	f04f 0300 	mov.w	r3, #0
 8005434:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005438:	4659      	mov	r1, fp
 800543a:	00cb      	lsls	r3, r1, #3
 800543c:	4651      	mov	r1, sl
 800543e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005442:	4651      	mov	r1, sl
 8005444:	00ca      	lsls	r2, r1, #3
 8005446:	4610      	mov	r0, r2
 8005448:	4619      	mov	r1, r3
 800544a:	4603      	mov	r3, r0
 800544c:	4642      	mov	r2, r8
 800544e:	189b      	adds	r3, r3, r2
 8005450:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005454:	464b      	mov	r3, r9
 8005456:	460a      	mov	r2, r1
 8005458:	eb42 0303 	adc.w	r3, r2, r3
 800545c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	2200      	movs	r2, #0
 8005468:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800546c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005470:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005474:	460b      	mov	r3, r1
 8005476:	18db      	adds	r3, r3, r3
 8005478:	62bb      	str	r3, [r7, #40]	; 0x28
 800547a:	4613      	mov	r3, r2
 800547c:	eb42 0303 	adc.w	r3, r2, r3
 8005480:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005482:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005486:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800548a:	f7fb fc1d 	bl	8000cc8 <__aeabi_uldivmod>
 800548e:	4602      	mov	r2, r0
 8005490:	460b      	mov	r3, r1
 8005492:	4b0d      	ldr	r3, [pc, #52]	; (80054c8 <UART_SetConfig+0x2d4>)
 8005494:	fba3 1302 	umull	r1, r3, r3, r2
 8005498:	095b      	lsrs	r3, r3, #5
 800549a:	2164      	movs	r1, #100	; 0x64
 800549c:	fb01 f303 	mul.w	r3, r1, r3
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	00db      	lsls	r3, r3, #3
 80054a4:	3332      	adds	r3, #50	; 0x32
 80054a6:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <UART_SetConfig+0x2d4>)
 80054a8:	fba2 2303 	umull	r2, r3, r2, r3
 80054ac:	095b      	lsrs	r3, r3, #5
 80054ae:	f003 0207 	and.w	r2, r3, #7
 80054b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	4422      	add	r2, r4
 80054ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80054bc:	e106      	b.n	80056cc <UART_SetConfig+0x4d8>
 80054be:	bf00      	nop
 80054c0:	40011000 	.word	0x40011000
 80054c4:	40011400 	.word	0x40011400
 80054c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80054cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d0:	2200      	movs	r2, #0
 80054d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80054d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80054da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80054de:	4642      	mov	r2, r8
 80054e0:	464b      	mov	r3, r9
 80054e2:	1891      	adds	r1, r2, r2
 80054e4:	6239      	str	r1, [r7, #32]
 80054e6:	415b      	adcs	r3, r3
 80054e8:	627b      	str	r3, [r7, #36]	; 0x24
 80054ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80054ee:	4641      	mov	r1, r8
 80054f0:	1854      	adds	r4, r2, r1
 80054f2:	4649      	mov	r1, r9
 80054f4:	eb43 0501 	adc.w	r5, r3, r1
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	00eb      	lsls	r3, r5, #3
 8005502:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005506:	00e2      	lsls	r2, r4, #3
 8005508:	4614      	mov	r4, r2
 800550a:	461d      	mov	r5, r3
 800550c:	4643      	mov	r3, r8
 800550e:	18e3      	adds	r3, r4, r3
 8005510:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005514:	464b      	mov	r3, r9
 8005516:	eb45 0303 	adc.w	r3, r5, r3
 800551a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800552a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800552e:	f04f 0200 	mov.w	r2, #0
 8005532:	f04f 0300 	mov.w	r3, #0
 8005536:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800553a:	4629      	mov	r1, r5
 800553c:	008b      	lsls	r3, r1, #2
 800553e:	4621      	mov	r1, r4
 8005540:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005544:	4621      	mov	r1, r4
 8005546:	008a      	lsls	r2, r1, #2
 8005548:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800554c:	f7fb fbbc 	bl	8000cc8 <__aeabi_uldivmod>
 8005550:	4602      	mov	r2, r0
 8005552:	460b      	mov	r3, r1
 8005554:	4b60      	ldr	r3, [pc, #384]	; (80056d8 <UART_SetConfig+0x4e4>)
 8005556:	fba3 2302 	umull	r2, r3, r3, r2
 800555a:	095b      	lsrs	r3, r3, #5
 800555c:	011c      	lsls	r4, r3, #4
 800555e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005562:	2200      	movs	r2, #0
 8005564:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005568:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800556c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005570:	4642      	mov	r2, r8
 8005572:	464b      	mov	r3, r9
 8005574:	1891      	adds	r1, r2, r2
 8005576:	61b9      	str	r1, [r7, #24]
 8005578:	415b      	adcs	r3, r3
 800557a:	61fb      	str	r3, [r7, #28]
 800557c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005580:	4641      	mov	r1, r8
 8005582:	1851      	adds	r1, r2, r1
 8005584:	6139      	str	r1, [r7, #16]
 8005586:	4649      	mov	r1, r9
 8005588:	414b      	adcs	r3, r1
 800558a:	617b      	str	r3, [r7, #20]
 800558c:	f04f 0200 	mov.w	r2, #0
 8005590:	f04f 0300 	mov.w	r3, #0
 8005594:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005598:	4659      	mov	r1, fp
 800559a:	00cb      	lsls	r3, r1, #3
 800559c:	4651      	mov	r1, sl
 800559e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055a2:	4651      	mov	r1, sl
 80055a4:	00ca      	lsls	r2, r1, #3
 80055a6:	4610      	mov	r0, r2
 80055a8:	4619      	mov	r1, r3
 80055aa:	4603      	mov	r3, r0
 80055ac:	4642      	mov	r2, r8
 80055ae:	189b      	adds	r3, r3, r2
 80055b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055b4:	464b      	mov	r3, r9
 80055b6:	460a      	mov	r2, r1
 80055b8:	eb42 0303 	adc.w	r3, r2, r3
 80055bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80055c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80055ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80055cc:	f04f 0200 	mov.w	r2, #0
 80055d0:	f04f 0300 	mov.w	r3, #0
 80055d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80055d8:	4649      	mov	r1, r9
 80055da:	008b      	lsls	r3, r1, #2
 80055dc:	4641      	mov	r1, r8
 80055de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055e2:	4641      	mov	r1, r8
 80055e4:	008a      	lsls	r2, r1, #2
 80055e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80055ea:	f7fb fb6d 	bl	8000cc8 <__aeabi_uldivmod>
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4611      	mov	r1, r2
 80055f4:	4b38      	ldr	r3, [pc, #224]	; (80056d8 <UART_SetConfig+0x4e4>)
 80055f6:	fba3 2301 	umull	r2, r3, r3, r1
 80055fa:	095b      	lsrs	r3, r3, #5
 80055fc:	2264      	movs	r2, #100	; 0x64
 80055fe:	fb02 f303 	mul.w	r3, r2, r3
 8005602:	1acb      	subs	r3, r1, r3
 8005604:	011b      	lsls	r3, r3, #4
 8005606:	3332      	adds	r3, #50	; 0x32
 8005608:	4a33      	ldr	r2, [pc, #204]	; (80056d8 <UART_SetConfig+0x4e4>)
 800560a:	fba2 2303 	umull	r2, r3, r2, r3
 800560e:	095b      	lsrs	r3, r3, #5
 8005610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005614:	441c      	add	r4, r3
 8005616:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800561a:	2200      	movs	r2, #0
 800561c:	673b      	str	r3, [r7, #112]	; 0x70
 800561e:	677a      	str	r2, [r7, #116]	; 0x74
 8005620:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005624:	4642      	mov	r2, r8
 8005626:	464b      	mov	r3, r9
 8005628:	1891      	adds	r1, r2, r2
 800562a:	60b9      	str	r1, [r7, #8]
 800562c:	415b      	adcs	r3, r3
 800562e:	60fb      	str	r3, [r7, #12]
 8005630:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005634:	4641      	mov	r1, r8
 8005636:	1851      	adds	r1, r2, r1
 8005638:	6039      	str	r1, [r7, #0]
 800563a:	4649      	mov	r1, r9
 800563c:	414b      	adcs	r3, r1
 800563e:	607b      	str	r3, [r7, #4]
 8005640:	f04f 0200 	mov.w	r2, #0
 8005644:	f04f 0300 	mov.w	r3, #0
 8005648:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800564c:	4659      	mov	r1, fp
 800564e:	00cb      	lsls	r3, r1, #3
 8005650:	4651      	mov	r1, sl
 8005652:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005656:	4651      	mov	r1, sl
 8005658:	00ca      	lsls	r2, r1, #3
 800565a:	4610      	mov	r0, r2
 800565c:	4619      	mov	r1, r3
 800565e:	4603      	mov	r3, r0
 8005660:	4642      	mov	r2, r8
 8005662:	189b      	adds	r3, r3, r2
 8005664:	66bb      	str	r3, [r7, #104]	; 0x68
 8005666:	464b      	mov	r3, r9
 8005668:	460a      	mov	r2, r1
 800566a:	eb42 0303 	adc.w	r3, r2, r3
 800566e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	663b      	str	r3, [r7, #96]	; 0x60
 800567a:	667a      	str	r2, [r7, #100]	; 0x64
 800567c:	f04f 0200 	mov.w	r2, #0
 8005680:	f04f 0300 	mov.w	r3, #0
 8005684:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005688:	4649      	mov	r1, r9
 800568a:	008b      	lsls	r3, r1, #2
 800568c:	4641      	mov	r1, r8
 800568e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005692:	4641      	mov	r1, r8
 8005694:	008a      	lsls	r2, r1, #2
 8005696:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800569a:	f7fb fb15 	bl	8000cc8 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	; (80056d8 <UART_SetConfig+0x4e4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	; 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	011b      	lsls	r3, r3, #4
 80056b4:	3332      	adds	r3, #50	; 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	; (80056d8 <UART_SetConfig+0x4e4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 020f 	and.w	r2, r3, #15
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
}
 80056cc:	bf00      	nop
 80056ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80056d2:	46bd      	mov	sp, r7
 80056d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056d8:	51eb851f 	.word	0x51eb851f

080056dc <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80056dc:	b580      	push	{r7, lr}
 80056de:	b082      	sub	sp, #8
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
 80056e4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 80056e6:	683a      	ldr	r2, [r7, #0]
 80056e8:	2101      	movs	r1, #1
 80056ea:	4842      	ldr	r0, [pc, #264]	; (80057f4 <network_configure_activations+0x118>)
 80056ec:	f000 fbd8 	bl	8005ea0 <ai_platform_get_activations_map>
 80056f0:	4603      	mov	r3, r0
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d073      	beq.n	80057de <network_configure_activations+0x102>
    /* Updating activations (byte) offsets */
    
    serving_default_x0_output_array.data = AI_PTR(g_network_activations_map[0] + 1080);
 80056f6:	4b3f      	ldr	r3, [pc, #252]	; (80057f4 <network_configure_activations+0x118>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 80056fe:	4a3e      	ldr	r2, [pc, #248]	; (80057f8 <network_configure_activations+0x11c>)
 8005700:	6093      	str	r3, [r2, #8]
    serving_default_x0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1080);
 8005702:	4b3c      	ldr	r3, [pc, #240]	; (80057f4 <network_configure_activations+0x118>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800570a:	4a3b      	ldr	r2, [pc, #236]	; (80057f8 <network_configure_activations+0x11c>)
 800570c:	60d3      	str	r3, [r2, #12]
    
    lstm_0_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 2760);
 800570e:	4b39      	ldr	r3, [pc, #228]	; (80057f4 <network_configure_activations+0x118>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8005716:	4a39      	ldr	r2, [pc, #228]	; (80057fc <network_configure_activations+0x120>)
 8005718:	6093      	str	r3, [r2, #8]
    lstm_0_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 2760);
 800571a:	4b36      	ldr	r3, [pc, #216]	; (80057f4 <network_configure_activations+0x118>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 8005722:	4a36      	ldr	r2, [pc, #216]	; (80057fc <network_configure_activations+0x120>)
 8005724:	60d3      	str	r3, [r2, #12]
    
    lstm_0_output0_array.data = AI_PTR(g_network_activations_map[0] + 4440);
 8005726:	4b33      	ldr	r3, [pc, #204]	; (80057f4 <network_configure_activations+0x118>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800572e:	3318      	adds	r3, #24
 8005730:	4a33      	ldr	r2, [pc, #204]	; (8005800 <network_configure_activations+0x124>)
 8005732:	6093      	str	r3, [r2, #8]
    lstm_0_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 4440);
 8005734:	4b2f      	ldr	r3, [pc, #188]	; (80057f4 <network_configure_activations+0x118>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 800573c:	3318      	adds	r3, #24
 800573e:	4a30      	ldr	r2, [pc, #192]	; (8005800 <network_configure_activations+0x124>)
 8005740:	60d3      	str	r3, [r2, #12]
    
    lstm_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 8005742:	4b2c      	ldr	r3, [pc, #176]	; (80057f4 <network_configure_activations+0x118>)
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800574a:	4a2e      	ldr	r2, [pc, #184]	; (8005804 <network_configure_activations+0x128>)
 800574c:	6093      	str	r3, [r2, #8]
    lstm_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 3600);
 800574e:	4b29      	ldr	r3, [pc, #164]	; (80057f4 <network_configure_activations+0x118>)
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8005756:	4a2b      	ldr	r2, [pc, #172]	; (8005804 <network_configure_activations+0x128>)
 8005758:	60d3      	str	r3, [r2, #12]
    
    lstm_1_output0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800575a:	4b26      	ldr	r3, [pc, #152]	; (80057f4 <network_configure_activations+0x118>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	4a2a      	ldr	r2, [pc, #168]	; (8005808 <network_configure_activations+0x12c>)
 8005760:	6093      	str	r3, [r2, #8]
    lstm_1_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005762:	4b24      	ldr	r3, [pc, #144]	; (80057f4 <network_configure_activations+0x118>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4a28      	ldr	r2, [pc, #160]	; (8005808 <network_configure_activations+0x12c>)
 8005768:	60d3      	str	r3, [r2, #12]
    
    gemm_3_output_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 800576a:	4b22      	ldr	r3, [pc, #136]	; (80057f4 <network_configure_activations+0x118>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8005772:	4a26      	ldr	r2, [pc, #152]	; (800580c <network_configure_activations+0x130>)
 8005774:	6093      	str	r3, [r2, #8]
    gemm_3_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3600);
 8005776:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <network_configure_activations+0x118>)
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800577e:	4a23      	ldr	r2, [pc, #140]	; (800580c <network_configure_activations+0x130>)
 8005780:	60d3      	str	r3, [r2, #12]
    
    nl_3_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005782:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <network_configure_activations+0x118>)
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4a22      	ldr	r2, [pc, #136]	; (8005810 <network_configure_activations+0x134>)
 8005788:	6093      	str	r3, [r2, #8]
    nl_3_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800578a:	4b1a      	ldr	r3, [pc, #104]	; (80057f4 <network_configure_activations+0x118>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4a20      	ldr	r2, [pc, #128]	; (8005810 <network_configure_activations+0x134>)
 8005790:	60d3      	str	r3, [r2, #12]
    
    gemm_4_output_array.data = AI_PTR(g_network_activations_map[0] + 120);
 8005792:	4b18      	ldr	r3, [pc, #96]	; (80057f4 <network_configure_activations+0x118>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	3378      	adds	r3, #120	; 0x78
 8005798:	4a1e      	ldr	r2, [pc, #120]	; (8005814 <network_configure_activations+0x138>)
 800579a:	6093      	str	r3, [r2, #8]
    gemm_4_output_array.data_start = AI_PTR(g_network_activations_map[0] + 120);
 800579c:	4b15      	ldr	r3, [pc, #84]	; (80057f4 <network_configure_activations+0x118>)
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	3378      	adds	r3, #120	; 0x78
 80057a2:	4a1c      	ldr	r2, [pc, #112]	; (8005814 <network_configure_activations+0x138>)
 80057a4:	60d3      	str	r3, [r2, #12]
    
    nl_4_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80057a6:	4b13      	ldr	r3, [pc, #76]	; (80057f4 <network_configure_activations+0x118>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a1b      	ldr	r2, [pc, #108]	; (8005818 <network_configure_activations+0x13c>)
 80057ac:	6093      	str	r3, [r2, #8]
    nl_4_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80057ae:	4b11      	ldr	r3, [pc, #68]	; (80057f4 <network_configure_activations+0x118>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	4a19      	ldr	r2, [pc, #100]	; (8005818 <network_configure_activations+0x13c>)
 80057b4:	60d3      	str	r3, [r2, #12]
    
    gemm_5_output_array.data = AI_PTR(g_network_activations_map[0] + 60);
 80057b6:	4b0f      	ldr	r3, [pc, #60]	; (80057f4 <network_configure_activations+0x118>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	333c      	adds	r3, #60	; 0x3c
 80057bc:	4a17      	ldr	r2, [pc, #92]	; (800581c <network_configure_activations+0x140>)
 80057be:	6093      	str	r3, [r2, #8]
    gemm_5_output_array.data_start = AI_PTR(g_network_activations_map[0] + 60);
 80057c0:	4b0c      	ldr	r3, [pc, #48]	; (80057f4 <network_configure_activations+0x118>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	333c      	adds	r3, #60	; 0x3c
 80057c6:	4a15      	ldr	r2, [pc, #84]	; (800581c <network_configure_activations+0x140>)
 80057c8:	60d3      	str	r3, [r2, #12]
    
    nl_5_nl_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80057ca:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <network_configure_activations+0x118>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	4a14      	ldr	r2, [pc, #80]	; (8005820 <network_configure_activations+0x144>)
 80057d0:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80057d2:	4b08      	ldr	r3, [pc, #32]	; (80057f4 <network_configure_activations+0x118>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	4a12      	ldr	r2, [pc, #72]	; (8005820 <network_configure_activations+0x144>)
 80057d8:	60d3      	str	r3, [r2, #12]
    
    return true;
 80057da:	2301      	movs	r3, #1
 80057dc:	e005      	b.n	80057ea <network_configure_activations+0x10e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80057de:	2213      	movs	r2, #19
 80057e0:	2130      	movs	r1, #48	; 0x30
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 fc40 	bl	8006068 <ai_platform_network_set_error>
  return false;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3708      	adds	r7, #8
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}
 80057f2:	bf00      	nop
 80057f4:	200043e8 	.word	0x200043e8
 80057f8:	200000d0 	.word	0x200000d0
 80057fc:	200000b0 	.word	0x200000b0
 8005800:	200000e0 	.word	0x200000e0
 8005804:	200000c0 	.word	0x200000c0
 8005808:	200000f0 	.word	0x200000f0
 800580c:	20000100 	.word	0x20000100
 8005810:	20000110 	.word	0x20000110
 8005814:	20000120 	.word	0x20000120
 8005818:	20000130 	.word	0x20000130
 800581c:	20000140 	.word	0x20000140
 8005820:	20000150 	.word	0x20000150

08005824 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b082      	sub	sp, #8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
 800582c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	2101      	movs	r1, #1
 8005832:	489a      	ldr	r0, [pc, #616]	; (8005a9c <network_configure_weights+0x278>)
 8005834:	f000 fae0 	bl	8005df8 <ai_platform_get_weights_map>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8124 	beq.w	8005a88 <network_configure_weights+0x264>
    /* Updating weights (byte) offsets */
    
    lstm_1_recurrent_array.format |= AI_FMT_FLAG_CONST;
 8005840:	4b97      	ldr	r3, [pc, #604]	; (8005aa0 <network_configure_weights+0x27c>)
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005848:	4a95      	ldr	r2, [pc, #596]	; (8005aa0 <network_configure_weights+0x27c>)
 800584a:	6013      	str	r3, [r2, #0]
    lstm_1_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 0);
 800584c:	4b93      	ldr	r3, [pc, #588]	; (8005a9c <network_configure_weights+0x278>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	4a93      	ldr	r2, [pc, #588]	; (8005aa0 <network_configure_weights+0x27c>)
 8005852:	6093      	str	r3, [r2, #8]
    lstm_1_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 8005854:	4b91      	ldr	r3, [pc, #580]	; (8005a9c <network_configure_weights+0x278>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	4a91      	ldr	r2, [pc, #580]	; (8005aa0 <network_configure_weights+0x27c>)
 800585a:	60d3      	str	r3, [r2, #12]
    
    lstm_1_peephole_array.format |= AI_FMT_FLAG_CONST;
 800585c:	4b91      	ldr	r3, [pc, #580]	; (8005aa4 <network_configure_weights+0x280>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005864:	4a8f      	ldr	r2, [pc, #572]	; (8005aa4 <network_configure_weights+0x280>)
 8005866:	6013      	str	r3, [r2, #0]
    lstm_1_peephole_array.data = AI_PTR(g_network_weights_map[0] + 14400);
 8005868:	4b8c      	ldr	r3, [pc, #560]	; (8005a9c <network_configure_weights+0x278>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f503 5361 	add.w	r3, r3, #14400	; 0x3840
 8005870:	4a8c      	ldr	r2, [pc, #560]	; (8005aa4 <network_configure_weights+0x280>)
 8005872:	6093      	str	r3, [r2, #8]
    lstm_1_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 14400);
 8005874:	4b89      	ldr	r3, [pc, #548]	; (8005a9c <network_configure_weights+0x278>)
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f503 5361 	add.w	r3, r3, #14400	; 0x3840
 800587c:	4a89      	ldr	r2, [pc, #548]	; (8005aa4 <network_configure_weights+0x280>)
 800587e:	60d3      	str	r3, [r2, #12]
    
    lstm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005880:	4b89      	ldr	r3, [pc, #548]	; (8005aa8 <network_configure_weights+0x284>)
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005888:	4a87      	ldr	r2, [pc, #540]	; (8005aa8 <network_configure_weights+0x284>)
 800588a:	6013      	str	r3, [r2, #0]
    lstm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 14760);
 800588c:	4b83      	ldr	r3, [pc, #524]	; (8005a9c <network_configure_weights+0x278>)
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f503 5366 	add.w	r3, r3, #14720	; 0x3980
 8005894:	3328      	adds	r3, #40	; 0x28
 8005896:	4a84      	ldr	r2, [pc, #528]	; (8005aa8 <network_configure_weights+0x284>)
 8005898:	6093      	str	r3, [r2, #8]
    lstm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 14760);
 800589a:	4b80      	ldr	r3, [pc, #512]	; (8005a9c <network_configure_weights+0x278>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f503 5366 	add.w	r3, r3, #14720	; 0x3980
 80058a2:	3328      	adds	r3, #40	; 0x28
 80058a4:	4a80      	ldr	r2, [pc, #512]	; (8005aa8 <network_configure_weights+0x284>)
 80058a6:	60d3      	str	r3, [r2, #12]
    
    gemm_3_weights_array.format |= AI_FMT_FLAG_CONST;
 80058a8:	4b80      	ldr	r3, [pc, #512]	; (8005aac <network_configure_weights+0x288>)
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058b0:	4a7e      	ldr	r2, [pc, #504]	; (8005aac <network_configure_weights+0x288>)
 80058b2:	6013      	str	r3, [r2, #0]
    gemm_3_weights_array.data = AI_PTR(g_network_weights_map[0] + 15240);
 80058b4:	4b79      	ldr	r3, [pc, #484]	; (8005a9c <network_configure_weights+0x278>)
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 80058bc:	3308      	adds	r3, #8
 80058be:	4a7b      	ldr	r2, [pc, #492]	; (8005aac <network_configure_weights+0x288>)
 80058c0:	6093      	str	r3, [r2, #8]
    gemm_3_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 15240);
 80058c2:	4b76      	ldr	r3, [pc, #472]	; (8005a9c <network_configure_weights+0x278>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f503 536e 	add.w	r3, r3, #15232	; 0x3b80
 80058ca:	3308      	adds	r3, #8
 80058cc:	4a77      	ldr	r2, [pc, #476]	; (8005aac <network_configure_weights+0x288>)
 80058ce:	60d3      	str	r3, [r2, #12]
    
    gemm_3_bias_array.format |= AI_FMT_FLAG_CONST;
 80058d0:	4b77      	ldr	r3, [pc, #476]	; (8005ab0 <network_configure_weights+0x28c>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d8:	4a75      	ldr	r2, [pc, #468]	; (8005ab0 <network_configure_weights+0x28c>)
 80058da:	6013      	str	r3, [r2, #0]
    gemm_3_bias_array.data = AI_PTR(g_network_weights_map[0] + 123240);
 80058dc:	4b6f      	ldr	r3, [pc, #444]	; (8005a9c <network_configure_weights+0x278>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 80058e4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058e8:	4a71      	ldr	r2, [pc, #452]	; (8005ab0 <network_configure_weights+0x28c>)
 80058ea:	6093      	str	r3, [r2, #8]
    gemm_3_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 123240);
 80058ec:	4b6b      	ldr	r3, [pc, #428]	; (8005a9c <network_configure_weights+0x278>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 80058f4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80058f8:	4a6d      	ldr	r2, [pc, #436]	; (8005ab0 <network_configure_weights+0x28c>)
 80058fa:	60d3      	str	r3, [r2, #12]
    
    gemm_4_weights_array.format |= AI_FMT_FLAG_CONST;
 80058fc:	4b6d      	ldr	r3, [pc, #436]	; (8005ab4 <network_configure_weights+0x290>)
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005904:	4a6b      	ldr	r2, [pc, #428]	; (8005ab4 <network_configure_weights+0x290>)
 8005906:	6013      	str	r3, [r2, #0]
    gemm_4_weights_array.data = AI_PTR(g_network_weights_map[0] + 123360);
 8005908:	4b64      	ldr	r3, [pc, #400]	; (8005a9c <network_configure_weights+0x278>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 8005910:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005914:	4a67      	ldr	r2, [pc, #412]	; (8005ab4 <network_configure_weights+0x290>)
 8005916:	6093      	str	r3, [r2, #8]
    gemm_4_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 123360);
 8005918:	4b60      	ldr	r3, [pc, #384]	; (8005a9c <network_configure_weights+0x278>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	f503 33f0 	add.w	r3, r3, #122880	; 0x1e000
 8005920:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8005924:	4a63      	ldr	r2, [pc, #396]	; (8005ab4 <network_configure_weights+0x290>)
 8005926:	60d3      	str	r3, [r2, #12]
    
    gemm_4_bias_array.format |= AI_FMT_FLAG_CONST;
 8005928:	4b63      	ldr	r3, [pc, #396]	; (8005ab8 <network_configure_weights+0x294>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005930:	4a61      	ldr	r2, [pc, #388]	; (8005ab8 <network_configure_weights+0x294>)
 8005932:	6013      	str	r3, [r2, #0]
    gemm_4_bias_array.data = AI_PTR(g_network_weights_map[0] + 125160);
 8005934:	4b59      	ldr	r3, [pc, #356]	; (8005a9c <network_configure_weights+0x278>)
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800593c:	33e8      	adds	r3, #232	; 0xe8
 800593e:	4a5e      	ldr	r2, [pc, #376]	; (8005ab8 <network_configure_weights+0x294>)
 8005940:	6093      	str	r3, [r2, #8]
    gemm_4_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 125160);
 8005942:	4b56      	ldr	r3, [pc, #344]	; (8005a9c <network_configure_weights+0x278>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 800594a:	33e8      	adds	r3, #232	; 0xe8
 800594c:	4a5a      	ldr	r2, [pc, #360]	; (8005ab8 <network_configure_weights+0x294>)
 800594e:	60d3      	str	r3, [r2, #12]
    
    gemm_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005950:	4b5a      	ldr	r3, [pc, #360]	; (8005abc <network_configure_weights+0x298>)
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005958:	4a58      	ldr	r2, [pc, #352]	; (8005abc <network_configure_weights+0x298>)
 800595a:	6013      	str	r3, [r2, #0]
    gemm_5_weights_array.data = AI_PTR(g_network_weights_map[0] + 125220);
 800595c:	4b4f      	ldr	r3, [pc, #316]	; (8005a9c <network_configure_weights+0x278>)
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8005964:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005968:	4a54      	ldr	r2, [pc, #336]	; (8005abc <network_configure_weights+0x298>)
 800596a:	6093      	str	r3, [r2, #8]
    gemm_5_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 125220);
 800596c:	4b4b      	ldr	r3, [pc, #300]	; (8005a9c <network_configure_weights+0x278>)
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8005974:	f503 7392 	add.w	r3, r3, #292	; 0x124
 8005978:	4a50      	ldr	r2, [pc, #320]	; (8005abc <network_configure_weights+0x298>)
 800597a:	60d3      	str	r3, [r2, #12]
    
    gemm_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800597c:	4b50      	ldr	r3, [pc, #320]	; (8005ac0 <network_configure_weights+0x29c>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005984:	4a4e      	ldr	r2, [pc, #312]	; (8005ac0 <network_configure_weights+0x29c>)
 8005986:	6013      	str	r3, [r2, #0]
    gemm_5_bias_array.data = AI_PTR(g_network_weights_map[0] + 125280);
 8005988:	4b44      	ldr	r3, [pc, #272]	; (8005a9c <network_configure_weights+0x278>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 8005990:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005994:	4a4a      	ldr	r2, [pc, #296]	; (8005ac0 <network_configure_weights+0x29c>)
 8005996:	6093      	str	r3, [r2, #8]
    gemm_5_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 125280);
 8005998:	4b40      	ldr	r3, [pc, #256]	; (8005a9c <network_configure_weights+0x278>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80059a0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80059a4:	4a46      	ldr	r2, [pc, #280]	; (8005ac0 <network_configure_weights+0x29c>)
 80059a6:	60d3      	str	r3, [r2, #12]
    
    lstm_0_kernel_array.format |= AI_FMT_FLAG_CONST;
 80059a8:	4b46      	ldr	r3, [pc, #280]	; (8005ac4 <network_configure_weights+0x2a0>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059b0:	4a44      	ldr	r2, [pc, #272]	; (8005ac4 <network_configure_weights+0x2a0>)
 80059b2:	6013      	str	r3, [r2, #0]
    lstm_0_kernel_array.data = AI_PTR(g_network_weights_map[0] + 125284);
 80059b4:	4b39      	ldr	r3, [pc, #228]	; (8005a9c <network_configure_weights+0x278>)
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80059bc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059c0:	4a40      	ldr	r2, [pc, #256]	; (8005ac4 <network_configure_weights+0x2a0>)
 80059c2:	6093      	str	r3, [r2, #8]
    lstm_0_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 125284);
 80059c4:	4b35      	ldr	r3, [pc, #212]	; (8005a9c <network_configure_weights+0x278>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f503 33f4 	add.w	r3, r3, #124928	; 0x1e800
 80059cc:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80059d0:	4a3c      	ldr	r2, [pc, #240]	; (8005ac4 <network_configure_weights+0x2a0>)
 80059d2:	60d3      	str	r3, [r2, #12]
    
    lstm_0_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80059d4:	4b3c      	ldr	r3, [pc, #240]	; (8005ac8 <network_configure_weights+0x2a4>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059dc:	4a3a      	ldr	r2, [pc, #232]	; (8005ac8 <network_configure_weights+0x2a4>)
 80059de:	6013      	str	r3, [r2, #0]
    lstm_0_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 138724);
 80059e0:	4b2e      	ldr	r3, [pc, #184]	; (8005a9c <network_configure_weights+0x278>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80059e8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059ec:	4a36      	ldr	r2, [pc, #216]	; (8005ac8 <network_configure_weights+0x2a4>)
 80059ee:	6093      	str	r3, [r2, #8]
    lstm_0_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 138724);
 80059f0:	4b2a      	ldr	r3, [pc, #168]	; (8005a9c <network_configure_weights+0x278>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f503 3307 	add.w	r3, r3, #138240	; 0x21c00
 80059f8:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80059fc:	4a32      	ldr	r2, [pc, #200]	; (8005ac8 <network_configure_weights+0x2a4>)
 80059fe:	60d3      	str	r3, [r2, #12]
    
    lstm_0_peephole_array.format |= AI_FMT_FLAG_CONST;
 8005a00:	4b32      	ldr	r3, [pc, #200]	; (8005acc <network_configure_weights+0x2a8>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a08:	4a30      	ldr	r2, [pc, #192]	; (8005acc <network_configure_weights+0x2a8>)
 8005a0a:	6013      	str	r3, [r2, #0]
    lstm_0_peephole_array.data = AI_PTR(g_network_weights_map[0] + 196324);
 8005a0c:	4b23      	ldr	r3, [pc, #140]	; (8005a9c <network_configure_weights+0x278>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f503 333f 	add.w	r3, r3, #195584	; 0x2fc00
 8005a14:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8005a18:	4a2c      	ldr	r2, [pc, #176]	; (8005acc <network_configure_weights+0x2a8>)
 8005a1a:	6093      	str	r3, [r2, #8]
    lstm_0_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 196324);
 8005a1c:	4b1f      	ldr	r3, [pc, #124]	; (8005a9c <network_configure_weights+0x278>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f503 333f 	add.w	r3, r3, #195584	; 0x2fc00
 8005a24:	f503 7339 	add.w	r3, r3, #740	; 0x2e4
 8005a28:	4a28      	ldr	r2, [pc, #160]	; (8005acc <network_configure_weights+0x2a8>)
 8005a2a:	60d3      	str	r3, [r2, #12]
    
    lstm_0_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a2c:	4b28      	ldr	r3, [pc, #160]	; (8005ad0 <network_configure_weights+0x2ac>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a34:	4a26      	ldr	r2, [pc, #152]	; (8005ad0 <network_configure_weights+0x2ac>)
 8005a36:	6013      	str	r3, [r2, #0]
    lstm_0_bias_array.data = AI_PTR(g_network_weights_map[0] + 197044);
 8005a38:	4b18      	ldr	r3, [pc, #96]	; (8005a9c <network_configure_weights+0x278>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005a40:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005a44:	4a22      	ldr	r2, [pc, #136]	; (8005ad0 <network_configure_weights+0x2ac>)
 8005a46:	6093      	str	r3, [r2, #8]
    lstm_0_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 197044);
 8005a48:	4b14      	ldr	r3, [pc, #80]	; (8005a9c <network_configure_weights+0x278>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f503 3340 	add.w	r3, r3, #196608	; 0x30000
 8005a50:	f503 73da 	add.w	r3, r3, #436	; 0x1b4
 8005a54:	4a1e      	ldr	r2, [pc, #120]	; (8005ad0 <network_configure_weights+0x2ac>)
 8005a56:	60d3      	str	r3, [r2, #12]
    
    lstm_1_kernel_array.format |= AI_FMT_FLAG_CONST;
 8005a58:	4b1e      	ldr	r3, [pc, #120]	; (8005ad4 <network_configure_weights+0x2b0>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a60:	4a1c      	ldr	r2, [pc, #112]	; (8005ad4 <network_configure_weights+0x2b0>)
 8005a62:	6013      	str	r3, [r2, #0]
    lstm_1_kernel_array.data = AI_PTR(g_network_weights_map[0] + 198004);
 8005a64:	4b0d      	ldr	r3, [pc, #52]	; (8005a9c <network_configure_weights+0x278>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	f503 3341 	add.w	r3, r3, #197632	; 0x30400
 8005a6c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8005a70:	4a18      	ldr	r2, [pc, #96]	; (8005ad4 <network_configure_weights+0x2b0>)
 8005a72:	6093      	str	r3, [r2, #8]
    lstm_1_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 198004);
 8005a74:	4b09      	ldr	r3, [pc, #36]	; (8005a9c <network_configure_weights+0x278>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f503 3341 	add.w	r3, r3, #197632	; 0x30400
 8005a7c:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 8005a80:	4a14      	ldr	r2, [pc, #80]	; (8005ad4 <network_configure_weights+0x2b0>)
 8005a82:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e005      	b.n	8005a94 <network_configure_weights+0x270>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005a88:	2212      	movs	r2, #18
 8005a8a:	2130      	movs	r1, #48	; 0x30
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 faeb 	bl	8006068 <ai_platform_network_set_error>
  return false;
 8005a92:	2300      	movs	r3, #0
}
 8005a94:	4618      	mov	r0, r3
 8005a96:	3708      	adds	r7, #8
 8005a98:	46bd      	mov	sp, r7
 8005a9a:	bd80      	pop	{r7, pc}
 8005a9c:	200043ec 	.word	0x200043ec
 8005aa0:	20000020 	.word	0x20000020
 8005aa4:	20000030 	.word	0x20000030
 8005aa8:	20000040 	.word	0x20000040
 8005aac:	20000050 	.word	0x20000050
 8005ab0:	20000060 	.word	0x20000060
 8005ab4:	20000070 	.word	0x20000070
 8005ab8:	20000080 	.word	0x20000080
 8005abc:	20000090 	.word	0x20000090
 8005ac0:	200000a0 	.word	0x200000a0
 8005ac4:	20000160 	.word	0x20000160
 8005ac8:	20000170 	.word	0x20000170
 8005acc:	20000180 	.word	0x20000180
 8005ad0:	20000190 	.word	0x20000190
 8005ad4:	200001a0 	.word	0x200001a0

08005ad8 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa53 	bl	8005f8c <ai_platform_network_get_error>
 8005ae6:	4603      	mov	r3, r0
}
 8005ae8:	4618      	mov	r0, r3
 8005aea:	3708      	adds	r7, #8
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af02      	add	r7, sp, #8
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005afa:	2300      	movs	r3, #0
 8005afc:	9301      	str	r3, [sp, #4]
 8005afe:	2305      	movs	r3, #5
 8005b00:	9300      	str	r3, [sp, #0]
 8005b02:	2301      	movs	r3, #1
 8005b04:	4a04      	ldr	r2, [pc, #16]	; (8005b18 <ai_network_create+0x28>)
 8005b06:	6839      	ldr	r1, [r7, #0]
 8005b08:	6878      	ldr	r0, [r7, #4]
 8005b0a:	f000 fc59 	bl	80063c0 <ai_platform_network_create>
 8005b0e:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005b10:	4618      	mov	r0, r3
 8005b12:	3708      	adds	r7, #8
 8005b14:	46bd      	mov	sp, r7
 8005b16:	bd80      	pop	{r7, pc}
 8005b18:	20000bbc 	.word	0x20000bbc

08005b1c <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b096      	sub	sp, #88	; 0x58
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	60f8      	str	r0, [r7, #12]
 8005b24:	60b9      	str	r1, [r7, #8]
 8005b26:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005b28:	2100      	movs	r1, #0
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f7ff ffe0 	bl	8005af0 <ai_network_create>
 8005b30:	4603      	mov	r3, r0
 8005b32:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005b34:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d001      	beq.n	8005b40 <ai_network_create_and_init+0x24>
        return err;
 8005b3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b3e:	e05d      	b.n	8005bfc <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8005b40:	f107 0314 	add.w	r3, r7, #20
 8005b44:	4618      	mov	r0, r3
 8005b46:	f000 f8dd 	bl	8005d04 <ai_network_data_params_get>
 8005b4a:	4603      	mov	r3, r0
 8005b4c:	f083 0301 	eor.w	r3, r3, #1
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d008      	beq.n	8005b68 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f7ff ffbc 	bl	8005ad8 <ai_network_get_error>
 8005b60:	4603      	mov	r3, r0
 8005b62:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005b64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b66:	e049      	b.n	8005bfc <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d016      	beq.n	8005b9c <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005b6e:	2300      	movs	r3, #0
 8005b70:	657b      	str	r3, [r7, #84]	; 0x54
 8005b72:	e00e      	b.n	8005b92 <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005b76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b78:	009b      	lsls	r3, r3, #2
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	f107 0314 	add.w	r3, r7, #20
 8005b84:	330c      	adds	r3, #12
 8005b86:	4618      	mov	r0, r3
 8005b88:	f000 f922 	bl	8005dd0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8e:	3301      	adds	r3, #1
 8005b90:	657b      	str	r3, [r7, #84]	; 0x54
 8005b92:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005b94:	461a      	mov	r2, r3
 8005b96:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	dbeb      	blt.n	8005b74 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d016      	beq.n	8005bd0 <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	653b      	str	r3, [r7, #80]	; 0x50
 8005ba6:	e00e      	b.n	8005bc6 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005ba8:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005baa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bac:	009b      	lsls	r3, r3, #2
 8005bae:	687a      	ldr	r2, [r7, #4]
 8005bb0:	4413      	add	r3, r2
 8005bb2:	681a      	ldr	r2, [r3, #0]
 8005bb4:	f107 0314 	add.w	r3, r7, #20
 8005bb8:	3304      	adds	r3, #4
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f000 f908 	bl	8005dd0 <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005bc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	653b      	str	r3, [r7, #80]	; 0x50
 8005bc6:	8b7b      	ldrh	r3, [r7, #26]
 8005bc8:	461a      	mov	r2, r3
 8005bca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	dbeb      	blt.n	8005ba8 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f107 0214 	add.w	r2, r7, #20
 8005bd8:	4611      	mov	r1, r2
 8005bda:	4618      	mov	r0, r3
 8005bdc:	f000 f846 	bl	8005c6c <ai_network_init>
 8005be0:	4603      	mov	r3, r0
 8005be2:	f083 0301 	eor.w	r3, r3, #1
 8005be6:	b2db      	uxtb	r3, r3
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d006      	beq.n	8005bfa <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4618      	mov	r0, r3
 8005bf2:	f7ff ff71 	bl	8005ad8 <ai_network_get_error>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8005bfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005bfc:	4618      	mov	r0, r3
 8005bfe:	3758      	adds	r7, #88	; 0x58
 8005c00:	46bd      	mov	sp, r7
 8005c02:	bd80      	pop	{r7, pc}

08005c04 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b082      	sub	sp, #8
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d104      	bne.n	8005c1e <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005c14:	4b06      	ldr	r3, [pc, #24]	; (8005c30 <ai_network_inputs_get+0x2c>)
 8005c16:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	4a06      	ldr	r2, [pc, #24]	; (8005c34 <ai_network_inputs_get+0x30>)
 8005c1c:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005c1e:	6839      	ldr	r1, [r7, #0]
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f000 fa27 	bl	8006074 <ai_platform_inputs_get>
 8005c26:	4603      	mov	r3, r0
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3708      	adds	r7, #8
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	bd80      	pop	{r7, pc}
 8005c30:	20000bbc 	.word	0x20000bbc
 8005c34:	a1c00100 	.word	0xa1c00100

08005c38 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d104      	bne.n	8005c52 <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005c48:	4b06      	ldr	r3, [pc, #24]	; (8005c64 <ai_network_outputs_get+0x2c>)
 8005c4a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a06      	ldr	r2, [pc, #24]	; (8005c68 <ai_network_outputs_get+0x30>)
 8005c50:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005c52:	6839      	ldr	r1, [r7, #0]
 8005c54:	6878      	ldr	r0, [r7, #4]
 8005c56:	f000 fae3 	bl	8006220 <ai_platform_outputs_get>
 8005c5a:	4603      	mov	r3, r0
}
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	3708      	adds	r7, #8
 8005c60:	46bd      	mov	sp, r7
 8005c62:	bd80      	pop	{r7, pc}
 8005c64:	20000bbc 	.word	0x20000bbc
 8005c68:	a1c00100 	.word	0xa1c00100

08005c6c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b084      	sub	sp, #16
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
 8005c74:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005c76:	6839      	ldr	r1, [r7, #0]
 8005c78:	6878      	ldr	r0, [r7, #4]
 8005c7a:	f000 fc77 	bl	800656c <ai_platform_network_init>
 8005c7e:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d101      	bne.n	8005c8a <ai_network_init+0x1e>
 8005c86:	2300      	movs	r3, #0
 8005c88:	e028      	b.n	8005cdc <ai_network_init+0x70>

  ai_bool ok = true;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8005c8e:	6839      	ldr	r1, [r7, #0]
 8005c90:	68f8      	ldr	r0, [r7, #12]
 8005c92:	f7ff fdc7 	bl	8005824 <network_configure_weights>
 8005c96:	4603      	mov	r3, r0
 8005c98:	461a      	mov	r2, r3
 8005c9a:	7afb      	ldrb	r3, [r7, #11]
 8005c9c:	4013      	ands	r3, r2
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	bf14      	ite	ne
 8005ca2:	2301      	movne	r3, #1
 8005ca4:	2300      	moveq	r3, #0
 8005ca6:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	68f8      	ldr	r0, [r7, #12]
 8005cac:	f7ff fd16 	bl	80056dc <network_configure_activations>
 8005cb0:	4603      	mov	r3, r0
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	7afb      	ldrb	r3, [r7, #11]
 8005cb6:	4013      	ands	r3, r2
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	bf14      	ite	ne
 8005cbc:	2301      	movne	r3, #1
 8005cbe:	2300      	moveq	r3, #0
 8005cc0:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 fd40 	bl	8006748 <ai_platform_network_post_init>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	461a      	mov	r2, r3
 8005ccc:	7afb      	ldrb	r3, [r7, #11]
 8005cce:	4013      	ands	r3, r2
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	bf14      	ite	ne
 8005cd4:	2301      	movne	r3, #1
 8005cd6:	2300      	moveq	r3, #0
 8005cd8:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005cda:	7afb      	ldrb	r3, [r7, #11]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3710      	adds	r7, #16
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}

08005ce4 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005ce4:	b580      	push	{r7, lr}
 8005ce6:	b084      	sub	sp, #16
 8005ce8:	af00      	add	r7, sp, #0
 8005cea:	60f8      	str	r0, [r7, #12]
 8005cec:	60b9      	str	r1, [r7, #8]
 8005cee:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005cf0:	687a      	ldr	r2, [r7, #4]
 8005cf2:	68b9      	ldr	r1, [r7, #8]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 fdaf 	bl	8006858 <ai_platform_network_process>
 8005cfa:	4603      	mov	r3, r0
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3710      	adds	r7, #16
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d101      	bne.n	8005d16 <ai_network_data_params_get+0x12>
 8005d12:	2300      	movs	r3, #0
 8005d14:	e016      	b.n	8005d44 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005d16:	4a0d      	ldr	r2, [pc, #52]	; (8005d4c <ai_network_data_params_get+0x48>)
 8005d18:	f107 0310 	add.w	r3, r7, #16
 8005d1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d20:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005d24:	4a0a      	ldr	r2, [pc, #40]	; (8005d50 <ai_network_data_params_get+0x4c>)
 8005d26:	f107 0308 	add.w	r3, r7, #8
 8005d2a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d2e:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005d32:	f107 0210 	add.w	r2, r7, #16
 8005d36:	f107 0308 	add.w	r3, r7, #8
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f000 f903 	bl	8005f48 <ai_platform_bind_network_params>
 8005d42:	4603      	mov	r3, r0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3718      	adds	r7, #24
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}
 8005d4c:	0800e47c 	.word	0x0800e47c
 8005d50:	0800e484 	.word	0x0800e484

08005d54 <ai_buffer_get_size>:
 8005d54:	b378      	cbz	r0, 8005db6 <ai_buffer_get_size+0x62>
 8005d56:	b410      	push	{r4}
 8005d58:	6803      	ldr	r3, [r0, #0]
 8005d5a:	4a17      	ldr	r2, [pc, #92]	; (8005db8 <ai_buffer_get_size+0x64>)
 8005d5c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005d60:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005d64:	4293      	cmp	r3, r2
 8005d66:	d01e      	beq.n	8005da6 <ai_buffer_get_size+0x52>
 8005d68:	6984      	ldr	r4, [r0, #24]
 8005d6a:	6862      	ldr	r2, [r4, #4]
 8005d6c:	7d03      	ldrb	r3, [r0, #20]
 8005d6e:	6941      	ldr	r1, [r0, #20]
 8005d70:	f1a3 0301 	sub.w	r3, r3, #1
 8005d74:	fab3 f383 	clz	r3, r3
 8005d78:	095b      	lsrs	r3, r3, #5
 8005d7a:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005d7e:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005d82:	da0b      	bge.n	8005d9c <ai_buffer_get_size+0x48>
 8005d84:	2b01      	cmp	r3, #1
 8005d86:	d102      	bne.n	8005d8e <ai_buffer_get_size+0x3a>
 8005d88:	2802      	cmp	r0, #2
 8005d8a:	d007      	beq.n	8005d9c <ai_buffer_get_size+0x48>
 8005d8c:	2302      	movs	r3, #2
 8005d8e:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005d92:	3301      	adds	r3, #1
 8005d94:	4298      	cmp	r0, r3
 8005d96:	fb01 f202 	mul.w	r2, r1, r2
 8005d9a:	d1f3      	bne.n	8005d84 <ai_buffer_get_size+0x30>
 8005d9c:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005da0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005da4:	4770      	bx	lr
 8005da6:	2900      	cmp	r1, #0
 8005da8:	d0de      	beq.n	8005d68 <ai_buffer_get_size+0x14>
 8005daa:	6984      	ldr	r4, [r0, #24]
 8005dac:	6863      	ldr	r3, [r4, #4]
 8005dae:	331f      	adds	r3, #31
 8005db0:	f023 021f 	bic.w	r2, r3, #31
 8005db4:	e7da      	b.n	8005d6c <ai_buffer_get_size+0x18>
 8005db6:	4770      	bx	lr
 8005db8:	000400c0 	.word	0x000400c0

08005dbc <ai_buffer_array_sane>:
 8005dbc:	b138      	cbz	r0, 8005dce <ai_buffer_array_sane+0x12>
 8005dbe:	6843      	ldr	r3, [r0, #4]
 8005dc0:	b123      	cbz	r3, 8005dcc <ai_buffer_array_sane+0x10>
 8005dc2:	8840      	ldrh	r0, [r0, #2]
 8005dc4:	3800      	subs	r0, #0
 8005dc6:	bf18      	it	ne
 8005dc8:	2001      	movne	r0, #1
 8005dca:	4770      	bx	lr
 8005dcc:	4618      	mov	r0, r3
 8005dce:	4770      	bx	lr

08005dd0 <ai_buffer_array_item_set_address>:
 8005dd0:	b150      	cbz	r0, 8005de8 <ai_buffer_array_item_set_address+0x18>
 8005dd2:	6843      	ldr	r3, [r0, #4]
 8005dd4:	b14b      	cbz	r3, 8005dea <ai_buffer_array_item_set_address+0x1a>
 8005dd6:	8840      	ldrh	r0, [r0, #2]
 8005dd8:	b900      	cbnz	r0, 8005ddc <ai_buffer_array_item_set_address+0xc>
 8005dda:	4770      	bx	lr
 8005ddc:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005de0:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005de4:	2001      	movs	r0, #1
 8005de6:	604a      	str	r2, [r1, #4]
 8005de8:	4770      	bx	lr
 8005dea:	4618      	mov	r0, r3
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop

08005df0 <_ai_platform_acquire_crc>:
 8005df0:	2001      	movs	r0, #1
 8005df2:	4770      	bx	lr

08005df4 <_ai_platform_release_crc>:
 8005df4:	4770      	bx	lr
 8005df6:	bf00      	nop

08005df8 <ai_platform_get_weights_map>:
 8005df8:	2a00      	cmp	r2, #0
 8005dfa:	d037      	beq.n	8005e6c <ai_platform_get_weights_map+0x74>
 8005dfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005dfe:	4604      	mov	r4, r0
 8005e00:	b1a0      	cbz	r0, 8005e2c <ai_platform_get_weights_map+0x34>
 8005e02:	460f      	mov	r7, r1
 8005e04:	b191      	cbz	r1, 8005e2c <ai_platform_get_weights_map+0x34>
 8005e06:	4b25      	ldr	r3, [pc, #148]	; (8005e9c <ai_platform_get_weights_map+0xa4>)
 8005e08:	6810      	ldr	r0, [r2, #0]
 8005e0a:	4298      	cmp	r0, r3
 8005e0c:	4615      	mov	r5, r2
 8005e0e:	d00f      	beq.n	8005e30 <ai_platform_get_weights_map+0x38>
 8005e10:	6855      	ldr	r5, [r2, #4]
 8005e12:	b15d      	cbz	r5, 8005e2c <ai_platform_get_weights_map+0x34>
 8005e14:	682e      	ldr	r6, [r5, #0]
 8005e16:	429e      	cmp	r6, r3
 8005e18:	d02a      	beq.n	8005e70 <ai_platform_get_weights_map+0x78>
 8005e1a:	f1a1 0001 	sub.w	r0, r1, #1
 8005e1e:	6025      	str	r5, [r4, #0]
 8005e20:	fab0 f080 	clz	r0, r0
 8005e24:	0940      	lsrs	r0, r0, #5
 8005e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e28:	42a7      	cmp	r7, r4
 8005e2a:	d034      	beq.n	8005e96 <ai_platform_get_weights_map+0x9e>
 8005e2c:	2000      	movs	r0, #0
 8005e2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e30:	1d10      	adds	r0, r2, #4
 8005e32:	f7ff ffc3 	bl	8005dbc <ai_buffer_array_sane>
 8005e36:	2800      	cmp	r0, #0
 8005e38:	d0f8      	beq.n	8005e2c <ai_platform_get_weights_map+0x34>
 8005e3a:	88eb      	ldrh	r3, [r5, #6]
 8005e3c:	429f      	cmp	r7, r3
 8005e3e:	d1f5      	bne.n	8005e2c <ai_platform_get_weights_map+0x34>
 8005e40:	f04f 0e00 	mov.w	lr, #0
 8005e44:	1f23      	subs	r3, r4, #4
 8005e46:	4670      	mov	r0, lr
 8005e48:	68aa      	ldr	r2, [r5, #8]
 8005e4a:	eb02 0c0e 	add.w	ip, r2, lr
 8005e4e:	f10e 0e1c 	add.w	lr, lr, #28
 8005e52:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005e56:	b124      	cbz	r4, 8005e62 <ai_platform_get_weights_map+0x6a>
 8005e58:	3001      	adds	r0, #1
 8005e5a:	4287      	cmp	r7, r0
 8005e5c:	f843 4f04 	str.w	r4, [r3, #4]!
 8005e60:	d1f2      	bne.n	8005e48 <ai_platform_get_weights_map+0x50>
 8005e62:	1a38      	subs	r0, r7, r0
 8005e64:	fab0 f080 	clz	r0, r0
 8005e68:	0940      	lsrs	r0, r0, #5
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e6c:	2000      	movs	r0, #0
 8005e6e:	4770      	bx	lr
 8005e70:	1f23      	subs	r3, r4, #4
 8005e72:	4628      	mov	r0, r5
 8005e74:	2400      	movs	r4, #0
 8005e76:	e000      	b.n	8005e7a <ai_platform_get_weights_map+0x82>
 8005e78:	4614      	mov	r4, r2
 8005e7a:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005e7e:	42b2      	cmp	r2, r6
 8005e80:	d0d2      	beq.n	8005e28 <ai_platform_get_weights_map+0x30>
 8005e82:	f843 2f04 	str.w	r2, [r3, #4]!
 8005e86:	1c62      	adds	r2, r4, #1
 8005e88:	4297      	cmp	r7, r2
 8005e8a:	d1f5      	bne.n	8005e78 <ai_platform_get_weights_map+0x80>
 8005e8c:	3402      	adds	r4, #2
 8005e8e:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005e92:	42b3      	cmp	r3, r6
 8005e94:	d1ca      	bne.n	8005e2c <ai_platform_get_weights_map+0x34>
 8005e96:	2001      	movs	r0, #1
 8005e98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9a:	bf00      	nop
 8005e9c:	a1facade 	.word	0xa1facade

08005ea0 <ai_platform_get_activations_map>:
 8005ea0:	2a00      	cmp	r2, #0
 8005ea2:	d038      	beq.n	8005f16 <ai_platform_get_activations_map+0x76>
 8005ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005ea6:	4604      	mov	r4, r0
 8005ea8:	b1a0      	cbz	r0, 8005ed4 <ai_platform_get_activations_map+0x34>
 8005eaa:	460f      	mov	r7, r1
 8005eac:	b191      	cbz	r1, 8005ed4 <ai_platform_get_activations_map+0x34>
 8005eae:	4b25      	ldr	r3, [pc, #148]	; (8005f44 <ai_platform_get_activations_map+0xa4>)
 8005eb0:	6810      	ldr	r0, [r2, #0]
 8005eb2:	4298      	cmp	r0, r3
 8005eb4:	4615      	mov	r5, r2
 8005eb6:	d00f      	beq.n	8005ed8 <ai_platform_get_activations_map+0x38>
 8005eb8:	6a15      	ldr	r5, [r2, #32]
 8005eba:	b15d      	cbz	r5, 8005ed4 <ai_platform_get_activations_map+0x34>
 8005ebc:	682e      	ldr	r6, [r5, #0]
 8005ebe:	429e      	cmp	r6, r3
 8005ec0:	d02b      	beq.n	8005f1a <ai_platform_get_activations_map+0x7a>
 8005ec2:	f1a1 0001 	sub.w	r0, r1, #1
 8005ec6:	6025      	str	r5, [r4, #0]
 8005ec8:	fab0 f080 	clz	r0, r0
 8005ecc:	0940      	lsrs	r0, r0, #5
 8005ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed0:	42a7      	cmp	r7, r4
 8005ed2:	d035      	beq.n	8005f40 <ai_platform_get_activations_map+0xa0>
 8005ed4:	2000      	movs	r0, #0
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	f102 000c 	add.w	r0, r2, #12
 8005edc:	f7ff ff6e 	bl	8005dbc <ai_buffer_array_sane>
 8005ee0:	2800      	cmp	r0, #0
 8005ee2:	d0f7      	beq.n	8005ed4 <ai_platform_get_activations_map+0x34>
 8005ee4:	89eb      	ldrh	r3, [r5, #14]
 8005ee6:	429f      	cmp	r7, r3
 8005ee8:	d1f4      	bne.n	8005ed4 <ai_platform_get_activations_map+0x34>
 8005eea:	f04f 0e00 	mov.w	lr, #0
 8005eee:	1f23      	subs	r3, r4, #4
 8005ef0:	4670      	mov	r0, lr
 8005ef2:	692a      	ldr	r2, [r5, #16]
 8005ef4:	eb02 0c0e 	add.w	ip, r2, lr
 8005ef8:	f10e 0e1c 	add.w	lr, lr, #28
 8005efc:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005f00:	b124      	cbz	r4, 8005f0c <ai_platform_get_activations_map+0x6c>
 8005f02:	3001      	adds	r0, #1
 8005f04:	4287      	cmp	r7, r0
 8005f06:	f843 4f04 	str.w	r4, [r3, #4]!
 8005f0a:	d1f2      	bne.n	8005ef2 <ai_platform_get_activations_map+0x52>
 8005f0c:	1a38      	subs	r0, r7, r0
 8005f0e:	fab0 f080 	clz	r0, r0
 8005f12:	0940      	lsrs	r0, r0, #5
 8005f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f16:	2000      	movs	r0, #0
 8005f18:	4770      	bx	lr
 8005f1a:	1f23      	subs	r3, r4, #4
 8005f1c:	4628      	mov	r0, r5
 8005f1e:	2400      	movs	r4, #0
 8005f20:	e000      	b.n	8005f24 <ai_platform_get_activations_map+0x84>
 8005f22:	4614      	mov	r4, r2
 8005f24:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005f28:	42b2      	cmp	r2, r6
 8005f2a:	d0d1      	beq.n	8005ed0 <ai_platform_get_activations_map+0x30>
 8005f2c:	f843 2f04 	str.w	r2, [r3, #4]!
 8005f30:	1c62      	adds	r2, r4, #1
 8005f32:	4297      	cmp	r7, r2
 8005f34:	d1f5      	bne.n	8005f22 <ai_platform_get_activations_map+0x82>
 8005f36:	3402      	adds	r4, #2
 8005f38:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005f3c:	42b3      	cmp	r3, r6
 8005f3e:	d1c9      	bne.n	8005ed4 <ai_platform_get_activations_map+0x34>
 8005f40:	2001      	movs	r0, #1
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f44:	a1facade 	.word	0xa1facade

08005f48 <ai_platform_bind_network_params>:
 8005f48:	b1a0      	cbz	r0, 8005f74 <ai_platform_bind_network_params+0x2c>
 8005f4a:	b1b1      	cbz	r1, 8005f7a <ai_platform_bind_network_params+0x32>
 8005f4c:	b1c2      	cbz	r2, 8005f80 <ai_platform_bind_network_params+0x38>
 8005f4e:	b410      	push	{r4}
 8005f50:	4603      	mov	r3, r0
 8005f52:	4c0d      	ldr	r4, [pc, #52]	; (8005f88 <ai_platform_bind_network_params+0x40>)
 8005f54:	f843 4b04 	str.w	r4, [r3], #4
 8005f58:	f100 0c0c 	add.w	ip, r0, #12
 8005f5c:	c903      	ldmia	r1, {r0, r1}
 8005f5e:	e883 0003 	stmia.w	r3, {r0, r1}
 8005f62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005f66:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	4618      	mov	r0, r3
 8005f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f72:	4770      	bx	lr
 8005f74:	4603      	mov	r3, r0
 8005f76:	4618      	mov	r0, r3
 8005f78:	4770      	bx	lr
 8005f7a:	460b      	mov	r3, r1
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	4770      	bx	lr
 8005f80:	4613      	mov	r3, r2
 8005f82:	4618      	mov	r0, r3
 8005f84:	4770      	bx	lr
 8005f86:	bf00      	nop
 8005f88:	a1facade 	.word	0xa1facade

08005f8c <ai_platform_network_get_error>:
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	b1f0      	cbz	r0, 8005fce <ai_platform_network_get_error+0x42>
 8005f90:	4b2f      	ldr	r3, [pc, #188]	; (8006050 <ai_platform_network_get_error+0xc4>)
 8005f92:	6802      	ldr	r2, [r0, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	4604      	mov	r4, r0
 8005f98:	d119      	bne.n	8005fce <ai_platform_network_get_error+0x42>
 8005f9a:	f7ff ff29 	bl	8005df0 <_ai_platform_acquire_crc>
 8005f9e:	4b2d      	ldr	r3, [pc, #180]	; (8006054 <ai_platform_network_get_error+0xc8>)
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005faa:	d03c      	beq.n	8006026 <ai_platform_network_get_error+0x9a>
 8005fac:	4a2a      	ldr	r2, [pc, #168]	; (8006058 <ai_platform_network_get_error+0xcc>)
 8005fae:	2301      	movs	r3, #1
 8005fb0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fb4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d1fb      	bne.n	8005fb4 <ai_platform_network_get_error+0x28>
 8005fbc:	4b27      	ldr	r3, [pc, #156]	; (800605c <ai_platform_network_get_error+0xd0>)
 8005fbe:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005fc2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005fc6:	4b26      	ldr	r3, [pc, #152]	; (8006060 <ai_platform_network_get_error+0xd4>)
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	d038      	beq.n	800603e <ai_platform_network_get_error+0xb2>
 8005fcc:	e7fe      	b.n	8005fcc <ai_platform_network_get_error+0x40>
 8005fce:	f7ff ff0f 	bl	8005df0 <_ai_platform_acquire_crc>
 8005fd2:	4b20      	ldr	r3, [pc, #128]	; (8006054 <ai_platform_network_get_error+0xc8>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005fda:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fde:	d010      	beq.n	8006002 <ai_platform_network_get_error+0x76>
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <ai_platform_network_get_error+0xcc>)
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fe8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d1fb      	bne.n	8005fe8 <ai_platform_network_get_error+0x5c>
 8005ff0:	4b1a      	ldr	r3, [pc, #104]	; (800605c <ai_platform_network_get_error+0xd0>)
 8005ff2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005ff6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ffa:	4b19      	ldr	r3, [pc, #100]	; (8006060 <ai_platform_network_get_error+0xd4>)
 8005ffc:	429a      	cmp	r2, r3
 8005ffe:	d00d      	beq.n	800601c <ai_platform_network_get_error+0x90>
 8006000:	e7fe      	b.n	8006000 <ai_platform_network_get_error+0x74>
 8006002:	4a18      	ldr	r2, [pc, #96]	; (8006064 <ai_platform_network_get_error+0xd8>)
 8006004:	2301      	movs	r3, #1
 8006006:	6093      	str	r3, [r2, #8]
 8006008:	6893      	ldr	r3, [r2, #8]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d1fc      	bne.n	8006008 <ai_platform_network_get_error+0x7c>
 800600e:	4b13      	ldr	r3, [pc, #76]	; (800605c <ai_platform_network_get_error+0xd0>)
 8006010:	6013      	str	r3, [r2, #0]
 8006012:	6812      	ldr	r2, [r2, #0]
 8006014:	4b12      	ldr	r3, [pc, #72]	; (8006060 <ai_platform_network_get_error+0xd4>)
 8006016:	429a      	cmp	r2, r3
 8006018:	d000      	beq.n	800601c <ai_platform_network_get_error+0x90>
 800601a:	e7fe      	b.n	800601a <ai_platform_network_get_error+0x8e>
 800601c:	f7ff feea 	bl	8005df4 <_ai_platform_release_crc>
 8006020:	f241 0010 	movw	r0, #4112	; 0x1010
 8006024:	bd10      	pop	{r4, pc}
 8006026:	4a0f      	ldr	r2, [pc, #60]	; (8006064 <ai_platform_network_get_error+0xd8>)
 8006028:	2301      	movs	r3, #1
 800602a:	6093      	str	r3, [r2, #8]
 800602c:	6893      	ldr	r3, [r2, #8]
 800602e:	2b00      	cmp	r3, #0
 8006030:	d1fc      	bne.n	800602c <ai_platform_network_get_error+0xa0>
 8006032:	4b0a      	ldr	r3, [pc, #40]	; (800605c <ai_platform_network_get_error+0xd0>)
 8006034:	6013      	str	r3, [r2, #0]
 8006036:	6812      	ldr	r2, [r2, #0]
 8006038:	4b09      	ldr	r3, [pc, #36]	; (8006060 <ai_platform_network_get_error+0xd4>)
 800603a:	429a      	cmp	r2, r3
 800603c:	d107      	bne.n	800604e <ai_platform_network_get_error+0xc2>
 800603e:	f7ff fed9 	bl	8005df4 <_ai_platform_release_crc>
 8006042:	f104 0010 	add.w	r0, r4, #16
 8006046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800604a:	f000 be8b 	b.w	8006d64 <core_get_error>
 800604e:	e7fe      	b.n	800604e <ai_platform_network_get_error+0xc2>
 8006050:	a1c00100 	.word	0xa1c00100
 8006054:	e0042000 	.word	0xe0042000
 8006058:	58024000 	.word	0x58024000
 800605c:	f407a5c2 	.word	0xf407a5c2
 8006060:	b5e8b5cd 	.word	0xb5e8b5cd
 8006064:	40023000 	.word	0x40023000

08006068 <ai_platform_network_set_error>:
 8006068:	b110      	cbz	r0, 8006070 <ai_platform_network_set_error+0x8>
 800606a:	3010      	adds	r0, #16
 800606c:	f000 be80 	b.w	8006d70 <core_set_error>
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop

08006074 <ai_platform_inputs_get>:
 8006074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006078:	b085      	sub	sp, #20
 800607a:	9102      	str	r1, [sp, #8]
 800607c:	b1f0      	cbz	r0, 80060bc <ai_platform_inputs_get+0x48>
 800607e:	4b62      	ldr	r3, [pc, #392]	; (8006208 <ai_platform_inputs_get+0x194>)
 8006080:	6802      	ldr	r2, [r0, #0]
 8006082:	429a      	cmp	r2, r3
 8006084:	4607      	mov	r7, r0
 8006086:	d119      	bne.n	80060bc <ai_platform_inputs_get+0x48>
 8006088:	f7ff feb2 	bl	8005df0 <_ai_platform_acquire_crc>
 800608c:	4b5f      	ldr	r3, [pc, #380]	; (800620c <ai_platform_inputs_get+0x198>)
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006094:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006098:	d03d      	beq.n	8006116 <ai_platform_inputs_get+0xa2>
 800609a:	4a5d      	ldr	r2, [pc, #372]	; (8006210 <ai_platform_inputs_get+0x19c>)
 800609c:	2301      	movs	r3, #1
 800609e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80060a2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1fb      	bne.n	80060a2 <ai_platform_inputs_get+0x2e>
 80060aa:	4b5a      	ldr	r3, [pc, #360]	; (8006214 <ai_platform_inputs_get+0x1a0>)
 80060ac:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80060b0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80060b4:	4b58      	ldr	r3, [pc, #352]	; (8006218 <ai_platform_inputs_get+0x1a4>)
 80060b6:	429a      	cmp	r2, r3
 80060b8:	d039      	beq.n	800612e <ai_platform_inputs_get+0xba>
 80060ba:	e7fe      	b.n	80060ba <ai_platform_inputs_get+0x46>
 80060bc:	f7ff fe98 	bl	8005df0 <_ai_platform_acquire_crc>
 80060c0:	4b52      	ldr	r3, [pc, #328]	; (800620c <ai_platform_inputs_get+0x198>)
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80060c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060cc:	d010      	beq.n	80060f0 <ai_platform_inputs_get+0x7c>
 80060ce:	4a50      	ldr	r2, [pc, #320]	; (8006210 <ai_platform_inputs_get+0x19c>)
 80060d0:	2301      	movs	r3, #1
 80060d2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80060d6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80060da:	2b00      	cmp	r3, #0
 80060dc:	d1fb      	bne.n	80060d6 <ai_platform_inputs_get+0x62>
 80060de:	4b4d      	ldr	r3, [pc, #308]	; (8006214 <ai_platform_inputs_get+0x1a0>)
 80060e0:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80060e4:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80060e8:	4b4b      	ldr	r3, [pc, #300]	; (8006218 <ai_platform_inputs_get+0x1a4>)
 80060ea:	429a      	cmp	r2, r3
 80060ec:	d00d      	beq.n	800610a <ai_platform_inputs_get+0x96>
 80060ee:	e7fe      	b.n	80060ee <ai_platform_inputs_get+0x7a>
 80060f0:	4a4a      	ldr	r2, [pc, #296]	; (800621c <ai_platform_inputs_get+0x1a8>)
 80060f2:	2301      	movs	r3, #1
 80060f4:	6093      	str	r3, [r2, #8]
 80060f6:	6893      	ldr	r3, [r2, #8]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d1fc      	bne.n	80060f6 <ai_platform_inputs_get+0x82>
 80060fc:	4b45      	ldr	r3, [pc, #276]	; (8006214 <ai_platform_inputs_get+0x1a0>)
 80060fe:	6013      	str	r3, [r2, #0]
 8006100:	6812      	ldr	r2, [r2, #0]
 8006102:	4b45      	ldr	r3, [pc, #276]	; (8006218 <ai_platform_inputs_get+0x1a4>)
 8006104:	429a      	cmp	r2, r3
 8006106:	d000      	beq.n	800610a <ai_platform_inputs_get+0x96>
 8006108:	e7fe      	b.n	8006108 <ai_platform_inputs_get+0x94>
 800610a:	f7ff fe73 	bl	8005df4 <_ai_platform_release_crc>
 800610e:	2000      	movs	r0, #0
 8006110:	b005      	add	sp, #20
 8006112:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006116:	4a41      	ldr	r2, [pc, #260]	; (800621c <ai_platform_inputs_get+0x1a8>)
 8006118:	2301      	movs	r3, #1
 800611a:	6093      	str	r3, [r2, #8]
 800611c:	6893      	ldr	r3, [r2, #8]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d1fc      	bne.n	800611c <ai_platform_inputs_get+0xa8>
 8006122:	4b3c      	ldr	r3, [pc, #240]	; (8006214 <ai_platform_inputs_get+0x1a0>)
 8006124:	6013      	str	r3, [r2, #0]
 8006126:	6812      	ldr	r2, [r2, #0]
 8006128:	4b3b      	ldr	r3, [pc, #236]	; (8006218 <ai_platform_inputs_get+0x1a4>)
 800612a:	429a      	cmp	r2, r3
 800612c:	d155      	bne.n	80061da <ai_platform_inputs_get+0x166>
 800612e:	f7ff fe61 	bl	8005df4 <_ai_platform_release_crc>
 8006132:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8006134:	2b00      	cmp	r3, #0
 8006136:	d051      	beq.n	80061dc <ai_platform_inputs_get+0x168>
 8006138:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 800613c:	f1ba 0f00 	cmp.w	sl, #0
 8006140:	d04c      	beq.n	80061dc <ai_platform_inputs_get+0x168>
 8006142:	f04f 0b00 	mov.w	fp, #0
 8006146:	465d      	mov	r5, fp
 8006148:	9703      	str	r7, [sp, #12]
 800614a:	e016      	b.n	800617a <ai_platform_inputs_get+0x106>
 800614c:	9901      	ldr	r1, [sp, #4]
 800614e:	2301      	movs	r3, #1
 8006150:	507b      	str	r3, [r7, r1]
 8006152:	69b1      	ldr	r1, [r6, #24]
 8006154:	6849      	ldr	r1, [r1, #4]
 8006156:	6121      	str	r1, [r4, #16]
 8006158:	f04f 0301 	mov.w	r3, #1
 800615c:	7523      	strb	r3, [r4, #20]
 800615e:	e9c4 c200 	strd	ip, r2, [r4]
 8006162:	6962      	ldr	r2, [r4, #20]
 8006164:	60a0      	str	r0, [r4, #8]
 8006166:	2300      	movs	r3, #0
 8006168:	f369 221f 	bfi	r2, r9, #8, #24
 800616c:	f8c4 8018 	str.w	r8, [r4, #24]
 8006170:	60e3      	str	r3, [r4, #12]
 8006172:	3501      	adds	r5, #1
 8006174:	f10b 0b1c 	add.w	fp, fp, #28
 8006178:	6162      	str	r2, [r4, #20]
 800617a:	f8ba 3000 	ldrh.w	r3, [sl]
 800617e:	42ab      	cmp	r3, r5
 8006180:	b2aa      	uxth	r2, r5
 8006182:	d93a      	bls.n	80061fa <ai_platform_inputs_get+0x186>
 8006184:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006188:	00e9      	lsls	r1, r5, #3
 800618a:	9101      	str	r1, [sp, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d034      	beq.n	80061fa <ai_platform_inputs_get+0x186>
 8006190:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006194:	2e00      	cmp	r6, #0
 8006196:	d030      	beq.n	80061fa <ai_platform_inputs_get+0x186>
 8006198:	f8da 3008 	ldr.w	r3, [sl, #8]
 800619c:	69b2      	ldr	r2, [r6, #24]
 800619e:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80061a2:	6810      	ldr	r0, [r2, #0]
 80061a4:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80061a8:	68b3      	ldr	r3, [r6, #8]
 80061aa:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80061ae:	f003 f8e9 	bl	8009384 <ai_array_to_buffer_fmt>
 80061b2:	69b1      	ldr	r1, [r6, #24]
 80061b4:	4684      	mov	ip, r0
 80061b6:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80061ba:	688a      	ldr	r2, [r1, #8]
 80061bc:	445c      	add	r4, fp
 80061be:	2800      	cmp	r0, #0
 80061c0:	d0c8      	beq.n	8006154 <ai_platform_inputs_get+0xe0>
 80061c2:	2100      	movs	r1, #0
 80061c4:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80061c8:	6831      	ldr	r1, [r6, #0]
 80061ca:	6041      	str	r1, [r0, #4]
 80061cc:	b111      	cbz	r1, 80061d4 <ai_platform_inputs_get+0x160>
 80061ce:	8849      	ldrh	r1, [r1, #2]
 80061d0:	2900      	cmp	r1, #0
 80061d2:	d1bb      	bne.n	800614c <ai_platform_inputs_get+0xd8>
 80061d4:	69b1      	ldr	r1, [r6, #24]
 80061d6:	2000      	movs	r0, #0
 80061d8:	e7bc      	b.n	8006154 <ai_platform_inputs_get+0xe0>
 80061da:	e7fe      	b.n	80061da <ai_platform_inputs_get+0x166>
 80061dc:	2218      	movs	r2, #24
 80061de:	2111      	movs	r1, #17
 80061e0:	f107 0010 	add.w	r0, r7, #16
 80061e4:	f000 fdc4 	bl	8006d70 <core_set_error>
 80061e8:	2200      	movs	r2, #0
 80061ea:	4610      	mov	r0, r2
 80061ec:	9b02      	ldr	r3, [sp, #8]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d08e      	beq.n	8006110 <ai_platform_inputs_get+0x9c>
 80061f2:	801a      	strh	r2, [r3, #0]
 80061f4:	b005      	add	sp, #20
 80061f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061fa:	9f03      	ldr	r7, [sp, #12]
 80061fc:	2a00      	cmp	r2, #0
 80061fe:	d0ed      	beq.n	80061dc <ai_platform_inputs_get+0x168>
 8006200:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006204:	6858      	ldr	r0, [r3, #4]
 8006206:	e7f1      	b.n	80061ec <ai_platform_inputs_get+0x178>
 8006208:	a1c00100 	.word	0xa1c00100
 800620c:	e0042000 	.word	0xe0042000
 8006210:	58024000 	.word	0x58024000
 8006214:	f407a5c2 	.word	0xf407a5c2
 8006218:	b5e8b5cd 	.word	0xb5e8b5cd
 800621c:	40023000 	.word	0x40023000

08006220 <ai_platform_outputs_get>:
 8006220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006224:	b085      	sub	sp, #20
 8006226:	9102      	str	r1, [sp, #8]
 8006228:	b1f0      	cbz	r0, 8006268 <ai_platform_outputs_get+0x48>
 800622a:	4b5f      	ldr	r3, [pc, #380]	; (80063a8 <ai_platform_outputs_get+0x188>)
 800622c:	6802      	ldr	r2, [r0, #0]
 800622e:	429a      	cmp	r2, r3
 8006230:	4607      	mov	r7, r0
 8006232:	d119      	bne.n	8006268 <ai_platform_outputs_get+0x48>
 8006234:	f7ff fddc 	bl	8005df0 <_ai_platform_acquire_crc>
 8006238:	4b5c      	ldr	r3, [pc, #368]	; (80063ac <ai_platform_outputs_get+0x18c>)
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006240:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006244:	d03d      	beq.n	80062c2 <ai_platform_outputs_get+0xa2>
 8006246:	4a5a      	ldr	r2, [pc, #360]	; (80063b0 <ai_platform_outputs_get+0x190>)
 8006248:	2301      	movs	r3, #1
 800624a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800624e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1fb      	bne.n	800624e <ai_platform_outputs_get+0x2e>
 8006256:	4b57      	ldr	r3, [pc, #348]	; (80063b4 <ai_platform_outputs_get+0x194>)
 8006258:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800625c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006260:	4b55      	ldr	r3, [pc, #340]	; (80063b8 <ai_platform_outputs_get+0x198>)
 8006262:	429a      	cmp	r2, r3
 8006264:	d039      	beq.n	80062da <ai_platform_outputs_get+0xba>
 8006266:	e7fe      	b.n	8006266 <ai_platform_outputs_get+0x46>
 8006268:	f7ff fdc2 	bl	8005df0 <_ai_platform_acquire_crc>
 800626c:	4b4f      	ldr	r3, [pc, #316]	; (80063ac <ai_platform_outputs_get+0x18c>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006274:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006278:	d010      	beq.n	800629c <ai_platform_outputs_get+0x7c>
 800627a:	4a4d      	ldr	r2, [pc, #308]	; (80063b0 <ai_platform_outputs_get+0x190>)
 800627c:	2301      	movs	r3, #1
 800627e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006282:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006286:	2b00      	cmp	r3, #0
 8006288:	d1fb      	bne.n	8006282 <ai_platform_outputs_get+0x62>
 800628a:	4b4a      	ldr	r3, [pc, #296]	; (80063b4 <ai_platform_outputs_get+0x194>)
 800628c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006290:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006294:	4b48      	ldr	r3, [pc, #288]	; (80063b8 <ai_platform_outputs_get+0x198>)
 8006296:	429a      	cmp	r2, r3
 8006298:	d00d      	beq.n	80062b6 <ai_platform_outputs_get+0x96>
 800629a:	e7fe      	b.n	800629a <ai_platform_outputs_get+0x7a>
 800629c:	4a47      	ldr	r2, [pc, #284]	; (80063bc <ai_platform_outputs_get+0x19c>)
 800629e:	2301      	movs	r3, #1
 80062a0:	6093      	str	r3, [r2, #8]
 80062a2:	6893      	ldr	r3, [r2, #8]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1fc      	bne.n	80062a2 <ai_platform_outputs_get+0x82>
 80062a8:	4b42      	ldr	r3, [pc, #264]	; (80063b4 <ai_platform_outputs_get+0x194>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	6812      	ldr	r2, [r2, #0]
 80062ae:	4b42      	ldr	r3, [pc, #264]	; (80063b8 <ai_platform_outputs_get+0x198>)
 80062b0:	429a      	cmp	r2, r3
 80062b2:	d000      	beq.n	80062b6 <ai_platform_outputs_get+0x96>
 80062b4:	e7fe      	b.n	80062b4 <ai_platform_outputs_get+0x94>
 80062b6:	f7ff fd9d 	bl	8005df4 <_ai_platform_release_crc>
 80062ba:	2000      	movs	r0, #0
 80062bc:	b005      	add	sp, #20
 80062be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062c2:	4a3e      	ldr	r2, [pc, #248]	; (80063bc <ai_platform_outputs_get+0x19c>)
 80062c4:	2301      	movs	r3, #1
 80062c6:	6093      	str	r3, [r2, #8]
 80062c8:	6893      	ldr	r3, [r2, #8]
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d1fc      	bne.n	80062c8 <ai_platform_outputs_get+0xa8>
 80062ce:	4b39      	ldr	r3, [pc, #228]	; (80063b4 <ai_platform_outputs_get+0x194>)
 80062d0:	6013      	str	r3, [r2, #0]
 80062d2:	6812      	ldr	r2, [r2, #0]
 80062d4:	4b38      	ldr	r3, [pc, #224]	; (80063b8 <ai_platform_outputs_get+0x198>)
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d150      	bne.n	800637c <ai_platform_outputs_get+0x15c>
 80062da:	f7ff fd8b 	bl	8005df4 <_ai_platform_release_crc>
 80062de:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80062e0:	2b01      	cmp	r3, #1
 80062e2:	d958      	bls.n	8006396 <ai_platform_outputs_get+0x176>
 80062e4:	f04f 0b00 	mov.w	fp, #0
 80062e8:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80062ec:	9703      	str	r7, [sp, #12]
 80062ee:	465d      	mov	r5, fp
 80062f0:	e016      	b.n	8006320 <ai_platform_outputs_get+0x100>
 80062f2:	9901      	ldr	r1, [sp, #4]
 80062f4:	2301      	movs	r3, #1
 80062f6:	507b      	str	r3, [r7, r1]
 80062f8:	69b1      	ldr	r1, [r6, #24]
 80062fa:	6849      	ldr	r1, [r1, #4]
 80062fc:	6121      	str	r1, [r4, #16]
 80062fe:	f04f 0301 	mov.w	r3, #1
 8006302:	7523      	strb	r3, [r4, #20]
 8006304:	e9c4 c200 	strd	ip, r2, [r4]
 8006308:	6962      	ldr	r2, [r4, #20]
 800630a:	60a0      	str	r0, [r4, #8]
 800630c:	2300      	movs	r3, #0
 800630e:	f369 221f 	bfi	r2, r9, #8, #24
 8006312:	f8c4 8018 	str.w	r8, [r4, #24]
 8006316:	60e3      	str	r3, [r4, #12]
 8006318:	3501      	adds	r5, #1
 800631a:	f10b 0b1c 	add.w	fp, fp, #28
 800631e:	6162      	str	r2, [r4, #20]
 8006320:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006324:	42ab      	cmp	r3, r5
 8006326:	b2aa      	uxth	r2, r5
 8006328:	d929      	bls.n	800637e <ai_platform_outputs_get+0x15e>
 800632a:	f8da 3010 	ldr.w	r3, [sl, #16]
 800632e:	00e9      	lsls	r1, r5, #3
 8006330:	9101      	str	r1, [sp, #4]
 8006332:	b323      	cbz	r3, 800637e <ai_platform_outputs_get+0x15e>
 8006334:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006338:	b30e      	cbz	r6, 800637e <ai_platform_outputs_get+0x15e>
 800633a:	f8da 3014 	ldr.w	r3, [sl, #20]
 800633e:	69b2      	ldr	r2, [r6, #24]
 8006340:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8006344:	6810      	ldr	r0, [r2, #0]
 8006346:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 800634a:	68b3      	ldr	r3, [r6, #8]
 800634c:	f3c3 2917 	ubfx	r9, r3, #8, #24
 8006350:	f003 f818 	bl	8009384 <ai_array_to_buffer_fmt>
 8006354:	69b1      	ldr	r1, [r6, #24]
 8006356:	4684      	mov	ip, r0
 8006358:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 800635c:	688a      	ldr	r2, [r1, #8]
 800635e:	445c      	add	r4, fp
 8006360:	2800      	cmp	r0, #0
 8006362:	d0ca      	beq.n	80062fa <ai_platform_outputs_get+0xda>
 8006364:	2100      	movs	r1, #0
 8006366:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 800636a:	6831      	ldr	r1, [r6, #0]
 800636c:	6041      	str	r1, [r0, #4]
 800636e:	b111      	cbz	r1, 8006376 <ai_platform_outputs_get+0x156>
 8006370:	8849      	ldrh	r1, [r1, #2]
 8006372:	2900      	cmp	r1, #0
 8006374:	d1bd      	bne.n	80062f2 <ai_platform_outputs_get+0xd2>
 8006376:	69b1      	ldr	r1, [r6, #24]
 8006378:	2000      	movs	r0, #0
 800637a:	e7be      	b.n	80062fa <ai_platform_outputs_get+0xda>
 800637c:	e7fe      	b.n	800637c <ai_platform_outputs_get+0x15c>
 800637e:	9f03      	ldr	r7, [sp, #12]
 8006380:	b14a      	cbz	r2, 8006396 <ai_platform_outputs_get+0x176>
 8006382:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006386:	6858      	ldr	r0, [r3, #4]
 8006388:	9b02      	ldr	r3, [sp, #8]
 800638a:	2b00      	cmp	r3, #0
 800638c:	d096      	beq.n	80062bc <ai_platform_outputs_get+0x9c>
 800638e:	801a      	strh	r2, [r3, #0]
 8006390:	b005      	add	sp, #20
 8006392:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006396:	2218      	movs	r2, #24
 8006398:	2111      	movs	r1, #17
 800639a:	f107 0010 	add.w	r0, r7, #16
 800639e:	f000 fce7 	bl	8006d70 <core_set_error>
 80063a2:	2200      	movs	r2, #0
 80063a4:	4610      	mov	r0, r2
 80063a6:	e7ef      	b.n	8006388 <ai_platform_outputs_get+0x168>
 80063a8:	a1c00100 	.word	0xa1c00100
 80063ac:	e0042000 	.word	0xe0042000
 80063b0:	58024000 	.word	0x58024000
 80063b4:	f407a5c2 	.word	0xf407a5c2
 80063b8:	b5e8b5cd 	.word	0xb5e8b5cd
 80063bc:	40023000 	.word	0x40023000

080063c0 <ai_platform_network_create>:
 80063c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80063c4:	b083      	sub	sp, #12
 80063c6:	4606      	mov	r6, r0
 80063c8:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 80063cc:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 80063d0:	4615      	mov	r5, r2
 80063d2:	461f      	mov	r7, r3
 80063d4:	f7ff fd0c 	bl	8005df0 <_ai_platform_acquire_crc>
 80063d8:	b188      	cbz	r0, 80063fe <ai_platform_network_create+0x3e>
 80063da:	4a5d      	ldr	r2, [pc, #372]	; (8006550 <ai_platform_network_create+0x190>)
 80063dc:	6812      	ldr	r2, [r2, #0]
 80063de:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 80063e2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 80063e6:	4603      	mov	r3, r0
 80063e8:	d00e      	beq.n	8006408 <ai_platform_network_create+0x48>
 80063ea:	4a5a      	ldr	r2, [pc, #360]	; (8006554 <ai_platform_network_create+0x194>)
 80063ec:	2118      	movs	r1, #24
 80063ee:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 80063f2:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80063f6:	2918      	cmp	r1, #24
 80063f8:	d018      	beq.n	800642c <ai_platform_network_create+0x6c>
 80063fa:	f7ff fcfb 	bl	8005df4 <_ai_platform_release_crc>
 80063fe:	f244 1033 	movw	r0, #16691	; 0x4133
 8006402:	b003      	add	sp, #12
 8006404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006408:	4a53      	ldr	r2, [pc, #332]	; (8006558 <ai_platform_network_create+0x198>)
 800640a:	2101      	movs	r1, #1
 800640c:	6091      	str	r1, [r2, #8]
 800640e:	2114      	movs	r1, #20
 8006410:	e001      	b.n	8006416 <ai_platform_network_create+0x56>
 8006412:	3901      	subs	r1, #1
 8006414:	d002      	beq.n	800641c <ai_platform_network_create+0x5c>
 8006416:	6894      	ldr	r4, [r2, #8]
 8006418:	2c00      	cmp	r4, #0
 800641a:	d1fa      	bne.n	8006412 <ai_platform_network_create+0x52>
 800641c:	4a4e      	ldr	r2, [pc, #312]	; (8006558 <ai_platform_network_create+0x198>)
 800641e:	6891      	ldr	r1, [r2, #8]
 8006420:	b911      	cbnz	r1, 8006428 <ai_platform_network_create+0x68>
 8006422:	6812      	ldr	r2, [r2, #0]
 8006424:	3201      	adds	r2, #1
 8006426:	d008      	beq.n	800643a <ai_platform_network_create+0x7a>
 8006428:	4618      	mov	r0, r3
 800642a:	e7e6      	b.n	80063fa <ai_platform_network_create+0x3a>
 800642c:	2101      	movs	r1, #1
 800642e:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 8006432:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006436:	2900      	cmp	r1, #0
 8006438:	d1fb      	bne.n	8006432 <ai_platform_network_create+0x72>
 800643a:	4618      	mov	r0, r3
 800643c:	f7ff fcda 	bl	8005df4 <_ai_platform_release_crc>
 8006440:	f7ff fcd6 	bl	8005df0 <_ai_platform_acquire_crc>
 8006444:	4b42      	ldr	r3, [pc, #264]	; (8006550 <ai_platform_network_create+0x190>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800644c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006450:	d010      	beq.n	8006474 <ai_platform_network_create+0xb4>
 8006452:	4b40      	ldr	r3, [pc, #256]	; (8006554 <ai_platform_network_create+0x194>)
 8006454:	2201      	movs	r2, #1
 8006456:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 800645a:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 800645e:	2900      	cmp	r1, #0
 8006460:	d1fb      	bne.n	800645a <ai_platform_network_create+0x9a>
 8006462:	4a3e      	ldr	r2, [pc, #248]	; (800655c <ai_platform_network_create+0x19c>)
 8006464:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 8006468:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 800646c:	4b3c      	ldr	r3, [pc, #240]	; (8006560 <ai_platform_network_create+0x1a0>)
 800646e:	429a      	cmp	r2, r3
 8006470:	d00c      	beq.n	800648c <ai_platform_network_create+0xcc>
 8006472:	e7fe      	b.n	8006472 <ai_platform_network_create+0xb2>
 8006474:	4a38      	ldr	r2, [pc, #224]	; (8006558 <ai_platform_network_create+0x198>)
 8006476:	2301      	movs	r3, #1
 8006478:	6093      	str	r3, [r2, #8]
 800647a:	6893      	ldr	r3, [r2, #8]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d1fc      	bne.n	800647a <ai_platform_network_create+0xba>
 8006480:	4b36      	ldr	r3, [pc, #216]	; (800655c <ai_platform_network_create+0x19c>)
 8006482:	6013      	str	r3, [r2, #0]
 8006484:	6812      	ldr	r2, [r2, #0]
 8006486:	4b36      	ldr	r3, [pc, #216]	; (8006560 <ai_platform_network_create+0x1a0>)
 8006488:	429a      	cmp	r2, r3
 800648a:	d122      	bne.n	80064d2 <ai_platform_network_create+0x112>
 800648c:	f7ff fcb2 	bl	8005df4 <_ai_platform_release_crc>
 8006490:	b38e      	cbz	r6, 80064f6 <ai_platform_network_create+0x136>
 8006492:	4b34      	ldr	r3, [pc, #208]	; (8006564 <ai_platform_network_create+0x1a4>)
 8006494:	602b      	str	r3, [r5, #0]
 8006496:	6035      	str	r5, [r6, #0]
 8006498:	f000 fc62 	bl	8006d60 <core_init>
 800649c:	b1d0      	cbz	r0, 80064d4 <ai_platform_network_create+0x114>
 800649e:	f7ff fca7 	bl	8005df0 <_ai_platform_acquire_crc>
 80064a2:	4b2b      	ldr	r3, [pc, #172]	; (8006550 <ai_platform_network_create+0x190>)
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064aa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064ae:	d025      	beq.n	80064fc <ai_platform_network_create+0x13c>
 80064b0:	4a28      	ldr	r2, [pc, #160]	; (8006554 <ai_platform_network_create+0x194>)
 80064b2:	2301      	movs	r3, #1
 80064b4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064b8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d1fb      	bne.n	80064b8 <ai_platform_network_create+0xf8>
 80064c0:	4b26      	ldr	r3, [pc, #152]	; (800655c <ai_platform_network_create+0x19c>)
 80064c2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80064c6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80064ca:	4b25      	ldr	r3, [pc, #148]	; (8006560 <ai_platform_network_create+0x1a0>)
 80064cc:	429a      	cmp	r2, r3
 80064ce:	d022      	beq.n	8006516 <ai_platform_network_create+0x156>
 80064d0:	e7fe      	b.n	80064d0 <ai_platform_network_create+0x110>
 80064d2:	e7fe      	b.n	80064d2 <ai_platform_network_create+0x112>
 80064d4:	2430      	movs	r4, #48	; 0x30
 80064d6:	2300      	movs	r3, #0
 80064d8:	6033      	str	r3, [r6, #0]
 80064da:	2610      	movs	r6, #16
 80064dc:	464a      	mov	r2, r9
 80064de:	4641      	mov	r1, r8
 80064e0:	4638      	mov	r0, r7
 80064e2:	f002 fff5 	bl	80094d0 <ai_version_get>
 80064e6:	4603      	mov	r3, r0
 80064e8:	2000      	movs	r0, #0
 80064ea:	f364 0007 	bfi	r0, r4, #0, #8
 80064ee:	64ab      	str	r3, [r5, #72]	; 0x48
 80064f0:	f366 201f 	bfi	r0, r6, #8, #24
 80064f4:	e785      	b.n	8006402 <ai_platform_network_create+0x42>
 80064f6:	f241 0010 	movw	r0, #4112	; 0x1010
 80064fa:	e782      	b.n	8006402 <ai_platform_network_create+0x42>
 80064fc:	4a16      	ldr	r2, [pc, #88]	; (8006558 <ai_platform_network_create+0x198>)
 80064fe:	2301      	movs	r3, #1
 8006500:	6093      	str	r3, [r2, #8]
 8006502:	6893      	ldr	r3, [r2, #8]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1fc      	bne.n	8006502 <ai_platform_network_create+0x142>
 8006508:	4b14      	ldr	r3, [pc, #80]	; (800655c <ai_platform_network_create+0x19c>)
 800650a:	6013      	str	r3, [r2, #0]
 800650c:	6812      	ldr	r2, [r2, #0]
 800650e:	4b14      	ldr	r3, [pc, #80]	; (8006560 <ai_platform_network_create+0x1a0>)
 8006510:	429a      	cmp	r2, r3
 8006512:	d000      	beq.n	8006516 <ai_platform_network_create+0x156>
 8006514:	e7fe      	b.n	8006514 <ai_platform_network_create+0x154>
 8006516:	f7ff fc6d 	bl	8005df4 <_ai_platform_release_crc>
 800651a:	2200      	movs	r2, #0
 800651c:	4641      	mov	r1, r8
 800651e:	4638      	mov	r0, r7
 8006520:	f002 ffd6 	bl	80094d0 <ai_version_get>
 8006524:	2200      	movs	r2, #0
 8006526:	4604      	mov	r4, r0
 8006528:	2105      	movs	r1, #5
 800652a:	2001      	movs	r0, #1
 800652c:	f002 ffd0 	bl	80094d0 <ai_version_get>
 8006530:	4284      	cmp	r4, r0
 8006532:	d001      	beq.n	8006538 <ai_platform_network_create+0x178>
 8006534:	2401      	movs	r4, #1
 8006536:	e7ce      	b.n	80064d6 <ai_platform_network_create+0x116>
 8006538:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <ai_platform_network_create+0x1a8>)
 800653a:	9301      	str	r3, [sp, #4]
 800653c:	a801      	add	r0, sp, #4
 800653e:	f000 fc23 	bl	8006d88 <ai_check_custom_types>
 8006542:	b110      	cbz	r0, 800654a <ai_platform_network_create+0x18a>
 8006544:	2600      	movs	r6, #0
 8006546:	4634      	mov	r4, r6
 8006548:	e7c8      	b.n	80064dc <ai_platform_network_create+0x11c>
 800654a:	2402      	movs	r4, #2
 800654c:	e7c3      	b.n	80064d6 <ai_platform_network_create+0x116>
 800654e:	bf00      	nop
 8006550:	e0042000 	.word	0xe0042000
 8006554:	58024000 	.word	0x58024000
 8006558:	40023000 	.word	0x40023000
 800655c:	f407a5c2 	.word	0xf407a5c2
 8006560:	b5e8b5cd 	.word	0xb5e8b5cd
 8006564:	a1c00100 	.word	0xa1c00100
 8006568:	84048403 	.word	0x84048403

0800656c <ai_platform_network_init>:
 800656c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006570:	b1f8      	cbz	r0, 80065b2 <ai_platform_network_init+0x46>
 8006572:	4b6e      	ldr	r3, [pc, #440]	; (800672c <ai_platform_network_init+0x1c0>)
 8006574:	6802      	ldr	r2, [r0, #0]
 8006576:	429a      	cmp	r2, r3
 8006578:	4604      	mov	r4, r0
 800657a:	d11a      	bne.n	80065b2 <ai_platform_network_init+0x46>
 800657c:	460e      	mov	r6, r1
 800657e:	f7ff fc37 	bl	8005df0 <_ai_platform_acquire_crc>
 8006582:	4b6b      	ldr	r3, [pc, #428]	; (8006730 <ai_platform_network_init+0x1c4>)
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800658a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800658e:	d03d      	beq.n	800660c <ai_platform_network_init+0xa0>
 8006590:	4a68      	ldr	r2, [pc, #416]	; (8006734 <ai_platform_network_init+0x1c8>)
 8006592:	2301      	movs	r3, #1
 8006594:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006598:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800659c:	2b00      	cmp	r3, #0
 800659e:	d1fb      	bne.n	8006598 <ai_platform_network_init+0x2c>
 80065a0:	4b65      	ldr	r3, [pc, #404]	; (8006738 <ai_platform_network_init+0x1cc>)
 80065a2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80065a6:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065aa:	4b64      	ldr	r3, [pc, #400]	; (800673c <ai_platform_network_init+0x1d0>)
 80065ac:	429a      	cmp	r2, r3
 80065ae:	d039      	beq.n	8006624 <ai_platform_network_init+0xb8>
 80065b0:	e7fe      	b.n	80065b0 <ai_platform_network_init+0x44>
 80065b2:	f7ff fc1d 	bl	8005df0 <_ai_platform_acquire_crc>
 80065b6:	4b5e      	ldr	r3, [pc, #376]	; (8006730 <ai_platform_network_init+0x1c4>)
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065c2:	d010      	beq.n	80065e6 <ai_platform_network_init+0x7a>
 80065c4:	4a5b      	ldr	r2, [pc, #364]	; (8006734 <ai_platform_network_init+0x1c8>)
 80065c6:	2301      	movs	r3, #1
 80065c8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80065cc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d1fb      	bne.n	80065cc <ai_platform_network_init+0x60>
 80065d4:	4b58      	ldr	r3, [pc, #352]	; (8006738 <ai_platform_network_init+0x1cc>)
 80065d6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80065da:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065de:	4b57      	ldr	r3, [pc, #348]	; (800673c <ai_platform_network_init+0x1d0>)
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d00d      	beq.n	8006600 <ai_platform_network_init+0x94>
 80065e4:	e7fe      	b.n	80065e4 <ai_platform_network_init+0x78>
 80065e6:	4a56      	ldr	r2, [pc, #344]	; (8006740 <ai_platform_network_init+0x1d4>)
 80065e8:	2301      	movs	r3, #1
 80065ea:	6093      	str	r3, [r2, #8]
 80065ec:	6893      	ldr	r3, [r2, #8]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d1fc      	bne.n	80065ec <ai_platform_network_init+0x80>
 80065f2:	4b51      	ldr	r3, [pc, #324]	; (8006738 <ai_platform_network_init+0x1cc>)
 80065f4:	6013      	str	r3, [r2, #0]
 80065f6:	6812      	ldr	r2, [r2, #0]
 80065f8:	4b50      	ldr	r3, [pc, #320]	; (800673c <ai_platform_network_init+0x1d0>)
 80065fa:	429a      	cmp	r2, r3
 80065fc:	d000      	beq.n	8006600 <ai_platform_network_init+0x94>
 80065fe:	e7fe      	b.n	80065fe <ai_platform_network_init+0x92>
 8006600:	f7ff fbf8 	bl	8005df4 <_ai_platform_release_crc>
 8006604:	2600      	movs	r6, #0
 8006606:	4630      	mov	r0, r6
 8006608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800660c:	4a4c      	ldr	r2, [pc, #304]	; (8006740 <ai_platform_network_init+0x1d4>)
 800660e:	2301      	movs	r3, #1
 8006610:	6093      	str	r3, [r2, #8]
 8006612:	6893      	ldr	r3, [r2, #8]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d1fc      	bne.n	8006612 <ai_platform_network_init+0xa6>
 8006618:	4b47      	ldr	r3, [pc, #284]	; (8006738 <ai_platform_network_init+0x1cc>)
 800661a:	6013      	str	r3, [r2, #0]
 800661c:	6812      	ldr	r2, [r2, #0]
 800661e:	4b47      	ldr	r3, [pc, #284]	; (800673c <ai_platform_network_init+0x1d0>)
 8006620:	429a      	cmp	r2, r3
 8006622:	d11c      	bne.n	800665e <ai_platform_network_init+0xf2>
 8006624:	f7ff fbe6 	bl	8005df4 <_ai_platform_release_crc>
 8006628:	2e00      	cmp	r6, #0
 800662a:	d06f      	beq.n	800670c <ai_platform_network_init+0x1a0>
 800662c:	4b45      	ldr	r3, [pc, #276]	; (8006744 <ai_platform_network_init+0x1d8>)
 800662e:	6832      	ldr	r2, [r6, #0]
 8006630:	429a      	cmp	r2, r3
 8006632:	d115      	bne.n	8006660 <ai_platform_network_init+0xf4>
 8006634:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 8006638:	6933      	ldr	r3, [r6, #16]
 800663a:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 800663e:	89f7      	ldrh	r7, [r6, #14]
 8006640:	62a3      	str	r3, [r4, #40]	; 0x28
 8006642:	e9c4 2107 	strd	r2, r1, [r4, #28]
 8006646:	2303      	movs	r3, #3
 8006648:	84e7      	strh	r7, [r4, #38]	; 0x26
 800664a:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 800664e:	60e3      	str	r3, [r4, #12]
 8006650:	4620      	mov	r0, r4
 8006652:	4626      	mov	r6, r4
 8006654:	f000 fbc2 	bl	8006ddc <ai_layers_init_all>
 8006658:	4630      	mov	r0, r6
 800665a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800665e:	e7fe      	b.n	800665e <ai_platform_network_init+0xf2>
 8006660:	2101      	movs	r1, #1
 8006662:	4630      	mov	r0, r6
 8006664:	4635      	mov	r5, r6
 8006666:	6876      	ldr	r6, [r6, #4]
 8006668:	f7ff fb74 	bl	8005d54 <ai_buffer_get_size>
 800666c:	f105 081c 	add.w	r8, r5, #28
 8006670:	4681      	mov	r9, r0
 8006672:	2101      	movs	r1, #1
 8006674:	4640      	mov	r0, r8
 8006676:	6a2f      	ldr	r7, [r5, #32]
 8006678:	f7ff fb6c 	bl	8005d54 <ai_buffer_get_size>
 800667c:	f1b9 0f00 	cmp.w	r9, #0
 8006680:	d025      	beq.n	80066ce <ai_platform_network_init+0x162>
 8006682:	2201      	movs	r2, #1
 8006684:	4696      	mov	lr, r2
 8006686:	bb30      	cbnz	r0, 80066d6 <ai_platform_network_init+0x16a>
 8006688:	4680      	mov	r8, r0
 800668a:	4607      	mov	r7, r0
 800668c:	b376      	cbz	r6, 80066ec <ai_platform_network_init+0x180>
 800668e:	8be3      	ldrh	r3, [r4, #30]
 8006690:	4573      	cmp	r3, lr
 8006692:	d323      	bcc.n	80066dc <ai_platform_network_init+0x170>
 8006694:	b142      	cbz	r2, 80066a8 <ai_platform_network_init+0x13c>
 8006696:	46ac      	mov	ip, r5
 8006698:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800669c:	6a25      	ldr	r5, [r4, #32]
 800669e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066a0:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80066a4:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80066a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80066aa:	f8a4 e01e 	strh.w	lr, [r4, #30]
 80066ae:	2600      	movs	r6, #0
 80066b0:	42bb      	cmp	r3, r7
 80066b2:	83a6      	strh	r6, [r4, #28]
 80066b4:	d323      	bcc.n	80066fe <ai_platform_network_init+0x192>
 80066b6:	b37f      	cbz	r7, 8006718 <ai_platform_network_init+0x1ac>
 80066b8:	46c4      	mov	ip, r8
 80066ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80066be:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80066c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80066c2:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 80066c6:	46b6      	mov	lr, r6
 80066c8:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80066cc:	e7bb      	b.n	8006646 <ai_platform_network_init+0xda>
 80066ce:	464a      	mov	r2, r9
 80066d0:	46ce      	mov	lr, r9
 80066d2:	464d      	mov	r5, r9
 80066d4:	e7d7      	b.n	8006686 <ai_platform_network_init+0x11a>
 80066d6:	b30f      	cbz	r7, 800671c <ai_platform_network_init+0x1b0>
 80066d8:	2701      	movs	r7, #1
 80066da:	e7d7      	b.n	800668c <ai_platform_network_init+0x120>
 80066dc:	2212      	movs	r2, #18
 80066de:	2116      	movs	r1, #22
 80066e0:	f104 0010 	add.w	r0, r4, #16
 80066e4:	f000 fb44 	bl	8006d70 <core_set_error>
 80066e8:	2600      	movs	r6, #0
 80066ea:	e78c      	b.n	8006606 <ai_platform_network_init+0x9a>
 80066ec:	f1b9 0f00 	cmp.w	r9, #0
 80066f0:	d0cd      	beq.n	800668e <ai_platform_network_init+0x122>
 80066f2:	2110      	movs	r1, #16
 80066f4:	2212      	movs	r2, #18
 80066f6:	1860      	adds	r0, r4, r1
 80066f8:	f000 fb3a 	bl	8006d70 <core_set_error>
 80066fc:	e783      	b.n	8006606 <ai_platform_network_init+0x9a>
 80066fe:	2213      	movs	r2, #19
 8006700:	2116      	movs	r1, #22
 8006702:	f104 0010 	add.w	r0, r4, #16
 8006706:	f000 fb33 	bl	8006d70 <core_set_error>
 800670a:	e77c      	b.n	8006606 <ai_platform_network_init+0x9a>
 800670c:	2110      	movs	r1, #16
 800670e:	2211      	movs	r2, #17
 8006710:	1860      	adds	r0, r4, r1
 8006712:	f000 fb2d 	bl	8006d70 <core_set_error>
 8006716:	e776      	b.n	8006606 <ai_platform_network_init+0x9a>
 8006718:	46be      	mov	lr, r7
 800671a:	e794      	b.n	8006646 <ai_platform_network_init+0xda>
 800671c:	2110      	movs	r1, #16
 800671e:	2213      	movs	r2, #19
 8006720:	1860      	adds	r0, r4, r1
 8006722:	f000 fb25 	bl	8006d70 <core_set_error>
 8006726:	463e      	mov	r6, r7
 8006728:	e76d      	b.n	8006606 <ai_platform_network_init+0x9a>
 800672a:	bf00      	nop
 800672c:	a1c00100 	.word	0xa1c00100
 8006730:	e0042000 	.word	0xe0042000
 8006734:	58024000 	.word	0x58024000
 8006738:	f407a5c2 	.word	0xf407a5c2
 800673c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006740:	40023000 	.word	0x40023000
 8006744:	a1facade 	.word	0xa1facade

08006748 <ai_platform_network_post_init>:
 8006748:	b538      	push	{r3, r4, r5, lr}
 800674a:	b1f0      	cbz	r0, 800678a <ai_platform_network_post_init+0x42>
 800674c:	4b3c      	ldr	r3, [pc, #240]	; (8006840 <ai_platform_network_post_init+0xf8>)
 800674e:	6802      	ldr	r2, [r0, #0]
 8006750:	429a      	cmp	r2, r3
 8006752:	4604      	mov	r4, r0
 8006754:	d119      	bne.n	800678a <ai_platform_network_post_init+0x42>
 8006756:	f7ff fb4b 	bl	8005df0 <_ai_platform_acquire_crc>
 800675a:	4b3a      	ldr	r3, [pc, #232]	; (8006844 <ai_platform_network_post_init+0xfc>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006762:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006766:	d03b      	beq.n	80067e0 <ai_platform_network_post_init+0x98>
 8006768:	4a37      	ldr	r2, [pc, #220]	; (8006848 <ai_platform_network_post_init+0x100>)
 800676a:	2301      	movs	r3, #1
 800676c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006770:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006774:	2b00      	cmp	r3, #0
 8006776:	d1fb      	bne.n	8006770 <ai_platform_network_post_init+0x28>
 8006778:	4b34      	ldr	r3, [pc, #208]	; (800684c <ai_platform_network_post_init+0x104>)
 800677a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800677e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006782:	4b33      	ldr	r3, [pc, #204]	; (8006850 <ai_platform_network_post_init+0x108>)
 8006784:	429a      	cmp	r2, r3
 8006786:	d037      	beq.n	80067f8 <ai_platform_network_post_init+0xb0>
 8006788:	e7fe      	b.n	8006788 <ai_platform_network_post_init+0x40>
 800678a:	f7ff fb31 	bl	8005df0 <_ai_platform_acquire_crc>
 800678e:	4b2d      	ldr	r3, [pc, #180]	; (8006844 <ai_platform_network_post_init+0xfc>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679a:	d010      	beq.n	80067be <ai_platform_network_post_init+0x76>
 800679c:	4a2a      	ldr	r2, [pc, #168]	; (8006848 <ai_platform_network_post_init+0x100>)
 800679e:	2301      	movs	r3, #1
 80067a0:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067a4:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d1fb      	bne.n	80067a4 <ai_platform_network_post_init+0x5c>
 80067ac:	4b27      	ldr	r3, [pc, #156]	; (800684c <ai_platform_network_post_init+0x104>)
 80067ae:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80067b2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067b6:	4b26      	ldr	r3, [pc, #152]	; (8006850 <ai_platform_network_post_init+0x108>)
 80067b8:	429a      	cmp	r2, r3
 80067ba:	d00d      	beq.n	80067d8 <ai_platform_network_post_init+0x90>
 80067bc:	e7fe      	b.n	80067bc <ai_platform_network_post_init+0x74>
 80067be:	4a25      	ldr	r2, [pc, #148]	; (8006854 <ai_platform_network_post_init+0x10c>)
 80067c0:	2301      	movs	r3, #1
 80067c2:	6093      	str	r3, [r2, #8]
 80067c4:	6893      	ldr	r3, [r2, #8]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	d1fc      	bne.n	80067c4 <ai_platform_network_post_init+0x7c>
 80067ca:	4b20      	ldr	r3, [pc, #128]	; (800684c <ai_platform_network_post_init+0x104>)
 80067cc:	6013      	str	r3, [r2, #0]
 80067ce:	6812      	ldr	r2, [r2, #0]
 80067d0:	4b1f      	ldr	r3, [pc, #124]	; (8006850 <ai_platform_network_post_init+0x108>)
 80067d2:	429a      	cmp	r2, r3
 80067d4:	d000      	beq.n	80067d8 <ai_platform_network_post_init+0x90>
 80067d6:	e7fe      	b.n	80067d6 <ai_platform_network_post_init+0x8e>
 80067d8:	f7ff fb0c 	bl	8005df4 <_ai_platform_release_crc>
 80067dc:	2000      	movs	r0, #0
 80067de:	bd38      	pop	{r3, r4, r5, pc}
 80067e0:	4a1c      	ldr	r2, [pc, #112]	; (8006854 <ai_platform_network_post_init+0x10c>)
 80067e2:	2301      	movs	r3, #1
 80067e4:	6093      	str	r3, [r2, #8]
 80067e6:	6893      	ldr	r3, [r2, #8]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d1fc      	bne.n	80067e6 <ai_platform_network_post_init+0x9e>
 80067ec:	4b17      	ldr	r3, [pc, #92]	; (800684c <ai_platform_network_post_init+0x104>)
 80067ee:	6013      	str	r3, [r2, #0]
 80067f0:	6812      	ldr	r2, [r2, #0]
 80067f2:	4b17      	ldr	r3, [pc, #92]	; (8006850 <ai_platform_network_post_init+0x108>)
 80067f4:	429a      	cmp	r2, r3
 80067f6:	d11a      	bne.n	800682e <ai_platform_network_post_init+0xe6>
 80067f8:	f7ff fafc 	bl	8005df4 <_ai_platform_release_crc>
 80067fc:	68e3      	ldr	r3, [r4, #12]
 80067fe:	f013 0502 	ands.w	r5, r3, #2
 8006802:	d015      	beq.n	8006830 <ai_platform_network_post_init+0xe8>
 8006804:	4620      	mov	r0, r4
 8006806:	f000 faf7 	bl	8006df8 <ai_layers_post_init_all>
 800680a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800680c:	b16b      	cbz	r3, 800682a <ai_platform_network_post_init+0xe2>
 800680e:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006810:	e007      	b.n	8006822 <ai_platform_network_post_init+0xda>
 8006812:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006816:	4798      	blx	r3
 8006818:	692b      	ldr	r3, [r5, #16]
 800681a:	42ab      	cmp	r3, r5
 800681c:	d005      	beq.n	800682a <ai_platform_network_post_init+0xe2>
 800681e:	b123      	cbz	r3, 800682a <ai_platform_network_post_init+0xe2>
 8006820:	461d      	mov	r5, r3
 8006822:	4629      	mov	r1, r5
 8006824:	2000      	movs	r0, #0
 8006826:	2d00      	cmp	r5, #0
 8006828:	d1f3      	bne.n	8006812 <ai_platform_network_post_init+0xca>
 800682a:	2001      	movs	r0, #1
 800682c:	bd38      	pop	{r3, r4, r5, pc}
 800682e:	e7fe      	b.n	800682e <ai_platform_network_post_init+0xe6>
 8006830:	2210      	movs	r2, #16
 8006832:	2111      	movs	r1, #17
 8006834:	18a0      	adds	r0, r4, r2
 8006836:	f000 fa9b 	bl	8006d70 <core_set_error>
 800683a:	4628      	mov	r0, r5
 800683c:	bd38      	pop	{r3, r4, r5, pc}
 800683e:	bf00      	nop
 8006840:	a1c00100 	.word	0xa1c00100
 8006844:	e0042000 	.word	0xe0042000
 8006848:	58024000 	.word	0x58024000
 800684c:	f407a5c2 	.word	0xf407a5c2
 8006850:	b5e8b5cd 	.word	0xb5e8b5cd
 8006854:	40023000 	.word	0x40023000

08006858 <ai_platform_network_process>:
 8006858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800685c:	460e      	mov	r6, r1
 800685e:	b085      	sub	sp, #20
 8006860:	4693      	mov	fp, r2
 8006862:	4605      	mov	r5, r0
 8006864:	b120      	cbz	r0, 8006870 <ai_platform_network_process+0x18>
 8006866:	4bb8      	ldr	r3, [pc, #736]	; (8006b48 <ai_platform_network_process+0x2f0>)
 8006868:	6802      	ldr	r2, [r0, #0]
 800686a:	429a      	cmp	r2, r3
 800686c:	bf18      	it	ne
 800686e:	2500      	movne	r5, #0
 8006870:	f7ff fabe 	bl	8005df0 <_ai_platform_acquire_crc>
 8006874:	4bb5      	ldr	r3, [pc, #724]	; (8006b4c <ai_platform_network_process+0x2f4>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800687c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006880:	d010      	beq.n	80068a4 <ai_platform_network_process+0x4c>
 8006882:	4ab3      	ldr	r2, [pc, #716]	; (8006b50 <ai_platform_network_process+0x2f8>)
 8006884:	2301      	movs	r3, #1
 8006886:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800688a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1fb      	bne.n	800688a <ai_platform_network_process+0x32>
 8006892:	4bb0      	ldr	r3, [pc, #704]	; (8006b54 <ai_platform_network_process+0x2fc>)
 8006894:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006898:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800689c:	4bae      	ldr	r3, [pc, #696]	; (8006b58 <ai_platform_network_process+0x300>)
 800689e:	429a      	cmp	r2, r3
 80068a0:	d00d      	beq.n	80068be <ai_platform_network_process+0x66>
 80068a2:	e7fe      	b.n	80068a2 <ai_platform_network_process+0x4a>
 80068a4:	4aad      	ldr	r2, [pc, #692]	; (8006b5c <ai_platform_network_process+0x304>)
 80068a6:	2301      	movs	r3, #1
 80068a8:	6093      	str	r3, [r2, #8]
 80068aa:	6893      	ldr	r3, [r2, #8]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d1fc      	bne.n	80068aa <ai_platform_network_process+0x52>
 80068b0:	4ba8      	ldr	r3, [pc, #672]	; (8006b54 <ai_platform_network_process+0x2fc>)
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	6812      	ldr	r2, [r2, #0]
 80068b6:	4ba8      	ldr	r3, [pc, #672]	; (8006b58 <ai_platform_network_process+0x300>)
 80068b8:	429a      	cmp	r2, r3
 80068ba:	f040 812c 	bne.w	8006b16 <ai_platform_network_process+0x2be>
 80068be:	f7ff fa99 	bl	8005df4 <_ai_platform_release_crc>
 80068c2:	2d00      	cmp	r5, #0
 80068c4:	f000 8154 	beq.w	8006b70 <ai_platform_network_process+0x318>
 80068c8:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 8124 	beq.w	8006b18 <ai_platform_network_process+0x2c0>
 80068d0:	68eb      	ldr	r3, [r5, #12]
 80068d2:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 80068d6:	f003 0303 	and.w	r3, r3, #3
 80068da:	2700      	movs	r7, #0
 80068dc:	2b03      	cmp	r3, #3
 80068de:	616f      	str	r7, [r5, #20]
 80068e0:	f040 813e 	bne.w	8006b60 <ai_platform_network_process+0x308>
 80068e4:	2e00      	cmp	r6, #0
 80068e6:	f000 811d 	beq.w	8006b24 <ai_platform_network_process+0x2cc>
 80068ea:	f1ba 0f00 	cmp.w	sl, #0
 80068ee:	f000 8119 	beq.w	8006b24 <ai_platform_network_process+0x2cc>
 80068f2:	f8ba 3000 	ldrh.w	r3, [sl]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	f000 8114 	beq.w	8006b24 <ai_platform_network_process+0x2cc>
 80068fc:	69b3      	ldr	r3, [r6, #24]
 80068fe:	f8cd b00c 	str.w	fp, [sp, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8006908:	f8da 3004 	ldr.w	r3, [sl, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d072      	beq.n	80069f6 <ai_platform_network_process+0x19e>
 8006910:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006914:	2c00      	cmp	r4, #0
 8006916:	d06e      	beq.n	80069f6 <ai_platform_network_process+0x19e>
 8006918:	f8da 3008 	ldr.w	r3, [sl, #8]
 800691c:	f8d3 9000 	ldr.w	r9, [r3]
 8006920:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8006924:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006928:	f000 81de 	beq.w	8006ce8 <ai_platform_network_process+0x490>
 800692c:	69a3      	ldr	r3, [r4, #24]
 800692e:	2101      	movs	r1, #1
 8006930:	4630      	mov	r0, r6
 8006932:	685d      	ldr	r5, [r3, #4]
 8006934:	f7ff fa0e 	bl	8005d54 <ai_buffer_get_size>
 8006938:	4285      	cmp	r5, r0
 800693a:	f0c0 811b 	bcc.w	8006b74 <ai_platform_network_process+0x31c>
 800693e:	68e0      	ldr	r0, [r4, #12]
 8006940:	69b1      	ldr	r1, [r6, #24]
 8006942:	68c2      	ldr	r2, [r0, #12]
 8006944:	68cb      	ldr	r3, [r1, #12]
 8006946:	429a      	cmp	r2, r3
 8006948:	f040 8114 	bne.w	8006b74 <ai_platform_network_process+0x31c>
 800694c:	6882      	ldr	r2, [r0, #8]
 800694e:	688b      	ldr	r3, [r1, #8]
 8006950:	429a      	cmp	r2, r3
 8006952:	f040 810f 	bne.w	8006b74 <ai_platform_network_process+0x31c>
 8006956:	6842      	ldr	r2, [r0, #4]
 8006958:	684b      	ldr	r3, [r1, #4]
 800695a:	429a      	cmp	r2, r3
 800695c:	f040 810a 	bne.w	8006b74 <ai_platform_network_process+0x31c>
 8006960:	69a3      	ldr	r3, [r4, #24]
 8006962:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006966:	f002 fda1 	bl	80094ac <ai_array_get_data_byte_size>
 800696a:	4605      	mov	r5, r0
 800696c:	4620      	mov	r0, r4
 800696e:	f002 fdb5 	bl	80094dc <get_tensor_byte_size>
 8006972:	4285      	cmp	r5, r0
 8006974:	f0c0 80fe 	bcc.w	8006b74 <ai_platform_network_process+0x31c>
 8006978:	69a3      	ldr	r3, [r4, #24]
 800697a:	6818      	ldr	r0, [r3, #0]
 800697c:	f002 fd02 	bl	8009384 <ai_array_to_buffer_fmt>
 8006980:	6833      	ldr	r3, [r6, #0]
 8006982:	4058      	eors	r0, r3
 8006984:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006988:	f040 81b9 	bne.w	8006cfe <ai_platform_network_process+0x4a6>
 800698c:	6873      	ldr	r3, [r6, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	f000 81ac 	beq.w	8006cec <ai_platform_network_process+0x494>
 8006994:	69b3      	ldr	r3, [r6, #24]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 819c 	beq.w	8006cd6 <ai_platform_network_process+0x47e>
 800699e:	9a01      	ldr	r2, [sp, #4]
 80069a0:	429a      	cmp	r2, r3
 80069a2:	bf38      	it	cc
 80069a4:	461a      	movcc	r2, r3
 80069a6:	4620      	mov	r0, r4
 80069a8:	9201      	str	r2, [sp, #4]
 80069aa:	f002 fd97 	bl	80094dc <get_tensor_byte_size>
 80069ae:	f8c8 0008 	str.w	r0, [r8, #8]
 80069b2:	69b3      	ldr	r3, [r6, #24]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	fb00 f303 	mul.w	r3, r0, r3
 80069ba:	f8c8 300c 	str.w	r3, [r8, #12]
 80069be:	6871      	ldr	r1, [r6, #4]
 80069c0:	f8c8 1004 	str.w	r1, [r8, #4]
 80069c4:	440b      	add	r3, r1
 80069c6:	f849 300b 	str.w	r3, [r9, fp]
 80069ca:	69a0      	ldr	r0, [r4, #24]
 80069cc:	6803      	ldr	r3, [r0, #0]
 80069ce:	009a      	lsls	r2, r3, #2
 80069d0:	f107 0701 	add.w	r7, r7, #1
 80069d4:	f106 061c 	add.w	r6, r6, #28
 80069d8:	f100 80af 	bmi.w	8006b3a <ai_platform_network_process+0x2e2>
 80069dc:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 80069e0:	1a9b      	subs	r3, r3, r2
 80069e2:	4419      	add	r1, r3
 80069e4:	6081      	str	r1, [r0, #8]
 80069e6:	69a3      	ldr	r3, [r4, #24]
 80069e8:	f8d8 2004 	ldr.w	r2, [r8, #4]
 80069ec:	60da      	str	r2, [r3, #12]
 80069ee:	f8ba 3000 	ldrh.w	r3, [sl]
 80069f2:	42bb      	cmp	r3, r7
 80069f4:	d888      	bhi.n	8006908 <ai_platform_network_process+0xb0>
 80069f6:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 80069fa:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 80069fc:	f1bb 0f00 	cmp.w	fp, #0
 8006a00:	f000 8186 	beq.w	8006d10 <ai_platform_network_process+0x4b8>
 8006a04:	2a01      	cmp	r2, #1
 8006a06:	f240 815e 	bls.w	8006cc6 <ai_platform_network_process+0x46e>
 8006a0a:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006a0e:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8157 	beq.w	8006cc6 <ai_platform_network_process+0x46e>
 8006a18:	465e      	mov	r6, fp
 8006a1a:	2700      	movs	r7, #0
 8006a1c:	462c      	mov	r4, r5
 8006a1e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80b4 	beq.w	8006b90 <ai_platform_network_process+0x338>
 8006a28:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	f000 80af 	beq.w	8006b90 <ai_platform_network_process+0x338>
 8006a32:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006a36:	f8d3 8000 	ldr.w	r8, [r3]
 8006a3a:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006a3e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006a42:	f000 8171 	beq.w	8006d28 <ai_platform_network_process+0x4d0>
 8006a46:	69ab      	ldr	r3, [r5, #24]
 8006a48:	2101      	movs	r1, #1
 8006a4a:	685b      	ldr	r3, [r3, #4]
 8006a4c:	9302      	str	r3, [sp, #8]
 8006a4e:	4630      	mov	r0, r6
 8006a50:	f7ff f980 	bl	8005d54 <ai_buffer_get_size>
 8006a54:	9b02      	ldr	r3, [sp, #8]
 8006a56:	4283      	cmp	r3, r0
 8006a58:	f0c0 8134 	bcc.w	8006cc4 <ai_platform_network_process+0x46c>
 8006a5c:	68e8      	ldr	r0, [r5, #12]
 8006a5e:	69b1      	ldr	r1, [r6, #24]
 8006a60:	68c2      	ldr	r2, [r0, #12]
 8006a62:	68cb      	ldr	r3, [r1, #12]
 8006a64:	429a      	cmp	r2, r3
 8006a66:	f040 812d 	bne.w	8006cc4 <ai_platform_network_process+0x46c>
 8006a6a:	6882      	ldr	r2, [r0, #8]
 8006a6c:	688b      	ldr	r3, [r1, #8]
 8006a6e:	429a      	cmp	r2, r3
 8006a70:	f040 8128 	bne.w	8006cc4 <ai_platform_network_process+0x46c>
 8006a74:	6842      	ldr	r2, [r0, #4]
 8006a76:	684b      	ldr	r3, [r1, #4]
 8006a78:	429a      	cmp	r2, r3
 8006a7a:	f040 8123 	bne.w	8006cc4 <ai_platform_network_process+0x46c>
 8006a7e:	69ab      	ldr	r3, [r5, #24]
 8006a80:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006a84:	f002 fd12 	bl	80094ac <ai_array_get_data_byte_size>
 8006a88:	9002      	str	r0, [sp, #8]
 8006a8a:	4628      	mov	r0, r5
 8006a8c:	f002 fd26 	bl	80094dc <get_tensor_byte_size>
 8006a90:	9b02      	ldr	r3, [sp, #8]
 8006a92:	4283      	cmp	r3, r0
 8006a94:	f0c0 8116 	bcc.w	8006cc4 <ai_platform_network_process+0x46c>
 8006a98:	69ab      	ldr	r3, [r5, #24]
 8006a9a:	6818      	ldr	r0, [r3, #0]
 8006a9c:	f002 fc72 	bl	8009384 <ai_array_to_buffer_fmt>
 8006aa0:	6833      	ldr	r3, [r6, #0]
 8006aa2:	4058      	eors	r0, r3
 8006aa4:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006aa8:	f040 8136 	bne.w	8006d18 <ai_platform_network_process+0x4c0>
 8006aac:	6873      	ldr	r3, [r6, #4]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f000 814d 	beq.w	8006d4e <ai_platform_network_process+0x4f6>
 8006ab4:	69b3      	ldr	r3, [r6, #24]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	2b00      	cmp	r3, #0
 8006aba:	f000 813f 	beq.w	8006d3c <ai_platform_network_process+0x4e4>
 8006abe:	9a01      	ldr	r2, [sp, #4]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	bf38      	it	cc
 8006ac4:	461a      	movcc	r2, r3
 8006ac6:	4628      	mov	r0, r5
 8006ac8:	9201      	str	r2, [sp, #4]
 8006aca:	f002 fd07 	bl	80094dc <get_tensor_byte_size>
 8006ace:	f8ca 0008 	str.w	r0, [sl, #8]
 8006ad2:	69b3      	ldr	r3, [r6, #24]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	fb00 f303 	mul.w	r3, r0, r3
 8006ada:	f8ca 300c 	str.w	r3, [sl, #12]
 8006ade:	6871      	ldr	r1, [r6, #4]
 8006ae0:	f8ca 1004 	str.w	r1, [sl, #4]
 8006ae4:	440b      	add	r3, r1
 8006ae6:	f848 300b 	str.w	r3, [r8, fp]
 8006aea:	69a8      	ldr	r0, [r5, #24]
 8006aec:	6803      	ldr	r3, [r0, #0]
 8006aee:	009b      	lsls	r3, r3, #2
 8006af0:	f107 0701 	add.w	r7, r7, #1
 8006af4:	f106 061c 	add.w	r6, r6, #28
 8006af8:	d445      	bmi.n	8006b86 <ai_platform_network_process+0x32e>
 8006afa:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006afe:	1a9b      	subs	r3, r3, r2
 8006b00:	4419      	add	r1, r3
 8006b02:	6081      	str	r1, [r0, #8]
 8006b04:	69ab      	ldr	r3, [r5, #24]
 8006b06:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006b0a:	60da      	str	r2, [r3, #12]
 8006b0c:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006b10:	429f      	cmp	r7, r3
 8006b12:	d384      	bcc.n	8006a1e <ai_platform_network_process+0x1c6>
 8006b14:	e03c      	b.n	8006b90 <ai_platform_network_process+0x338>
 8006b16:	e7fe      	b.n	8006b16 <ai_platform_network_process+0x2be>
 8006b18:	68ea      	ldr	r2, [r5, #12]
 8006b1a:	616b      	str	r3, [r5, #20]
 8006b1c:	f002 0203 	and.w	r2, r2, #3
 8006b20:	2a03      	cmp	r2, #3
 8006b22:	d11d      	bne.n	8006b60 <ai_platform_network_process+0x308>
 8006b24:	2217      	movs	r2, #23
 8006b26:	2112      	movs	r1, #18
 8006b28:	f105 0010 	add.w	r0, r5, #16
 8006b2c:	f000 f920 	bl	8006d70 <core_set_error>
 8006b30:	2400      	movs	r4, #0
 8006b32:	4620      	mov	r0, r4
 8006b34:	b005      	add	sp, #20
 8006b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b3a:	f8ba 3000 	ldrh.w	r3, [sl]
 8006b3e:	429f      	cmp	r7, r3
 8006b40:	f4ff aee2 	bcc.w	8006908 <ai_platform_network_process+0xb0>
 8006b44:	e757      	b.n	80069f6 <ai_platform_network_process+0x19e>
 8006b46:	bf00      	nop
 8006b48:	a1c00100 	.word	0xa1c00100
 8006b4c:	e0042000 	.word	0xe0042000
 8006b50:	58024000 	.word	0x58024000
 8006b54:	f407a5c2 	.word	0xf407a5c2
 8006b58:	b5e8b5cd 	.word	0xb5e8b5cd
 8006b5c:	40023000 	.word	0x40023000
 8006b60:	2230      	movs	r2, #48	; 0x30
 8006b62:	2111      	movs	r1, #17
 8006b64:	f105 0010 	add.w	r0, r5, #16
 8006b68:	f000 f902 	bl	8006d70 <core_set_error>
 8006b6c:	2400      	movs	r4, #0
 8006b6e:	e7e0      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006b70:	462c      	mov	r4, r5
 8006b72:	e7de      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006b74:	9d02      	ldr	r5, [sp, #8]
 8006b76:	2218      	movs	r2, #24
 8006b78:	2112      	movs	r1, #18
 8006b7a:	f105 0010 	add.w	r0, r5, #16
 8006b7e:	f000 f8f7 	bl	8006d70 <core_set_error>
 8006b82:	2400      	movs	r4, #0
 8006b84:	e7d5      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006b86:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006b8a:	429f      	cmp	r7, r3
 8006b8c:	f4ff af47 	bcc.w	8006a1e <ai_platform_network_process+0x1c6>
 8006b90:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006b94:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006b96:	82a3      	strh	r3, [r4, #20]
 8006b98:	4625      	mov	r5, r4
 8006b9a:	2a00      	cmp	r2, #0
 8006b9c:	f040 808c 	bne.w	8006cb8 <ai_platform_network_process+0x460>
 8006ba0:	4616      	mov	r6, r2
 8006ba2:	4617      	mov	r7, r2
 8006ba4:	8aec      	ldrh	r4, [r5, #22]
 8006ba6:	429c      	cmp	r4, r3
 8006ba8:	bf38      	it	cc
 8006baa:	46ab      	movcc	fp, r5
 8006bac:	d2c1      	bcs.n	8006b32 <ai_platform_network_process+0x2da>
 8006bae:	2e00      	cmp	r6, #0
 8006bb0:	d030      	beq.n	8006c14 <ai_platform_network_process+0x3bc>
 8006bb2:	f04f 0800 	mov.w	r8, #0
 8006bb6:	e014      	b.n	8006be2 <ai_platform_network_process+0x38a>
 8006bb8:	6882      	ldr	r2, [r0, #8]
 8006bba:	68c5      	ldr	r5, [r0, #12]
 8006bbc:	6863      	ldr	r3, [r4, #4]
 8006bbe:	1b52      	subs	r2, r2, r5
 8006bc0:	4413      	add	r3, r2
 8006bc2:	6083      	str	r3, [r0, #8]
 8006bc4:	698b      	ldr	r3, [r1, #24]
 8006bc6:	6862      	ldr	r2, [r4, #4]
 8006bc8:	60da      	str	r2, [r3, #12]
 8006bca:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006bce:	f859 200a 	ldr.w	r2, [r9, sl]
 8006bd2:	440b      	add	r3, r1
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	bf24      	itt	cs
 8006bd8:	68e3      	ldrcs	r3, [r4, #12]
 8006bda:	1ad3      	subcs	r3, r2, r3
 8006bdc:	6063      	str	r3, [r4, #4]
 8006bde:	f108 0801 	add.w	r8, r8, #1
 8006be2:	8833      	ldrh	r3, [r6, #0]
 8006be4:	4543      	cmp	r3, r8
 8006be6:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006bea:	d913      	bls.n	8006c14 <ai_platform_network_process+0x3bc>
 8006bec:	6873      	ldr	r3, [r6, #4]
 8006bee:	b18b      	cbz	r3, 8006c14 <ai_platform_network_process+0x3bc>
 8006bf0:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006bf4:	b171      	cbz	r1, 8006c14 <ai_platform_network_process+0x3bc>
 8006bf6:	6988      	ldr	r0, [r1, #24]
 8006bf8:	68b2      	ldr	r2, [r6, #8]
 8006bfa:	6803      	ldr	r3, [r0, #0]
 8006bfc:	f8d2 9000 	ldr.w	r9, [r2]
 8006c00:	009d      	lsls	r5, r3, #2
 8006c02:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006c06:	d5d7      	bpl.n	8006bb8 <ai_platform_network_process+0x360>
 8006c08:	6881      	ldr	r1, [r0, #8]
 8006c0a:	68a2      	ldr	r2, [r4, #8]
 8006c0c:	6860      	ldr	r0, [r4, #4]
 8006c0e:	f002 fb33 	bl	8009278 <st_int8_copy>
 8006c12:	e7da      	b.n	8006bca <ai_platform_network_process+0x372>
 8006c14:	4658      	mov	r0, fp
 8006c16:	f000 f903 	bl	8006e20 <ai_layers_forward_all>
 8006c1a:	2f00      	cmp	r7, #0
 8006c1c:	d03d      	beq.n	8006c9a <ai_platform_network_process+0x442>
 8006c1e:	2400      	movs	r4, #0
 8006c20:	e016      	b.n	8006c50 <ai_platform_network_process+0x3f8>
 8006c22:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006c26:	f859 100a 	ldr.w	r1, [r9, sl]
 8006c2a:	4413      	add	r3, r2
 8006c2c:	428b      	cmp	r3, r1
 8006c2e:	bf24      	itt	cs
 8006c30:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006c34:	1acb      	subcs	r3, r1, r3
 8006c36:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c3a:	6981      	ldr	r1, [r0, #24]
 8006c3c:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006c40:	1b52      	subs	r2, r2, r5
 8006c42:	4413      	add	r3, r2
 8006c44:	608b      	str	r3, [r1, #8]
 8006c46:	6983      	ldr	r3, [r0, #24]
 8006c48:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006c4c:	60da      	str	r2, [r3, #12]
 8006c4e:	3401      	adds	r4, #1
 8006c50:	883b      	ldrh	r3, [r7, #0]
 8006c52:	42a3      	cmp	r3, r4
 8006c54:	d921      	bls.n	8006c9a <ai_platform_network_process+0x442>
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	b1fb      	cbz	r3, 8006c9a <ai_platform_network_process+0x442>
 8006c5a:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006c5e:	b1e0      	cbz	r0, 8006c9a <ai_platform_network_process+0x442>
 8006c60:	68ba      	ldr	r2, [r7, #8]
 8006c62:	6983      	ldr	r3, [r0, #24]
 8006c64:	f8d2 9000 	ldr.w	r9, [r2]
 8006c68:	681a      	ldr	r2, [r3, #0]
 8006c6a:	0092      	lsls	r2, r2, #2
 8006c6c:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006c70:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006c74:	d5d5      	bpl.n	8006c22 <ai_platform_network_process+0x3ca>
 8006c76:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006c7a:	6898      	ldr	r0, [r3, #8]
 8006c7c:	f002 fafc 	bl	8009278 <st_int8_copy>
 8006c80:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006c84:	f859 200a 	ldr.w	r2, [r9, sl]
 8006c88:	440b      	add	r3, r1
 8006c8a:	4293      	cmp	r3, r2
 8006c8c:	bf24      	itt	cs
 8006c8e:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006c92:	1ad3      	subcs	r3, r2, r3
 8006c94:	f8c8 3004 	str.w	r3, [r8, #4]
 8006c98:	e7d9      	b.n	8006c4e <ai_platform_network_process+0x3f6>
 8006c9a:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8006c9e:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006ca2:	3401      	adds	r4, #1
 8006ca4:	b2a4      	uxth	r4, r4
 8006ca6:	42a3      	cmp	r3, r4
 8006ca8:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006cac:	f63f af7f 	bhi.w	8006bae <ai_platform_network_process+0x356>
 8006cb0:	4620      	mov	r0, r4
 8006cb2:	b005      	add	sp, #20
 8006cb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006cb8:	2a01      	cmp	r2, #1
 8006cba:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006cbc:	d03c      	beq.n	8006d38 <ai_platform_network_process+0x4e0>
 8006cbe:	f106 070c 	add.w	r7, r6, #12
 8006cc2:	e76f      	b.n	8006ba4 <ai_platform_network_process+0x34c>
 8006cc4:	4625      	mov	r5, r4
 8006cc6:	2218      	movs	r2, #24
 8006cc8:	2113      	movs	r1, #19
 8006cca:	f105 0010 	add.w	r0, r5, #16
 8006cce:	f000 f84f 	bl	8006d70 <core_set_error>
 8006cd2:	2400      	movs	r4, #0
 8006cd4:	e72d      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006cd6:	9d02      	ldr	r5, [sp, #8]
 8006cd8:	4604      	mov	r4, r0
 8006cda:	2221      	movs	r2, #33	; 0x21
 8006cdc:	2112      	movs	r1, #18
 8006cde:	f105 0010 	add.w	r0, r5, #16
 8006ce2:	f000 f845 	bl	8006d70 <core_set_error>
 8006ce6:	e724      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006ce8:	9d02      	ldr	r5, [sp, #8]
 8006cea:	e71b      	b.n	8006b24 <ai_platform_network_process+0x2cc>
 8006cec:	9d02      	ldr	r5, [sp, #8]
 8006cee:	4604      	mov	r4, r0
 8006cf0:	2217      	movs	r2, #23
 8006cf2:	2112      	movs	r1, #18
 8006cf4:	f105 0010 	add.w	r0, r5, #16
 8006cf8:	f000 f83a 	bl	8006d70 <core_set_error>
 8006cfc:	e719      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006cfe:	9d02      	ldr	r5, [sp, #8]
 8006d00:	2219      	movs	r2, #25
 8006d02:	2112      	movs	r1, #18
 8006d04:	f105 0010 	add.w	r0, r5, #16
 8006d08:	f000 f832 	bl	8006d70 <core_set_error>
 8006d0c:	2400      	movs	r4, #0
 8006d0e:	e710      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006d10:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006d14:	82ab      	strh	r3, [r5, #20]
 8006d16:	e740      	b.n	8006b9a <ai_platform_network_process+0x342>
 8006d18:	f104 0010 	add.w	r0, r4, #16
 8006d1c:	2219      	movs	r2, #25
 8006d1e:	2113      	movs	r1, #19
 8006d20:	f000 f826 	bl	8006d70 <core_set_error>
 8006d24:	2400      	movs	r4, #0
 8006d26:	e704      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006d28:	f104 0010 	add.w	r0, r4, #16
 8006d2c:	2217      	movs	r2, #23
 8006d2e:	2113      	movs	r1, #19
 8006d30:	f000 f81e 	bl	8006d70 <core_set_error>
 8006d34:	4654      	mov	r4, sl
 8006d36:	e6fc      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006d38:	2700      	movs	r7, #0
 8006d3a:	e733      	b.n	8006ba4 <ai_platform_network_process+0x34c>
 8006d3c:	4625      	mov	r5, r4
 8006d3e:	2221      	movs	r2, #33	; 0x21
 8006d40:	4604      	mov	r4, r0
 8006d42:	2113      	movs	r1, #19
 8006d44:	f105 0010 	add.w	r0, r5, #16
 8006d48:	f000 f812 	bl	8006d70 <core_set_error>
 8006d4c:	e6f1      	b.n	8006b32 <ai_platform_network_process+0x2da>
 8006d4e:	4625      	mov	r5, r4
 8006d50:	2217      	movs	r2, #23
 8006d52:	4604      	mov	r4, r0
 8006d54:	2113      	movs	r1, #19
 8006d56:	f105 0010 	add.w	r0, r5, #16
 8006d5a:	f000 f809 	bl	8006d70 <core_set_error>
 8006d5e:	e6e8      	b.n	8006b32 <ai_platform_network_process+0x2da>

08006d60 <core_init>:
 8006d60:	2001      	movs	r0, #1
 8006d62:	4770      	bx	lr

08006d64 <core_get_error>:
 8006d64:	4603      	mov	r3, r0
 8006d66:	2200      	movs	r2, #0
 8006d68:	6800      	ldr	r0, [r0, #0]
 8006d6a:	601a      	str	r2, [r3, #0]
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <core_set_error>:
 8006d70:	4603      	mov	r3, r0
 8006d72:	7800      	ldrb	r0, [r0, #0]
 8006d74:	b108      	cbz	r0, 8006d7a <core_set_error+0xa>
 8006d76:	2000      	movs	r0, #0
 8006d78:	4770      	bx	lr
 8006d7a:	7019      	strb	r1, [r3, #0]
 8006d7c:	6819      	ldr	r1, [r3, #0]
 8006d7e:	f362 211f 	bfi	r1, r2, #8, #24
 8006d82:	2001      	movs	r0, #1
 8006d84:	6019      	str	r1, [r3, #0]
 8006d86:	4770      	bx	lr

08006d88 <ai_check_custom_types>:
 8006d88:	b082      	sub	sp, #8
 8006d8a:	4b13      	ldr	r3, [pc, #76]	; (8006dd8 <ai_check_custom_types+0x50>)
 8006d8c:	9301      	str	r3, [sp, #4]
 8006d8e:	b118      	cbz	r0, 8006d98 <ai_check_custom_types+0x10>
 8006d90:	7803      	ldrb	r3, [r0, #0]
 8006d92:	2b03      	cmp	r3, #3
 8006d94:	d002      	beq.n	8006d9c <ai_check_custom_types+0x14>
 8006d96:	2000      	movs	r0, #0
 8006d98:	b002      	add	sp, #8
 8006d9a:	4770      	bx	lr
 8006d9c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006da0:	4293      	cmp	r3, r2
 8006da2:	d004      	beq.n	8006dae <ai_check_custom_types+0x26>
 8006da4:	2001      	movs	r0, #1
 8006da6:	f080 0001 	eor.w	r0, r0, #1
 8006daa:	b002      	add	sp, #8
 8006dac:	4770      	bx	lr
 8006dae:	7842      	ldrb	r2, [r0, #1]
 8006db0:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	f100 0001 	add.w	r0, r0, #1
 8006dba:	d1f3      	bne.n	8006da4 <ai_check_custom_types+0x1c>
 8006dbc:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006dc0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006dc4:	429a      	cmp	r2, r3
 8006dc6:	d1ed      	bne.n	8006da4 <ai_check_custom_types+0x1c>
 8006dc8:	7842      	ldrb	r2, [r0, #1]
 8006dca:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d1e8      	bne.n	8006da4 <ai_check_custom_types+0x1c>
 8006dd2:	2000      	movs	r0, #0
 8006dd4:	e7e7      	b.n	8006da6 <ai_check_custom_types+0x1e>
 8006dd6:	bf00      	nop
 8006dd8:	84048403 	.word	0x84048403

08006ddc <ai_layers_init_all>:
 8006ddc:	4601      	mov	r1, r0
 8006dde:	2000      	movs	r0, #0
 8006de0:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006de2:	b143      	cbz	r3, 8006df6 <ai_layers_init_all+0x1a>
 8006de4:	691a      	ldr	r2, [r3, #16]
 8006de6:	60d9      	str	r1, [r3, #12]
 8006de8:	429a      	cmp	r2, r3
 8006dea:	f100 0001 	add.w	r0, r0, #1
 8006dee:	d002      	beq.n	8006df6 <ai_layers_init_all+0x1a>
 8006df0:	b10a      	cbz	r2, 8006df6 <ai_layers_init_all+0x1a>
 8006df2:	4613      	mov	r3, r2
 8006df4:	e7f5      	b.n	8006de2 <ai_layers_init_all+0x6>
 8006df6:	4770      	bx	lr

08006df8 <ai_layers_post_init_all>:
 8006df8:	b538      	push	{r3, r4, r5, lr}
 8006dfa:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006dfc:	2500      	movs	r5, #0
 8006dfe:	b16c      	cbz	r4, 8006e1c <ai_layers_post_init_all+0x24>
 8006e00:	6863      	ldr	r3, [r4, #4]
 8006e02:	07db      	lsls	r3, r3, #31
 8006e04:	d504      	bpl.n	8006e10 <ai_layers_post_init_all+0x18>
 8006e06:	6a23      	ldr	r3, [r4, #32]
 8006e08:	4620      	mov	r0, r4
 8006e0a:	b10b      	cbz	r3, 8006e10 <ai_layers_post_init_all+0x18>
 8006e0c:	4798      	blx	r3
 8006e0e:	3501      	adds	r5, #1
 8006e10:	6923      	ldr	r3, [r4, #16]
 8006e12:	42a3      	cmp	r3, r4
 8006e14:	d002      	beq.n	8006e1c <ai_layers_post_init_all+0x24>
 8006e16:	b10b      	cbz	r3, 8006e1c <ai_layers_post_init_all+0x24>
 8006e18:	461c      	mov	r4, r3
 8006e1a:	e7f0      	b.n	8006dfe <ai_layers_post_init_all+0x6>
 8006e1c:	4628      	mov	r0, r5
 8006e1e:	bd38      	pop	{r3, r4, r5, pc}

08006e20 <ai_layers_forward_all>:
 8006e20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e24:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8006e28:	4604      	mov	r4, r0
 8006e2a:	f1b8 0f00 	cmp.w	r8, #0
 8006e2e:	d02b      	beq.n	8006e88 <ai_layers_forward_all+0x68>
 8006e30:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006e32:	6381      	str	r1, [r0, #56]	; 0x38
 8006e34:	b321      	cbz	r1, 8006e80 <ai_layers_forward_all+0x60>
 8006e36:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006e38:	2001      	movs	r0, #1
 8006e3a:	47c0      	blx	r8
 8006e3c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006e3e:	b1fe      	cbz	r6, 8006e80 <ai_layers_forward_all+0x60>
 8006e40:	2700      	movs	r7, #0
 8006e42:	4631      	mov	r1, r6
 8006e44:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006e46:	2002      	movs	r0, #2
 8006e48:	47c0      	blx	r8
 8006e4a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006e4c:	4628      	mov	r0, r5
 8006e4e:	696b      	ldr	r3, [r5, #20]
 8006e50:	4798      	blx	r3
 8006e52:	692e      	ldr	r6, [r5, #16]
 8006e54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006e56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006e58:	42b5      	cmp	r5, r6
 8006e5a:	f04f 0003 	mov.w	r0, #3
 8006e5e:	d007      	beq.n	8006e70 <ai_layers_forward_all+0x50>
 8006e60:	47c0      	blx	r8
 8006e62:	3701      	adds	r7, #1
 8006e64:	63a6      	str	r6, [r4, #56]	; 0x38
 8006e66:	2e00      	cmp	r6, #0
 8006e68:	d1eb      	bne.n	8006e42 <ai_layers_forward_all+0x22>
 8006e6a:	4638      	mov	r0, r7
 8006e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e70:	2003      	movs	r0, #3
 8006e72:	47c0      	blx	r8
 8006e74:	2300      	movs	r3, #0
 8006e76:	3701      	adds	r7, #1
 8006e78:	63a3      	str	r3, [r4, #56]	; 0x38
 8006e7a:	4638      	mov	r0, r7
 8006e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e80:	2700      	movs	r7, #0
 8006e82:	4638      	mov	r0, r7
 8006e84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e88:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006e8a:	6385      	str	r5, [r0, #56]	; 0x38
 8006e8c:	2d00      	cmp	r5, #0
 8006e8e:	d0f7      	beq.n	8006e80 <ai_layers_forward_all+0x60>
 8006e90:	4647      	mov	r7, r8
 8006e92:	696b      	ldr	r3, [r5, #20]
 8006e94:	4628      	mov	r0, r5
 8006e96:	4798      	blx	r3
 8006e98:	462b      	mov	r3, r5
 8006e9a:	692d      	ldr	r5, [r5, #16]
 8006e9c:	429d      	cmp	r5, r3
 8006e9e:	d004      	beq.n	8006eaa <ai_layers_forward_all+0x8a>
 8006ea0:	63a5      	str	r5, [r4, #56]	; 0x38
 8006ea2:	3701      	adds	r7, #1
 8006ea4:	2d00      	cmp	r5, #0
 8006ea6:	d1f4      	bne.n	8006e92 <ai_layers_forward_all+0x72>
 8006ea8:	e7df      	b.n	8006e6a <ai_layers_forward_all+0x4a>
 8006eaa:	2300      	movs	r3, #0
 8006eac:	63a3      	str	r3, [r4, #56]	; 0x38
 8006eae:	3701      	adds	r7, #1
 8006eb0:	e7db      	b.n	8006e6a <ai_layers_forward_all+0x4a>
 8006eb2:	bf00      	nop

08006eb4 <forward_dense>:
 8006eb4:	6983      	ldr	r3, [r0, #24]
 8006eb6:	881a      	ldrh	r2, [r3, #0]
 8006eb8:	2a00      	cmp	r2, #0
 8006eba:	f000 8181 	beq.w	80071c0 <forward_dense+0x30c>
 8006ebe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec2:	ed2d 8b02 	vpush	{d8}
 8006ec6:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006eca:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006ece:	b095      	sub	sp, #84	; 0x54
 8006ed0:	b105      	cbz	r5, 8006ed4 <forward_dense+0x20>
 8006ed2:	682d      	ldr	r5, [r5, #0]
 8006ed4:	2a01      	cmp	r2, #1
 8006ed6:	f000 828f 	beq.w	80073f8 <forward_dense+0x544>
 8006eda:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8006ede:	b106      	cbz	r6, 8006ee2 <forward_dense+0x2e>
 8006ee0:	6836      	ldr	r6, [r6, #0]
 8006ee2:	2a02      	cmp	r2, #2
 8006ee4:	f000 816e 	beq.w	80071c4 <forward_dense+0x310>
 8006ee8:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006eec:	930b      	str	r3, [sp, #44]	; 0x2c
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	f000 8274 	beq.w	80073dc <forward_dense+0x528>
 8006ef4:	4619      	mov	r1, r3
 8006ef6:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8006efa:	6809      	ldr	r1, [r1, #0]
 8006efc:	910d      	str	r1, [sp, #52]	; 0x34
 8006efe:	2b01      	cmp	r3, #1
 8006f00:	f240 826e 	bls.w	80073e0 <forward_dense+0x52c>
 8006f04:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f0a:	460b      	mov	r3, r1
 8006f0c:	68e8      	ldr	r0, [r5, #12]
 8006f0e:	68f7      	ldr	r7, [r6, #12]
 8006f10:	6840      	ldr	r0, [r0, #4]
 8006f12:	6999      	ldr	r1, [r3, #24]
 8006f14:	9013      	str	r0, [sp, #76]	; 0x4c
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	680b      	ldr	r3, [r1, #0]
 8006f1a:	9012      	str	r0, [sp, #72]	; 0x48
 8006f1c:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8006f20:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8006f24:	fb00 f404 	mul.w	r4, r0, r4
 8006f28:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8006f2c:	fa4e f000 	asr.w	r0, lr, r0
 8006f30:	2a03      	cmp	r2, #3
 8006f32:	9010      	str	r0, [sp, #64]	; 0x40
 8006f34:	f000 825d 	beq.w	80073f2 <forward_dense+0x53e>
 8006f38:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8006f3c:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006f40:	2a00      	cmp	r2, #0
 8006f42:	f000 8246 	beq.w	80073d2 <forward_dense+0x51e>
 8006f46:	6812      	ldr	r2, [r2, #0]
 8006f48:	2a00      	cmp	r2, #0
 8006f4a:	f000 8242 	beq.w	80073d2 <forward_dense+0x51e>
 8006f4e:	2b04      	cmp	r3, #4
 8006f50:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8006f54:	f000 822c 	beq.w	80073b0 <forward_dense+0x4fc>
 8006f58:	2b08      	cmp	r3, #8
 8006f5a:	f000 8229 	beq.w	80073b0 <forward_dense+0x4fc>
 8006f5e:	f04f 0b00 	mov.w	fp, #0
 8006f62:	69b2      	ldr	r2, [r6, #24]
 8006f64:	69ab      	ldr	r3, [r5, #24]
 8006f66:	6891      	ldr	r1, [r2, #8]
 8006f68:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	6952      	ldr	r2, [r2, #20]
 8006f6e:	9106      	str	r1, [sp, #24]
 8006f70:	fb07 f404 	mul.w	r4, r7, r4
 8006f74:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006f78:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006f7a:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006f7e:	4281      	cmp	r1, r0
 8006f80:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8006f84:	900e      	str	r0, [sp, #56]	; 0x38
 8006f86:	940c      	str	r4, [sp, #48]	; 0x30
 8006f88:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006f8c:	f080 8113 	bcs.w	80071b6 <forward_dense+0x302>
 8006f90:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006f92:	ed9f 8a93 	vldr	s16, [pc, #588]	; 80071e0 <forward_dense+0x32c>
 8006f96:	f021 0201 	bic.w	r2, r1, #1
 8006f9a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8006f9e:	9204      	str	r2, [sp, #16]
 8006fa0:	f001 0201 	and.w	r2, r1, #1
 8006fa4:	08c8      	lsrs	r0, r1, #3
 8006fa6:	9208      	str	r2, [sp, #32]
 8006fa8:	008a      	lsls	r2, r1, #2
 8006faa:	f001 0a07 	and.w	sl, r1, #7
 8006fae:	920f      	str	r2, [sp, #60]	; 0x3c
 8006fb0:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8006fb4:	3320      	adds	r3, #32
 8006fb6:	465c      	mov	r4, fp
 8006fb8:	9007      	str	r0, [sp, #28]
 8006fba:	46cb      	mov	fp, r9
 8006fbc:	9205      	str	r2, [sp, #20]
 8006fbe:	9302      	str	r3, [sp, #8]
 8006fc0:	46c1      	mov	r9, r8
 8006fc2:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8006fc6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8006fc8:	699b      	ldr	r3, [r3, #24]
 8006fca:	689a      	ldr	r2, [r3, #8]
 8006fcc:	9b02      	ldr	r3, [sp, #8]
 8006fce:	3b20      	subs	r3, #32
 8006fd0:	930a      	str	r3, [sp, #40]	; 0x28
 8006fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006fd4:	b10b      	cbz	r3, 8006fda <forward_dense+0x126>
 8006fd6:	699b      	ldr	r3, [r3, #24]
 8006fd8:	689b      	ldr	r3, [r3, #8]
 8006fda:	2c00      	cmp	r4, #0
 8006fdc:	f000 81da 	beq.w	8007394 <forward_dense+0x4e0>
 8006fe0:	9910      	ldr	r1, [sp, #64]	; 0x40
 8006fe2:	2904      	cmp	r1, #4
 8006fe4:	9906      	ldr	r1, [sp, #24]
 8006fe6:	f000 80fd 	beq.w	80071e4 <forward_dense+0x330>
 8006fea:	4549      	cmp	r1, r9
 8006fec:	f080 80d2 	bcs.w	8007194 <forward_dense+0x2e0>
 8006ff0:	460f      	mov	r7, r1
 8006ff2:	9907      	ldr	r1, [sp, #28]
 8006ff4:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006ff8:	f8dd a014 	ldr.w	sl, [sp, #20]
 8006ffc:	1c4e      	adds	r6, r1, #1
 8006ffe:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8007002:	4694      	mov	ip, r2
 8007004:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007006:	468e      	mov	lr, r1
 8007008:	2b00      	cmp	r3, #0
 800700a:	f000 80de 	beq.w	80071ca <forward_dense+0x316>
 800700e:	ecf3 2a01 	vldmia	r3!, {s5}
 8007012:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80071e0 <forward_dense+0x32c>
 8007016:	f1be 0f00 	cmp.w	lr, #0
 800701a:	f000 80de 	beq.w	80071da <forward_dense+0x326>
 800701e:	f10c 0108 	add.w	r1, ip, #8
 8007022:	4640      	mov	r0, r8
 8007024:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007028:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 800702c:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 8007030:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 8007034:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 8007038:	ed10 5a04 	vldr	s10, [r0, #-16]
 800703c:	ed50 5a03 	vldr	s11, [r0, #-12]
 8007040:	ed10 6a02 	vldr	s12, [r0, #-8]
 8007044:	ed50 6a01 	vldr	s13, [r0, #-4]
 8007048:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800704c:	edd5 7a00 	vldr	s15, [r5]
 8007050:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 8007054:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007058:	ee67 7a83 	vmul.f32	s15, s15, s6
 800705c:	ed95 3a00 	vldr	s6, [r5]
 8007060:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 8007064:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007068:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800706c:	3108      	adds	r1, #8
 800706e:	edd5 3a00 	vldr	s7, [r5]
 8007072:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007076:	eee3 7a84 	vfma.f32	s15, s7, s8
 800707a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800707e:	3020      	adds	r0, #32
 8007080:	ed95 4a00 	vldr	s8, [r5]
 8007084:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007088:	eee4 7a24 	vfma.f32	s15, s8, s9
 800708c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007090:	edd5 4a00 	vldr	s9, [r5]
 8007094:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007098:	eee4 7a85 	vfma.f32	s15, s9, s10
 800709c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070a0:	ed95 5a00 	vldr	s10, [r5]
 80070a4:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 80070a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80070ac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070b0:	edd5 5a00 	vldr	s11, [r5]
 80070b4:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 80070b8:	eee5 7a86 	vfma.f32	s15, s11, s12
 80070bc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070c0:	428e      	cmp	r6, r1
 80070c2:	ed95 6a00 	vldr	s12, [r5]
 80070c6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80070ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070ce:	d1a9      	bne.n	8007024 <forward_dense+0x170>
 80070d0:	f1a6 0108 	sub.w	r1, r6, #8
 80070d4:	4650      	mov	r0, sl
 80070d6:	2a00      	cmp	r2, #0
 80070d8:	d04a      	beq.n	8007170 <forward_dense+0x2bc>
 80070da:	780d      	ldrb	r5, [r1, #0]
 80070dc:	edd0 6a00 	vldr	s13, [r0]
 80070e0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070e4:	edd5 7a00 	vldr	s15, [r5]
 80070e8:	2a01      	cmp	r2, #1
 80070ea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80070ee:	d03f      	beq.n	8007170 <forward_dense+0x2bc>
 80070f0:	784d      	ldrb	r5, [r1, #1]
 80070f2:	edd0 6a01 	vldr	s13, [r0, #4]
 80070f6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070fa:	edd5 7a00 	vldr	s15, [r5]
 80070fe:	2a02      	cmp	r2, #2
 8007100:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007104:	d034      	beq.n	8007170 <forward_dense+0x2bc>
 8007106:	788d      	ldrb	r5, [r1, #2]
 8007108:	edd0 6a02 	vldr	s13, [r0, #8]
 800710c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007110:	edd5 7a00 	vldr	s15, [r5]
 8007114:	2a03      	cmp	r2, #3
 8007116:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800711a:	d029      	beq.n	8007170 <forward_dense+0x2bc>
 800711c:	78cd      	ldrb	r5, [r1, #3]
 800711e:	edd0 6a03 	vldr	s13, [r0, #12]
 8007122:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007126:	edd5 7a00 	vldr	s15, [r5]
 800712a:	2a04      	cmp	r2, #4
 800712c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007130:	d01e      	beq.n	8007170 <forward_dense+0x2bc>
 8007132:	790d      	ldrb	r5, [r1, #4]
 8007134:	edd0 6a04 	vldr	s13, [r0, #16]
 8007138:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800713c:	edd5 7a00 	vldr	s15, [r5]
 8007140:	2a05      	cmp	r2, #5
 8007142:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007146:	d013      	beq.n	8007170 <forward_dense+0x2bc>
 8007148:	794d      	ldrb	r5, [r1, #5]
 800714a:	edd0 6a05 	vldr	s13, [r0, #20]
 800714e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007152:	edd5 7a00 	vldr	s15, [r5]
 8007156:	2a06      	cmp	r2, #6
 8007158:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800715c:	d008      	beq.n	8007170 <forward_dense+0x2bc>
 800715e:	7989      	ldrb	r1, [r1, #6]
 8007160:	edd0 7a06 	vldr	s15, [r0, #24]
 8007164:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007168:	edd1 6a00 	vldr	s13, [r1]
 800716c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007170:	44dc      	add	ip, fp
 8007172:	445e      	add	r6, fp
 8007174:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007178:	eca7 7a01 	vstmia	r7!, {s14}
 800717c:	454f      	cmp	r7, r9
 800717e:	f4ff af43 	bcc.w	8007008 <forward_dense+0x154>
 8007182:	9a06      	ldr	r2, [sp, #24]
 8007184:	eba9 0302 	sub.w	r3, r9, r2
 8007188:	3b01      	subs	r3, #1
 800718a:	f023 0303 	bic.w	r3, r3, #3
 800718e:	3304      	adds	r3, #4
 8007190:	18d3      	adds	r3, r2, r3
 8007192:	9306      	str	r3, [sp, #24]
 8007194:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007196:	9a05      	ldr	r2, [sp, #20]
 8007198:	4499      	add	r9, r3
 800719a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800719c:	441a      	add	r2, r3
 800719e:	9205      	str	r2, [sp, #20]
 80071a0:	9a02      	ldr	r2, [sp, #8]
 80071a2:	441a      	add	r2, r3
 80071a4:	9202      	str	r2, [sp, #8]
 80071a6:	9a04      	ldr	r2, [sp, #16]
 80071a8:	441a      	add	r2, r3
 80071aa:	9204      	str	r2, [sp, #16]
 80071ac:	9b06      	ldr	r3, [sp, #24]
 80071ae:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80071b0:	4293      	cmp	r3, r2
 80071b2:	f4ff af08 	bcc.w	8006fc6 <forward_dense+0x112>
 80071b6:	b015      	add	sp, #84	; 0x54
 80071b8:	ecbd 8b02 	vpop	{d8}
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	6853      	ldr	r3, [r2, #4]
 80071c2:	deff      	udf	#255	; 0xff
 80071c4:	2300      	movs	r3, #0
 80071c6:	685b      	ldr	r3, [r3, #4]
 80071c8:	deff      	udf	#255	; 0xff
 80071ca:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80071e0 <forward_dense+0x32c>
 80071ce:	eef0 2a48 	vmov.f32	s5, s16
 80071d2:	f1be 0f00 	cmp.w	lr, #0
 80071d6:	f47f af22 	bne.w	800701e <forward_dense+0x16a>
 80071da:	980a      	ldr	r0, [sp, #40]	; 0x28
 80071dc:	4661      	mov	r1, ip
 80071de:	e77a      	b.n	80070d6 <forward_dense+0x222>
 80071e0:	00000000 	.word	0x00000000
 80071e4:	4549      	cmp	r1, r9
 80071e6:	d2d5      	bcs.n	8007194 <forward_dense+0x2e0>
 80071e8:	9807      	ldr	r0, [sp, #28]
 80071ea:	9103      	str	r1, [sp, #12]
 80071ec:	9904      	ldr	r1, [sp, #16]
 80071ee:	f100 0c01 	add.w	ip, r0, #1
 80071f2:	3901      	subs	r1, #1
 80071f4:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 80071f8:	9109      	str	r1, [sp, #36]	; 0x24
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	f000 80b2 	beq.w	8007364 <forward_dense+0x4b0>
 8007200:	9907      	ldr	r1, [sp, #28]
 8007202:	ecf3 2a01 	vldmia	r3!, {s5}
 8007206:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 80071e0 <forward_dense+0x32c>
 800720a:	2900      	cmp	r1, #0
 800720c:	f000 80b2 	beq.w	8007374 <forward_dense+0x4c0>
 8007210:	9902      	ldr	r1, [sp, #8]
 8007212:	1d10      	adds	r0, r2, #4
 8007214:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007218:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 800721c:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 8007220:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8007224:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007228:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 800722c:	ed11 5a04 	vldr	s10, [r1, #-16]
 8007230:	ed51 5a03 	vldr	s11, [r1, #-12]
 8007234:	ed11 6a02 	vldr	s12, [r1, #-8]
 8007238:	ed51 6a01 	vldr	s13, [r1, #-4]
 800723c:	f006 070f 	and.w	r7, r6, #15
 8007240:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007244:	edd7 7a00 	vldr	s15, [r7]
 8007248:	0936      	lsrs	r6, r6, #4
 800724a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800724e:	ed96 3a00 	vldr	s6, [r6]
 8007252:	ee67 7a82 	vmul.f32	s15, s15, s4
 8007256:	092e      	lsrs	r6, r5, #4
 8007258:	eee3 7a23 	vfma.f32	s15, s6, s7
 800725c:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007260:	f005 050f 	and.w	r5, r5, #15
 8007264:	edd6 3a00 	vldr	s7, [r6]
 8007268:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 800726c:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007270:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007274:	0937      	lsrs	r7, r6, #4
 8007276:	ed95 4a00 	vldr	s8, [r5]
 800727a:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 800727e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007282:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8007286:	f006 060f 	and.w	r6, r6, #15
 800728a:	edd7 4a00 	vldr	s9, [r7]
 800728e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007292:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007296:	3004      	adds	r0, #4
 8007298:	ed96 5a00 	vldr	s10, [r6]
 800729c:	092e      	lsrs	r6, r5, #4
 800729e:	eee5 7a25 	vfma.f32	s15, s10, s11
 80072a2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80072a6:	f005 050f 	and.w	r5, r5, #15
 80072aa:	edd6 5a00 	vldr	s11, [r6]
 80072ae:	eee5 7a86 	vfma.f32	s15, s11, s12
 80072b2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80072b6:	4584      	cmp	ip, r0
 80072b8:	ed95 6a00 	vldr	s12, [r5]
 80072bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80072c0:	f101 0120 	add.w	r1, r1, #32
 80072c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80072c8:	d1a4      	bne.n	8007214 <forward_dense+0x360>
 80072ca:	f8dd e014 	ldr.w	lr, [sp, #20]
 80072ce:	f1ac 0804 	sub.w	r8, ip, #4
 80072d2:	9904      	ldr	r1, [sp, #16]
 80072d4:	458e      	cmp	lr, r1
 80072d6:	d22a      	bcs.n	800732e <forward_dense+0x47a>
 80072d8:	9909      	ldr	r1, [sp, #36]	; 0x24
 80072da:	eba1 070e 	sub.w	r7, r1, lr
 80072de:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 80072e2:	f10e 0008 	add.w	r0, lr, #8
 80072e6:	f108 36ff 	add.w	r6, r8, #4294967295
 80072ea:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 80072ee:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80072f2:	ed50 5a01 	vldr	s11, [r0, #-4]
 80072f6:	ed50 6a02 	vldr	s13, [r0, #-8]
 80072fa:	f001 050f 	and.w	r5, r1, #15
 80072fe:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007302:	edd5 7a00 	vldr	s15, [r5]
 8007306:	0909      	lsrs	r1, r1, #4
 8007308:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800730c:	ed91 6a00 	vldr	s12, [r1]
 8007310:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007314:	42b7      	cmp	r7, r6
 8007316:	eee6 7a26 	vfma.f32	s15, s12, s13
 800731a:	f100 0008 	add.w	r0, r0, #8
 800731e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007322:	d1e4      	bne.n	80072ee <forward_dense+0x43a>
 8007324:	f10a 0a01 	add.w	sl, sl, #1
 8007328:	44d0      	add	r8, sl
 800732a:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800732e:	9908      	ldr	r1, [sp, #32]
 8007330:	b321      	cbz	r1, 800737c <forward_dense+0x4c8>
 8007332:	f898 1000 	ldrb.w	r1, [r8]
 8007336:	edde 7a00 	vldr	s15, [lr]
 800733a:	0909      	lsrs	r1, r1, #4
 800733c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007340:	edd1 6a00 	vldr	s13, [r1]
 8007344:	9903      	ldr	r1, [sp, #12]
 8007346:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800734a:	445a      	add	r2, fp
 800734c:	44dc      	add	ip, fp
 800734e:	ee72 2a87 	vadd.f32	s5, s5, s14
 8007352:	ece1 2a01 	vstmia	r1!, {s5}
 8007356:	4589      	cmp	r9, r1
 8007358:	9103      	str	r1, [sp, #12]
 800735a:	f67f af12 	bls.w	8007182 <forward_dense+0x2ce>
 800735e:	2b00      	cmp	r3, #0
 8007360:	f47f af4e 	bne.w	8007200 <forward_dense+0x34c>
 8007364:	9907      	ldr	r1, [sp, #28]
 8007366:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 80071e0 <forward_dense+0x32c>
 800736a:	eef0 2a48 	vmov.f32	s5, s16
 800736e:	2900      	cmp	r1, #0
 8007370:	f47f af4e 	bne.w	8007210 <forward_dense+0x35c>
 8007374:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 8007378:	4690      	mov	r8, r2
 800737a:	e7aa      	b.n	80072d2 <forward_dense+0x41e>
 800737c:	9903      	ldr	r1, [sp, #12]
 800737e:	ee32 7a87 	vadd.f32	s14, s5, s14
 8007382:	445a      	add	r2, fp
 8007384:	eca1 7a01 	vstmia	r1!, {s14}
 8007388:	4549      	cmp	r1, r9
 800738a:	9103      	str	r1, [sp, #12]
 800738c:	44dc      	add	ip, fp
 800738e:	f4ff af34 	bcc.w	80071fa <forward_dense+0x346>
 8007392:	e6f6      	b.n	8007182 <forward_dense+0x2ce>
 8007394:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007396:	9d06      	ldr	r5, [sp, #24]
 8007398:	9101      	str	r1, [sp, #4]
 800739a:	9913      	ldr	r1, [sp, #76]	; 0x4c
 800739c:	9100      	str	r1, [sp, #0]
 800739e:	4628      	mov	r0, r5
 80073a0:	990a      	ldr	r1, [sp, #40]	; 0x28
 80073a2:	f001 fde9 	bl	8008f78 <forward_lite_dense_if32of32wf32>
 80073a6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80073a8:	462b      	mov	r3, r5
 80073aa:	4413      	add	r3, r2
 80073ac:	9306      	str	r3, [sp, #24]
 80073ae:	e6f1      	b.n	8007194 <forward_dense+0x2e0>
 80073b0:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80073b4:	f1b9 0f00 	cmp.w	r9, #0
 80073b8:	d016      	beq.n	80073e8 <forward_dense+0x534>
 80073ba:	e9d9 0100 	ldrd	r0, r1, [r9]
 80073be:	f002 f84d 	bl	800945c <ai_array_get_byte_size>
 80073c2:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 80073c6:	4602      	mov	r2, r0
 80073c8:	4659      	mov	r1, fp
 80073ca:	4640      	mov	r0, r8
 80073cc:	f001 ff54 	bl	8009278 <st_int8_copy>
 80073d0:	e5c7      	b.n	8006f62 <forward_dense+0xae>
 80073d2:	2b04      	cmp	r3, #4
 80073d4:	d00a      	beq.n	80073ec <forward_dense+0x538>
 80073d6:	f04f 0900 	mov.w	r9, #0
 80073da:	e5bd      	b.n	8006f58 <forward_dense+0xa4>
 80073dc:	930d      	str	r3, [sp, #52]	; 0x34
 80073de:	e595      	b.n	8006f0c <forward_dense+0x58>
 80073e0:	2300      	movs	r3, #0
 80073e2:	930b      	str	r3, [sp, #44]	; 0x2c
 80073e4:	460b      	mov	r3, r1
 80073e6:	e591      	b.n	8006f0c <forward_dense+0x58>
 80073e8:	46c3      	mov	fp, r8
 80073ea:	e5ba      	b.n	8006f62 <forward_dense+0xae>
 80073ec:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 80073f0:	e5b7      	b.n	8006f62 <forward_dense+0xae>
 80073f2:	2300      	movs	r3, #0
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	deff      	udf	#255	; 0xff
 80073f8:	2300      	movs	r3, #0
 80073fa:	685b      	ldr	r3, [r3, #4]
 80073fc:	deff      	udf	#255	; 0xff
 80073fe:	bf00      	nop

08007400 <nl_func_sigmoid_array_f32>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	ed2d 8b02 	vpush	{d8}
 8007406:	698f      	ldr	r7, [r1, #24]
 8007408:	6980      	ldr	r0, [r0, #24]
 800740a:	68b9      	ldr	r1, [r7, #8]
 800740c:	6886      	ldr	r6, [r0, #8]
 800740e:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 8007412:	3a01      	subs	r2, #1
 8007414:	0093      	lsls	r3, r2, #2
 8007416:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 800741a:	4291      	cmp	r1, r2
 800741c:	d815      	bhi.n	800744a <nl_func_sigmoid_array_f32+0x4a>
 800741e:	3304      	adds	r3, #4
 8007420:	1d14      	adds	r4, r2, #4
 8007422:	441e      	add	r6, r3
 8007424:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007428:	4625      	mov	r5, r4
 800742a:	ed34 0a01 	vldmdb	r4!, {s0}
 800742e:	eeb1 0a40 	vneg.f32	s0, s0
 8007432:	f006 fcf7 	bl	800de24 <expf>
 8007436:	ee30 0a08 	vadd.f32	s0, s0, s16
 800743a:	3d08      	subs	r5, #8
 800743c:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8007440:	ed66 7a01 	vstmdb	r6!, {s15}
 8007444:	68bb      	ldr	r3, [r7, #8]
 8007446:	42ab      	cmp	r3, r5
 8007448:	d9ee      	bls.n	8007428 <nl_func_sigmoid_array_f32+0x28>
 800744a:	ecbd 8b02 	vpop	{d8}
 800744e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007450 <nl_func_tanh_array_f32>:
 8007450:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007452:	698f      	ldr	r7, [r1, #24]
 8007454:	6980      	ldr	r0, [r0, #24]
 8007456:	68b9      	ldr	r1, [r7, #8]
 8007458:	6886      	ldr	r6, [r0, #8]
 800745a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800745e:	3a01      	subs	r2, #1
 8007460:	0093      	lsls	r3, r2, #2
 8007462:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007466:	4291      	cmp	r1, r2
 8007468:	d80d      	bhi.n	8007486 <nl_func_tanh_array_f32+0x36>
 800746a:	3304      	adds	r3, #4
 800746c:	1d14      	adds	r4, r2, #4
 800746e:	441e      	add	r6, r3
 8007470:	4625      	mov	r5, r4
 8007472:	ed34 0a01 	vldmdb	r4!, {s0}
 8007476:	f006 fd13 	bl	800dea0 <tanhf>
 800747a:	ed26 0a01 	vstmdb	r6!, {s0}
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	3d08      	subs	r5, #8
 8007482:	42ab      	cmp	r3, r5
 8007484:	d9f4      	bls.n	8007470 <nl_func_tanh_array_f32+0x20>
 8007486:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007488 <forward_relu>:
 8007488:	6982      	ldr	r2, [r0, #24]
 800748a:	8813      	ldrh	r3, [r2, #0]
 800748c:	2b00      	cmp	r3, #0
 800748e:	d05b      	beq.n	8007548 <forward_relu+0xc0>
 8007490:	6851      	ldr	r1, [r2, #4]
 8007492:	684a      	ldr	r2, [r1, #4]
 8007494:	b102      	cbz	r2, 8007498 <forward_relu+0x10>
 8007496:	6812      	ldr	r2, [r2, #0]
 8007498:	2b01      	cmp	r3, #1
 800749a:	f000 8123 	beq.w	80076e4 <forward_relu+0x25c>
 800749e:	b470      	push	{r4, r5, r6}
 80074a0:	6909      	ldr	r1, [r1, #16]
 80074a2:	b101      	cbz	r1, 80074a6 <forward_relu+0x1e>
 80074a4:	6809      	ldr	r1, [r1, #0]
 80074a6:	69c6      	ldr	r6, [r0, #28]
 80074a8:	2e00      	cmp	r6, #0
 80074aa:	f000 8097 	beq.w	80075dc <forward_relu+0x154>
 80074ae:	6873      	ldr	r3, [r6, #4]
 80074b0:	6988      	ldr	r0, [r1, #24]
 80074b2:	6991      	ldr	r1, [r2, #24]
 80074b4:	2b01      	cmp	r3, #1
 80074b6:	f000 80c1 	beq.w	800763c <forward_relu+0x1b4>
 80074ba:	6893      	ldr	r3, [r2, #8]
 80074bc:	6880      	ldr	r0, [r0, #8]
 80074be:	688c      	ldr	r4, [r1, #8]
 80074c0:	0a1b      	lsrs	r3, r3, #8
 80074c2:	f000 80f2 	beq.w	80076aa <forward_relu+0x222>
 80074c6:	68d5      	ldr	r5, [r2, #12]
 80074c8:	2201      	movs	r2, #1
 80074ca:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80074ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074d2:	42ab      	cmp	r3, r5
 80074d4:	fb01 f202 	mul.w	r2, r1, r2
 80074d8:	d1f9      	bne.n	80074ce <forward_relu+0x46>
 80074da:	68b3      	ldr	r3, [r6, #8]
 80074dc:	ed93 7a02 	vldr	s14, [r3, #8]
 80074e0:	edd3 6a00 	vldr	s13, [r3]
 80074e4:	ed93 6a01 	vldr	s12, [r3, #4]
 80074e8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80074ec:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80074f0:	3a01      	subs	r2, #1
 80074f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074f6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80074fa:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80074fe:	d425      	bmi.n	800754c <forward_relu+0xc4>
 8007500:	429c      	cmp	r4, r3
 8007502:	d81f      	bhi.n	8007544 <forward_relu+0xbc>
 8007504:	1d1a      	adds	r2, r3, #4
 8007506:	1d01      	adds	r1, r0, #4
 8007508:	e00d      	b.n	8007526 <forward_relu+0x9e>
 800750a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800750e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007512:	db03      	blt.n	800751c <forward_relu+0x94>
 8007514:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007518:	ee67 7a86 	vmul.f32	s15, s15, s12
 800751c:	3b08      	subs	r3, #8
 800751e:	429c      	cmp	r4, r3
 8007520:	ed61 7a01 	vstmdb	r1!, {s15}
 8007524:	d80e      	bhi.n	8007544 <forward_relu+0xbc>
 8007526:	4613      	mov	r3, r2
 8007528:	ed72 7a01 	vldmdb	r2!, {s15}
 800752c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8007530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007534:	d9e9      	bls.n	800750a <forward_relu+0x82>
 8007536:	3b08      	subs	r3, #8
 8007538:	eef0 7a47 	vmov.f32	s15, s14
 800753c:	429c      	cmp	r4, r3
 800753e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007542:	d9f0      	bls.n	8007526 <forward_relu+0x9e>
 8007544:	bc70      	pop	{r4, r5, r6}
 8007546:	4770      	bx	lr
 8007548:	685b      	ldr	r3, [r3, #4]
 800754a:	deff      	udf	#255	; 0xff
 800754c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007554:	d11f      	bne.n	8007596 <forward_relu+0x10e>
 8007556:	429c      	cmp	r4, r3
 8007558:	d8f4      	bhi.n	8007544 <forward_relu+0xbc>
 800755a:	1b1c      	subs	r4, r3, r4
 800755c:	f024 0403 	bic.w	r4, r4, #3
 8007560:	1d1a      	adds	r2, r3, #4
 8007562:	2500      	movs	r5, #0
 8007564:	1b1b      	subs	r3, r3, r4
 8007566:	1d01      	adds	r1, r0, #4
 8007568:	ed72 7a01 	vldmdb	r2!, {s15}
 800756c:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007570:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007574:	dc0a      	bgt.n	800758c <forward_relu+0x104>
 8007576:	429a      	cmp	r2, r3
 8007578:	f841 5d04 	str.w	r5, [r1, #-4]!
 800757c:	d0e2      	beq.n	8007544 <forward_relu+0xbc>
 800757e:	ed72 7a01 	vldmdb	r2!, {s15}
 8007582:	eef4 7ae6 	vcmpe.f32	s15, s13
 8007586:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800758a:	ddf4      	ble.n	8007576 <forward_relu+0xee>
 800758c:	429a      	cmp	r2, r3
 800758e:	ed61 7a01 	vstmdb	r1!, {s15}
 8007592:	d1e9      	bne.n	8007568 <forward_relu+0xe0>
 8007594:	e7d6      	b.n	8007544 <forward_relu+0xbc>
 8007596:	429c      	cmp	r4, r3
 8007598:	d8d4      	bhi.n	8007544 <forward_relu+0xbc>
 800759a:	1b1c      	subs	r4, r3, r4
 800759c:	f024 0403 	bic.w	r4, r4, #3
 80075a0:	1d1a      	adds	r2, r3, #4
 80075a2:	1d01      	adds	r1, r0, #4
 80075a4:	1b1b      	subs	r3, r3, r4
 80075a6:	ed72 7a01 	vldmdb	r2!, {s15}
 80075aa:	eef4 6ae7 	vcmpe.f32	s13, s15
 80075ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075b2:	db0e      	blt.n	80075d2 <forward_relu+0x14a>
 80075b4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80075b8:	4293      	cmp	r3, r2
 80075ba:	ee67 7a86 	vmul.f32	s15, s15, s12
 80075be:	ed61 7a01 	vstmdb	r1!, {s15}
 80075c2:	d0bf      	beq.n	8007544 <forward_relu+0xbc>
 80075c4:	ed72 7a01 	vldmdb	r2!, {s15}
 80075c8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80075cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075d0:	daf0      	bge.n	80075b4 <forward_relu+0x12c>
 80075d2:	4293      	cmp	r3, r2
 80075d4:	ed61 7a01 	vstmdb	r1!, {s15}
 80075d8:	d1e5      	bne.n	80075a6 <forward_relu+0x11e>
 80075da:	e7b3      	b.n	8007544 <forward_relu+0xbc>
 80075dc:	6893      	ldr	r3, [r2, #8]
 80075de:	6989      	ldr	r1, [r1, #24]
 80075e0:	6990      	ldr	r0, [r2, #24]
 80075e2:	6889      	ldr	r1, [r1, #8]
 80075e4:	6884      	ldr	r4, [r0, #8]
 80075e6:	0a1b      	lsrs	r3, r3, #8
 80075e8:	d075      	beq.n	80076d6 <forward_relu+0x24e>
 80075ea:	68d5      	ldr	r5, [r2, #12]
 80075ec:	2201      	movs	r2, #1
 80075ee:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80075f2:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 80075f6:	429d      	cmp	r5, r3
 80075f8:	fb00 f202 	mul.w	r2, r0, r2
 80075fc:	d1f9      	bne.n	80075f2 <forward_relu+0x16a>
 80075fe:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 8007602:	3b01      	subs	r3, #1
 8007604:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007608:	4294      	cmp	r4, r2
 800760a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800760e:	d899      	bhi.n	8007544 <forward_relu+0xbc>
 8007610:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80076ec <forward_relu+0x264>
 8007614:	3204      	adds	r2, #4
 8007616:	3104      	adds	r1, #4
 8007618:	4613      	mov	r3, r2
 800761a:	ed72 7a01 	vldmdb	r2!, {s15}
 800761e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8007622:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007626:	f1a3 0308 	sub.w	r3, r3, #8
 800762a:	bfb8      	it	lt
 800762c:	eef0 7a47 	vmovlt.f32	s15, s14
 8007630:	429c      	cmp	r4, r3
 8007632:	ed61 7a01 	vstmdb	r1!, {s15}
 8007636:	d9ef      	bls.n	8007618 <forward_relu+0x190>
 8007638:	bc70      	pop	{r4, r5, r6}
 800763a:	4770      	bx	lr
 800763c:	688c      	ldr	r4, [r1, #8]
 800763e:	6891      	ldr	r1, [r2, #8]
 8007640:	6880      	ldr	r0, [r0, #8]
 8007642:	0a09      	lsrs	r1, r1, #8
 8007644:	d049      	beq.n	80076da <forward_relu+0x252>
 8007646:	68d5      	ldr	r5, [r2, #12]
 8007648:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 800764c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8007650:	42aa      	cmp	r2, r5
 8007652:	fb01 f303 	mul.w	r3, r1, r3
 8007656:	d1f9      	bne.n	800764c <forward_relu+0x1c4>
 8007658:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 800765c:	3a01      	subs	r2, #1
 800765e:	68b1      	ldr	r1, [r6, #8]
 8007660:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007664:	429c      	cmp	r4, r3
 8007666:	ed91 7a00 	vldr	s14, [r1]
 800766a:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800766e:	f63f af69 	bhi.w	8007544 <forward_relu+0xbc>
 8007672:	2500      	movs	r5, #0
 8007674:	3304      	adds	r3, #4
 8007676:	1d02      	adds	r2, r0, #4
 8007678:	ed53 7a01 	vldr	s15, [r3, #-4]
 800767c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007680:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007684:	f1a3 0104 	sub.w	r1, r3, #4
 8007688:	f1a3 0308 	sub.w	r3, r3, #8
 800768c:	d406      	bmi.n	800769c <forward_relu+0x214>
 800768e:	429c      	cmp	r4, r3
 8007690:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007694:	f63f af56 	bhi.w	8007544 <forward_relu+0xbc>
 8007698:	460b      	mov	r3, r1
 800769a:	e7ed      	b.n	8007678 <forward_relu+0x1f0>
 800769c:	429c      	cmp	r4, r3
 800769e:	ed62 7a01 	vstmdb	r2!, {s15}
 80076a2:	f63f af4f 	bhi.w	8007544 <forward_relu+0xbc>
 80076a6:	460b      	mov	r3, r1
 80076a8:	e7e6      	b.n	8007678 <forward_relu+0x1f0>
 80076aa:	68b3      	ldr	r3, [r6, #8]
 80076ac:	ed93 7a02 	vldr	s14, [r3, #8]
 80076b0:	edd3 6a00 	vldr	s13, [r3]
 80076b4:	ed93 6a01 	vldr	s12, [r3, #4]
 80076b8:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80076bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076c0:	d401      	bmi.n	80076c6 <forward_relu+0x23e>
 80076c2:	4623      	mov	r3, r4
 80076c4:	e71e      	b.n	8007504 <forward_relu+0x7c>
 80076c6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80076ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076ce:	4623      	mov	r3, r4
 80076d0:	f47f af63 	bne.w	800759a <forward_relu+0x112>
 80076d4:	e741      	b.n	800755a <forward_relu+0xd2>
 80076d6:	4622      	mov	r2, r4
 80076d8:	e79a      	b.n	8007610 <forward_relu+0x188>
 80076da:	68b2      	ldr	r2, [r6, #8]
 80076dc:	4623      	mov	r3, r4
 80076de:	ed92 7a00 	vldr	s14, [r2]
 80076e2:	e7c6      	b.n	8007672 <forward_relu+0x1ea>
 80076e4:	2300      	movs	r3, #0
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	deff      	udf	#255	; 0xff
 80076ea:	bf00      	nop
 80076ec:	00000000 	.word	0x00000000

080076f0 <array_f32_identity>:
 80076f0:	6980      	ldr	r0, [r0, #24]
 80076f2:	698b      	ldr	r3, [r1, #24]
 80076f4:	4298      	cmp	r0, r3
 80076f6:	d004      	beq.n	8007702 <array_f32_identity+0x12>
 80076f8:	68c1      	ldr	r1, [r0, #12]
 80076fa:	68d8      	ldr	r0, [r3, #12]
 80076fc:	0092      	lsls	r2, r2, #2
 80076fe:	f001 bdbb 	b.w	8009278 <st_int8_copy>
 8007702:	4770      	bx	lr

08007704 <forward_lstm>:
 8007704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007708:	ed2d 8b06 	vpush	{d8-d10}
 800770c:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 8007710:	6983      	ldr	r3, [r0, #24]
 8007712:	af00      	add	r7, sp, #0
 8007714:	881a      	ldrh	r2, [r3, #0]
 8007716:	60b8      	str	r0, [r7, #8]
 8007718:	2a00      	cmp	r2, #0
 800771a:	f001 842a 	beq.w	8008f72 <forward_lstm+0x186e>
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007724:	2a01      	cmp	r2, #1
 8007726:	f001 8424 	beq.w	8008f72 <forward_lstm+0x186e>
 800772a:	2a02      	cmp	r2, #2
 800772c:	f001 8421 	beq.w	8008f72 <forward_lstm+0x186e>
 8007730:	69d8      	ldr	r0, [r3, #28]
 8007732:	2800      	cmp	r0, #0
 8007734:	f001 8414 	beq.w	8008f60 <forward_lstm+0x185c>
 8007738:	8b1b      	ldrh	r3, [r3, #24]
 800773a:	6801      	ldr	r1, [r0, #0]
 800773c:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 8007740:	2b01      	cmp	r3, #1
 8007742:	6883      	ldr	r3, [r0, #8]
 8007744:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007748:	bf88      	it	hi
 800774a:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 800774e:	68c3      	ldr	r3, [r0, #12]
 8007750:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8007754:	bf98      	it	ls
 8007756:	f04f 0b00 	movls.w	fp, #0
 800775a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800775e:	685b      	ldr	r3, [r3, #4]
 8007760:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007762:	b10b      	cbz	r3, 8007768 <forward_lstm+0x64>
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800776c:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 800776e:	899b      	ldrh	r3, [r3, #12]
 8007770:	68cd      	ldr	r5, [r1, #12]
 8007772:	0099      	lsls	r1, r3, #2
 8007774:	3107      	adds	r1, #7
 8007776:	08c9      	lsrs	r1, r1, #3
 8007778:	466c      	mov	r4, sp
 800777a:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 800777e:	46a5      	mov	sp, r4
 8007780:	1ddc      	adds	r4, r3, #7
 8007782:	466e      	mov	r6, sp
 8007784:	08e4      	lsrs	r4, r4, #3
 8007786:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 800778a:	46a5      	mov	sp, r4
 800778c:	68bc      	ldr	r4, [r7, #8]
 800778e:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 8007792:	466c      	mov	r4, sp
 8007794:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 8007798:	46e5      	mov	sp, ip
 800779a:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 800779e:	f8c7 d010 	str.w	sp, [r7, #16]
 80077a2:	468d      	mov	sp, r1
 80077a4:	68e9      	ldr	r1, [r5, #12]
 80077a6:	65b9      	str	r1, [r7, #88]	; 0x58
 80077a8:	6869      	ldr	r1, [r5, #4]
 80077aa:	6779      	str	r1, [r7, #116]	; 0x74
 80077ac:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80077b0:	ee09 1a10 	vmov	s18, r1
 80077b4:	46ee      	mov	lr, sp
 80077b6:	2800      	cmp	r0, #0
 80077b8:	f001 83c9 	beq.w	8008f4e <forward_lstm+0x184a>
 80077bc:	6945      	ldr	r5, [r0, #20]
 80077be:	6901      	ldr	r1, [r0, #16]
 80077c0:	ee09 5a90 	vmov	s19, r5
 80077c4:	6985      	ldr	r5, [r0, #24]
 80077c6:	ee0a 1a90 	vmov	s21, r1
 80077ca:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 80077ce:	ee0a 5a10 	vmov	s20, r5
 80077d2:	b119      	cbz	r1, 80077dc <forward_lstm+0xd8>
 80077d4:	6989      	ldr	r1, [r1, #24]
 80077d6:	6889      	ldr	r1, [r1, #8]
 80077d8:	ee0a 1a90 	vmov	s21, r1
 80077dc:	ee19 1a90 	vmov	r1, s19
 80077e0:	b119      	cbz	r1, 80077ea <forward_lstm+0xe6>
 80077e2:	6989      	ldr	r1, [r1, #24]
 80077e4:	6889      	ldr	r1, [r1, #8]
 80077e6:	ee09 1a90 	vmov	s19, r1
 80077ea:	ee1a 1a10 	vmov	r1, s20
 80077ee:	b119      	cbz	r1, 80077f8 <forward_lstm+0xf4>
 80077f0:	6989      	ldr	r1, [r1, #24]
 80077f2:	6889      	ldr	r1, [r1, #8]
 80077f4:	ee0a 1a10 	vmov	s20, r1
 80077f8:	f1b9 0f00 	cmp.w	r9, #0
 80077fc:	d003      	beq.n	8007806 <forward_lstm+0x102>
 80077fe:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8007802:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8007806:	b108      	cbz	r0, 800780c <forward_lstm+0x108>
 8007808:	6981      	ldr	r1, [r0, #24]
 800780a:	6888      	ldr	r0, [r1, #8]
 800780c:	2a03      	cmp	r2, #3
 800780e:	f001 83b0 	beq.w	8008f72 <forward_lstm+0x186e>
 8007812:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007816:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 800781a:	f1ba 0f00 	cmp.w	sl, #0
 800781e:	d001      	beq.n	8007824 <forward_lstm+0x120>
 8007820:	f8da a000 	ldr.w	sl, [sl]
 8007824:	693a      	ldr	r2, [r7, #16]
 8007826:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 800782a:	4423      	add	r3, r4
 800782c:	4621      	mov	r1, r4
 800782e:	f1ae 0404 	sub.w	r4, lr, #4
 8007832:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 8007836:	60fc      	str	r4, [r7, #12]
 8007838:	3e04      	subs	r6, #4
 800783a:	f1ce 0e04 	rsb	lr, lr, #4
 800783e:	1f15      	subs	r5, r2, #4
 8007840:	4699      	mov	r9, r3
 8007842:	e016      	b.n	8007872 <forward_lstm+0x16e>
 8007844:	4423      	add	r3, r4
 8007846:	f853 200e 	ldr.w	r2, [r3, lr]
 800784a:	b1c2      	cbz	r2, 800787e <forward_lstm+0x17a>
 800784c:	68d3      	ldr	r3, [r2, #12]
 800784e:	f846 2f04 	str.w	r2, [r6, #4]!
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	6992      	ldr	r2, [r2, #24]
 8007856:	2b01      	cmp	r3, #1
 8007858:	6893      	ldr	r3, [r2, #8]
 800785a:	f845 3f04 	str.w	r3, [r5, #4]!
 800785e:	bf8c      	ite	hi
 8007860:	2301      	movhi	r3, #1
 8007862:	2300      	movls	r3, #0
 8007864:	f801 3b01 	strb.w	r3, [r1], #1
 8007868:	bf8c      	ite	hi
 800786a:	4643      	movhi	r3, r8
 800786c:	2300      	movls	r3, #0
 800786e:	f844 3f04 	str.w	r3, [r4, #4]!
 8007872:	4549      	cmp	r1, r9
 8007874:	d003      	beq.n	800787e <forward_lstm+0x17a>
 8007876:	f8dc 3010 	ldr.w	r3, [ip, #16]
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e2      	bne.n	8007844 <forward_lstm+0x140>
 800787e:	f8da 3018 	ldr.w	r3, [sl, #24]
 8007882:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8007886:	689d      	ldr	r5, [r3, #8]
 8007888:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 800788c:	f8db 3018 	ldr.w	r3, [fp, #24]
 8007890:	6989      	ldr	r1, [r1, #24]
 8007892:	69a4      	ldr	r4, [r4, #24]
 8007894:	689b      	ldr	r3, [r3, #8]
 8007896:	667b      	str	r3, [r7, #100]	; 0x64
 8007898:	688b      	ldr	r3, [r1, #8]
 800789a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800789e:	64bb      	str	r3, [r7, #72]	; 0x48
 80078a0:	68a3      	ldr	r3, [r4, #8]
 80078a2:	663b      	str	r3, [r7, #96]	; 0x60
 80078a4:	68bb      	ldr	r3, [r7, #8]
 80078a6:	6992      	ldr	r2, [r2, #24]
 80078a8:	685b      	ldr	r3, [r3, #4]
 80078aa:	6892      	ldr	r2, [r2, #8]
 80078ac:	66ba      	str	r2, [r7, #104]	; 0x68
 80078ae:	ee19 1a10 	vmov	r1, s18
 80078b2:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 80078b6:	186a      	adds	r2, r5, r1
 80078b8:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 80078bc:	4421      	add	r1, r4
 80078be:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 80078c2:	673d      	str	r5, [r7, #112]	; 0x70
 80078c4:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 80078c8:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 80078cc:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80078d0:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80078d4:	607b      	str	r3, [r7, #4]
 80078d6:	f041 8264 	bne.w	8008da2 <forward_lstm+0x169e>
 80078da:	4629      	mov	r1, r5
 80078dc:	2800      	cmp	r0, #0
 80078de:	f001 826e 	beq.w	8008dbe <forward_lstm+0x16ba>
 80078e2:	ee19 2a10 	vmov	r2, s18
 80078e6:	f001 fcc7 	bl	8009278 <st_int8_copy>
 80078ea:	ee19 2a10 	vmov	r2, s18
 80078ee:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 80078f2:	4648      	mov	r0, r9
 80078f4:	f1b9 0f00 	cmp.w	r9, #0
 80078f8:	f001 826f 	beq.w	8008dda <forward_lstm+0x16d6>
 80078fc:	f001 fcbc 	bl	8009278 <st_int8_copy>
 8007900:	ee19 2a10 	vmov	r2, s18
 8007904:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007908:	2000      	movs	r0, #0
 800790a:	f001 fc59 	bl	80091c0 <st_int8_fill>
 800790e:	68ba      	ldr	r2, [r7, #8]
 8007910:	4bab      	ldr	r3, [pc, #684]	; (8007bc0 <forward_lstm+0x4bc>)
 8007912:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007914:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8007918:	2900      	cmp	r1, #0
 800791a:	bf08      	it	eq
 800791c:	4619      	moveq	r1, r3
 800791e:	6479      	str	r1, [r7, #68]	; 0x44
 8007920:	6b51      	ldr	r1, [r2, #52]	; 0x34
 8007922:	2900      	cmp	r1, #0
 8007924:	bf08      	it	eq
 8007926:	4619      	moveq	r1, r3
 8007928:	67f9      	str	r1, [r7, #124]	; 0x7c
 800792a:	6b91      	ldr	r1, [r2, #56]	; 0x38
 800792c:	2900      	cmp	r1, #0
 800792e:	bf08      	it	eq
 8007930:	4619      	moveq	r1, r3
 8007932:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 8007936:	6439      	str	r1, [r7, #64]	; 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	f001 8301 	beq.w	8008f40 <forward_lstm+0x183c>
 800793e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007940:	3b01      	subs	r3, #1
 8007942:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007946:	f04f 33ff 	mov.w	r3, #4294967295
 800794a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800794c:	4613      	mov	r3, r2
 800794e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007952:	b1b3      	cbz	r3, 8007982 <forward_lstm+0x27e>
 8007954:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8007958:	899d      	ldrh	r5, [r3, #12]
 800795a:	b195      	cbz	r5, 8007982 <forward_lstm+0x27e>
 800795c:	693a      	ldr	r2, [r7, #16]
 800795e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007960:	68f8      	ldr	r0, [r7, #12]
 8007962:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 8007966:	1e5e      	subs	r6, r3, #1
 8007968:	f850 3f04 	ldr.w	r3, [r0, #4]!
 800796c:	6811      	ldr	r1, [r2, #0]
 800796e:	fb03 f406 	mul.w	r4, r3, r6
 8007972:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007976:	f842 1b04 	str.w	r1, [r2], #4
 800797a:	425b      	negs	r3, r3
 800797c:	4295      	cmp	r5, r2
 800797e:	6003      	str	r3, [r0, #0]
 8007980:	d1f2      	bne.n	8007968 <forward_lstm+0x264>
 8007982:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 8007984:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 8007986:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800798a:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8007bc8 <forward_lstm+0x4c4>
 800798e:	b2a9      	uxth	r1, r5
 8007990:	fa1f f288 	uxth.w	r2, r8
 8007994:	f1a1 0310 	sub.w	r3, r1, #16
 8007998:	0096      	lsls	r6, r2, #2
 800799a:	091b      	lsrs	r3, r3, #4
 800799c:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 80079a0:	3301      	adds	r3, #1
 80079a2:	fb06 f101 	mul.w	r1, r6, r1
 80079a6:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 80079aa:	019b      	lsls	r3, r3, #6
 80079ac:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 80079ae:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80079b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80079b6:	f1a2 0310 	sub.w	r3, r2, #16
 80079ba:	fb02 f202 	mul.w	r2, r2, r2
 80079be:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 80079c2:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 80079c6:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 80079c8:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 80079cc:	091b      	lsrs	r3, r3, #4
 80079ce:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 80079d2:	1c5c      	adds	r4, r3, #1
 80079d4:	019b      	lsls	r3, r3, #6
 80079d6:	623b      	str	r3, [r7, #32]
 80079d8:	01a3      	lsls	r3, r4, #6
 80079da:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80079de:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80079e0:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 80079e4:	440b      	add	r3, r1
 80079e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80079e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079ea:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 80079ee:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 80079f2:	440b      	add	r3, r1
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80079f6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80079f8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80079fc:	637b      	str	r3, [r7, #52]	; 0x34
 80079fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a00:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007a04:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a06:	633b      	str	r3, [r7, #48]	; 0x30
 8007a08:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007a0c:	4633      	mov	r3, r6
 8007a0e:	1996      	adds	r6, r2, r6
 8007a10:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007a12:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8007a14:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8007a18:	441e      	add	r6, r3
 8007a1a:	62be      	str	r6, [r7, #40]	; 0x28
 8007a1c:	18e6      	adds	r6, r4, r3
 8007a1e:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007a20:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8007a24:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8007a28:	ea04 0600 	and.w	r6, r4, r0
 8007a2c:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8007a30:	ea08 0600 	and.w	r6, r8, r0
 8007a34:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8007a38:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007a3c:	0089      	lsls	r1, r1, #2
 8007a3e:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8007a42:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007a44:	00ad      	lsls	r5, r5, #2
 8007a46:	fb05 f101 	mul.w	r1, r5, r1
 8007a4a:	61b9      	str	r1, [r7, #24]
 8007a4c:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007a50:	fb05 f501 	mul.w	r5, r5, r1
 8007a54:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8007a58:	4661      	mov	r1, ip
 8007a5a:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 8007a5e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007a62:	61fd      	str	r5, [r7, #28]
 8007a64:	4419      	add	r1, r3
 8007a66:	6279      	str	r1, [r7, #36]	; 0x24
 8007a68:	18d1      	adds	r1, r2, r3
 8007a6a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007a6e:	f008 060f 	and.w	r6, r8, #15
 8007a72:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8007a76:	617b      	str	r3, [r7, #20]
 8007a78:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007a7e:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8007a82:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8007a86:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007a8a:	4413      	add	r3, r2
 8007a8c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007a90:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007a94:	4b4b      	ldr	r3, [pc, #300]	; (8007bc4 <forward_lstm+0x4c0>)
 8007a96:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007a9a:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 8007a9e:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 8007aa2:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 8007aa6:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8007aaa:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8007aae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007ab0:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007ab4:	699b      	ldr	r3, [r3, #24]
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8007abc:	4403      	add	r3, r0
 8007abe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007ac2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8007ac6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007aca:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007ace:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 8007ad2:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 8007ad6:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 8007ada:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007ade:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007ae0:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 8007ae4:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8007ae8:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8007aec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8007af0:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8007af4:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8007af8:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8007afc:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b00:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 8007b04:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8007b08:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8007b0c:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8007b10:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 8007b14:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8007b18:	2a00      	cmp	r2, #0
 8007b1a:	f001 81a2 	beq.w	8008e62 <forward_lstm+0x175e>
 8007b1e:	6a38      	ldr	r0, [r7, #32]
 8007b20:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007b24:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b28:	46a9      	mov	r9, r5
 8007b2a:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8007b2c:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8007b30:	3080      	adds	r0, #128	; 0x80
 8007b32:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007b34:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8007b38:	4410      	add	r0, r2
 8007b3a:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8007b3c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007b3e:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8007b42:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8007b46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007b4a:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8007b4e:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 8007b52:	1955      	adds	r5, r2, r5
 8007b54:	469e      	mov	lr, r3
 8007b56:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 8007b5a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007b5e:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 8007b62:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8007b66:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007b6a:	442a      	add	r2, r5
 8007b6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007b6e:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8007b72:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007b76:	69fa      	ldr	r2, [r7, #28]
 8007b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007b7a:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007b7e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007b82:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007b84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007b86:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007b8a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007b8c:	f002 020f 	and.w	r2, r2, #15
 8007b90:	46a0      	mov	r8, r4
 8007b92:	468c      	mov	ip, r1
 8007b94:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8007b98:	469a      	mov	sl, r3
 8007b9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b9e:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007bc8 <forward_lstm+0x4c4>
 8007ba2:	ecac 8a01 	vstmia	ip!, {s16}
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f001 8154 	beq.w	8008e54 <forward_lstm+0x1750>
 8007bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bb0:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007bb4:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007bb8:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8007bbc:	e006      	b.n	8007bcc <forward_lstm+0x4c8>
 8007bbe:	bf00      	nop
 8007bc0:	080076f1 	.word	0x080076f1
 8007bc4:	01821040 	.word	0x01821040
 8007bc8:	00000000 	.word	0x00000000
 8007bcc:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007bd0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007bd4:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007bd8:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8007bdc:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8007be0:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8007be4:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007be8:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8007bec:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8007bf0:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007bf4:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8007bf8:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007bfc:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007c00:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c04:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007c08:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c0c:	3910      	subs	r1, #16
 8007c0e:	290f      	cmp	r1, #15
 8007c10:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007c14:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007c18:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c1c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007c20:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007c24:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007c28:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007c2c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007c30:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007c34:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007c38:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c3c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007c40:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007c44:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c48:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007c4c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8007c50:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c54:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007c58:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007c5c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c60:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007c64:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007c68:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c6c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007c70:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007c74:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c78:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007c7c:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007c80:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007c84:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007c88:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c8c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c90:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c94:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c9c:	d896      	bhi.n	8007bcc <forward_lstm+0x4c8>
 8007c9e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007ca2:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 8007ca6:	4453      	add	r3, sl
 8007ca8:	2d00      	cmp	r5, #0
 8007caa:	d076      	beq.n	8007d9a <forward_lstm+0x696>
 8007cac:	edd4 6a00 	vldr	s13, [r4]
 8007cb0:	edd3 7a00 	vldr	s15, [r3]
 8007cb4:	2d01      	cmp	r5, #1
 8007cb6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cba:	d06e      	beq.n	8007d9a <forward_lstm+0x696>
 8007cbc:	edd3 6a01 	vldr	s13, [r3, #4]
 8007cc0:	edd4 7a01 	vldr	s15, [r4, #4]
 8007cc4:	2d02      	cmp	r5, #2
 8007cc6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cca:	d066      	beq.n	8007d9a <forward_lstm+0x696>
 8007ccc:	edd3 6a02 	vldr	s13, [r3, #8]
 8007cd0:	edd4 7a02 	vldr	s15, [r4, #8]
 8007cd4:	2d03      	cmp	r5, #3
 8007cd6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cda:	d05e      	beq.n	8007d9a <forward_lstm+0x696>
 8007cdc:	edd3 6a03 	vldr	s13, [r3, #12]
 8007ce0:	edd4 7a03 	vldr	s15, [r4, #12]
 8007ce4:	2d04      	cmp	r5, #4
 8007ce6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cea:	d056      	beq.n	8007d9a <forward_lstm+0x696>
 8007cec:	edd3 6a04 	vldr	s13, [r3, #16]
 8007cf0:	edd4 7a04 	vldr	s15, [r4, #16]
 8007cf4:	2d05      	cmp	r5, #5
 8007cf6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cfa:	d04e      	beq.n	8007d9a <forward_lstm+0x696>
 8007cfc:	edd3 6a05 	vldr	s13, [r3, #20]
 8007d00:	edd4 7a05 	vldr	s15, [r4, #20]
 8007d04:	2d06      	cmp	r5, #6
 8007d06:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d0a:	d046      	beq.n	8007d9a <forward_lstm+0x696>
 8007d0c:	edd3 6a06 	vldr	s13, [r3, #24]
 8007d10:	edd4 7a06 	vldr	s15, [r4, #24]
 8007d14:	2d07      	cmp	r5, #7
 8007d16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d1a:	d03e      	beq.n	8007d9a <forward_lstm+0x696>
 8007d1c:	edd3 6a07 	vldr	s13, [r3, #28]
 8007d20:	edd4 7a07 	vldr	s15, [r4, #28]
 8007d24:	2d08      	cmp	r5, #8
 8007d26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d2a:	d036      	beq.n	8007d9a <forward_lstm+0x696>
 8007d2c:	edd3 6a08 	vldr	s13, [r3, #32]
 8007d30:	edd4 7a08 	vldr	s15, [r4, #32]
 8007d34:	2d09      	cmp	r5, #9
 8007d36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d3a:	d02e      	beq.n	8007d9a <forward_lstm+0x696>
 8007d3c:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007d40:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8007d44:	2d0a      	cmp	r5, #10
 8007d46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d4a:	d026      	beq.n	8007d9a <forward_lstm+0x696>
 8007d4c:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8007d50:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8007d54:	2d0b      	cmp	r5, #11
 8007d56:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d5a:	d01e      	beq.n	8007d9a <forward_lstm+0x696>
 8007d5c:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007d60:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007d64:	2d0c      	cmp	r5, #12
 8007d66:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d6a:	d016      	beq.n	8007d9a <forward_lstm+0x696>
 8007d6c:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007d70:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8007d74:	f1b5 020d 	subs.w	r2, r5, #13
 8007d78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d7c:	d00d      	beq.n	8007d9a <forward_lstm+0x696>
 8007d7e:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8007d82:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8007d86:	2a01      	cmp	r2, #1
 8007d88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d8c:	d005      	beq.n	8007d9a <forward_lstm+0x696>
 8007d8e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8007d92:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8007d96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007d9e:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8007bc8 <forward_lstm+0x4c4>
 8007da2:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	f001 804c 	beq.w	8008e44 <forward_lstm+0x1740>
 8007dac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007db0:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007db4:	3340      	adds	r3, #64	; 0x40
 8007db6:	3240      	adds	r2, #64	; 0x40
 8007db8:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8007dbc:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8007dc0:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8007dc4:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007dc8:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8007dcc:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8007dd0:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8007dd4:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007dd8:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8007ddc:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8007de0:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007de4:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8007de8:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007dec:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007df0:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8007df4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007df8:	3340      	adds	r3, #64	; 0x40
 8007dfa:	3240      	adds	r2, #64	; 0x40
 8007dfc:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8007e00:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8007e04:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e08:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8007e0c:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007e10:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007e14:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007e18:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8007e1c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e20:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8007e24:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007e28:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e2c:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8007e30:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007e34:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007e38:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8007e3c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007e40:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e44:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8007e48:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007e4c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e50:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8007e54:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007e58:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e5c:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8007e60:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007e64:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007e68:	4298      	cmp	r0, r3
 8007e6a:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007e6e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007e72:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e76:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e7a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e7e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007e82:	d199      	bne.n	8007db8 <forward_lstm+0x6b4>
 8007e84:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007e88:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007e8c:	189a      	adds	r2, r3, r2
 8007e8e:	2e00      	cmp	r6, #0
 8007e90:	d078      	beq.n	8007f84 <forward_lstm+0x880>
 8007e92:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007e96:	4633      	mov	r3, r6
 8007e98:	ed91 6a00 	vldr	s12, [r1]
 8007e9c:	edd2 7a00 	vldr	s15, [r2]
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ea6:	d06d      	beq.n	8007f84 <forward_lstm+0x880>
 8007ea8:	ed91 6a01 	vldr	s12, [r1, #4]
 8007eac:	edd2 7a01 	vldr	s15, [r2, #4]
 8007eb0:	2b02      	cmp	r3, #2
 8007eb2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007eb6:	d065      	beq.n	8007f84 <forward_lstm+0x880>
 8007eb8:	ed91 6a02 	vldr	s12, [r1, #8]
 8007ebc:	edd2 7a02 	vldr	s15, [r2, #8]
 8007ec0:	2b03      	cmp	r3, #3
 8007ec2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ec6:	d05d      	beq.n	8007f84 <forward_lstm+0x880>
 8007ec8:	ed91 6a03 	vldr	s12, [r1, #12]
 8007ecc:	edd2 7a03 	vldr	s15, [r2, #12]
 8007ed0:	2b04      	cmp	r3, #4
 8007ed2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ed6:	d055      	beq.n	8007f84 <forward_lstm+0x880>
 8007ed8:	ed91 6a04 	vldr	s12, [r1, #16]
 8007edc:	edd2 7a04 	vldr	s15, [r2, #16]
 8007ee0:	2b05      	cmp	r3, #5
 8007ee2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ee6:	d04d      	beq.n	8007f84 <forward_lstm+0x880>
 8007ee8:	ed91 6a05 	vldr	s12, [r1, #20]
 8007eec:	edd2 7a05 	vldr	s15, [r2, #20]
 8007ef0:	2b06      	cmp	r3, #6
 8007ef2:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ef6:	d045      	beq.n	8007f84 <forward_lstm+0x880>
 8007ef8:	ed91 6a06 	vldr	s12, [r1, #24]
 8007efc:	edd2 7a06 	vldr	s15, [r2, #24]
 8007f00:	2b07      	cmp	r3, #7
 8007f02:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f06:	d03d      	beq.n	8007f84 <forward_lstm+0x880>
 8007f08:	ed91 6a07 	vldr	s12, [r1, #28]
 8007f0c:	edd2 7a07 	vldr	s15, [r2, #28]
 8007f10:	2b08      	cmp	r3, #8
 8007f12:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f16:	d035      	beq.n	8007f84 <forward_lstm+0x880>
 8007f18:	ed91 6a08 	vldr	s12, [r1, #32]
 8007f1c:	edd2 7a08 	vldr	s15, [r2, #32]
 8007f20:	2b09      	cmp	r3, #9
 8007f22:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f26:	d02d      	beq.n	8007f84 <forward_lstm+0x880>
 8007f28:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8007f2c:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007f30:	2b0a      	cmp	r3, #10
 8007f32:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f36:	d025      	beq.n	8007f84 <forward_lstm+0x880>
 8007f38:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8007f3c:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007f40:	2b0b      	cmp	r3, #11
 8007f42:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f46:	d01d      	beq.n	8007f84 <forward_lstm+0x880>
 8007f48:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8007f4c:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007f50:	2b0c      	cmp	r3, #12
 8007f52:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f56:	d015      	beq.n	8007f84 <forward_lstm+0x880>
 8007f58:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8007f5c:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007f60:	3b0d      	subs	r3, #13
 8007f62:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f66:	d00d      	beq.n	8007f84 <forward_lstm+0x880>
 8007f68:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8007f6c:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007f70:	2b01      	cmp	r3, #1
 8007f72:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f76:	d005      	beq.n	8007f84 <forward_lstm+0x880>
 8007f78:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8007f7c:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007f80:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007f88:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 8007f8c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007f90:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8007f94:	ecb3 6a01 	vldmia	r3!, {s12}
 8007f98:	edd9 6a00 	vldr	s13, [r9]
 8007f9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007fa0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007fa4:	ecf3 7a01 	vldmia	r3!, {s15}
 8007fa8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007fac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fb4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8007fb8:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8007fbc:	ed9f 7abb 	vldr	s14, [pc, #748]	; 80082ac <forward_lstm+0xba8>
 8007fc0:	ed88 8a00 	vstr	s16, [r8]
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	f000 8739 	beq.w	8008e3c <forward_lstm+0x1738>
 8007fca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fce:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007fd2:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007fd6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8007fda:	3340      	adds	r3, #64	; 0x40
 8007fdc:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007fe0:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007fe4:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007fe8:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8007fec:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8007ff0:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8007ff4:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007ff8:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8007ffc:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008000:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008004:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008008:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800800c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008010:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008014:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008018:	eee6 7a26 	vfma.f32	s15, s12, s13
 800801c:	3910      	subs	r1, #16
 800801e:	290f      	cmp	r1, #15
 8008020:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8008024:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008028:	eee5 7a86 	vfma.f32	s15, s11, s12
 800802c:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008030:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008034:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8008038:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 800803c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008040:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8008044:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8008048:	eee5 7a25 	vfma.f32	s15, s10, s11
 800804c:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008050:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8008054:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008058:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800805c:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8008060:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008064:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008068:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800806c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008070:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008074:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008078:	eee5 7a25 	vfma.f32	s15, s10, s11
 800807c:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008080:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8008084:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008088:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800808c:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008090:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008094:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008098:	eee3 7a23 	vfma.f32	s15, s6, s7
 800809c:	eee4 7a24 	vfma.f32	s15, s8, s9
 80080a0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80080a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80080ac:	d896      	bhi.n	8007fdc <forward_lstm+0x8d8>
 80080ae:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80080b2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80080b6:	4413      	add	r3, r2
 80080b8:	2d00      	cmp	r5, #0
 80080ba:	d076      	beq.n	80081aa <forward_lstm+0xaa6>
 80080bc:	edd4 6a00 	vldr	s13, [r4]
 80080c0:	edd3 7a00 	vldr	s15, [r3]
 80080c4:	2d01      	cmp	r5, #1
 80080c6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080ca:	d06e      	beq.n	80081aa <forward_lstm+0xaa6>
 80080cc:	edd4 6a01 	vldr	s13, [r4, #4]
 80080d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80080d4:	2d02      	cmp	r5, #2
 80080d6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080da:	d066      	beq.n	80081aa <forward_lstm+0xaa6>
 80080dc:	edd4 6a02 	vldr	s13, [r4, #8]
 80080e0:	edd3 7a02 	vldr	s15, [r3, #8]
 80080e4:	2d03      	cmp	r5, #3
 80080e6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080ea:	d05e      	beq.n	80081aa <forward_lstm+0xaa6>
 80080ec:	edd4 6a03 	vldr	s13, [r4, #12]
 80080f0:	edd3 7a03 	vldr	s15, [r3, #12]
 80080f4:	2d04      	cmp	r5, #4
 80080f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80080fa:	d056      	beq.n	80081aa <forward_lstm+0xaa6>
 80080fc:	edd4 6a04 	vldr	s13, [r4, #16]
 8008100:	edd3 7a04 	vldr	s15, [r3, #16]
 8008104:	2d05      	cmp	r5, #5
 8008106:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800810a:	d04e      	beq.n	80081aa <forward_lstm+0xaa6>
 800810c:	edd4 6a05 	vldr	s13, [r4, #20]
 8008110:	edd3 7a05 	vldr	s15, [r3, #20]
 8008114:	2d06      	cmp	r5, #6
 8008116:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800811a:	d046      	beq.n	80081aa <forward_lstm+0xaa6>
 800811c:	edd4 6a06 	vldr	s13, [r4, #24]
 8008120:	edd3 7a06 	vldr	s15, [r3, #24]
 8008124:	2d07      	cmp	r5, #7
 8008126:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800812a:	d03e      	beq.n	80081aa <forward_lstm+0xaa6>
 800812c:	edd4 6a07 	vldr	s13, [r4, #28]
 8008130:	edd3 7a07 	vldr	s15, [r3, #28]
 8008134:	2d08      	cmp	r5, #8
 8008136:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800813a:	d036      	beq.n	80081aa <forward_lstm+0xaa6>
 800813c:	edd4 6a08 	vldr	s13, [r4, #32]
 8008140:	edd3 7a08 	vldr	s15, [r3, #32]
 8008144:	2d09      	cmp	r5, #9
 8008146:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800814a:	d02e      	beq.n	80081aa <forward_lstm+0xaa6>
 800814c:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8008150:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008154:	2d0a      	cmp	r5, #10
 8008156:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800815a:	d026      	beq.n	80081aa <forward_lstm+0xaa6>
 800815c:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8008160:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008164:	2d0b      	cmp	r5, #11
 8008166:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800816a:	d01e      	beq.n	80081aa <forward_lstm+0xaa6>
 800816c:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8008170:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008174:	2d0c      	cmp	r5, #12
 8008176:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800817a:	d016      	beq.n	80081aa <forward_lstm+0xaa6>
 800817c:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8008180:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008184:	f1b5 020d 	subs.w	r2, r5, #13
 8008188:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800818c:	d00d      	beq.n	80081aa <forward_lstm+0xaa6>
 800818e:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8008192:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008196:	2a01      	cmp	r2, #1
 8008198:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800819c:	d005      	beq.n	80081aa <forward_lstm+0xaa6>
 800819e:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80081a2:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80081a6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081aa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80081ae:	eddf 6a3f 	vldr	s13, [pc, #252]	; 80082ac <forward_lstm+0xba8>
 80081b2:	ed88 7a00 	vstr	s14, [r8]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	f000 8638 	beq.w	8008e2c <forward_lstm+0x1728>
 80081bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80081c0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80081c4:	3340      	adds	r3, #64	; 0x40
 80081c6:	3240      	adds	r2, #64	; 0x40
 80081c8:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80081cc:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80081d0:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80081d4:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80081d8:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80081dc:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80081e0:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80081e4:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80081e8:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 80081ec:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 80081f0:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 80081f4:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 80081f8:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 80081fc:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008200:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8008204:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008208:	3340      	adds	r3, #64	; 0x40
 800820a:	3240      	adds	r2, #64	; 0x40
 800820c:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8008210:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8008214:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008218:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 800821c:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8008220:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008224:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008228:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 800822c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008230:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8008234:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008238:	eee5 7a86 	vfma.f32	s15, s11, s12
 800823c:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8008240:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008244:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008248:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 800824c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008250:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008254:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8008258:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800825c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008260:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8008264:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008268:	eee5 7a86 	vfma.f32	s15, s11, s12
 800826c:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8008270:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008274:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008278:	4283      	cmp	r3, r0
 800827a:	eee1 7a82 	vfma.f32	s15, s3, s4
 800827e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008282:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008286:	eee4 7a85 	vfma.f32	s15, s9, s10
 800828a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800828e:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008292:	d199      	bne.n	80081c8 <forward_lstm+0xac4>
 8008294:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008298:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800829c:	189a      	adds	r2, r3, r2
 800829e:	2e00      	cmp	r6, #0
 80082a0:	d07c      	beq.n	800839c <forward_lstm+0xc98>
 80082a2:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80082a6:	4633      	mov	r3, r6
 80082a8:	e002      	b.n	80082b0 <forward_lstm+0xbac>
 80082aa:	bf00      	nop
 80082ac:	00000000 	.word	0x00000000
 80082b0:	ed91 6a00 	vldr	s12, [r1]
 80082b4:	edd2 7a00 	vldr	s15, [r2]
 80082b8:	2b01      	cmp	r3, #1
 80082ba:	eee6 6a27 	vfma.f32	s13, s12, s15
 80082be:	d06d      	beq.n	800839c <forward_lstm+0xc98>
 80082c0:	ed91 6a01 	vldr	s12, [r1, #4]
 80082c4:	edd2 7a01 	vldr	s15, [r2, #4]
 80082c8:	2b02      	cmp	r3, #2
 80082ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 80082ce:	d065      	beq.n	800839c <forward_lstm+0xc98>
 80082d0:	ed91 6a02 	vldr	s12, [r1, #8]
 80082d4:	edd2 7a02 	vldr	s15, [r2, #8]
 80082d8:	2b03      	cmp	r3, #3
 80082da:	eee6 6a27 	vfma.f32	s13, s12, s15
 80082de:	d05d      	beq.n	800839c <forward_lstm+0xc98>
 80082e0:	ed91 6a03 	vldr	s12, [r1, #12]
 80082e4:	edd2 7a03 	vldr	s15, [r2, #12]
 80082e8:	2b04      	cmp	r3, #4
 80082ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 80082ee:	d055      	beq.n	800839c <forward_lstm+0xc98>
 80082f0:	ed91 6a04 	vldr	s12, [r1, #16]
 80082f4:	edd2 7a04 	vldr	s15, [r2, #16]
 80082f8:	2b05      	cmp	r3, #5
 80082fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80082fe:	d04d      	beq.n	800839c <forward_lstm+0xc98>
 8008300:	ed91 6a05 	vldr	s12, [r1, #20]
 8008304:	edd2 7a05 	vldr	s15, [r2, #20]
 8008308:	2b06      	cmp	r3, #6
 800830a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800830e:	d045      	beq.n	800839c <forward_lstm+0xc98>
 8008310:	ed91 6a06 	vldr	s12, [r1, #24]
 8008314:	edd2 7a06 	vldr	s15, [r2, #24]
 8008318:	2b07      	cmp	r3, #7
 800831a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800831e:	d03d      	beq.n	800839c <forward_lstm+0xc98>
 8008320:	ed91 6a07 	vldr	s12, [r1, #28]
 8008324:	edd2 7a07 	vldr	s15, [r2, #28]
 8008328:	2b08      	cmp	r3, #8
 800832a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800832e:	d035      	beq.n	800839c <forward_lstm+0xc98>
 8008330:	ed91 6a08 	vldr	s12, [r1, #32]
 8008334:	edd2 7a08 	vldr	s15, [r2, #32]
 8008338:	2b09      	cmp	r3, #9
 800833a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800833e:	d02d      	beq.n	800839c <forward_lstm+0xc98>
 8008340:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8008344:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008348:	2b0a      	cmp	r3, #10
 800834a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800834e:	d025      	beq.n	800839c <forward_lstm+0xc98>
 8008350:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8008354:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008358:	2b0b      	cmp	r3, #11
 800835a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800835e:	d01d      	beq.n	800839c <forward_lstm+0xc98>
 8008360:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8008364:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008368:	2b0c      	cmp	r3, #12
 800836a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800836e:	d015      	beq.n	800839c <forward_lstm+0xc98>
 8008370:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8008374:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008378:	3b0d      	subs	r3, #13
 800837a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800837e:	d00d      	beq.n	800839c <forward_lstm+0xc98>
 8008380:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8008384:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008388:	2b01      	cmp	r3, #1
 800838a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800838e:	d005      	beq.n	800839c <forward_lstm+0xc98>
 8008390:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8008394:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008398:	eee6 6a27 	vfma.f32	s13, s12, s15
 800839c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80083a0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80083a4:	f109 0904 	add.w	r9, r9, #4
 80083a8:	ed88 7a00 	vstr	s14, [r8]
 80083ac:	edd3 7a00 	vldr	s15, [r3]
 80083b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80083b4:	ecb3 6a01 	vldmia	r3!, {s12}
 80083b8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80083bc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80083c0:	ecf3 6a01 	vldmia	r3!, {s13}
 80083c4:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083c8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80083cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80083d0:	ee36 7a87 	vadd.f32	s14, s13, s14
 80083d4:	eca8 7a01 	vstmia	r8!, {s14}
 80083d8:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 80082ac <forward_lstm+0xba8>
 80083dc:	ed8e 8a00 	vstr	s16, [lr]
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	f000 851f 	beq.w	8008e24 <forward_lstm+0x1720>
 80083e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80083ea:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 80083ee:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80083f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80083f6:	3340      	adds	r3, #64	; 0x40
 80083f8:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80083fc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008400:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008404:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8008408:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800840c:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8008410:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008414:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008418:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 800841c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008420:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008424:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008428:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800842c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008430:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008434:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008438:	3910      	subs	r1, #16
 800843a:	290f      	cmp	r1, #15
 800843c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8008440:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008444:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008448:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800844c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008450:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8008454:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008458:	eee4 7aa6 	vfma.f32	s15, s9, s13
 800845c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8008460:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8008464:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008468:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 800846c:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8008470:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008474:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008478:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 800847c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008480:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008484:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8008488:	eee4 7a24 	vfma.f32	s15, s8, s9
 800848c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008490:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008494:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008498:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 800849c:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80084a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084a4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80084a8:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80084ac:	eee1 7a21 	vfma.f32	s15, s2, s3
 80084b0:	eee2 7a22 	vfma.f32	s15, s4, s5
 80084b4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80084b8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80084bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80084c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80084c8:	d896      	bhi.n	80083f8 <forward_lstm+0xcf4>
 80084ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ce:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80084d2:	4413      	add	r3, r2
 80084d4:	2d00      	cmp	r5, #0
 80084d6:	d076      	beq.n	80085c6 <forward_lstm+0xec2>
 80084d8:	edd4 6a00 	vldr	s13, [r4]
 80084dc:	edd3 7a00 	vldr	s15, [r3]
 80084e0:	2d01      	cmp	r5, #1
 80084e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084e6:	d06e      	beq.n	80085c6 <forward_lstm+0xec2>
 80084e8:	edd4 6a01 	vldr	s13, [r4, #4]
 80084ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80084f0:	2d02      	cmp	r5, #2
 80084f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80084f6:	d066      	beq.n	80085c6 <forward_lstm+0xec2>
 80084f8:	edd4 6a02 	vldr	s13, [r4, #8]
 80084fc:	edd3 7a02 	vldr	s15, [r3, #8]
 8008500:	2d03      	cmp	r5, #3
 8008502:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008506:	d05e      	beq.n	80085c6 <forward_lstm+0xec2>
 8008508:	edd4 6a03 	vldr	s13, [r4, #12]
 800850c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008510:	2d04      	cmp	r5, #4
 8008512:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008516:	d056      	beq.n	80085c6 <forward_lstm+0xec2>
 8008518:	edd4 6a04 	vldr	s13, [r4, #16]
 800851c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008520:	2d05      	cmp	r5, #5
 8008522:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008526:	d04e      	beq.n	80085c6 <forward_lstm+0xec2>
 8008528:	edd4 6a05 	vldr	s13, [r4, #20]
 800852c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008530:	2d06      	cmp	r5, #6
 8008532:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008536:	d046      	beq.n	80085c6 <forward_lstm+0xec2>
 8008538:	edd4 6a06 	vldr	s13, [r4, #24]
 800853c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008540:	2d07      	cmp	r5, #7
 8008542:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008546:	d03e      	beq.n	80085c6 <forward_lstm+0xec2>
 8008548:	edd4 6a07 	vldr	s13, [r4, #28]
 800854c:	edd3 7a07 	vldr	s15, [r3, #28]
 8008550:	2d08      	cmp	r5, #8
 8008552:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008556:	d036      	beq.n	80085c6 <forward_lstm+0xec2>
 8008558:	edd4 6a08 	vldr	s13, [r4, #32]
 800855c:	edd3 7a08 	vldr	s15, [r3, #32]
 8008560:	2d09      	cmp	r5, #9
 8008562:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008566:	d02e      	beq.n	80085c6 <forward_lstm+0xec2>
 8008568:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 800856c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008570:	2d0a      	cmp	r5, #10
 8008572:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008576:	d026      	beq.n	80085c6 <forward_lstm+0xec2>
 8008578:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 800857c:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008580:	2d0b      	cmp	r5, #11
 8008582:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008586:	d01e      	beq.n	80085c6 <forward_lstm+0xec2>
 8008588:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 800858c:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008590:	2d0c      	cmp	r5, #12
 8008592:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008596:	d016      	beq.n	80085c6 <forward_lstm+0xec2>
 8008598:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 800859c:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80085a0:	f1b5 020d 	subs.w	r2, r5, #13
 80085a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085a8:	d00d      	beq.n	80085c6 <forward_lstm+0xec2>
 80085aa:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80085ae:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 80085b2:	2a01      	cmp	r2, #1
 80085b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085b8:	d005      	beq.n	80085c6 <forward_lstm+0xec2>
 80085ba:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 80085be:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 80085c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80085ca:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 80082ac <forward_lstm+0xba8>
 80085ce:	ed8e 7a00 	vstr	s14, [lr]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	f000 8420 	beq.w	8008e18 <forward_lstm+0x1714>
 80085d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085dc:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 80085e0:	3340      	adds	r3, #64	; 0x40
 80085e2:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 80085e6:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 80085ea:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 80085ee:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80085f2:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 80085f6:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 80085fa:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 80085fe:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008602:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8008606:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 800860a:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800860e:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8008612:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008616:	ee67 7a85 	vmul.f32	s15, s15, s10
 800861a:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 800861e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008622:	3340      	adds	r3, #64	; 0x40
 8008624:	3240      	adds	r2, #64	; 0x40
 8008626:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800862a:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800862e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008632:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8008636:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800863a:	eee4 7a06 	vfma.f32	s15, s8, s12
 800863e:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008642:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8008646:	eee4 7a85 	vfma.f32	s15, s9, s10
 800864a:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 800864e:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008652:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008656:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 800865a:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 800865e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008662:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8008666:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 800866a:	eee3 7a84 	vfma.f32	s15, s7, s8
 800866e:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8008672:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008676:	eee4 7a85 	vfma.f32	s15, s9, s10
 800867a:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 800867e:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008682:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008686:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 800868a:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 800868e:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008692:	4283      	cmp	r3, r0
 8008694:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008698:	eee2 7a83 	vfma.f32	s15, s5, s6
 800869c:	eee3 7a84 	vfma.f32	s15, s7, s8
 80086a0:	eee4 7a85 	vfma.f32	s15, s9, s10
 80086a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80086a8:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80086ac:	d199      	bne.n	80085e2 <forward_lstm+0xede>
 80086ae:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80086b2:	eb0b 0203 	add.w	r2, fp, r3
 80086b6:	2e00      	cmp	r6, #0
 80086b8:	d078      	beq.n	80087ac <forward_lstm+0x10a8>
 80086ba:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80086be:	4633      	mov	r3, r6
 80086c0:	ed91 6a00 	vldr	s12, [r1]
 80086c4:	edd2 7a00 	vldr	s15, [r2]
 80086c8:	2b01      	cmp	r3, #1
 80086ca:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086ce:	d06d      	beq.n	80087ac <forward_lstm+0x10a8>
 80086d0:	ed91 6a01 	vldr	s12, [r1, #4]
 80086d4:	edd2 7a01 	vldr	s15, [r2, #4]
 80086d8:	2b02      	cmp	r3, #2
 80086da:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086de:	d065      	beq.n	80087ac <forward_lstm+0x10a8>
 80086e0:	ed91 6a02 	vldr	s12, [r1, #8]
 80086e4:	edd2 7a02 	vldr	s15, [r2, #8]
 80086e8:	2b03      	cmp	r3, #3
 80086ea:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086ee:	d05d      	beq.n	80087ac <forward_lstm+0x10a8>
 80086f0:	ed91 6a03 	vldr	s12, [r1, #12]
 80086f4:	edd2 7a03 	vldr	s15, [r2, #12]
 80086f8:	2b04      	cmp	r3, #4
 80086fa:	eee6 6a27 	vfma.f32	s13, s12, s15
 80086fe:	d055      	beq.n	80087ac <forward_lstm+0x10a8>
 8008700:	ed91 6a04 	vldr	s12, [r1, #16]
 8008704:	edd2 7a04 	vldr	s15, [r2, #16]
 8008708:	2b05      	cmp	r3, #5
 800870a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800870e:	d04d      	beq.n	80087ac <forward_lstm+0x10a8>
 8008710:	ed91 6a05 	vldr	s12, [r1, #20]
 8008714:	edd2 7a05 	vldr	s15, [r2, #20]
 8008718:	2b06      	cmp	r3, #6
 800871a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800871e:	d045      	beq.n	80087ac <forward_lstm+0x10a8>
 8008720:	ed91 6a06 	vldr	s12, [r1, #24]
 8008724:	edd2 7a06 	vldr	s15, [r2, #24]
 8008728:	2b07      	cmp	r3, #7
 800872a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800872e:	d03d      	beq.n	80087ac <forward_lstm+0x10a8>
 8008730:	ed91 6a07 	vldr	s12, [r1, #28]
 8008734:	edd2 7a07 	vldr	s15, [r2, #28]
 8008738:	2b08      	cmp	r3, #8
 800873a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800873e:	d035      	beq.n	80087ac <forward_lstm+0x10a8>
 8008740:	ed91 6a08 	vldr	s12, [r1, #32]
 8008744:	edd2 7a08 	vldr	s15, [r2, #32]
 8008748:	2b09      	cmp	r3, #9
 800874a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800874e:	d02d      	beq.n	80087ac <forward_lstm+0x10a8>
 8008750:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8008754:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008758:	2b0a      	cmp	r3, #10
 800875a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800875e:	d025      	beq.n	80087ac <forward_lstm+0x10a8>
 8008760:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8008764:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008768:	2b0b      	cmp	r3, #11
 800876a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800876e:	d01d      	beq.n	80087ac <forward_lstm+0x10a8>
 8008770:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8008774:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008778:	2b0c      	cmp	r3, #12
 800877a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800877e:	d015      	beq.n	80087ac <forward_lstm+0x10a8>
 8008780:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8008784:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008788:	3b0d      	subs	r3, #13
 800878a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800878e:	d00d      	beq.n	80087ac <forward_lstm+0x10a8>
 8008790:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8008794:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008798:	2b01      	cmp	r3, #1
 800879a:	eee6 6a27 	vfma.f32	s13, s12, s15
 800879e:	d005      	beq.n	80087ac <forward_lstm+0x10a8>
 80087a0:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 80087a4:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 80087a8:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087ac:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80087b0:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80087b4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80087b8:	ee37 7a26 	vadd.f32	s14, s14, s13
 80087bc:	449a      	add	sl, r3
 80087be:	ed8e 7a00 	vstr	s14, [lr]
 80087c2:	ecf2 7a01 	vldmia	r2!, {s15}
 80087c6:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 80087ca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80087ce:	4411      	add	r1, r2
 80087d0:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 80087d4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80087d8:	4419      	add	r1, r3
 80087da:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 80087de:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80087e2:	4411      	add	r1, r2
 80087e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80087e8:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 80087ec:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80087f0:	eeb4 7ae8 	vcmpe.f32	s14, s17
 80087f4:	4419      	add	r1, r3
 80087f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80087fa:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 80087fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008802:	bf88      	it	hi
 8008804:	eeb0 7a68 	vmovhi.f32	s14, s17
 8008808:	4563      	cmp	r3, ip
 800880a:	ecae 7a01 	vstmia	lr!, {s14}
 800880e:	4493      	add	fp, r2
 8008810:	f47f a9c3 	bne.w	8007b9a <forward_lstm+0x496>
 8008814:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8008818:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 800881c:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8008820:	4642      	mov	r2, r8
 8008822:	4608      	mov	r0, r1
 8008824:	ee19 3a90 	vmov	r3, s19
 8008828:	46a3      	mov	fp, r4
 800882a:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 800882c:	47a0      	blx	r4
 800882e:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8008832:	4642      	mov	r2, r8
 8008834:	4608      	mov	r0, r1
 8008836:	ee19 3a90 	vmov	r3, s19
 800883a:	47a0      	blx	r4
 800883c:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8008840:	4642      	mov	r2, r8
 8008842:	4608      	mov	r0, r1
 8008844:	ee1a 3a90 	vmov	r3, s21
 8008848:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800884a:	47a0      	blx	r4
 800884c:	1e6a      	subs	r2, r5, #1
 800884e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008852:	1eaa      	subs	r2, r5, #2
 8008854:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 8008858:	1eea      	subs	r2, r5, #3
 800885a:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 800885e:	1f2a      	subs	r2, r5, #4
 8008860:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8008864:	1f6a      	subs	r2, r5, #5
 8008866:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800886a:	1faa      	subs	r2, r5, #6
 800886c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800886e:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 8008872:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 8008876:	1fea      	subs	r2, r5, #7
 8008878:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800887c:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 8008880:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 8008884:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 8008888:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800888a:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 800888e:	f1a5 0208 	sub.w	r2, r5, #8
 8008892:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008896:	465c      	mov	r4, fp
 8008898:	461e      	mov	r6, r3
 800889a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800889e:	ecf8 7a01 	vldmia	r8!, {s15}
 80088a2:	ecb3 6a01 	vldmia	r3!, {s12}
 80088a6:	ed9a 7a00 	vldr	s14, [sl]
 80088aa:	ecfe 6a01 	vldmia	lr!, {s13}
 80088ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80088b2:	ee67 7a86 	vmul.f32	s15, s15, s12
 80088b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088ba:	eee6 7a87 	vfma.f32	s15, s13, s14
 80088be:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8008bdc <forward_lstm+0x14d8>
 80088c2:	ecea 7a01 	vstmia	sl!, {s15}
 80088c6:	eca1 8a01 	vstmia	r1!, {s16}
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	f000 82a2 	beq.w	8008e14 <forward_lstm+0x1710>
 80088d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d4:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 80088d8:	f103 0240 	add.w	r2, r3, #64	; 0x40
 80088dc:	f100 0340 	add.w	r3, r0, #64	; 0x40
 80088e0:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 80088e4:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 80088e8:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 80088ec:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 80088f0:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 80088f4:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 80088f8:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 80088fc:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008900:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008904:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008908:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 800890c:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008910:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008914:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008918:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 800891c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008920:	f1ab 0b10 	sub.w	fp, fp, #16
 8008924:	f1bb 0f0f 	cmp.w	fp, #15
 8008928:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 800892c:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008930:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008934:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008938:	f103 0340 	add.w	r3, r3, #64	; 0x40
 800893c:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8008940:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008944:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008948:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 800894c:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8008950:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008954:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8008958:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 800895c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008960:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8008964:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8008968:	eee3 7a23 	vfma.f32	s15, s6, s7
 800896c:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008970:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8008974:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008978:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 800897c:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008980:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008984:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008988:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800898c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008990:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008994:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008998:	eee1 7a21 	vfma.f32	s15, s2, s3
 800899c:	eee2 7a22 	vfma.f32	s15, s4, s5
 80089a0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80089a4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089a8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089ac:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089b0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089b4:	d894      	bhi.n	80088e0 <forward_lstm+0x11dc>
 80089b6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80089ba:	18c3      	adds	r3, r0, r3
 80089bc:	2d00      	cmp	r5, #0
 80089be:	f000 8085 	beq.w	8008acc <forward_lstm+0x13c8>
 80089c2:	edd4 6a00 	vldr	s13, [r4]
 80089c6:	edd3 7a00 	vldr	s15, [r3]
 80089ca:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80089ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089d2:	2a00      	cmp	r2, #0
 80089d4:	d07a      	beq.n	8008acc <forward_lstm+0x13c8>
 80089d6:	edd4 6a01 	vldr	s13, [r4, #4]
 80089da:	edd3 7a01 	vldr	s15, [r3, #4]
 80089de:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80089e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089e6:	2a00      	cmp	r2, #0
 80089e8:	d070      	beq.n	8008acc <forward_lstm+0x13c8>
 80089ea:	edd4 6a02 	vldr	s13, [r4, #8]
 80089ee:	edd3 7a02 	vldr	s15, [r3, #8]
 80089f2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80089f6:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089fa:	2a00      	cmp	r2, #0
 80089fc:	d066      	beq.n	8008acc <forward_lstm+0x13c8>
 80089fe:	edd4 6a03 	vldr	s13, [r4, #12]
 8008a02:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a06:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a0a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a0e:	2a00      	cmp	r2, #0
 8008a10:	d05c      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a12:	edd4 6a04 	vldr	s13, [r4, #16]
 8008a16:	edd3 7a04 	vldr	s15, [r3, #16]
 8008a1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a1e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a22:	2a00      	cmp	r2, #0
 8008a24:	d052      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a26:	edd4 6a05 	vldr	s13, [r4, #20]
 8008a2a:	edd3 7a05 	vldr	s15, [r3, #20]
 8008a2e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a36:	2a00      	cmp	r2, #0
 8008a38:	d048      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a3a:	edd4 6a06 	vldr	s13, [r4, #24]
 8008a3e:	edd3 7a06 	vldr	s15, [r3, #24]
 8008a42:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008a46:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a4a:	b3fa      	cbz	r2, 8008acc <forward_lstm+0x13c8>
 8008a4c:	edd4 6a07 	vldr	s13, [r4, #28]
 8008a50:	edd3 7a07 	vldr	s15, [r3, #28]
 8008a54:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008a58:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a5c:	b3b2      	cbz	r2, 8008acc <forward_lstm+0x13c8>
 8008a5e:	edd4 6a08 	vldr	s13, [r4, #32]
 8008a62:	edd3 7a08 	vldr	s15, [r3, #32]
 8008a66:	2d09      	cmp	r5, #9
 8008a68:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a6c:	d02e      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a6e:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8008a72:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008a76:	2d0a      	cmp	r5, #10
 8008a78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a7c:	d026      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a7e:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8008a82:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008a86:	2d0b      	cmp	r5, #11
 8008a88:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a8c:	d01e      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a8e:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8008a92:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008a96:	2d0c      	cmp	r5, #12
 8008a98:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a9c:	d016      	beq.n	8008acc <forward_lstm+0x13c8>
 8008a9e:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8008aa2:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008aa6:	f1b5 020d 	subs.w	r2, r5, #13
 8008aaa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aae:	d00d      	beq.n	8008acc <forward_lstm+0x13c8>
 8008ab0:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8008ab4:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008ab8:	2a01      	cmp	r2, #1
 8008aba:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008abe:	d005      	beq.n	8008acc <forward_lstm+0x13c8>
 8008ac0:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8008ac4:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8008ac8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008acc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008ad0:	eddf 6a42 	vldr	s13, [pc, #264]	; 8008bdc <forward_lstm+0x14d8>
 8008ad4:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008ad8:	2b00      	cmp	r3, #0
 8008ada:	f000 8195 	beq.w	8008e08 <forward_lstm+0x1704>
 8008ade:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008ae2:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 8008ae6:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008aea:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8008aee:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 8008af2:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008af6:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8008afa:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8008afe:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 8008b02:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8008b06:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8008b0a:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8008b0e:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 8008b12:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 8008b16:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8008b1a:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8008b1e:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8008b22:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008b26:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8008b2a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b2e:	f1ab 0b10 	sub.w	fp, fp, #16
 8008b32:	f1bb 0f0f 	cmp.w	fp, #15
 8008b36:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8008b3a:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8008b3e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008b42:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008b46:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008b4a:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8008b4e:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 8008b52:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008b56:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8008b5a:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8008b5e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008b62:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 8008b66:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8008b6a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b6e:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 8008b72:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 8008b76:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008b7a:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8008b7e:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8008b82:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008b86:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8008b8a:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8008b8e:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008b92:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8008b96:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8008b9a:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b9e:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8008ba2:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 8008ba6:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008baa:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008bae:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008bb2:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008bb6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008bba:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008bbe:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008bc2:	d894      	bhi.n	8008aee <forward_lstm+0x13ea>
 8008bc4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008bc8:	eb0c 0203 	add.w	r2, ip, r3
 8008bcc:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	d07b      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008bd4:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 8008bd8:	e002      	b.n	8008be0 <forward_lstm+0x14dc>
 8008bda:	bf00      	nop
 8008bdc:	00000000 	.word	0x00000000
 8008be0:	ed9b 6a00 	vldr	s12, [fp]
 8008be4:	edd2 7a00 	vldr	s15, [r2]
 8008be8:	2b01      	cmp	r3, #1
 8008bea:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008bee:	d06d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008bf0:	ed9b 6a01 	vldr	s12, [fp, #4]
 8008bf4:	edd2 7a01 	vldr	s15, [r2, #4]
 8008bf8:	2b02      	cmp	r3, #2
 8008bfa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008bfe:	d065      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c00:	ed9b 6a02 	vldr	s12, [fp, #8]
 8008c04:	edd2 7a02 	vldr	s15, [r2, #8]
 8008c08:	2b03      	cmp	r3, #3
 8008c0a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c0e:	d05d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c10:	ed9b 6a03 	vldr	s12, [fp, #12]
 8008c14:	edd2 7a03 	vldr	s15, [r2, #12]
 8008c18:	2b04      	cmp	r3, #4
 8008c1a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c1e:	d055      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c20:	ed9b 6a04 	vldr	s12, [fp, #16]
 8008c24:	edd2 7a04 	vldr	s15, [r2, #16]
 8008c28:	2b05      	cmp	r3, #5
 8008c2a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c2e:	d04d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c30:	ed9b 6a05 	vldr	s12, [fp, #20]
 8008c34:	edd2 7a05 	vldr	s15, [r2, #20]
 8008c38:	2b06      	cmp	r3, #6
 8008c3a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c3e:	d045      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c40:	ed9b 6a06 	vldr	s12, [fp, #24]
 8008c44:	edd2 7a06 	vldr	s15, [r2, #24]
 8008c48:	2b07      	cmp	r3, #7
 8008c4a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c4e:	d03d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c50:	ed9b 6a07 	vldr	s12, [fp, #28]
 8008c54:	edd2 7a07 	vldr	s15, [r2, #28]
 8008c58:	2b08      	cmp	r3, #8
 8008c5a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c5e:	d035      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c60:	ed9b 6a08 	vldr	s12, [fp, #32]
 8008c64:	edd2 7a08 	vldr	s15, [r2, #32]
 8008c68:	2b09      	cmp	r3, #9
 8008c6a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c6e:	d02d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c70:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 8008c74:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008c78:	2b0a      	cmp	r3, #10
 8008c7a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c7e:	d025      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c80:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 8008c84:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008c88:	2b0b      	cmp	r3, #11
 8008c8a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c8e:	d01d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008c90:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 8008c94:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008c98:	2b0c      	cmp	r3, #12
 8008c9a:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c9e:	d015      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008ca0:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 8008ca4:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008ca8:	3b0d      	subs	r3, #13
 8008caa:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cae:	d00d      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008cb0:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 8008cb4:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008cb8:	2b01      	cmp	r3, #1
 8008cba:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cbe:	d005      	beq.n	8008ccc <forward_lstm+0x15c8>
 8008cc0:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 8008cc4:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008cc8:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008ccc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008cd0:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008cd4:	4418      	add	r0, r3
 8008cd6:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008cda:	ecb6 6a01 	vldmia	r6!, {s12}
 8008cde:	ecf9 7a01 	vldmia	r9!, {s15}
 8008ce2:	ed5a 6a01 	vldr	s13, [sl, #-4]
 8008ce6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008cea:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008cee:	449c      	add	ip, r3
 8008cf0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008cf4:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008cf8:	459e      	cmp	lr, r3
 8008cfa:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008cfe:	f47f adcc 	bne.w	800889a <forward_lstm+0x1196>
 8008d02:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8008d06:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8008d08:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8008d0c:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8008d10:	4608      	mov	r0, r1
 8008d12:	ee19 3a90 	vmov	r3, s19
 8008d16:	462a      	mov	r2, r5
 8008d18:	47a0      	blx	r4
 8008d1a:	ee1a 3a10 	vmov	r3, s20
 8008d1e:	462a      	mov	r2, r5
 8008d20:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8008d24:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008d26:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8008d2a:	47a0      	blx	r4
 8008d2c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d30:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008d34:	6979      	ldr	r1, [r7, #20]
 8008d36:	ecf3 7a01 	vldmia	r3!, {s15}
 8008d3a:	ed92 7a00 	vldr	s14, [r2]
 8008d3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008d42:	428b      	cmp	r3, r1
 8008d44:	ece2 7a01 	vstmia	r2!, {s15}
 8008d48:	d1f5      	bne.n	8008d36 <forward_lstm+0x1632>
 8008d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008d4e:	899b      	ldrh	r3, [r3, #12]
 8008d50:	b163      	cbz	r3, 8008d6c <forward_lstm+0x1668>
 8008d52:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 8008d56:	2400      	movs	r4, #0
 8008d58:	46a8      	mov	r8, r5
 8008d5a:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8008d5e:	3401      	adds	r4, #1
 8008d60:	2d00      	cmp	r5, #0
 8008d62:	d13e      	bne.n	8008de2 <forward_lstm+0x16de>
 8008d64:	42a3      	cmp	r3, r4
 8008d66:	f108 0804 	add.w	r8, r8, #4
 8008d6a:	dcf6      	bgt.n	8008d5a <forward_lstm+0x1656>
 8008d6c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008d6e:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008d72:	428a      	cmp	r2, r1
 8008d74:	f340 809d 	ble.w	8008eb2 <forward_lstm+0x17ae>
 8008d78:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008d7c:	69b9      	ldr	r1, [r7, #24]
 8008d7e:	440a      	add	r2, r1
 8008d80:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008d84:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008d88:	2a00      	cmp	r2, #0
 8008d8a:	f2c0 8092 	blt.w	8008eb2 <forward_lstm+0x17ae>
 8008d8e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008d92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d96:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008d9a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008d9e:	f7fe be6b 	b.w	8007a78 <forward_lstm+0x374>
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	4629      	mov	r1, r5
 8008da6:	69d8      	ldr	r0, [r3, #28]
 8008da8:	f000 fa66 	bl	8009278 <st_int8_copy>
 8008dac:	ee19 2a10 	vmov	r2, s18
 8008db0:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008db4:	2000      	movs	r0, #0
 8008db6:	f000 fa03 	bl	80091c0 <st_int8_fill>
 8008dba:	f7fe bda8 	b.w	800790e <forward_lstm+0x20a>
 8008dbe:	ee19 2a10 	vmov	r2, s18
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	f000 f9fc 	bl	80091c0 <st_int8_fill>
 8008dc8:	ee19 2a10 	vmov	r2, s18
 8008dcc:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008dd0:	4648      	mov	r0, r9
 8008dd2:	f1b9 0f00 	cmp.w	r9, #0
 8008dd6:	f47e ad91 	bne.w	80078fc <forward_lstm+0x1f8>
 8008dda:	f000 f9f1 	bl	80091c0 <st_int8_fill>
 8008dde:	f7fe bd8f 	b.w	8007900 <forward_lstm+0x1fc>
 8008de2:	f8d8 a000 	ldr.w	sl, [r8]
 8008de6:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008dea:	ee19 2a10 	vmov	r2, s18
 8008dee:	4651      	mov	r1, sl
 8008df0:	f000 fa42 	bl	8009278 <st_int8_copy>
 8008df4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008df8:	899b      	ldrh	r3, [r3, #12]
 8008dfa:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8008dfe:	42a3      	cmp	r3, r4
 8008e00:	f848 5b04 	str.w	r5, [r8], #4
 8008e04:	dca9      	bgt.n	8008d5a <forward_lstm+0x1656>
 8008e06:	e7b1      	b.n	8008d6c <forward_lstm+0x1668>
 8008e08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e0c:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8008e10:	4662      	mov	r2, ip
 8008e12:	e6e5      	b.n	8008be0 <forward_lstm+0x14dc>
 8008e14:	4603      	mov	r3, r0
 8008e16:	e5d1      	b.n	80089bc <forward_lstm+0x12b8>
 8008e18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e1c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008e20:	465a      	mov	r2, fp
 8008e22:	e44d      	b.n	80086c0 <forward_lstm+0xfbc>
 8008e24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e28:	f7ff bb54 	b.w	80084d4 <forward_lstm+0xdd0>
 8008e2c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e30:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008e34:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008e38:	f7ff ba3a 	b.w	80082b0 <forward_lstm+0xbac>
 8008e3c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008e40:	f7ff b93a 	b.w	80080b8 <forward_lstm+0x9b4>
 8008e44:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e48:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008e4c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008e50:	f7ff b822 	b.w	8007e98 <forward_lstm+0x794>
 8008e54:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 8008e58:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8008e5c:	4653      	mov	r3, sl
 8008e5e:	f7fe bf23 	b.w	8007ca8 <forward_lstm+0x5a4>
 8008e62:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8008e66:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8008e68:	ee19 3a90 	vmov	r3, s19
 8008e6c:	4608      	mov	r0, r1
 8008e6e:	4690      	mov	r8, r2
 8008e70:	47a0      	blx	r4
 8008e72:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8008e76:	ee19 3a90 	vmov	r3, s19
 8008e7a:	4642      	mov	r2, r8
 8008e7c:	4608      	mov	r0, r1
 8008e7e:	47a0      	blx	r4
 8008e80:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8008e84:	ee1a 3a90 	vmov	r3, s21
 8008e88:	4642      	mov	r2, r8
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8008e8e:	47a8      	blx	r5
 8008e90:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8008e94:	ee19 3a90 	vmov	r3, s19
 8008e98:	4642      	mov	r2, r8
 8008e9a:	4608      	mov	r0, r1
 8008e9c:	47a0      	blx	r4
 8008e9e:	ee1a 3a10 	vmov	r3, s20
 8008ea2:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008ea4:	4642      	mov	r2, r8
 8008ea6:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8008eaa:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8008eae:	47a0      	blx	r4
 8008eb0:	e74b      	b.n	8008d4a <forward_lstm+0x1646>
 8008eb2:	b353      	cbz	r3, 8008f0a <forward_lstm+0x1806>
 8008eb4:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8008eb8:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 8008ebc:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 8008ec0:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8008ec4:	ee19 ba10 	vmov	fp, s18
 8008ec8:	2600      	movs	r6, #0
 8008eca:	e00b      	b.n	8008ee4 <forward_lstm+0x17e0>
 8008ecc:	6821      	ldr	r1, [r4, #0]
 8008ece:	465a      	mov	r2, fp
 8008ed0:	4648      	mov	r0, r9
 8008ed2:	f000 f9d1 	bl	8009278 <st_int8_copy>
 8008ed6:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008eda:	3601      	adds	r6, #1
 8008edc:	42b3      	cmp	r3, r6
 8008ede:	f104 0404 	add.w	r4, r4, #4
 8008ee2:	dd12      	ble.n	8008f0a <forward_lstm+0x1806>
 8008ee4:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8008ee8:	2a00      	cmp	r2, #0
 8008eea:	d1f6      	bne.n	8008eda <forward_lstm+0x17d6>
 8008eec:	3b01      	subs	r3, #1
 8008eee:	42b3      	cmp	r3, r6
 8008ef0:	d1ec      	bne.n	8008ecc <forward_lstm+0x17c8>
 8008ef2:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8008ef6:	2b00      	cmp	r3, #0
 8008ef8:	d0e8      	beq.n	8008ecc <forward_lstm+0x17c8>
 8008efa:	6821      	ldr	r1, [r4, #0]
 8008efc:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008efe:	465a      	mov	r2, fp
 8008f00:	f000 f9ba 	bl	8009278 <st_int8_copy>
 8008f04:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008f08:	e7e7      	b.n	8008eda <forward_lstm+0x17d6>
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	b18b      	cbz	r3, 8008f32 <forward_lstm+0x182e>
 8008f0e:	68bb      	ldr	r3, [r7, #8]
 8008f10:	69dc      	ldr	r4, [r3, #28]
 8008f12:	b174      	cbz	r4, 8008f32 <forward_lstm+0x182e>
 8008f14:	ee19 5a10 	vmov	r5, s18
 8008f18:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008f1a:	ee19 2a10 	vmov	r2, s18
 8008f1e:	4621      	mov	r1, r4
 8008f20:	f000 f9aa 	bl	8009278 <st_int8_copy>
 8008f24:	ee19 2a10 	vmov	r2, s18
 8008f28:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008f2c:	1961      	adds	r1, r4, r5
 8008f2e:	f000 f9a3 	bl	8009278 <st_int8_copy>
 8008f32:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8008f36:	46bd      	mov	sp, r7
 8008f38:	ecbd 8b06 	vpop	{d8-d10}
 8008f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f40:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008f44:	2301      	movs	r3, #1
 8008f46:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008f48:	4613      	mov	r3, r2
 8008f4a:	f7fe bd00 	b.w	800794e <forward_lstm+0x24a>
 8008f4e:	ee0a 0a10 	vmov	s20, r0
 8008f52:	ee09 0a90 	vmov	s19, r0
 8008f56:	ee0a 0a90 	vmov	s21, r0
 8008f5a:	4681      	mov	r9, r0
 8008f5c:	f7fe bc56 	b.w	800780c <forward_lstm+0x108>
 8008f60:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8008f64:	4683      	mov	fp, r0
 8008f66:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008f6a:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008f6e:	f7fe bbf4 	b.w	800775a <forward_lstm+0x56>
 8008f72:	2300      	movs	r3, #0
 8008f74:	685b      	ldr	r3, [r3, #4]
 8008f76:	deff      	udf	#255	; 0xff

08008f78 <forward_lite_dense_if32of32wf32>:
 8008f78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f7c:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008f80:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008f84:	4287      	cmp	r7, r0
 8008f86:	f240 8106 	bls.w	8009196 <forward_lite_dense_if32of32wf32+0x21e>
 8008f8a:	f1a6 0810 	sub.w	r8, r6, #16
 8008f8e:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008f92:	f108 0801 	add.w	r8, r8, #1
 8008f96:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8008f9a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008f9e:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008fa2:	4605      	mov	r5, r0
 8008fa4:	f006 0a0f 	and.w	sl, r6, #15
 8008fa8:	2e0f      	cmp	r6, #15
 8008faa:	ed9f 7a84 	vldr	s14, [pc, #528]	; 80091bc <forward_lite_dense_if32of32wf32+0x244>
 8008fae:	f240 8101 	bls.w	80091b4 <forward_lite_dense_if32of32wf32+0x23c>
 8008fb2:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008fb6:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8008fba:	46b6      	mov	lr, r6
 8008fbc:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 8008fc0:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008fc4:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8008fc8:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8008fcc:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 8008fd0:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8008fd4:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8008fd8:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8008fdc:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 8008fe0:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8008fe4:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8008fe8:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8008fec:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 8008ff0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008ff4:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008ff8:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008ffc:	f1ae 0e10 	sub.w	lr, lr, #16
 8009000:	f1be 0f0f 	cmp.w	lr, #15
 8009004:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8009008:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 800900c:	eee5 7a86 	vfma.f32	s15, s11, s12
 8009010:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8009014:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009018:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 800901c:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 8009020:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8009024:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8009028:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 800902c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009030:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 8009034:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 8009038:	eee6 7a26 	vfma.f32	s15, s12, s13
 800903c:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 8009040:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 8009044:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009048:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 800904c:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8009050:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009054:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8009058:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 800905c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009060:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8009064:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8009068:	eee6 7a26 	vfma.f32	s15, s12, s13
 800906c:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8009070:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8009074:	eee1 7a21 	vfma.f32	s15, s2, s3
 8009078:	eee2 7a22 	vfma.f32	s15, s4, s5
 800907c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8009080:	eee4 7a24 	vfma.f32	s15, s8, s9
 8009084:	eee5 7a25 	vfma.f32	s15, s10, s11
 8009088:	eee6 7a26 	vfma.f32	s15, s12, s13
 800908c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8009090:	d894      	bhi.n	8008fbc <forward_lite_dense_if32of32wf32+0x44>
 8009092:	eb02 0e0b 	add.w	lr, r2, fp
 8009096:	4654      	mov	r4, sl
 8009098:	46c4      	mov	ip, r8
 800909a:	2c00      	cmp	r4, #0
 800909c:	d075      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800909e:	eddc 6a00 	vldr	s13, [ip]
 80090a2:	edde 7a00 	vldr	s15, [lr]
 80090a6:	2c01      	cmp	r4, #1
 80090a8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090ac:	d06d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 80090ae:	eddc 6a01 	vldr	s13, [ip, #4]
 80090b2:	edde 7a01 	vldr	s15, [lr, #4]
 80090b6:	2c02      	cmp	r4, #2
 80090b8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090bc:	d065      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 80090be:	eddc 6a02 	vldr	s13, [ip, #8]
 80090c2:	edde 7a02 	vldr	s15, [lr, #8]
 80090c6:	2c03      	cmp	r4, #3
 80090c8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090cc:	d05d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 80090ce:	eddc 6a03 	vldr	s13, [ip, #12]
 80090d2:	edde 7a03 	vldr	s15, [lr, #12]
 80090d6:	2c04      	cmp	r4, #4
 80090d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090dc:	d055      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 80090de:	eddc 6a04 	vldr	s13, [ip, #16]
 80090e2:	edde 7a04 	vldr	s15, [lr, #16]
 80090e6:	2c05      	cmp	r4, #5
 80090e8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090ec:	d04d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 80090ee:	eddc 6a05 	vldr	s13, [ip, #20]
 80090f2:	edde 7a05 	vldr	s15, [lr, #20]
 80090f6:	2c06      	cmp	r4, #6
 80090f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80090fc:	d045      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 80090fe:	eddc 6a06 	vldr	s13, [ip, #24]
 8009102:	edde 7a06 	vldr	s15, [lr, #24]
 8009106:	2c07      	cmp	r4, #7
 8009108:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800910c:	d03d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800910e:	eddc 6a07 	vldr	s13, [ip, #28]
 8009112:	edde 7a07 	vldr	s15, [lr, #28]
 8009116:	2c08      	cmp	r4, #8
 8009118:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800911c:	d035      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800911e:	eddc 6a08 	vldr	s13, [ip, #32]
 8009122:	edde 7a08 	vldr	s15, [lr, #32]
 8009126:	2c09      	cmp	r4, #9
 8009128:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800912c:	d02d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800912e:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8009132:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8009136:	2c0a      	cmp	r4, #10
 8009138:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800913c:	d025      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800913e:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8009142:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8009146:	2c0b      	cmp	r4, #11
 8009148:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800914c:	d01d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800914e:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8009152:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8009156:	2c0c      	cmp	r4, #12
 8009158:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800915c:	d015      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800915e:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8009162:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8009166:	3c0d      	subs	r4, #13
 8009168:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800916c:	d00d      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800916e:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8009172:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8009176:	2c01      	cmp	r4, #1
 8009178:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800917c:	d005      	beq.n	800918a <forward_lite_dense_if32of32wf32+0x212>
 800917e:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8009182:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8009186:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800918a:	444a      	add	r2, r9
 800918c:	eca5 7a01 	vstmia	r5!, {s14}
 8009190:	42af      	cmp	r7, r5
 8009192:	f63f af09 	bhi.w	8008fa8 <forward_lite_dense_if32of32wf32+0x30>
 8009196:	b15b      	cbz	r3, 80091b0 <forward_lite_dense_if32of32wf32+0x238>
 8009198:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800919a:	b14a      	cbz	r2, 80091b0 <forward_lite_dense_if32of32wf32+0x238>
 800919c:	edd0 7a00 	vldr	s15, [r0]
 80091a0:	ecb3 7a01 	vldmia	r3!, {s14}
 80091a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80091a8:	ece0 7a01 	vstmia	r0!, {s15}
 80091ac:	4287      	cmp	r7, r0
 80091ae:	d1f5      	bne.n	800919c <forward_lite_dense_if32of32wf32+0x224>
 80091b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091b4:	4634      	mov	r4, r6
 80091b6:	4696      	mov	lr, r2
 80091b8:	468c      	mov	ip, r1
 80091ba:	e76e      	b.n	800909a <forward_lite_dense_if32of32wf32+0x122>
 80091bc:	00000000 	.word	0x00000000

080091c0 <st_int8_fill>:
 80091c0:	b510      	push	{r4, lr}
 80091c2:	b2c3      	uxtb	r3, r0
 80091c4:	0204      	lsls	r4, r0, #8
 80091c6:	b2a4      	uxth	r4, r4
 80091c8:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 80091cc:	4323      	orrs	r3, r4
 80091ce:	0404      	lsls	r4, r0, #16
 80091d0:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 80091d4:	431c      	orrs	r4, r3
 80091d6:	078b      	lsls	r3, r1, #30
 80091d8:	468c      	mov	ip, r1
 80091da:	d007      	beq.n	80091ec <st_int8_fill+0x2c>
 80091dc:	b3a2      	cbz	r2, 8009248 <st_int8_fill+0x88>
 80091de:	f80c 0b01 	strb.w	r0, [ip], #1
 80091e2:	f01c 0f03 	tst.w	ip, #3
 80091e6:	f102 32ff 	add.w	r2, r2, #4294967295
 80091ea:	d1f7      	bne.n	80091dc <st_int8_fill+0x1c>
 80091ec:	0911      	lsrs	r1, r2, #4
 80091ee:	d03e      	beq.n	800926e <st_int8_fill+0xae>
 80091f0:	1e4b      	subs	r3, r1, #1
 80091f2:	2b04      	cmp	r3, #4
 80091f4:	d929      	bls.n	800924a <st_int8_fill+0x8a>
 80091f6:	f01c 0f07 	tst.w	ip, #7
 80091fa:	d126      	bne.n	800924a <st_int8_fill+0x8a>
 80091fc:	f10c 0310 	add.w	r3, ip, #16
 8009200:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8009204:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8009208:	e943 4404 	strd	r4, r4, [r3, #-16]
 800920c:	e943 4402 	strd	r4, r4, [r3, #-8]
 8009210:	3310      	adds	r3, #16
 8009212:	428b      	cmp	r3, r1
 8009214:	d1f8      	bne.n	8009208 <st_int8_fill+0x48>
 8009216:	f3c2 0381 	ubfx	r3, r2, #2, #2
 800921a:	44f4      	add	ip, lr
 800921c:	f002 0203 	and.w	r2, r2, #3
 8009220:	b15b      	cbz	r3, 800923a <st_int8_fill+0x7a>
 8009222:	1e59      	subs	r1, r3, #1
 8009224:	f8cc 4000 	str.w	r4, [ip]
 8009228:	d005      	beq.n	8009236 <st_int8_fill+0x76>
 800922a:	2901      	cmp	r1, #1
 800922c:	f8cc 4004 	str.w	r4, [ip, #4]
 8009230:	bf18      	it	ne
 8009232:	f8cc 4008 	strne.w	r4, [ip, #8]
 8009236:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 800923a:	b12a      	cbz	r2, 8009248 <st_int8_fill+0x88>
 800923c:	4601      	mov	r1, r0
 800923e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009242:	4660      	mov	r0, ip
 8009244:	f002 b93c 	b.w	800b4c0 <memset>
 8009248:	bd10      	pop	{r4, pc}
 800924a:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 800924e:	4663      	mov	r3, ip
 8009250:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 8009254:	601c      	str	r4, [r3, #0]
 8009256:	605c      	str	r4, [r3, #4]
 8009258:	609c      	str	r4, [r3, #8]
 800925a:	60dc      	str	r4, [r3, #12]
 800925c:	3310      	adds	r3, #16
 800925e:	4299      	cmp	r1, r3
 8009260:	d1f8      	bne.n	8009254 <st_int8_fill+0x94>
 8009262:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009266:	44f4      	add	ip, lr
 8009268:	f002 0203 	and.w	r2, r2, #3
 800926c:	e7d8      	b.n	8009220 <st_int8_fill+0x60>
 800926e:	0893      	lsrs	r3, r2, #2
 8009270:	f002 0203 	and.w	r2, r2, #3
 8009274:	e7d4      	b.n	8009220 <st_int8_fill+0x60>
 8009276:	bf00      	nop

08009278 <st_int8_copy>:
 8009278:	4288      	cmp	r0, r1
 800927a:	d057      	beq.n	800932c <st_int8_copy+0xb4>
 800927c:	2a00      	cmp	r2, #0
 800927e:	d055      	beq.n	800932c <st_int8_copy+0xb4>
 8009280:	4288      	cmp	r0, r1
 8009282:	d354      	bcc.n	800932e <st_int8_copy+0xb6>
 8009284:	078b      	lsls	r3, r1, #30
 8009286:	d102      	bne.n	800928e <st_int8_copy+0x16>
 8009288:	e009      	b.n	800929e <st_int8_copy+0x26>
 800928a:	2a00      	cmp	r2, #0
 800928c:	d05c      	beq.n	8009348 <st_int8_copy+0xd0>
 800928e:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8009292:	f801 3b01 	strb.w	r3, [r1], #1
 8009296:	078b      	lsls	r3, r1, #30
 8009298:	f102 32ff 	add.w	r2, r2, #4294967295
 800929c:	d1f5      	bne.n	800928a <st_int8_copy+0x12>
 800929e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80092a2:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 80092a6:	d069      	beq.n	800937c <st_int8_copy+0x104>
 80092a8:	ea41 0300 	orr.w	r3, r1, r0
 80092ac:	075b      	lsls	r3, r3, #29
 80092ae:	d14c      	bne.n	800934a <st_int8_copy+0xd2>
 80092b0:	f10e 33ff 	add.w	r3, lr, #4294967295
 80092b4:	2b01      	cmp	r3, #1
 80092b6:	d948      	bls.n	800934a <st_int8_copy+0xd2>
 80092b8:	f100 0310 	add.w	r3, r0, #16
 80092bc:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80092c0:	f101 0c10 	add.w	ip, r1, #16
 80092c4:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 80092c8:	ed13 6b04 	vldr	d6, [r3, #-16]
 80092cc:	ed13 7b02 	vldr	d7, [r3, #-8]
 80092d0:	3310      	adds	r3, #16
 80092d2:	4573      	cmp	r3, lr
 80092d4:	ed0c 6b04 	vstr	d6, [ip, #-16]
 80092d8:	ed0c 7b02 	vstr	d7, [ip, #-8]
 80092dc:	f10c 0c10 	add.w	ip, ip, #16
 80092e0:	d1f2      	bne.n	80092c8 <st_int8_copy+0x50>
 80092e2:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80092e6:	4421      	add	r1, r4
 80092e8:	4420      	add	r0, r4
 80092ea:	f002 0203 	and.w	r2, r2, #3
 80092ee:	b16b      	cbz	r3, 800930c <st_int8_copy+0x94>
 80092f0:	6804      	ldr	r4, [r0, #0]
 80092f2:	600c      	str	r4, [r1, #0]
 80092f4:	1e5c      	subs	r4, r3, #1
 80092f6:	d005      	beq.n	8009304 <st_int8_copy+0x8c>
 80092f8:	6845      	ldr	r5, [r0, #4]
 80092fa:	604d      	str	r5, [r1, #4]
 80092fc:	2c01      	cmp	r4, #1
 80092fe:	bf1c      	itt	ne
 8009300:	6884      	ldrne	r4, [r0, #8]
 8009302:	608c      	strne	r4, [r1, #8]
 8009304:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009308:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800930c:	b162      	cbz	r2, 8009328 <st_int8_copy+0xb0>
 800930e:	f990 3000 	ldrsb.w	r3, [r0]
 8009312:	700b      	strb	r3, [r1, #0]
 8009314:	3a01      	subs	r2, #1
 8009316:	d007      	beq.n	8009328 <st_int8_copy+0xb0>
 8009318:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800931c:	704b      	strb	r3, [r1, #1]
 800931e:	2a01      	cmp	r2, #1
 8009320:	bf1c      	itt	ne
 8009322:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8009326:	708b      	strbne	r3, [r1, #2]
 8009328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800932c:	4770      	bx	lr
 800932e:	1883      	adds	r3, r0, r2
 8009330:	428b      	cmp	r3, r1
 8009332:	d9a7      	bls.n	8009284 <st_int8_copy+0xc>
 8009334:	4283      	cmp	r3, r0
 8009336:	440a      	add	r2, r1
 8009338:	d9f8      	bls.n	800932c <st_int8_copy+0xb4>
 800933a:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 800933e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009342:	4283      	cmp	r3, r0
 8009344:	d1f9      	bne.n	800933a <st_int8_copy+0xc2>
 8009346:	4770      	bx	lr
 8009348:	4770      	bx	lr
 800934a:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800934e:	460b      	mov	r3, r1
 8009350:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 8009354:	4684      	mov	ip, r0
 8009356:	f8dc 7000 	ldr.w	r7, [ip]
 800935a:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800935e:	f8dc 5008 	ldr.w	r5, [ip, #8]
 8009362:	f8dc 800c 	ldr.w	r8, [ip, #12]
 8009366:	f8c3 800c 	str.w	r8, [r3, #12]
 800936a:	601f      	str	r7, [r3, #0]
 800936c:	605e      	str	r6, [r3, #4]
 800936e:	609d      	str	r5, [r3, #8]
 8009370:	3310      	adds	r3, #16
 8009372:	459e      	cmp	lr, r3
 8009374:	f10c 0c10 	add.w	ip, ip, #16
 8009378:	d1ed      	bne.n	8009356 <st_int8_copy+0xde>
 800937a:	e7b2      	b.n	80092e2 <st_int8_copy+0x6a>
 800937c:	0893      	lsrs	r3, r2, #2
 800937e:	f002 0203 	and.w	r2, r2, #3
 8009382:	e7b4      	b.n	80092ee <st_int8_copy+0x76>

08009384 <ai_array_to_buffer_fmt>:
 8009384:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009388:	2b02      	cmp	r3, #2
 800938a:	d050      	beq.n	800942e <ai_array_to_buffer_fmt+0xaa>
 800938c:	4b2a      	ldr	r3, [pc, #168]	; (8009438 <ai_array_to_buffer_fmt+0xb4>)
 800938e:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8009392:	429a      	cmp	r2, r3
 8009394:	d00b      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 8009396:	dc1c      	bgt.n	80093d2 <ai_array_to_buffer_fmt+0x4e>
 8009398:	4b28      	ldr	r3, [pc, #160]	; (800943c <ai_array_to_buffer_fmt+0xb8>)
 800939a:	429a      	cmp	r2, r3
 800939c:	d007      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 800939e:	dd0b      	ble.n	80093b8 <ai_array_to_buffer_fmt+0x34>
 80093a0:	4b27      	ldr	r3, [pc, #156]	; (8009440 <ai_array_to_buffer_fmt+0xbc>)
 80093a2:	429a      	cmp	r2, r3
 80093a4:	d003      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 80093a6:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80093aa:	429a      	cmp	r2, r3
 80093ac:	d131      	bne.n	8009412 <ai_array_to_buffer_fmt+0x8e>
 80093ae:	4613      	mov	r3, r2
 80093b0:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80093b4:	4318      	orrs	r0, r3
 80093b6:	4770      	bx	lr
 80093b8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80093bc:	429a      	cmp	r2, r3
 80093be:	d0f6      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 80093c0:	dd2c      	ble.n	800941c <ai_array_to_buffer_fmt+0x98>
 80093c2:	4b20      	ldr	r3, [pc, #128]	; (8009444 <ai_array_to_buffer_fmt+0xc0>)
 80093c4:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80093c8:	429a      	cmp	r2, r3
 80093ca:	bf18      	it	ne
 80093cc:	2340      	movne	r3, #64	; 0x40
 80093ce:	4318      	orrs	r0, r3
 80093d0:	4770      	bx	lr
 80093d2:	4b1d      	ldr	r3, [pc, #116]	; (8009448 <ai_array_to_buffer_fmt+0xc4>)
 80093d4:	429a      	cmp	r2, r3
 80093d6:	d0ea      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 80093d8:	dd0e      	ble.n	80093f8 <ai_array_to_buffer_fmt+0x74>
 80093da:	4b1c      	ldr	r3, [pc, #112]	; (800944c <ai_array_to_buffer_fmt+0xc8>)
 80093dc:	429a      	cmp	r2, r3
 80093de:	d0e6      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 80093e0:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80093e4:	429a      	cmp	r2, r3
 80093e6:	d0e2      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 80093e8:	4b19      	ldr	r3, [pc, #100]	; (8009450 <ai_array_to_buffer_fmt+0xcc>)
 80093ea:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80093ee:	429a      	cmp	r2, r3
 80093f0:	bf18      	it	ne
 80093f2:	2340      	movne	r3, #64	; 0x40
 80093f4:	4318      	orrs	r0, r3
 80093f6:	4770      	bx	lr
 80093f8:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80093fc:	429a      	cmp	r2, r3
 80093fe:	d0d6      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 8009400:	3307      	adds	r3, #7
 8009402:	429a      	cmp	r2, r3
 8009404:	d0d3      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 8009406:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 800940a:	429a      	cmp	r2, r3
 800940c:	bf18      	it	ne
 800940e:	2340      	movne	r3, #64	; 0x40
 8009410:	e7ce      	b.n	80093b0 <ai_array_to_buffer_fmt+0x2c>
 8009412:	4b10      	ldr	r3, [pc, #64]	; (8009454 <ai_array_to_buffer_fmt+0xd0>)
 8009414:	429a      	cmp	r2, r3
 8009416:	bf18      	it	ne
 8009418:	2340      	movne	r3, #64	; 0x40
 800941a:	e7c9      	b.n	80093b0 <ai_array_to_buffer_fmt+0x2c>
 800941c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009420:	429a      	cmp	r2, r3
 8009422:	d0c4      	beq.n	80093ae <ai_array_to_buffer_fmt+0x2a>
 8009424:	3380      	adds	r3, #128	; 0x80
 8009426:	429a      	cmp	r2, r3
 8009428:	bf18      	it	ne
 800942a:	2340      	movne	r3, #64	; 0x40
 800942c:	e7c0      	b.n	80093b0 <ai_array_to_buffer_fmt+0x2c>
 800942e:	4b0a      	ldr	r3, [pc, #40]	; (8009458 <ai_array_to_buffer_fmt+0xd4>)
 8009430:	4003      	ands	r3, r0
 8009432:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8009436:	e7bb      	b.n	80093b0 <ai_array_to_buffer_fmt+0x2c>
 8009438:	00840040 	.word	0x00840040
 800943c:	00040840 	.word	0x00040840
 8009440:	00041040 	.word	0x00041040
 8009444:	00040447 	.word	0x00040447
 8009448:	00840840 	.word	0x00840840
 800944c:	00841040 	.word	0x00841040
 8009450:	0084084f 	.word	0x0084084f
 8009454:	0004084f 	.word	0x0004084f
 8009458:	00803fff 	.word	0x00803fff

0800945c <ai_array_get_byte_size>:
 800945c:	b319      	cbz	r1, 80094a6 <ai_array_get_byte_size+0x4a>
 800945e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009462:	fb03 f101 	mul.w	r1, r3, r1
 8009466:	3107      	adds	r1, #7
 8009468:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800946c:	f021 0307 	bic.w	r3, r1, #7
 8009470:	2a04      	cmp	r2, #4
 8009472:	f3c0 5141 	ubfx	r1, r0, #21, #2
 8009476:	fa23 f101 	lsr.w	r1, r3, r1
 800947a:	ea4f 10e0 	mov.w	r0, r0, asr #7
 800947e:	d00b      	beq.n	8009498 <ai_array_get_byte_size+0x3c>
 8009480:	2a08      	cmp	r2, #8
 8009482:	d002      	beq.n	800948a <ai_array_get_byte_size+0x2e>
 8009484:	3107      	adds	r1, #7
 8009486:	08c8      	lsrs	r0, r1, #3
 8009488:	4770      	bx	lr
 800948a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800948e:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8009492:	3107      	adds	r1, #7
 8009494:	08c8      	lsrs	r0, r1, #3
 8009496:	4770      	bx	lr
 8009498:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 800949c:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 80094a0:	3107      	adds	r1, #7
 80094a2:	08c8      	lsrs	r0, r1, #3
 80094a4:	4770      	bx	lr
 80094a6:	4608      	mov	r0, r1
 80094a8:	4770      	bx	lr
 80094aa:	bf00      	nop

080094ac <ai_array_get_data_byte_size>:
 80094ac:	b169      	cbz	r1, 80094ca <ai_array_get_data_byte_size+0x1e>
 80094ae:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 80094b2:	fb02 f101 	mul.w	r1, r2, r1
 80094b6:	1dcb      	adds	r3, r1, #7
 80094b8:	f023 0307 	bic.w	r3, r3, #7
 80094bc:	f3c0 5041 	ubfx	r0, r0, #21, #2
 80094c0:	fa23 f000 	lsr.w	r0, r3, r0
 80094c4:	3007      	adds	r0, #7
 80094c6:	08c0      	lsrs	r0, r0, #3
 80094c8:	4770      	bx	lr
 80094ca:	4608      	mov	r0, r1
 80094cc:	4770      	bx	lr
 80094ce:	bf00      	nop

080094d0 <ai_version_get>:
 80094d0:	0212      	lsls	r2, r2, #8
 80094d2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80094d6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80094da:	4770      	bx	lr

080094dc <get_tensor_byte_size>:
 80094dc:	b410      	push	{r4}
 80094de:	6983      	ldr	r3, [r0, #24]
 80094e0:	68c4      	ldr	r4, [r0, #12]
 80094e2:	6941      	ldr	r1, [r0, #20]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	68e0      	ldr	r0, [r4, #12]
 80094e8:	4a07      	ldr	r2, [pc, #28]	; (8009508 <get_tensor_byte_size+0x2c>)
 80094ea:	68c9      	ldr	r1, [r1, #12]
 80094ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80094f0:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 80094f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80094f8:	fb01 f000 	mul.w	r0, r1, r0
 80094fc:	4293      	cmp	r3, r2
 80094fe:	bf04      	itt	eq
 8009500:	3007      	addeq	r0, #7
 8009502:	08c0      	lsreq	r0, r0, #3
 8009504:	4770      	bx	lr
 8009506:	bf00      	nop
 8009508:	000400c0 	.word	0x000400c0

0800950c <atof>:
 800950c:	2100      	movs	r1, #0
 800950e:	f000 bef9 	b.w	800a304 <strtod>
	...

08009514 <malloc>:
 8009514:	4b02      	ldr	r3, [pc, #8]	; (8009520 <malloc+0xc>)
 8009516:	4601      	mov	r1, r0
 8009518:	6818      	ldr	r0, [r3, #0]
 800951a:	f000 b823 	b.w	8009564 <_malloc_r>
 800951e:	bf00      	nop
 8009520:	20000e24 	.word	0x20000e24

08009524 <sbrk_aligned>:
 8009524:	b570      	push	{r4, r5, r6, lr}
 8009526:	4e0e      	ldr	r6, [pc, #56]	; (8009560 <sbrk_aligned+0x3c>)
 8009528:	460c      	mov	r4, r1
 800952a:	6831      	ldr	r1, [r6, #0]
 800952c:	4605      	mov	r5, r0
 800952e:	b911      	cbnz	r1, 8009536 <sbrk_aligned+0x12>
 8009530:	f002 f818 	bl	800b564 <_sbrk_r>
 8009534:	6030      	str	r0, [r6, #0]
 8009536:	4621      	mov	r1, r4
 8009538:	4628      	mov	r0, r5
 800953a:	f002 f813 	bl	800b564 <_sbrk_r>
 800953e:	1c43      	adds	r3, r0, #1
 8009540:	d00a      	beq.n	8009558 <sbrk_aligned+0x34>
 8009542:	1cc4      	adds	r4, r0, #3
 8009544:	f024 0403 	bic.w	r4, r4, #3
 8009548:	42a0      	cmp	r0, r4
 800954a:	d007      	beq.n	800955c <sbrk_aligned+0x38>
 800954c:	1a21      	subs	r1, r4, r0
 800954e:	4628      	mov	r0, r5
 8009550:	f002 f808 	bl	800b564 <_sbrk_r>
 8009554:	3001      	adds	r0, #1
 8009556:	d101      	bne.n	800955c <sbrk_aligned+0x38>
 8009558:	f04f 34ff 	mov.w	r4, #4294967295
 800955c:	4620      	mov	r0, r4
 800955e:	bd70      	pop	{r4, r5, r6, pc}
 8009560:	20004480 	.word	0x20004480

08009564 <_malloc_r>:
 8009564:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009568:	1ccd      	adds	r5, r1, #3
 800956a:	f025 0503 	bic.w	r5, r5, #3
 800956e:	3508      	adds	r5, #8
 8009570:	2d0c      	cmp	r5, #12
 8009572:	bf38      	it	cc
 8009574:	250c      	movcc	r5, #12
 8009576:	2d00      	cmp	r5, #0
 8009578:	4607      	mov	r7, r0
 800957a:	db01      	blt.n	8009580 <_malloc_r+0x1c>
 800957c:	42a9      	cmp	r1, r5
 800957e:	d905      	bls.n	800958c <_malloc_r+0x28>
 8009580:	230c      	movs	r3, #12
 8009582:	603b      	str	r3, [r7, #0]
 8009584:	2600      	movs	r6, #0
 8009586:	4630      	mov	r0, r6
 8009588:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800958c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009660 <_malloc_r+0xfc>
 8009590:	f000 f868 	bl	8009664 <__malloc_lock>
 8009594:	f8d8 3000 	ldr.w	r3, [r8]
 8009598:	461c      	mov	r4, r3
 800959a:	bb5c      	cbnz	r4, 80095f4 <_malloc_r+0x90>
 800959c:	4629      	mov	r1, r5
 800959e:	4638      	mov	r0, r7
 80095a0:	f7ff ffc0 	bl	8009524 <sbrk_aligned>
 80095a4:	1c43      	adds	r3, r0, #1
 80095a6:	4604      	mov	r4, r0
 80095a8:	d155      	bne.n	8009656 <_malloc_r+0xf2>
 80095aa:	f8d8 4000 	ldr.w	r4, [r8]
 80095ae:	4626      	mov	r6, r4
 80095b0:	2e00      	cmp	r6, #0
 80095b2:	d145      	bne.n	8009640 <_malloc_r+0xdc>
 80095b4:	2c00      	cmp	r4, #0
 80095b6:	d048      	beq.n	800964a <_malloc_r+0xe6>
 80095b8:	6823      	ldr	r3, [r4, #0]
 80095ba:	4631      	mov	r1, r6
 80095bc:	4638      	mov	r0, r7
 80095be:	eb04 0903 	add.w	r9, r4, r3
 80095c2:	f001 ffcf 	bl	800b564 <_sbrk_r>
 80095c6:	4581      	cmp	r9, r0
 80095c8:	d13f      	bne.n	800964a <_malloc_r+0xe6>
 80095ca:	6821      	ldr	r1, [r4, #0]
 80095cc:	1a6d      	subs	r5, r5, r1
 80095ce:	4629      	mov	r1, r5
 80095d0:	4638      	mov	r0, r7
 80095d2:	f7ff ffa7 	bl	8009524 <sbrk_aligned>
 80095d6:	3001      	adds	r0, #1
 80095d8:	d037      	beq.n	800964a <_malloc_r+0xe6>
 80095da:	6823      	ldr	r3, [r4, #0]
 80095dc:	442b      	add	r3, r5
 80095de:	6023      	str	r3, [r4, #0]
 80095e0:	f8d8 3000 	ldr.w	r3, [r8]
 80095e4:	2b00      	cmp	r3, #0
 80095e6:	d038      	beq.n	800965a <_malloc_r+0xf6>
 80095e8:	685a      	ldr	r2, [r3, #4]
 80095ea:	42a2      	cmp	r2, r4
 80095ec:	d12b      	bne.n	8009646 <_malloc_r+0xe2>
 80095ee:	2200      	movs	r2, #0
 80095f0:	605a      	str	r2, [r3, #4]
 80095f2:	e00f      	b.n	8009614 <_malloc_r+0xb0>
 80095f4:	6822      	ldr	r2, [r4, #0]
 80095f6:	1b52      	subs	r2, r2, r5
 80095f8:	d41f      	bmi.n	800963a <_malloc_r+0xd6>
 80095fa:	2a0b      	cmp	r2, #11
 80095fc:	d917      	bls.n	800962e <_malloc_r+0xca>
 80095fe:	1961      	adds	r1, r4, r5
 8009600:	42a3      	cmp	r3, r4
 8009602:	6025      	str	r5, [r4, #0]
 8009604:	bf18      	it	ne
 8009606:	6059      	strne	r1, [r3, #4]
 8009608:	6863      	ldr	r3, [r4, #4]
 800960a:	bf08      	it	eq
 800960c:	f8c8 1000 	streq.w	r1, [r8]
 8009610:	5162      	str	r2, [r4, r5]
 8009612:	604b      	str	r3, [r1, #4]
 8009614:	4638      	mov	r0, r7
 8009616:	f104 060b 	add.w	r6, r4, #11
 800961a:	f000 f829 	bl	8009670 <__malloc_unlock>
 800961e:	f026 0607 	bic.w	r6, r6, #7
 8009622:	1d23      	adds	r3, r4, #4
 8009624:	1af2      	subs	r2, r6, r3
 8009626:	d0ae      	beq.n	8009586 <_malloc_r+0x22>
 8009628:	1b9b      	subs	r3, r3, r6
 800962a:	50a3      	str	r3, [r4, r2]
 800962c:	e7ab      	b.n	8009586 <_malloc_r+0x22>
 800962e:	42a3      	cmp	r3, r4
 8009630:	6862      	ldr	r2, [r4, #4]
 8009632:	d1dd      	bne.n	80095f0 <_malloc_r+0x8c>
 8009634:	f8c8 2000 	str.w	r2, [r8]
 8009638:	e7ec      	b.n	8009614 <_malloc_r+0xb0>
 800963a:	4623      	mov	r3, r4
 800963c:	6864      	ldr	r4, [r4, #4]
 800963e:	e7ac      	b.n	800959a <_malloc_r+0x36>
 8009640:	4634      	mov	r4, r6
 8009642:	6876      	ldr	r6, [r6, #4]
 8009644:	e7b4      	b.n	80095b0 <_malloc_r+0x4c>
 8009646:	4613      	mov	r3, r2
 8009648:	e7cc      	b.n	80095e4 <_malloc_r+0x80>
 800964a:	230c      	movs	r3, #12
 800964c:	603b      	str	r3, [r7, #0]
 800964e:	4638      	mov	r0, r7
 8009650:	f000 f80e 	bl	8009670 <__malloc_unlock>
 8009654:	e797      	b.n	8009586 <_malloc_r+0x22>
 8009656:	6025      	str	r5, [r4, #0]
 8009658:	e7dc      	b.n	8009614 <_malloc_r+0xb0>
 800965a:	605b      	str	r3, [r3, #4]
 800965c:	deff      	udf	#255	; 0xff
 800965e:	bf00      	nop
 8009660:	2000447c 	.word	0x2000447c

08009664 <__malloc_lock>:
 8009664:	4801      	ldr	r0, [pc, #4]	; (800966c <__malloc_lock+0x8>)
 8009666:	f001 bfca 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800966a:	bf00      	nop
 800966c:	200045c4 	.word	0x200045c4

08009670 <__malloc_unlock>:
 8009670:	4801      	ldr	r0, [pc, #4]	; (8009678 <__malloc_unlock+0x8>)
 8009672:	f001 bfc5 	b.w	800b600 <__retarget_lock_release_recursive>
 8009676:	bf00      	nop
 8009678:	200045c4 	.word	0x200045c4

0800967c <_realloc_r>:
 800967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009680:	4680      	mov	r8, r0
 8009682:	4614      	mov	r4, r2
 8009684:	460e      	mov	r6, r1
 8009686:	b921      	cbnz	r1, 8009692 <_realloc_r+0x16>
 8009688:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800968c:	4611      	mov	r1, r2
 800968e:	f7ff bf69 	b.w	8009564 <_malloc_r>
 8009692:	b92a      	cbnz	r2, 80096a0 <_realloc_r+0x24>
 8009694:	f002 fe4e 	bl	800c334 <_free_r>
 8009698:	4625      	mov	r5, r4
 800969a:	4628      	mov	r0, r5
 800969c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096a0:	f003 feab 	bl	800d3fa <_malloc_usable_size_r>
 80096a4:	4284      	cmp	r4, r0
 80096a6:	4607      	mov	r7, r0
 80096a8:	d802      	bhi.n	80096b0 <_realloc_r+0x34>
 80096aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80096ae:	d812      	bhi.n	80096d6 <_realloc_r+0x5a>
 80096b0:	4621      	mov	r1, r4
 80096b2:	4640      	mov	r0, r8
 80096b4:	f7ff ff56 	bl	8009564 <_malloc_r>
 80096b8:	4605      	mov	r5, r0
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0ed      	beq.n	800969a <_realloc_r+0x1e>
 80096be:	42bc      	cmp	r4, r7
 80096c0:	4622      	mov	r2, r4
 80096c2:	4631      	mov	r1, r6
 80096c4:	bf28      	it	cs
 80096c6:	463a      	movcs	r2, r7
 80096c8:	f001 ff9b 	bl	800b602 <memcpy>
 80096cc:	4631      	mov	r1, r6
 80096ce:	4640      	mov	r0, r8
 80096d0:	f002 fe30 	bl	800c334 <_free_r>
 80096d4:	e7e1      	b.n	800969a <_realloc_r+0x1e>
 80096d6:	4635      	mov	r5, r6
 80096d8:	e7df      	b.n	800969a <_realloc_r+0x1e>

080096da <sulp>:
 80096da:	b570      	push	{r4, r5, r6, lr}
 80096dc:	4604      	mov	r4, r0
 80096de:	460d      	mov	r5, r1
 80096e0:	ec45 4b10 	vmov	d0, r4, r5
 80096e4:	4616      	mov	r6, r2
 80096e6:	f003 fd47 	bl	800d178 <__ulp>
 80096ea:	ec51 0b10 	vmov	r0, r1, d0
 80096ee:	b17e      	cbz	r6, 8009710 <sulp+0x36>
 80096f0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80096f4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	dd09      	ble.n	8009710 <sulp+0x36>
 80096fc:	051b      	lsls	r3, r3, #20
 80096fe:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8009702:	2400      	movs	r4, #0
 8009704:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009708:	4622      	mov	r2, r4
 800970a:	462b      	mov	r3, r5
 800970c:	f7f6 ff94 	bl	8000638 <__aeabi_dmul>
 8009710:	bd70      	pop	{r4, r5, r6, pc}
 8009712:	0000      	movs	r0, r0
 8009714:	0000      	movs	r0, r0
	...

08009718 <_strtod_l>:
 8009718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800971c:	ed2d 8b02 	vpush	{d8}
 8009720:	b09b      	sub	sp, #108	; 0x6c
 8009722:	4604      	mov	r4, r0
 8009724:	9213      	str	r2, [sp, #76]	; 0x4c
 8009726:	2200      	movs	r2, #0
 8009728:	9216      	str	r2, [sp, #88]	; 0x58
 800972a:	460d      	mov	r5, r1
 800972c:	f04f 0800 	mov.w	r8, #0
 8009730:	f04f 0900 	mov.w	r9, #0
 8009734:	460a      	mov	r2, r1
 8009736:	9215      	str	r2, [sp, #84]	; 0x54
 8009738:	7811      	ldrb	r1, [r2, #0]
 800973a:	292b      	cmp	r1, #43	; 0x2b
 800973c:	d04c      	beq.n	80097d8 <_strtod_l+0xc0>
 800973e:	d83a      	bhi.n	80097b6 <_strtod_l+0x9e>
 8009740:	290d      	cmp	r1, #13
 8009742:	d834      	bhi.n	80097ae <_strtod_l+0x96>
 8009744:	2908      	cmp	r1, #8
 8009746:	d834      	bhi.n	80097b2 <_strtod_l+0x9a>
 8009748:	2900      	cmp	r1, #0
 800974a:	d03d      	beq.n	80097c8 <_strtod_l+0xb0>
 800974c:	2200      	movs	r2, #0
 800974e:	920a      	str	r2, [sp, #40]	; 0x28
 8009750:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8009752:	7832      	ldrb	r2, [r6, #0]
 8009754:	2a30      	cmp	r2, #48	; 0x30
 8009756:	f040 80b4 	bne.w	80098c2 <_strtod_l+0x1aa>
 800975a:	7872      	ldrb	r2, [r6, #1]
 800975c:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8009760:	2a58      	cmp	r2, #88	; 0x58
 8009762:	d170      	bne.n	8009846 <_strtod_l+0x12e>
 8009764:	9302      	str	r3, [sp, #8]
 8009766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009768:	9301      	str	r3, [sp, #4]
 800976a:	ab16      	add	r3, sp, #88	; 0x58
 800976c:	9300      	str	r3, [sp, #0]
 800976e:	4a8e      	ldr	r2, [pc, #568]	; (80099a8 <_strtod_l+0x290>)
 8009770:	ab17      	add	r3, sp, #92	; 0x5c
 8009772:	a915      	add	r1, sp, #84	; 0x54
 8009774:	4620      	mov	r0, r4
 8009776:	f002 fe91 	bl	800c49c <__gethex>
 800977a:	f010 070f 	ands.w	r7, r0, #15
 800977e:	4605      	mov	r5, r0
 8009780:	d005      	beq.n	800978e <_strtod_l+0x76>
 8009782:	2f06      	cmp	r7, #6
 8009784:	d12a      	bne.n	80097dc <_strtod_l+0xc4>
 8009786:	3601      	adds	r6, #1
 8009788:	2300      	movs	r3, #0
 800978a:	9615      	str	r6, [sp, #84]	; 0x54
 800978c:	930a      	str	r3, [sp, #40]	; 0x28
 800978e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009790:	2b00      	cmp	r3, #0
 8009792:	f040 857f 	bne.w	800a294 <_strtod_l+0xb7c>
 8009796:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009798:	b1db      	cbz	r3, 80097d2 <_strtod_l+0xba>
 800979a:	4642      	mov	r2, r8
 800979c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80097a0:	ec43 2b10 	vmov	d0, r2, r3
 80097a4:	b01b      	add	sp, #108	; 0x6c
 80097a6:	ecbd 8b02 	vpop	{d8}
 80097aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ae:	2920      	cmp	r1, #32
 80097b0:	d1cc      	bne.n	800974c <_strtod_l+0x34>
 80097b2:	3201      	adds	r2, #1
 80097b4:	e7bf      	b.n	8009736 <_strtod_l+0x1e>
 80097b6:	292d      	cmp	r1, #45	; 0x2d
 80097b8:	d1c8      	bne.n	800974c <_strtod_l+0x34>
 80097ba:	2101      	movs	r1, #1
 80097bc:	910a      	str	r1, [sp, #40]	; 0x28
 80097be:	1c51      	adds	r1, r2, #1
 80097c0:	9115      	str	r1, [sp, #84]	; 0x54
 80097c2:	7852      	ldrb	r2, [r2, #1]
 80097c4:	2a00      	cmp	r2, #0
 80097c6:	d1c3      	bne.n	8009750 <_strtod_l+0x38>
 80097c8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097ca:	9515      	str	r5, [sp, #84]	; 0x54
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	f040 855f 	bne.w	800a290 <_strtod_l+0xb78>
 80097d2:	4642      	mov	r2, r8
 80097d4:	464b      	mov	r3, r9
 80097d6:	e7e3      	b.n	80097a0 <_strtod_l+0x88>
 80097d8:	2100      	movs	r1, #0
 80097da:	e7ef      	b.n	80097bc <_strtod_l+0xa4>
 80097dc:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80097de:	b13a      	cbz	r2, 80097f0 <_strtod_l+0xd8>
 80097e0:	2135      	movs	r1, #53	; 0x35
 80097e2:	a818      	add	r0, sp, #96	; 0x60
 80097e4:	f003 fdc5 	bl	800d372 <__copybits>
 80097e8:	9916      	ldr	r1, [sp, #88]	; 0x58
 80097ea:	4620      	mov	r0, r4
 80097ec:	f003 f998 	bl	800cb20 <_Bfree>
 80097f0:	3f01      	subs	r7, #1
 80097f2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80097f4:	2f04      	cmp	r7, #4
 80097f6:	d806      	bhi.n	8009806 <_strtod_l+0xee>
 80097f8:	e8df f007 	tbb	[pc, r7]
 80097fc:	201d0314 	.word	0x201d0314
 8009800:	14          	.byte	0x14
 8009801:	00          	.byte	0x00
 8009802:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8009806:	05e9      	lsls	r1, r5, #23
 8009808:	bf48      	it	mi
 800980a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800980e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009812:	0d1b      	lsrs	r3, r3, #20
 8009814:	051b      	lsls	r3, r3, #20
 8009816:	2b00      	cmp	r3, #0
 8009818:	d1b9      	bne.n	800978e <_strtod_l+0x76>
 800981a:	f001 fec5 	bl	800b5a8 <__errno>
 800981e:	2322      	movs	r3, #34	; 0x22
 8009820:	6003      	str	r3, [r0, #0]
 8009822:	e7b4      	b.n	800978e <_strtod_l+0x76>
 8009824:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009828:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800982c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009830:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8009834:	e7e7      	b.n	8009806 <_strtod_l+0xee>
 8009836:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80099b0 <_strtod_l+0x298>
 800983a:	e7e4      	b.n	8009806 <_strtod_l+0xee>
 800983c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8009840:	f04f 38ff 	mov.w	r8, #4294967295
 8009844:	e7df      	b.n	8009806 <_strtod_l+0xee>
 8009846:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009848:	1c5a      	adds	r2, r3, #1
 800984a:	9215      	str	r2, [sp, #84]	; 0x54
 800984c:	785b      	ldrb	r3, [r3, #1]
 800984e:	2b30      	cmp	r3, #48	; 0x30
 8009850:	d0f9      	beq.n	8009846 <_strtod_l+0x12e>
 8009852:	2b00      	cmp	r3, #0
 8009854:	d09b      	beq.n	800978e <_strtod_l+0x76>
 8009856:	2301      	movs	r3, #1
 8009858:	f04f 0a00 	mov.w	sl, #0
 800985c:	9304      	str	r3, [sp, #16]
 800985e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009860:	930b      	str	r3, [sp, #44]	; 0x2c
 8009862:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8009866:	46d3      	mov	fp, sl
 8009868:	220a      	movs	r2, #10
 800986a:	9815      	ldr	r0, [sp, #84]	; 0x54
 800986c:	7806      	ldrb	r6, [r0, #0]
 800986e:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8009872:	b2d9      	uxtb	r1, r3
 8009874:	2909      	cmp	r1, #9
 8009876:	d926      	bls.n	80098c6 <_strtod_l+0x1ae>
 8009878:	494c      	ldr	r1, [pc, #304]	; (80099ac <_strtod_l+0x294>)
 800987a:	2201      	movs	r2, #1
 800987c:	f001 fe28 	bl	800b4d0 <strncmp>
 8009880:	2800      	cmp	r0, #0
 8009882:	d030      	beq.n	80098e6 <_strtod_l+0x1ce>
 8009884:	2000      	movs	r0, #0
 8009886:	4632      	mov	r2, r6
 8009888:	9005      	str	r0, [sp, #20]
 800988a:	465e      	mov	r6, fp
 800988c:	4603      	mov	r3, r0
 800988e:	2a65      	cmp	r2, #101	; 0x65
 8009890:	d001      	beq.n	8009896 <_strtod_l+0x17e>
 8009892:	2a45      	cmp	r2, #69	; 0x45
 8009894:	d113      	bne.n	80098be <_strtod_l+0x1a6>
 8009896:	b91e      	cbnz	r6, 80098a0 <_strtod_l+0x188>
 8009898:	9a04      	ldr	r2, [sp, #16]
 800989a:	4302      	orrs	r2, r0
 800989c:	d094      	beq.n	80097c8 <_strtod_l+0xb0>
 800989e:	2600      	movs	r6, #0
 80098a0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 80098a2:	1c6a      	adds	r2, r5, #1
 80098a4:	9215      	str	r2, [sp, #84]	; 0x54
 80098a6:	786a      	ldrb	r2, [r5, #1]
 80098a8:	2a2b      	cmp	r2, #43	; 0x2b
 80098aa:	d074      	beq.n	8009996 <_strtod_l+0x27e>
 80098ac:	2a2d      	cmp	r2, #45	; 0x2d
 80098ae:	d078      	beq.n	80099a2 <_strtod_l+0x28a>
 80098b0:	f04f 0c00 	mov.w	ip, #0
 80098b4:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80098b8:	2909      	cmp	r1, #9
 80098ba:	d97f      	bls.n	80099bc <_strtod_l+0x2a4>
 80098bc:	9515      	str	r5, [sp, #84]	; 0x54
 80098be:	2700      	movs	r7, #0
 80098c0:	e09e      	b.n	8009a00 <_strtod_l+0x2e8>
 80098c2:	2300      	movs	r3, #0
 80098c4:	e7c8      	b.n	8009858 <_strtod_l+0x140>
 80098c6:	f1bb 0f08 	cmp.w	fp, #8
 80098ca:	bfd8      	it	le
 80098cc:	9909      	ldrle	r1, [sp, #36]	; 0x24
 80098ce:	f100 0001 	add.w	r0, r0, #1
 80098d2:	bfda      	itte	le
 80098d4:	fb02 3301 	mlale	r3, r2, r1, r3
 80098d8:	9309      	strle	r3, [sp, #36]	; 0x24
 80098da:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 80098de:	f10b 0b01 	add.w	fp, fp, #1
 80098e2:	9015      	str	r0, [sp, #84]	; 0x54
 80098e4:	e7c1      	b.n	800986a <_strtod_l+0x152>
 80098e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098e8:	1c5a      	adds	r2, r3, #1
 80098ea:	9215      	str	r2, [sp, #84]	; 0x54
 80098ec:	785a      	ldrb	r2, [r3, #1]
 80098ee:	f1bb 0f00 	cmp.w	fp, #0
 80098f2:	d037      	beq.n	8009964 <_strtod_l+0x24c>
 80098f4:	9005      	str	r0, [sp, #20]
 80098f6:	465e      	mov	r6, fp
 80098f8:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80098fc:	2b09      	cmp	r3, #9
 80098fe:	d912      	bls.n	8009926 <_strtod_l+0x20e>
 8009900:	2301      	movs	r3, #1
 8009902:	e7c4      	b.n	800988e <_strtod_l+0x176>
 8009904:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009906:	1c5a      	adds	r2, r3, #1
 8009908:	9215      	str	r2, [sp, #84]	; 0x54
 800990a:	785a      	ldrb	r2, [r3, #1]
 800990c:	3001      	adds	r0, #1
 800990e:	2a30      	cmp	r2, #48	; 0x30
 8009910:	d0f8      	beq.n	8009904 <_strtod_l+0x1ec>
 8009912:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8009916:	2b08      	cmp	r3, #8
 8009918:	f200 84c1 	bhi.w	800a29e <_strtod_l+0xb86>
 800991c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800991e:	9005      	str	r0, [sp, #20]
 8009920:	2000      	movs	r0, #0
 8009922:	930b      	str	r3, [sp, #44]	; 0x2c
 8009924:	4606      	mov	r6, r0
 8009926:	3a30      	subs	r2, #48	; 0x30
 8009928:	f100 0301 	add.w	r3, r0, #1
 800992c:	d014      	beq.n	8009958 <_strtod_l+0x240>
 800992e:	9905      	ldr	r1, [sp, #20]
 8009930:	4419      	add	r1, r3
 8009932:	9105      	str	r1, [sp, #20]
 8009934:	4633      	mov	r3, r6
 8009936:	eb00 0c06 	add.w	ip, r0, r6
 800993a:	210a      	movs	r1, #10
 800993c:	4563      	cmp	r3, ip
 800993e:	d113      	bne.n	8009968 <_strtod_l+0x250>
 8009940:	1833      	adds	r3, r6, r0
 8009942:	2b08      	cmp	r3, #8
 8009944:	f106 0601 	add.w	r6, r6, #1
 8009948:	4406      	add	r6, r0
 800994a:	dc1a      	bgt.n	8009982 <_strtod_l+0x26a>
 800994c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800994e:	230a      	movs	r3, #10
 8009950:	fb03 2301 	mla	r3, r3, r1, r2
 8009954:	9309      	str	r3, [sp, #36]	; 0x24
 8009956:	2300      	movs	r3, #0
 8009958:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800995a:	1c51      	adds	r1, r2, #1
 800995c:	9115      	str	r1, [sp, #84]	; 0x54
 800995e:	7852      	ldrb	r2, [r2, #1]
 8009960:	4618      	mov	r0, r3
 8009962:	e7c9      	b.n	80098f8 <_strtod_l+0x1e0>
 8009964:	4658      	mov	r0, fp
 8009966:	e7d2      	b.n	800990e <_strtod_l+0x1f6>
 8009968:	2b08      	cmp	r3, #8
 800996a:	f103 0301 	add.w	r3, r3, #1
 800996e:	dc03      	bgt.n	8009978 <_strtod_l+0x260>
 8009970:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009972:	434f      	muls	r7, r1
 8009974:	9709      	str	r7, [sp, #36]	; 0x24
 8009976:	e7e1      	b.n	800993c <_strtod_l+0x224>
 8009978:	2b10      	cmp	r3, #16
 800997a:	bfd8      	it	le
 800997c:	fb01 fa0a 	mulle.w	sl, r1, sl
 8009980:	e7dc      	b.n	800993c <_strtod_l+0x224>
 8009982:	2e10      	cmp	r6, #16
 8009984:	bfdc      	itt	le
 8009986:	230a      	movle	r3, #10
 8009988:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800998c:	e7e3      	b.n	8009956 <_strtod_l+0x23e>
 800998e:	2300      	movs	r3, #0
 8009990:	9305      	str	r3, [sp, #20]
 8009992:	2301      	movs	r3, #1
 8009994:	e780      	b.n	8009898 <_strtod_l+0x180>
 8009996:	f04f 0c00 	mov.w	ip, #0
 800999a:	1caa      	adds	r2, r5, #2
 800999c:	9215      	str	r2, [sp, #84]	; 0x54
 800999e:	78aa      	ldrb	r2, [r5, #2]
 80099a0:	e788      	b.n	80098b4 <_strtod_l+0x19c>
 80099a2:	f04f 0c01 	mov.w	ip, #1
 80099a6:	e7f8      	b.n	800999a <_strtod_l+0x282>
 80099a8:	08045afc 	.word	0x08045afc
 80099ac:	08045af8 	.word	0x08045af8
 80099b0:	7ff00000 	.word	0x7ff00000
 80099b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80099b6:	1c51      	adds	r1, r2, #1
 80099b8:	9115      	str	r1, [sp, #84]	; 0x54
 80099ba:	7852      	ldrb	r2, [r2, #1]
 80099bc:	2a30      	cmp	r2, #48	; 0x30
 80099be:	d0f9      	beq.n	80099b4 <_strtod_l+0x29c>
 80099c0:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80099c4:	2908      	cmp	r1, #8
 80099c6:	f63f af7a 	bhi.w	80098be <_strtod_l+0x1a6>
 80099ca:	3a30      	subs	r2, #48	; 0x30
 80099cc:	9208      	str	r2, [sp, #32]
 80099ce:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80099d0:	920c      	str	r2, [sp, #48]	; 0x30
 80099d2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80099d4:	1c57      	adds	r7, r2, #1
 80099d6:	9715      	str	r7, [sp, #84]	; 0x54
 80099d8:	7852      	ldrb	r2, [r2, #1]
 80099da:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80099de:	f1be 0f09 	cmp.w	lr, #9
 80099e2:	d938      	bls.n	8009a56 <_strtod_l+0x33e>
 80099e4:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099e6:	1a7f      	subs	r7, r7, r1
 80099e8:	2f08      	cmp	r7, #8
 80099ea:	f644 671f 	movw	r7, #19999	; 0x4e1f
 80099ee:	dc03      	bgt.n	80099f8 <_strtod_l+0x2e0>
 80099f0:	9908      	ldr	r1, [sp, #32]
 80099f2:	428f      	cmp	r7, r1
 80099f4:	bfa8      	it	ge
 80099f6:	460f      	movge	r7, r1
 80099f8:	f1bc 0f00 	cmp.w	ip, #0
 80099fc:	d000      	beq.n	8009a00 <_strtod_l+0x2e8>
 80099fe:	427f      	negs	r7, r7
 8009a00:	2e00      	cmp	r6, #0
 8009a02:	d14f      	bne.n	8009aa4 <_strtod_l+0x38c>
 8009a04:	9904      	ldr	r1, [sp, #16]
 8009a06:	4301      	orrs	r1, r0
 8009a08:	f47f aec1 	bne.w	800978e <_strtod_l+0x76>
 8009a0c:	2b00      	cmp	r3, #0
 8009a0e:	f47f aedb 	bne.w	80097c8 <_strtod_l+0xb0>
 8009a12:	2a69      	cmp	r2, #105	; 0x69
 8009a14:	d029      	beq.n	8009a6a <_strtod_l+0x352>
 8009a16:	dc26      	bgt.n	8009a66 <_strtod_l+0x34e>
 8009a18:	2a49      	cmp	r2, #73	; 0x49
 8009a1a:	d026      	beq.n	8009a6a <_strtod_l+0x352>
 8009a1c:	2a4e      	cmp	r2, #78	; 0x4e
 8009a1e:	f47f aed3 	bne.w	80097c8 <_strtod_l+0xb0>
 8009a22:	499b      	ldr	r1, [pc, #620]	; (8009c90 <_strtod_l+0x578>)
 8009a24:	a815      	add	r0, sp, #84	; 0x54
 8009a26:	f002 ff79 	bl	800c91c <__match>
 8009a2a:	2800      	cmp	r0, #0
 8009a2c:	f43f aecc 	beq.w	80097c8 <_strtod_l+0xb0>
 8009a30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a32:	781b      	ldrb	r3, [r3, #0]
 8009a34:	2b28      	cmp	r3, #40	; 0x28
 8009a36:	d12f      	bne.n	8009a98 <_strtod_l+0x380>
 8009a38:	4996      	ldr	r1, [pc, #600]	; (8009c94 <_strtod_l+0x57c>)
 8009a3a:	aa18      	add	r2, sp, #96	; 0x60
 8009a3c:	a815      	add	r0, sp, #84	; 0x54
 8009a3e:	f002 ff81 	bl	800c944 <__hexnan>
 8009a42:	2805      	cmp	r0, #5
 8009a44:	d128      	bne.n	8009a98 <_strtod_l+0x380>
 8009a46:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009a48:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009a4c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009a50:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009a54:	e69b      	b.n	800978e <_strtod_l+0x76>
 8009a56:	9f08      	ldr	r7, [sp, #32]
 8009a58:	210a      	movs	r1, #10
 8009a5a:	fb01 2107 	mla	r1, r1, r7, r2
 8009a5e:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009a62:	9208      	str	r2, [sp, #32]
 8009a64:	e7b5      	b.n	80099d2 <_strtod_l+0x2ba>
 8009a66:	2a6e      	cmp	r2, #110	; 0x6e
 8009a68:	e7d9      	b.n	8009a1e <_strtod_l+0x306>
 8009a6a:	498b      	ldr	r1, [pc, #556]	; (8009c98 <_strtod_l+0x580>)
 8009a6c:	a815      	add	r0, sp, #84	; 0x54
 8009a6e:	f002 ff55 	bl	800c91c <__match>
 8009a72:	2800      	cmp	r0, #0
 8009a74:	f43f aea8 	beq.w	80097c8 <_strtod_l+0xb0>
 8009a78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a7a:	4988      	ldr	r1, [pc, #544]	; (8009c9c <_strtod_l+0x584>)
 8009a7c:	3b01      	subs	r3, #1
 8009a7e:	a815      	add	r0, sp, #84	; 0x54
 8009a80:	9315      	str	r3, [sp, #84]	; 0x54
 8009a82:	f002 ff4b 	bl	800c91c <__match>
 8009a86:	b910      	cbnz	r0, 8009a8e <_strtod_l+0x376>
 8009a88:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a8a:	3301      	adds	r3, #1
 8009a8c:	9315      	str	r3, [sp, #84]	; 0x54
 8009a8e:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009cac <_strtod_l+0x594>
 8009a92:	f04f 0800 	mov.w	r8, #0
 8009a96:	e67a      	b.n	800978e <_strtod_l+0x76>
 8009a98:	4881      	ldr	r0, [pc, #516]	; (8009ca0 <_strtod_l+0x588>)
 8009a9a:	f001 fdc1 	bl	800b620 <nan>
 8009a9e:	ec59 8b10 	vmov	r8, r9, d0
 8009aa2:	e674      	b.n	800978e <_strtod_l+0x76>
 8009aa4:	9b05      	ldr	r3, [sp, #20]
 8009aa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009aa8:	1afb      	subs	r3, r7, r3
 8009aaa:	f1bb 0f00 	cmp.w	fp, #0
 8009aae:	bf08      	it	eq
 8009ab0:	46b3      	moveq	fp, r6
 8009ab2:	2e10      	cmp	r6, #16
 8009ab4:	9308      	str	r3, [sp, #32]
 8009ab6:	4635      	mov	r5, r6
 8009ab8:	bfa8      	it	ge
 8009aba:	2510      	movge	r5, #16
 8009abc:	f7f6 fd42 	bl	8000544 <__aeabi_ui2d>
 8009ac0:	2e09      	cmp	r6, #9
 8009ac2:	4680      	mov	r8, r0
 8009ac4:	4689      	mov	r9, r1
 8009ac6:	dd13      	ble.n	8009af0 <_strtod_l+0x3d8>
 8009ac8:	4b76      	ldr	r3, [pc, #472]	; (8009ca4 <_strtod_l+0x58c>)
 8009aca:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009ace:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009ad2:	f7f6 fdb1 	bl	8000638 <__aeabi_dmul>
 8009ad6:	4680      	mov	r8, r0
 8009ad8:	4650      	mov	r0, sl
 8009ada:	4689      	mov	r9, r1
 8009adc:	f7f6 fd32 	bl	8000544 <__aeabi_ui2d>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4640      	mov	r0, r8
 8009ae6:	4649      	mov	r1, r9
 8009ae8:	f7f6 fbf0 	bl	80002cc <__adddf3>
 8009aec:	4680      	mov	r8, r0
 8009aee:	4689      	mov	r9, r1
 8009af0:	2e0f      	cmp	r6, #15
 8009af2:	dc38      	bgt.n	8009b66 <_strtod_l+0x44e>
 8009af4:	9b08      	ldr	r3, [sp, #32]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f43f ae49 	beq.w	800978e <_strtod_l+0x76>
 8009afc:	dd24      	ble.n	8009b48 <_strtod_l+0x430>
 8009afe:	2b16      	cmp	r3, #22
 8009b00:	dc0b      	bgt.n	8009b1a <_strtod_l+0x402>
 8009b02:	4968      	ldr	r1, [pc, #416]	; (8009ca4 <_strtod_l+0x58c>)
 8009b04:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b08:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b0c:	4642      	mov	r2, r8
 8009b0e:	464b      	mov	r3, r9
 8009b10:	f7f6 fd92 	bl	8000638 <__aeabi_dmul>
 8009b14:	4680      	mov	r8, r0
 8009b16:	4689      	mov	r9, r1
 8009b18:	e639      	b.n	800978e <_strtod_l+0x76>
 8009b1a:	9a08      	ldr	r2, [sp, #32]
 8009b1c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009b20:	4293      	cmp	r3, r2
 8009b22:	db20      	blt.n	8009b66 <_strtod_l+0x44e>
 8009b24:	4c5f      	ldr	r4, [pc, #380]	; (8009ca4 <_strtod_l+0x58c>)
 8009b26:	f1c6 060f 	rsb	r6, r6, #15
 8009b2a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009b2e:	4642      	mov	r2, r8
 8009b30:	464b      	mov	r3, r9
 8009b32:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b36:	f7f6 fd7f 	bl	8000638 <__aeabi_dmul>
 8009b3a:	9b08      	ldr	r3, [sp, #32]
 8009b3c:	1b9e      	subs	r6, r3, r6
 8009b3e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009b42:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009b46:	e7e3      	b.n	8009b10 <_strtod_l+0x3f8>
 8009b48:	9b08      	ldr	r3, [sp, #32]
 8009b4a:	3316      	adds	r3, #22
 8009b4c:	db0b      	blt.n	8009b66 <_strtod_l+0x44e>
 8009b4e:	9b05      	ldr	r3, [sp, #20]
 8009b50:	1bdf      	subs	r7, r3, r7
 8009b52:	4b54      	ldr	r3, [pc, #336]	; (8009ca4 <_strtod_l+0x58c>)
 8009b54:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009b58:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b5c:	4640      	mov	r0, r8
 8009b5e:	4649      	mov	r1, r9
 8009b60:	f7f6 fe94 	bl	800088c <__aeabi_ddiv>
 8009b64:	e7d6      	b.n	8009b14 <_strtod_l+0x3fc>
 8009b66:	9b08      	ldr	r3, [sp, #32]
 8009b68:	1b75      	subs	r5, r6, r5
 8009b6a:	441d      	add	r5, r3
 8009b6c:	2d00      	cmp	r5, #0
 8009b6e:	dd70      	ble.n	8009c52 <_strtod_l+0x53a>
 8009b70:	f015 030f 	ands.w	r3, r5, #15
 8009b74:	d00a      	beq.n	8009b8c <_strtod_l+0x474>
 8009b76:	494b      	ldr	r1, [pc, #300]	; (8009ca4 <_strtod_l+0x58c>)
 8009b78:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b7c:	4642      	mov	r2, r8
 8009b7e:	464b      	mov	r3, r9
 8009b80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b84:	f7f6 fd58 	bl	8000638 <__aeabi_dmul>
 8009b88:	4680      	mov	r8, r0
 8009b8a:	4689      	mov	r9, r1
 8009b8c:	f035 050f 	bics.w	r5, r5, #15
 8009b90:	d04d      	beq.n	8009c2e <_strtod_l+0x516>
 8009b92:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009b96:	dd22      	ble.n	8009bde <_strtod_l+0x4c6>
 8009b98:	2500      	movs	r5, #0
 8009b9a:	46ab      	mov	fp, r5
 8009b9c:	9509      	str	r5, [sp, #36]	; 0x24
 8009b9e:	9505      	str	r5, [sp, #20]
 8009ba0:	2322      	movs	r3, #34	; 0x22
 8009ba2:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009cac <_strtod_l+0x594>
 8009ba6:	6023      	str	r3, [r4, #0]
 8009ba8:	f04f 0800 	mov.w	r8, #0
 8009bac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f43f aded 	beq.w	800978e <_strtod_l+0x76>
 8009bb4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009bb6:	4620      	mov	r0, r4
 8009bb8:	f002 ffb2 	bl	800cb20 <_Bfree>
 8009bbc:	9905      	ldr	r1, [sp, #20]
 8009bbe:	4620      	mov	r0, r4
 8009bc0:	f002 ffae 	bl	800cb20 <_Bfree>
 8009bc4:	4659      	mov	r1, fp
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f002 ffaa 	bl	800cb20 <_Bfree>
 8009bcc:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bce:	4620      	mov	r0, r4
 8009bd0:	f002 ffa6 	bl	800cb20 <_Bfree>
 8009bd4:	4629      	mov	r1, r5
 8009bd6:	4620      	mov	r0, r4
 8009bd8:	f002 ffa2 	bl	800cb20 <_Bfree>
 8009bdc:	e5d7      	b.n	800978e <_strtod_l+0x76>
 8009bde:	4b32      	ldr	r3, [pc, #200]	; (8009ca8 <_strtod_l+0x590>)
 8009be0:	9304      	str	r3, [sp, #16]
 8009be2:	2300      	movs	r3, #0
 8009be4:	112d      	asrs	r5, r5, #4
 8009be6:	4640      	mov	r0, r8
 8009be8:	4649      	mov	r1, r9
 8009bea:	469a      	mov	sl, r3
 8009bec:	2d01      	cmp	r5, #1
 8009bee:	dc21      	bgt.n	8009c34 <_strtod_l+0x51c>
 8009bf0:	b10b      	cbz	r3, 8009bf6 <_strtod_l+0x4de>
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	4689      	mov	r9, r1
 8009bf6:	492c      	ldr	r1, [pc, #176]	; (8009ca8 <_strtod_l+0x590>)
 8009bf8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009bfc:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c00:	4642      	mov	r2, r8
 8009c02:	464b      	mov	r3, r9
 8009c04:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c08:	f7f6 fd16 	bl	8000638 <__aeabi_dmul>
 8009c0c:	4b27      	ldr	r3, [pc, #156]	; (8009cac <_strtod_l+0x594>)
 8009c0e:	460a      	mov	r2, r1
 8009c10:	400b      	ands	r3, r1
 8009c12:	4927      	ldr	r1, [pc, #156]	; (8009cb0 <_strtod_l+0x598>)
 8009c14:	428b      	cmp	r3, r1
 8009c16:	4680      	mov	r8, r0
 8009c18:	d8be      	bhi.n	8009b98 <_strtod_l+0x480>
 8009c1a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c1e:	428b      	cmp	r3, r1
 8009c20:	bf86      	itte	hi
 8009c22:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009cb4 <_strtod_l+0x59c>
 8009c26:	f04f 38ff 	movhi.w	r8, #4294967295
 8009c2a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009c2e:	2300      	movs	r3, #0
 8009c30:	9304      	str	r3, [sp, #16]
 8009c32:	e07b      	b.n	8009d2c <_strtod_l+0x614>
 8009c34:	07ea      	lsls	r2, r5, #31
 8009c36:	d505      	bpl.n	8009c44 <_strtod_l+0x52c>
 8009c38:	9b04      	ldr	r3, [sp, #16]
 8009c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3e:	f7f6 fcfb 	bl	8000638 <__aeabi_dmul>
 8009c42:	2301      	movs	r3, #1
 8009c44:	9a04      	ldr	r2, [sp, #16]
 8009c46:	3208      	adds	r2, #8
 8009c48:	f10a 0a01 	add.w	sl, sl, #1
 8009c4c:	106d      	asrs	r5, r5, #1
 8009c4e:	9204      	str	r2, [sp, #16]
 8009c50:	e7cc      	b.n	8009bec <_strtod_l+0x4d4>
 8009c52:	d0ec      	beq.n	8009c2e <_strtod_l+0x516>
 8009c54:	426d      	negs	r5, r5
 8009c56:	f015 020f 	ands.w	r2, r5, #15
 8009c5a:	d00a      	beq.n	8009c72 <_strtod_l+0x55a>
 8009c5c:	4b11      	ldr	r3, [pc, #68]	; (8009ca4 <_strtod_l+0x58c>)
 8009c5e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009c62:	4640      	mov	r0, r8
 8009c64:	4649      	mov	r1, r9
 8009c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6a:	f7f6 fe0f 	bl	800088c <__aeabi_ddiv>
 8009c6e:	4680      	mov	r8, r0
 8009c70:	4689      	mov	r9, r1
 8009c72:	112d      	asrs	r5, r5, #4
 8009c74:	d0db      	beq.n	8009c2e <_strtod_l+0x516>
 8009c76:	2d1f      	cmp	r5, #31
 8009c78:	dd1e      	ble.n	8009cb8 <_strtod_l+0x5a0>
 8009c7a:	2500      	movs	r5, #0
 8009c7c:	46ab      	mov	fp, r5
 8009c7e:	9509      	str	r5, [sp, #36]	; 0x24
 8009c80:	9505      	str	r5, [sp, #20]
 8009c82:	2322      	movs	r3, #34	; 0x22
 8009c84:	f04f 0800 	mov.w	r8, #0
 8009c88:	f04f 0900 	mov.w	r9, #0
 8009c8c:	6023      	str	r3, [r4, #0]
 8009c8e:	e78d      	b.n	8009bac <_strtod_l+0x494>
 8009c90:	08045b5d 	.word	0x08045b5d
 8009c94:	08045b10 	.word	0x08045b10
 8009c98:	08045b55 	.word	0x08045b55
 8009c9c:	08045b94 	.word	0x08045b94
 8009ca0:	08045f21 	.word	0x08045f21
 8009ca4:	08045d00 	.word	0x08045d00
 8009ca8:	08045cd8 	.word	0x08045cd8
 8009cac:	7ff00000 	.word	0x7ff00000
 8009cb0:	7ca00000 	.word	0x7ca00000
 8009cb4:	7fefffff 	.word	0x7fefffff
 8009cb8:	f015 0310 	ands.w	r3, r5, #16
 8009cbc:	bf18      	it	ne
 8009cbe:	236a      	movne	r3, #106	; 0x6a
 8009cc0:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a064 <_strtod_l+0x94c>
 8009cc4:	9304      	str	r3, [sp, #16]
 8009cc6:	4640      	mov	r0, r8
 8009cc8:	4649      	mov	r1, r9
 8009cca:	2300      	movs	r3, #0
 8009ccc:	07ea      	lsls	r2, r5, #31
 8009cce:	d504      	bpl.n	8009cda <_strtod_l+0x5c2>
 8009cd0:	e9da 2300 	ldrd	r2, r3, [sl]
 8009cd4:	f7f6 fcb0 	bl	8000638 <__aeabi_dmul>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	106d      	asrs	r5, r5, #1
 8009cdc:	f10a 0a08 	add.w	sl, sl, #8
 8009ce0:	d1f4      	bne.n	8009ccc <_strtod_l+0x5b4>
 8009ce2:	b10b      	cbz	r3, 8009ce8 <_strtod_l+0x5d0>
 8009ce4:	4680      	mov	r8, r0
 8009ce6:	4689      	mov	r9, r1
 8009ce8:	9b04      	ldr	r3, [sp, #16]
 8009cea:	b1bb      	cbz	r3, 8009d1c <_strtod_l+0x604>
 8009cec:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009cf0:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	4649      	mov	r1, r9
 8009cf8:	dd10      	ble.n	8009d1c <_strtod_l+0x604>
 8009cfa:	2b1f      	cmp	r3, #31
 8009cfc:	f340 811e 	ble.w	8009f3c <_strtod_l+0x824>
 8009d00:	2b34      	cmp	r3, #52	; 0x34
 8009d02:	bfde      	ittt	le
 8009d04:	f04f 33ff 	movle.w	r3, #4294967295
 8009d08:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d0c:	4093      	lslle	r3, r2
 8009d0e:	f04f 0800 	mov.w	r8, #0
 8009d12:	bfcc      	ite	gt
 8009d14:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009d18:	ea03 0901 	andle.w	r9, r3, r1
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	2300      	movs	r3, #0
 8009d20:	4640      	mov	r0, r8
 8009d22:	4649      	mov	r1, r9
 8009d24:	f7f6 fef0 	bl	8000b08 <__aeabi_dcmpeq>
 8009d28:	2800      	cmp	r0, #0
 8009d2a:	d1a6      	bne.n	8009c7a <_strtod_l+0x562>
 8009d2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d2e:	9300      	str	r3, [sp, #0]
 8009d30:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d32:	4633      	mov	r3, r6
 8009d34:	465a      	mov	r2, fp
 8009d36:	4620      	mov	r0, r4
 8009d38:	f002 ff5a 	bl	800cbf0 <__s2b>
 8009d3c:	9009      	str	r0, [sp, #36]	; 0x24
 8009d3e:	2800      	cmp	r0, #0
 8009d40:	f43f af2a 	beq.w	8009b98 <_strtod_l+0x480>
 8009d44:	9a08      	ldr	r2, [sp, #32]
 8009d46:	9b05      	ldr	r3, [sp, #20]
 8009d48:	2a00      	cmp	r2, #0
 8009d4a:	eba3 0307 	sub.w	r3, r3, r7
 8009d4e:	bfa8      	it	ge
 8009d50:	2300      	movge	r3, #0
 8009d52:	930c      	str	r3, [sp, #48]	; 0x30
 8009d54:	2500      	movs	r5, #0
 8009d56:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009d5a:	9312      	str	r3, [sp, #72]	; 0x48
 8009d5c:	46ab      	mov	fp, r5
 8009d5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d60:	4620      	mov	r0, r4
 8009d62:	6859      	ldr	r1, [r3, #4]
 8009d64:	f002 fe9c 	bl	800caa0 <_Balloc>
 8009d68:	9005      	str	r0, [sp, #20]
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	f43f af18 	beq.w	8009ba0 <_strtod_l+0x488>
 8009d70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d72:	691a      	ldr	r2, [r3, #16]
 8009d74:	3202      	adds	r2, #2
 8009d76:	f103 010c 	add.w	r1, r3, #12
 8009d7a:	0092      	lsls	r2, r2, #2
 8009d7c:	300c      	adds	r0, #12
 8009d7e:	f001 fc40 	bl	800b602 <memcpy>
 8009d82:	ec49 8b10 	vmov	d0, r8, r9
 8009d86:	aa18      	add	r2, sp, #96	; 0x60
 8009d88:	a917      	add	r1, sp, #92	; 0x5c
 8009d8a:	4620      	mov	r0, r4
 8009d8c:	f003 fa64 	bl	800d258 <__d2b>
 8009d90:	ec49 8b18 	vmov	d8, r8, r9
 8009d94:	9016      	str	r0, [sp, #88]	; 0x58
 8009d96:	2800      	cmp	r0, #0
 8009d98:	f43f af02 	beq.w	8009ba0 <_strtod_l+0x488>
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f002 ffbe 	bl	800cd20 <__i2b>
 8009da4:	4683      	mov	fp, r0
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f43f aefa 	beq.w	8009ba0 <_strtod_l+0x488>
 8009dac:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009dae:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009db0:	2e00      	cmp	r6, #0
 8009db2:	bfab      	itete	ge
 8009db4:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009db6:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009db8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009dba:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009dbe:	bfac      	ite	ge
 8009dc0:	eb06 0a03 	addge.w	sl, r6, r3
 8009dc4:	1b9f      	sublt	r7, r3, r6
 8009dc6:	9b04      	ldr	r3, [sp, #16]
 8009dc8:	1af6      	subs	r6, r6, r3
 8009dca:	4416      	add	r6, r2
 8009dcc:	4ba0      	ldr	r3, [pc, #640]	; (800a050 <_strtod_l+0x938>)
 8009dce:	3e01      	subs	r6, #1
 8009dd0:	429e      	cmp	r6, r3
 8009dd2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009dd6:	f280 80c4 	bge.w	8009f62 <_strtod_l+0x84a>
 8009dda:	1b9b      	subs	r3, r3, r6
 8009ddc:	2b1f      	cmp	r3, #31
 8009dde:	eba2 0203 	sub.w	r2, r2, r3
 8009de2:	f04f 0101 	mov.w	r1, #1
 8009de6:	f300 80b0 	bgt.w	8009f4a <_strtod_l+0x832>
 8009dea:	fa01 f303 	lsl.w	r3, r1, r3
 8009dee:	930e      	str	r3, [sp, #56]	; 0x38
 8009df0:	2300      	movs	r3, #0
 8009df2:	930d      	str	r3, [sp, #52]	; 0x34
 8009df4:	eb0a 0602 	add.w	r6, sl, r2
 8009df8:	9b04      	ldr	r3, [sp, #16]
 8009dfa:	45b2      	cmp	sl, r6
 8009dfc:	4417      	add	r7, r2
 8009dfe:	441f      	add	r7, r3
 8009e00:	4653      	mov	r3, sl
 8009e02:	bfa8      	it	ge
 8009e04:	4633      	movge	r3, r6
 8009e06:	42bb      	cmp	r3, r7
 8009e08:	bfa8      	it	ge
 8009e0a:	463b      	movge	r3, r7
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	bfc2      	ittt	gt
 8009e10:	1af6      	subgt	r6, r6, r3
 8009e12:	1aff      	subgt	r7, r7, r3
 8009e14:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009e18:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	dd17      	ble.n	8009e4e <_strtod_l+0x736>
 8009e1e:	4659      	mov	r1, fp
 8009e20:	461a      	mov	r2, r3
 8009e22:	4620      	mov	r0, r4
 8009e24:	f003 f83c 	bl	800cea0 <__pow5mult>
 8009e28:	4683      	mov	fp, r0
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	f43f aeb8 	beq.w	8009ba0 <_strtod_l+0x488>
 8009e30:	4601      	mov	r1, r0
 8009e32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e34:	4620      	mov	r0, r4
 8009e36:	f002 ff89 	bl	800cd4c <__multiply>
 8009e3a:	900b      	str	r0, [sp, #44]	; 0x2c
 8009e3c:	2800      	cmp	r0, #0
 8009e3e:	f43f aeaf 	beq.w	8009ba0 <_strtod_l+0x488>
 8009e42:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e44:	4620      	mov	r0, r4
 8009e46:	f002 fe6b 	bl	800cb20 <_Bfree>
 8009e4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e4c:	9316      	str	r3, [sp, #88]	; 0x58
 8009e4e:	2e00      	cmp	r6, #0
 8009e50:	f300 808c 	bgt.w	8009f6c <_strtod_l+0x854>
 8009e54:	9b08      	ldr	r3, [sp, #32]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	dd08      	ble.n	8009e6c <_strtod_l+0x754>
 8009e5a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009e5c:	9905      	ldr	r1, [sp, #20]
 8009e5e:	4620      	mov	r0, r4
 8009e60:	f003 f81e 	bl	800cea0 <__pow5mult>
 8009e64:	9005      	str	r0, [sp, #20]
 8009e66:	2800      	cmp	r0, #0
 8009e68:	f43f ae9a 	beq.w	8009ba0 <_strtod_l+0x488>
 8009e6c:	2f00      	cmp	r7, #0
 8009e6e:	dd08      	ble.n	8009e82 <_strtod_l+0x76a>
 8009e70:	9905      	ldr	r1, [sp, #20]
 8009e72:	463a      	mov	r2, r7
 8009e74:	4620      	mov	r0, r4
 8009e76:	f003 f86d 	bl	800cf54 <__lshift>
 8009e7a:	9005      	str	r0, [sp, #20]
 8009e7c:	2800      	cmp	r0, #0
 8009e7e:	f43f ae8f 	beq.w	8009ba0 <_strtod_l+0x488>
 8009e82:	f1ba 0f00 	cmp.w	sl, #0
 8009e86:	dd08      	ble.n	8009e9a <_strtod_l+0x782>
 8009e88:	4659      	mov	r1, fp
 8009e8a:	4652      	mov	r2, sl
 8009e8c:	4620      	mov	r0, r4
 8009e8e:	f003 f861 	bl	800cf54 <__lshift>
 8009e92:	4683      	mov	fp, r0
 8009e94:	2800      	cmp	r0, #0
 8009e96:	f43f ae83 	beq.w	8009ba0 <_strtod_l+0x488>
 8009e9a:	9a05      	ldr	r2, [sp, #20]
 8009e9c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009e9e:	4620      	mov	r0, r4
 8009ea0:	f003 f8e0 	bl	800d064 <__mdiff>
 8009ea4:	4605      	mov	r5, r0
 8009ea6:	2800      	cmp	r0, #0
 8009ea8:	f43f ae7a 	beq.w	8009ba0 <_strtod_l+0x488>
 8009eac:	68c3      	ldr	r3, [r0, #12]
 8009eae:	930b      	str	r3, [sp, #44]	; 0x2c
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	60c3      	str	r3, [r0, #12]
 8009eb4:	4659      	mov	r1, fp
 8009eb6:	f003 f8b9 	bl	800d02c <__mcmp>
 8009eba:	2800      	cmp	r0, #0
 8009ebc:	da60      	bge.n	8009f80 <_strtod_l+0x868>
 8009ebe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ec0:	ea53 0308 	orrs.w	r3, r3, r8
 8009ec4:	f040 8084 	bne.w	8009fd0 <_strtod_l+0x8b8>
 8009ec8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d17f      	bne.n	8009fd0 <_strtod_l+0x8b8>
 8009ed0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ed4:	0d1b      	lsrs	r3, r3, #20
 8009ed6:	051b      	lsls	r3, r3, #20
 8009ed8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009edc:	d978      	bls.n	8009fd0 <_strtod_l+0x8b8>
 8009ede:	696b      	ldr	r3, [r5, #20]
 8009ee0:	b913      	cbnz	r3, 8009ee8 <_strtod_l+0x7d0>
 8009ee2:	692b      	ldr	r3, [r5, #16]
 8009ee4:	2b01      	cmp	r3, #1
 8009ee6:	dd73      	ble.n	8009fd0 <_strtod_l+0x8b8>
 8009ee8:	4629      	mov	r1, r5
 8009eea:	2201      	movs	r2, #1
 8009eec:	4620      	mov	r0, r4
 8009eee:	f003 f831 	bl	800cf54 <__lshift>
 8009ef2:	4659      	mov	r1, fp
 8009ef4:	4605      	mov	r5, r0
 8009ef6:	f003 f899 	bl	800d02c <__mcmp>
 8009efa:	2800      	cmp	r0, #0
 8009efc:	dd68      	ble.n	8009fd0 <_strtod_l+0x8b8>
 8009efe:	9904      	ldr	r1, [sp, #16]
 8009f00:	4a54      	ldr	r2, [pc, #336]	; (800a054 <_strtod_l+0x93c>)
 8009f02:	464b      	mov	r3, r9
 8009f04:	2900      	cmp	r1, #0
 8009f06:	f000 8084 	beq.w	800a012 <_strtod_l+0x8fa>
 8009f0a:	ea02 0109 	and.w	r1, r2, r9
 8009f0e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f12:	dc7e      	bgt.n	800a012 <_strtod_l+0x8fa>
 8009f14:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f18:	f77f aeb3 	ble.w	8009c82 <_strtod_l+0x56a>
 8009f1c:	4b4e      	ldr	r3, [pc, #312]	; (800a058 <_strtod_l+0x940>)
 8009f1e:	4640      	mov	r0, r8
 8009f20:	4649      	mov	r1, r9
 8009f22:	2200      	movs	r2, #0
 8009f24:	f7f6 fb88 	bl	8000638 <__aeabi_dmul>
 8009f28:	4b4a      	ldr	r3, [pc, #296]	; (800a054 <_strtod_l+0x93c>)
 8009f2a:	400b      	ands	r3, r1
 8009f2c:	4680      	mov	r8, r0
 8009f2e:	4689      	mov	r9, r1
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	f47f ae3f 	bne.w	8009bb4 <_strtod_l+0x49c>
 8009f36:	2322      	movs	r3, #34	; 0x22
 8009f38:	6023      	str	r3, [r4, #0]
 8009f3a:	e63b      	b.n	8009bb4 <_strtod_l+0x49c>
 8009f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8009f40:	fa02 f303 	lsl.w	r3, r2, r3
 8009f44:	ea03 0808 	and.w	r8, r3, r8
 8009f48:	e6e8      	b.n	8009d1c <_strtod_l+0x604>
 8009f4a:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009f4e:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009f52:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009f56:	36e2      	adds	r6, #226	; 0xe2
 8009f58:	fa01 f306 	lsl.w	r3, r1, r6
 8009f5c:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009f60:	e748      	b.n	8009df4 <_strtod_l+0x6dc>
 8009f62:	2100      	movs	r1, #0
 8009f64:	2301      	movs	r3, #1
 8009f66:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009f6a:	e743      	b.n	8009df4 <_strtod_l+0x6dc>
 8009f6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f6e:	4632      	mov	r2, r6
 8009f70:	4620      	mov	r0, r4
 8009f72:	f002 ffef 	bl	800cf54 <__lshift>
 8009f76:	9016      	str	r0, [sp, #88]	; 0x58
 8009f78:	2800      	cmp	r0, #0
 8009f7a:	f47f af6b 	bne.w	8009e54 <_strtod_l+0x73c>
 8009f7e:	e60f      	b.n	8009ba0 <_strtod_l+0x488>
 8009f80:	46ca      	mov	sl, r9
 8009f82:	d171      	bne.n	800a068 <_strtod_l+0x950>
 8009f84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009f86:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f8a:	b352      	cbz	r2, 8009fe2 <_strtod_l+0x8ca>
 8009f8c:	4a33      	ldr	r2, [pc, #204]	; (800a05c <_strtod_l+0x944>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d12a      	bne.n	8009fe8 <_strtod_l+0x8d0>
 8009f92:	9b04      	ldr	r3, [sp, #16]
 8009f94:	4641      	mov	r1, r8
 8009f96:	b1fb      	cbz	r3, 8009fd8 <_strtod_l+0x8c0>
 8009f98:	4b2e      	ldr	r3, [pc, #184]	; (800a054 <_strtod_l+0x93c>)
 8009f9a:	ea09 0303 	and.w	r3, r9, r3
 8009f9e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8009fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa6:	d81a      	bhi.n	8009fde <_strtod_l+0x8c6>
 8009fa8:	0d1b      	lsrs	r3, r3, #20
 8009faa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009fae:	fa02 f303 	lsl.w	r3, r2, r3
 8009fb2:	4299      	cmp	r1, r3
 8009fb4:	d118      	bne.n	8009fe8 <_strtod_l+0x8d0>
 8009fb6:	4b2a      	ldr	r3, [pc, #168]	; (800a060 <_strtod_l+0x948>)
 8009fb8:	459a      	cmp	sl, r3
 8009fba:	d102      	bne.n	8009fc2 <_strtod_l+0x8aa>
 8009fbc:	3101      	adds	r1, #1
 8009fbe:	f43f adef 	beq.w	8009ba0 <_strtod_l+0x488>
 8009fc2:	4b24      	ldr	r3, [pc, #144]	; (800a054 <_strtod_l+0x93c>)
 8009fc4:	ea0a 0303 	and.w	r3, sl, r3
 8009fc8:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 8009fcc:	f04f 0800 	mov.w	r8, #0
 8009fd0:	9b04      	ldr	r3, [sp, #16]
 8009fd2:	2b00      	cmp	r3, #0
 8009fd4:	d1a2      	bne.n	8009f1c <_strtod_l+0x804>
 8009fd6:	e5ed      	b.n	8009bb4 <_strtod_l+0x49c>
 8009fd8:	f04f 33ff 	mov.w	r3, #4294967295
 8009fdc:	e7e9      	b.n	8009fb2 <_strtod_l+0x89a>
 8009fde:	4613      	mov	r3, r2
 8009fe0:	e7e7      	b.n	8009fb2 <_strtod_l+0x89a>
 8009fe2:	ea53 0308 	orrs.w	r3, r3, r8
 8009fe6:	d08a      	beq.n	8009efe <_strtod_l+0x7e6>
 8009fe8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009fea:	b1e3      	cbz	r3, 800a026 <_strtod_l+0x90e>
 8009fec:	ea13 0f0a 	tst.w	r3, sl
 8009ff0:	d0ee      	beq.n	8009fd0 <_strtod_l+0x8b8>
 8009ff2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ff4:	9a04      	ldr	r2, [sp, #16]
 8009ff6:	4640      	mov	r0, r8
 8009ff8:	4649      	mov	r1, r9
 8009ffa:	b1c3      	cbz	r3, 800a02e <_strtod_l+0x916>
 8009ffc:	f7ff fb6d 	bl	80096da <sulp>
 800a000:	4602      	mov	r2, r0
 800a002:	460b      	mov	r3, r1
 800a004:	ec51 0b18 	vmov	r0, r1, d8
 800a008:	f7f6 f960 	bl	80002cc <__adddf3>
 800a00c:	4680      	mov	r8, r0
 800a00e:	4689      	mov	r9, r1
 800a010:	e7de      	b.n	8009fd0 <_strtod_l+0x8b8>
 800a012:	4013      	ands	r3, r2
 800a014:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a018:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a01c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a020:	f04f 38ff 	mov.w	r8, #4294967295
 800a024:	e7d4      	b.n	8009fd0 <_strtod_l+0x8b8>
 800a026:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a028:	ea13 0f08 	tst.w	r3, r8
 800a02c:	e7e0      	b.n	8009ff0 <_strtod_l+0x8d8>
 800a02e:	f7ff fb54 	bl	80096da <sulp>
 800a032:	4602      	mov	r2, r0
 800a034:	460b      	mov	r3, r1
 800a036:	ec51 0b18 	vmov	r0, r1, d8
 800a03a:	f7f6 f945 	bl	80002c8 <__aeabi_dsub>
 800a03e:	2200      	movs	r2, #0
 800a040:	2300      	movs	r3, #0
 800a042:	4680      	mov	r8, r0
 800a044:	4689      	mov	r9, r1
 800a046:	f7f6 fd5f 	bl	8000b08 <__aeabi_dcmpeq>
 800a04a:	2800      	cmp	r0, #0
 800a04c:	d0c0      	beq.n	8009fd0 <_strtod_l+0x8b8>
 800a04e:	e618      	b.n	8009c82 <_strtod_l+0x56a>
 800a050:	fffffc02 	.word	0xfffffc02
 800a054:	7ff00000 	.word	0x7ff00000
 800a058:	39500000 	.word	0x39500000
 800a05c:	000fffff 	.word	0x000fffff
 800a060:	7fefffff 	.word	0x7fefffff
 800a064:	08045b28 	.word	0x08045b28
 800a068:	4659      	mov	r1, fp
 800a06a:	4628      	mov	r0, r5
 800a06c:	f003 f94e 	bl	800d30c <__ratio>
 800a070:	ec57 6b10 	vmov	r6, r7, d0
 800a074:	ee10 0a10 	vmov	r0, s0
 800a078:	2200      	movs	r2, #0
 800a07a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a07e:	4639      	mov	r1, r7
 800a080:	f7f6 fd56 	bl	8000b30 <__aeabi_dcmple>
 800a084:	2800      	cmp	r0, #0
 800a086:	d071      	beq.n	800a16c <_strtod_l+0xa54>
 800a088:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d17c      	bne.n	800a188 <_strtod_l+0xa70>
 800a08e:	f1b8 0f00 	cmp.w	r8, #0
 800a092:	d15a      	bne.n	800a14a <_strtod_l+0xa32>
 800a094:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d15d      	bne.n	800a158 <_strtod_l+0xa40>
 800a09c:	4b90      	ldr	r3, [pc, #576]	; (800a2e0 <_strtod_l+0xbc8>)
 800a09e:	2200      	movs	r2, #0
 800a0a0:	4630      	mov	r0, r6
 800a0a2:	4639      	mov	r1, r7
 800a0a4:	f7f6 fd3a 	bl	8000b1c <__aeabi_dcmplt>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d15c      	bne.n	800a166 <_strtod_l+0xa4e>
 800a0ac:	4630      	mov	r0, r6
 800a0ae:	4639      	mov	r1, r7
 800a0b0:	4b8c      	ldr	r3, [pc, #560]	; (800a2e4 <_strtod_l+0xbcc>)
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	f7f6 fac0 	bl	8000638 <__aeabi_dmul>
 800a0b8:	4606      	mov	r6, r0
 800a0ba:	460f      	mov	r7, r1
 800a0bc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a0c0:	9606      	str	r6, [sp, #24]
 800a0c2:	9307      	str	r3, [sp, #28]
 800a0c4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0c8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a0cc:	4b86      	ldr	r3, [pc, #536]	; (800a2e8 <_strtod_l+0xbd0>)
 800a0ce:	ea0a 0303 	and.w	r3, sl, r3
 800a0d2:	930d      	str	r3, [sp, #52]	; 0x34
 800a0d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0d6:	4b85      	ldr	r3, [pc, #532]	; (800a2ec <_strtod_l+0xbd4>)
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	f040 8090 	bne.w	800a1fe <_strtod_l+0xae6>
 800a0de:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a0e2:	ec49 8b10 	vmov	d0, r8, r9
 800a0e6:	f003 f847 	bl	800d178 <__ulp>
 800a0ea:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a0ee:	ec51 0b10 	vmov	r0, r1, d0
 800a0f2:	f7f6 faa1 	bl	8000638 <__aeabi_dmul>
 800a0f6:	4642      	mov	r2, r8
 800a0f8:	464b      	mov	r3, r9
 800a0fa:	f7f6 f8e7 	bl	80002cc <__adddf3>
 800a0fe:	460b      	mov	r3, r1
 800a100:	4979      	ldr	r1, [pc, #484]	; (800a2e8 <_strtod_l+0xbd0>)
 800a102:	4a7b      	ldr	r2, [pc, #492]	; (800a2f0 <_strtod_l+0xbd8>)
 800a104:	4019      	ands	r1, r3
 800a106:	4291      	cmp	r1, r2
 800a108:	4680      	mov	r8, r0
 800a10a:	d944      	bls.n	800a196 <_strtod_l+0xa7e>
 800a10c:	ee18 2a90 	vmov	r2, s17
 800a110:	4b78      	ldr	r3, [pc, #480]	; (800a2f4 <_strtod_l+0xbdc>)
 800a112:	429a      	cmp	r2, r3
 800a114:	d104      	bne.n	800a120 <_strtod_l+0xa08>
 800a116:	ee18 3a10 	vmov	r3, s16
 800a11a:	3301      	adds	r3, #1
 800a11c:	f43f ad40 	beq.w	8009ba0 <_strtod_l+0x488>
 800a120:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a2f4 <_strtod_l+0xbdc>
 800a124:	f04f 38ff 	mov.w	r8, #4294967295
 800a128:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a12a:	4620      	mov	r0, r4
 800a12c:	f002 fcf8 	bl	800cb20 <_Bfree>
 800a130:	9905      	ldr	r1, [sp, #20]
 800a132:	4620      	mov	r0, r4
 800a134:	f002 fcf4 	bl	800cb20 <_Bfree>
 800a138:	4659      	mov	r1, fp
 800a13a:	4620      	mov	r0, r4
 800a13c:	f002 fcf0 	bl	800cb20 <_Bfree>
 800a140:	4629      	mov	r1, r5
 800a142:	4620      	mov	r0, r4
 800a144:	f002 fcec 	bl	800cb20 <_Bfree>
 800a148:	e609      	b.n	8009d5e <_strtod_l+0x646>
 800a14a:	f1b8 0f01 	cmp.w	r8, #1
 800a14e:	d103      	bne.n	800a158 <_strtod_l+0xa40>
 800a150:	f1b9 0f00 	cmp.w	r9, #0
 800a154:	f43f ad95 	beq.w	8009c82 <_strtod_l+0x56a>
 800a158:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a2b0 <_strtod_l+0xb98>
 800a15c:	4f60      	ldr	r7, [pc, #384]	; (800a2e0 <_strtod_l+0xbc8>)
 800a15e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a162:	2600      	movs	r6, #0
 800a164:	e7ae      	b.n	800a0c4 <_strtod_l+0x9ac>
 800a166:	4f5f      	ldr	r7, [pc, #380]	; (800a2e4 <_strtod_l+0xbcc>)
 800a168:	2600      	movs	r6, #0
 800a16a:	e7a7      	b.n	800a0bc <_strtod_l+0x9a4>
 800a16c:	4b5d      	ldr	r3, [pc, #372]	; (800a2e4 <_strtod_l+0xbcc>)
 800a16e:	4630      	mov	r0, r6
 800a170:	4639      	mov	r1, r7
 800a172:	2200      	movs	r2, #0
 800a174:	f7f6 fa60 	bl	8000638 <__aeabi_dmul>
 800a178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a17a:	4606      	mov	r6, r0
 800a17c:	460f      	mov	r7, r1
 800a17e:	2b00      	cmp	r3, #0
 800a180:	d09c      	beq.n	800a0bc <_strtod_l+0x9a4>
 800a182:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a186:	e79d      	b.n	800a0c4 <_strtod_l+0x9ac>
 800a188:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a2b8 <_strtod_l+0xba0>
 800a18c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a190:	ec57 6b17 	vmov	r6, r7, d7
 800a194:	e796      	b.n	800a0c4 <_strtod_l+0x9ac>
 800a196:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a19a:	9b04      	ldr	r3, [sp, #16]
 800a19c:	46ca      	mov	sl, r9
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d1c2      	bne.n	800a128 <_strtod_l+0xa10>
 800a1a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a1a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1a8:	0d1b      	lsrs	r3, r3, #20
 800a1aa:	051b      	lsls	r3, r3, #20
 800a1ac:	429a      	cmp	r2, r3
 800a1ae:	d1bb      	bne.n	800a128 <_strtod_l+0xa10>
 800a1b0:	4630      	mov	r0, r6
 800a1b2:	4639      	mov	r1, r7
 800a1b4:	f7f6 fda0 	bl	8000cf8 <__aeabi_d2lz>
 800a1b8:	f7f6 fa10 	bl	80005dc <__aeabi_l2d>
 800a1bc:	4602      	mov	r2, r0
 800a1be:	460b      	mov	r3, r1
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	4639      	mov	r1, r7
 800a1c4:	f7f6 f880 	bl	80002c8 <__aeabi_dsub>
 800a1c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a1ca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a1ce:	ea43 0308 	orr.w	r3, r3, r8
 800a1d2:	4313      	orrs	r3, r2
 800a1d4:	4606      	mov	r6, r0
 800a1d6:	460f      	mov	r7, r1
 800a1d8:	d054      	beq.n	800a284 <_strtod_l+0xb6c>
 800a1da:	a339      	add	r3, pc, #228	; (adr r3, 800a2c0 <_strtod_l+0xba8>)
 800a1dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1e0:	f7f6 fc9c 	bl	8000b1c <__aeabi_dcmplt>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	f47f ace5 	bne.w	8009bb4 <_strtod_l+0x49c>
 800a1ea:	a337      	add	r3, pc, #220	; (adr r3, 800a2c8 <_strtod_l+0xbb0>)
 800a1ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f0:	4630      	mov	r0, r6
 800a1f2:	4639      	mov	r1, r7
 800a1f4:	f7f6 fcb0 	bl	8000b58 <__aeabi_dcmpgt>
 800a1f8:	2800      	cmp	r0, #0
 800a1fa:	d095      	beq.n	800a128 <_strtod_l+0xa10>
 800a1fc:	e4da      	b.n	8009bb4 <_strtod_l+0x49c>
 800a1fe:	9b04      	ldr	r3, [sp, #16]
 800a200:	b333      	cbz	r3, 800a250 <_strtod_l+0xb38>
 800a202:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a204:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a208:	d822      	bhi.n	800a250 <_strtod_l+0xb38>
 800a20a:	a331      	add	r3, pc, #196	; (adr r3, 800a2d0 <_strtod_l+0xbb8>)
 800a20c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a210:	4630      	mov	r0, r6
 800a212:	4639      	mov	r1, r7
 800a214:	f7f6 fc8c 	bl	8000b30 <__aeabi_dcmple>
 800a218:	b1a0      	cbz	r0, 800a244 <_strtod_l+0xb2c>
 800a21a:	4639      	mov	r1, r7
 800a21c:	4630      	mov	r0, r6
 800a21e:	f7f6 fce3 	bl	8000be8 <__aeabi_d2uiz>
 800a222:	2801      	cmp	r0, #1
 800a224:	bf38      	it	cc
 800a226:	2001      	movcc	r0, #1
 800a228:	f7f6 f98c 	bl	8000544 <__aeabi_ui2d>
 800a22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a22e:	4606      	mov	r6, r0
 800a230:	460f      	mov	r7, r1
 800a232:	bb23      	cbnz	r3, 800a27e <_strtod_l+0xb66>
 800a234:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a238:	9010      	str	r0, [sp, #64]	; 0x40
 800a23a:	9311      	str	r3, [sp, #68]	; 0x44
 800a23c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a240:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a244:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a246:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a248:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a24c:	1a9b      	subs	r3, r3, r2
 800a24e:	930f      	str	r3, [sp, #60]	; 0x3c
 800a250:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a254:	eeb0 0a48 	vmov.f32	s0, s16
 800a258:	eef0 0a68 	vmov.f32	s1, s17
 800a25c:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a260:	f002 ff8a 	bl	800d178 <__ulp>
 800a264:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a268:	ec53 2b10 	vmov	r2, r3, d0
 800a26c:	f7f6 f9e4 	bl	8000638 <__aeabi_dmul>
 800a270:	ec53 2b18 	vmov	r2, r3, d8
 800a274:	f7f6 f82a 	bl	80002cc <__adddf3>
 800a278:	4680      	mov	r8, r0
 800a27a:	4689      	mov	r9, r1
 800a27c:	e78d      	b.n	800a19a <_strtod_l+0xa82>
 800a27e:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a282:	e7db      	b.n	800a23c <_strtod_l+0xb24>
 800a284:	a314      	add	r3, pc, #80	; (adr r3, 800a2d8 <_strtod_l+0xbc0>)
 800a286:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a28a:	f7f6 fc47 	bl	8000b1c <__aeabi_dcmplt>
 800a28e:	e7b3      	b.n	800a1f8 <_strtod_l+0xae0>
 800a290:	2300      	movs	r3, #0
 800a292:	930a      	str	r3, [sp, #40]	; 0x28
 800a294:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a296:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a298:	6013      	str	r3, [r2, #0]
 800a29a:	f7ff ba7c 	b.w	8009796 <_strtod_l+0x7e>
 800a29e:	2a65      	cmp	r2, #101	; 0x65
 800a2a0:	f43f ab75 	beq.w	800998e <_strtod_l+0x276>
 800a2a4:	2a45      	cmp	r2, #69	; 0x45
 800a2a6:	f43f ab72 	beq.w	800998e <_strtod_l+0x276>
 800a2aa:	2301      	movs	r3, #1
 800a2ac:	f7ff bbaa 	b.w	8009a04 <_strtod_l+0x2ec>
 800a2b0:	00000000 	.word	0x00000000
 800a2b4:	bff00000 	.word	0xbff00000
 800a2b8:	00000000 	.word	0x00000000
 800a2bc:	3ff00000 	.word	0x3ff00000
 800a2c0:	94a03595 	.word	0x94a03595
 800a2c4:	3fdfffff 	.word	0x3fdfffff
 800a2c8:	35afe535 	.word	0x35afe535
 800a2cc:	3fe00000 	.word	0x3fe00000
 800a2d0:	ffc00000 	.word	0xffc00000
 800a2d4:	41dfffff 	.word	0x41dfffff
 800a2d8:	94a03595 	.word	0x94a03595
 800a2dc:	3fcfffff 	.word	0x3fcfffff
 800a2e0:	3ff00000 	.word	0x3ff00000
 800a2e4:	3fe00000 	.word	0x3fe00000
 800a2e8:	7ff00000 	.word	0x7ff00000
 800a2ec:	7fe00000 	.word	0x7fe00000
 800a2f0:	7c9fffff 	.word	0x7c9fffff
 800a2f4:	7fefffff 	.word	0x7fefffff

0800a2f8 <_strtod_r>:
 800a2f8:	4b01      	ldr	r3, [pc, #4]	; (800a300 <_strtod_r+0x8>)
 800a2fa:	f7ff ba0d 	b.w	8009718 <_strtod_l>
 800a2fe:	bf00      	nop
 800a300:	20000c6c 	.word	0x20000c6c

0800a304 <strtod>:
 800a304:	460a      	mov	r2, r1
 800a306:	4601      	mov	r1, r0
 800a308:	4802      	ldr	r0, [pc, #8]	; (800a314 <strtod+0x10>)
 800a30a:	4b03      	ldr	r3, [pc, #12]	; (800a318 <strtod+0x14>)
 800a30c:	6800      	ldr	r0, [r0, #0]
 800a30e:	f7ff ba03 	b.w	8009718 <_strtod_l>
 800a312:	bf00      	nop
 800a314:	20000e24 	.word	0x20000e24
 800a318:	20000c6c 	.word	0x20000c6c

0800a31c <__cvt>:
 800a31c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a320:	ec55 4b10 	vmov	r4, r5, d0
 800a324:	2d00      	cmp	r5, #0
 800a326:	460e      	mov	r6, r1
 800a328:	4619      	mov	r1, r3
 800a32a:	462b      	mov	r3, r5
 800a32c:	bfbb      	ittet	lt
 800a32e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a332:	461d      	movlt	r5, r3
 800a334:	2300      	movge	r3, #0
 800a336:	232d      	movlt	r3, #45	; 0x2d
 800a338:	700b      	strb	r3, [r1, #0]
 800a33a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a33c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a340:	4691      	mov	r9, r2
 800a342:	f023 0820 	bic.w	r8, r3, #32
 800a346:	bfbc      	itt	lt
 800a348:	4622      	movlt	r2, r4
 800a34a:	4614      	movlt	r4, r2
 800a34c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a350:	d005      	beq.n	800a35e <__cvt+0x42>
 800a352:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a356:	d100      	bne.n	800a35a <__cvt+0x3e>
 800a358:	3601      	adds	r6, #1
 800a35a:	2102      	movs	r1, #2
 800a35c:	e000      	b.n	800a360 <__cvt+0x44>
 800a35e:	2103      	movs	r1, #3
 800a360:	ab03      	add	r3, sp, #12
 800a362:	9301      	str	r3, [sp, #4]
 800a364:	ab02      	add	r3, sp, #8
 800a366:	9300      	str	r3, [sp, #0]
 800a368:	ec45 4b10 	vmov	d0, r4, r5
 800a36c:	4653      	mov	r3, sl
 800a36e:	4632      	mov	r2, r6
 800a370:	f001 f9ee 	bl	800b750 <_dtoa_r>
 800a374:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a378:	4607      	mov	r7, r0
 800a37a:	d102      	bne.n	800a382 <__cvt+0x66>
 800a37c:	f019 0f01 	tst.w	r9, #1
 800a380:	d022      	beq.n	800a3c8 <__cvt+0xac>
 800a382:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a386:	eb07 0906 	add.w	r9, r7, r6
 800a38a:	d110      	bne.n	800a3ae <__cvt+0x92>
 800a38c:	783b      	ldrb	r3, [r7, #0]
 800a38e:	2b30      	cmp	r3, #48	; 0x30
 800a390:	d10a      	bne.n	800a3a8 <__cvt+0x8c>
 800a392:	2200      	movs	r2, #0
 800a394:	2300      	movs	r3, #0
 800a396:	4620      	mov	r0, r4
 800a398:	4629      	mov	r1, r5
 800a39a:	f7f6 fbb5 	bl	8000b08 <__aeabi_dcmpeq>
 800a39e:	b918      	cbnz	r0, 800a3a8 <__cvt+0x8c>
 800a3a0:	f1c6 0601 	rsb	r6, r6, #1
 800a3a4:	f8ca 6000 	str.w	r6, [sl]
 800a3a8:	f8da 3000 	ldr.w	r3, [sl]
 800a3ac:	4499      	add	r9, r3
 800a3ae:	2200      	movs	r2, #0
 800a3b0:	2300      	movs	r3, #0
 800a3b2:	4620      	mov	r0, r4
 800a3b4:	4629      	mov	r1, r5
 800a3b6:	f7f6 fba7 	bl	8000b08 <__aeabi_dcmpeq>
 800a3ba:	b108      	cbz	r0, 800a3c0 <__cvt+0xa4>
 800a3bc:	f8cd 900c 	str.w	r9, [sp, #12]
 800a3c0:	2230      	movs	r2, #48	; 0x30
 800a3c2:	9b03      	ldr	r3, [sp, #12]
 800a3c4:	454b      	cmp	r3, r9
 800a3c6:	d307      	bcc.n	800a3d8 <__cvt+0xbc>
 800a3c8:	9b03      	ldr	r3, [sp, #12]
 800a3ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a3cc:	1bdb      	subs	r3, r3, r7
 800a3ce:	4638      	mov	r0, r7
 800a3d0:	6013      	str	r3, [r2, #0]
 800a3d2:	b004      	add	sp, #16
 800a3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3d8:	1c59      	adds	r1, r3, #1
 800a3da:	9103      	str	r1, [sp, #12]
 800a3dc:	701a      	strb	r2, [r3, #0]
 800a3de:	e7f0      	b.n	800a3c2 <__cvt+0xa6>

0800a3e0 <__exponent>:
 800a3e0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a3e2:	4603      	mov	r3, r0
 800a3e4:	2900      	cmp	r1, #0
 800a3e6:	bfb8      	it	lt
 800a3e8:	4249      	neglt	r1, r1
 800a3ea:	f803 2b02 	strb.w	r2, [r3], #2
 800a3ee:	bfb4      	ite	lt
 800a3f0:	222d      	movlt	r2, #45	; 0x2d
 800a3f2:	222b      	movge	r2, #43	; 0x2b
 800a3f4:	2909      	cmp	r1, #9
 800a3f6:	7042      	strb	r2, [r0, #1]
 800a3f8:	dd2a      	ble.n	800a450 <__exponent+0x70>
 800a3fa:	f10d 0207 	add.w	r2, sp, #7
 800a3fe:	4617      	mov	r7, r2
 800a400:	260a      	movs	r6, #10
 800a402:	4694      	mov	ip, r2
 800a404:	fb91 f5f6 	sdiv	r5, r1, r6
 800a408:	fb06 1415 	mls	r4, r6, r5, r1
 800a40c:	3430      	adds	r4, #48	; 0x30
 800a40e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a412:	460c      	mov	r4, r1
 800a414:	2c63      	cmp	r4, #99	; 0x63
 800a416:	f102 32ff 	add.w	r2, r2, #4294967295
 800a41a:	4629      	mov	r1, r5
 800a41c:	dcf1      	bgt.n	800a402 <__exponent+0x22>
 800a41e:	3130      	adds	r1, #48	; 0x30
 800a420:	f1ac 0402 	sub.w	r4, ip, #2
 800a424:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a428:	1c41      	adds	r1, r0, #1
 800a42a:	4622      	mov	r2, r4
 800a42c:	42ba      	cmp	r2, r7
 800a42e:	d30a      	bcc.n	800a446 <__exponent+0x66>
 800a430:	f10d 0209 	add.w	r2, sp, #9
 800a434:	eba2 020c 	sub.w	r2, r2, ip
 800a438:	42bc      	cmp	r4, r7
 800a43a:	bf88      	it	hi
 800a43c:	2200      	movhi	r2, #0
 800a43e:	4413      	add	r3, r2
 800a440:	1a18      	subs	r0, r3, r0
 800a442:	b003      	add	sp, #12
 800a444:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a446:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a44a:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a44e:	e7ed      	b.n	800a42c <__exponent+0x4c>
 800a450:	2330      	movs	r3, #48	; 0x30
 800a452:	3130      	adds	r1, #48	; 0x30
 800a454:	7083      	strb	r3, [r0, #2]
 800a456:	70c1      	strb	r1, [r0, #3]
 800a458:	1d03      	adds	r3, r0, #4
 800a45a:	e7f1      	b.n	800a440 <__exponent+0x60>

0800a45c <_printf_float>:
 800a45c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a460:	ed2d 8b02 	vpush	{d8}
 800a464:	b08d      	sub	sp, #52	; 0x34
 800a466:	460c      	mov	r4, r1
 800a468:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a46c:	4616      	mov	r6, r2
 800a46e:	461f      	mov	r7, r3
 800a470:	4605      	mov	r5, r0
 800a472:	f001 f83f 	bl	800b4f4 <_localeconv_r>
 800a476:	f8d0 a000 	ldr.w	sl, [r0]
 800a47a:	4650      	mov	r0, sl
 800a47c:	f7f5 ff18 	bl	80002b0 <strlen>
 800a480:	2300      	movs	r3, #0
 800a482:	930a      	str	r3, [sp, #40]	; 0x28
 800a484:	6823      	ldr	r3, [r4, #0]
 800a486:	9305      	str	r3, [sp, #20]
 800a488:	f8d8 3000 	ldr.w	r3, [r8]
 800a48c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a490:	3307      	adds	r3, #7
 800a492:	f023 0307 	bic.w	r3, r3, #7
 800a496:	f103 0208 	add.w	r2, r3, #8
 800a49a:	f8c8 2000 	str.w	r2, [r8]
 800a49e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4a2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a4a6:	9307      	str	r3, [sp, #28]
 800a4a8:	f8cd 8018 	str.w	r8, [sp, #24]
 800a4ac:	ee08 0a10 	vmov	s16, r0
 800a4b0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a4b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4b8:	4b9e      	ldr	r3, [pc, #632]	; (800a734 <_printf_float+0x2d8>)
 800a4ba:	f04f 32ff 	mov.w	r2, #4294967295
 800a4be:	f7f6 fb55 	bl	8000b6c <__aeabi_dcmpun>
 800a4c2:	bb88      	cbnz	r0, 800a528 <_printf_float+0xcc>
 800a4c4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a4c8:	4b9a      	ldr	r3, [pc, #616]	; (800a734 <_printf_float+0x2d8>)
 800a4ca:	f04f 32ff 	mov.w	r2, #4294967295
 800a4ce:	f7f6 fb2f 	bl	8000b30 <__aeabi_dcmple>
 800a4d2:	bb48      	cbnz	r0, 800a528 <_printf_float+0xcc>
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	2300      	movs	r3, #0
 800a4d8:	4640      	mov	r0, r8
 800a4da:	4649      	mov	r1, r9
 800a4dc:	f7f6 fb1e 	bl	8000b1c <__aeabi_dcmplt>
 800a4e0:	b110      	cbz	r0, 800a4e8 <_printf_float+0x8c>
 800a4e2:	232d      	movs	r3, #45	; 0x2d
 800a4e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a4e8:	4a93      	ldr	r2, [pc, #588]	; (800a738 <_printf_float+0x2dc>)
 800a4ea:	4b94      	ldr	r3, [pc, #592]	; (800a73c <_printf_float+0x2e0>)
 800a4ec:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a4f0:	bf94      	ite	ls
 800a4f2:	4690      	movls	r8, r2
 800a4f4:	4698      	movhi	r8, r3
 800a4f6:	2303      	movs	r3, #3
 800a4f8:	6123      	str	r3, [r4, #16]
 800a4fa:	9b05      	ldr	r3, [sp, #20]
 800a4fc:	f023 0304 	bic.w	r3, r3, #4
 800a500:	6023      	str	r3, [r4, #0]
 800a502:	f04f 0900 	mov.w	r9, #0
 800a506:	9700      	str	r7, [sp, #0]
 800a508:	4633      	mov	r3, r6
 800a50a:	aa0b      	add	r2, sp, #44	; 0x2c
 800a50c:	4621      	mov	r1, r4
 800a50e:	4628      	mov	r0, r5
 800a510:	f000 f9da 	bl	800a8c8 <_printf_common>
 800a514:	3001      	adds	r0, #1
 800a516:	f040 8090 	bne.w	800a63a <_printf_float+0x1de>
 800a51a:	f04f 30ff 	mov.w	r0, #4294967295
 800a51e:	b00d      	add	sp, #52	; 0x34
 800a520:	ecbd 8b02 	vpop	{d8}
 800a524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a528:	4642      	mov	r2, r8
 800a52a:	464b      	mov	r3, r9
 800a52c:	4640      	mov	r0, r8
 800a52e:	4649      	mov	r1, r9
 800a530:	f7f6 fb1c 	bl	8000b6c <__aeabi_dcmpun>
 800a534:	b140      	cbz	r0, 800a548 <_printf_float+0xec>
 800a536:	464b      	mov	r3, r9
 800a538:	2b00      	cmp	r3, #0
 800a53a:	bfbc      	itt	lt
 800a53c:	232d      	movlt	r3, #45	; 0x2d
 800a53e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a542:	4a7f      	ldr	r2, [pc, #508]	; (800a740 <_printf_float+0x2e4>)
 800a544:	4b7f      	ldr	r3, [pc, #508]	; (800a744 <_printf_float+0x2e8>)
 800a546:	e7d1      	b.n	800a4ec <_printf_float+0x90>
 800a548:	6863      	ldr	r3, [r4, #4]
 800a54a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a54e:	9206      	str	r2, [sp, #24]
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	d13f      	bne.n	800a5d4 <_printf_float+0x178>
 800a554:	2306      	movs	r3, #6
 800a556:	6063      	str	r3, [r4, #4]
 800a558:	9b05      	ldr	r3, [sp, #20]
 800a55a:	6861      	ldr	r1, [r4, #4]
 800a55c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a560:	2300      	movs	r3, #0
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	ab0a      	add	r3, sp, #40	; 0x28
 800a566:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a56a:	ab09      	add	r3, sp, #36	; 0x24
 800a56c:	ec49 8b10 	vmov	d0, r8, r9
 800a570:	9300      	str	r3, [sp, #0]
 800a572:	6022      	str	r2, [r4, #0]
 800a574:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a578:	4628      	mov	r0, r5
 800a57a:	f7ff fecf 	bl	800a31c <__cvt>
 800a57e:	9b06      	ldr	r3, [sp, #24]
 800a580:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a582:	2b47      	cmp	r3, #71	; 0x47
 800a584:	4680      	mov	r8, r0
 800a586:	d108      	bne.n	800a59a <_printf_float+0x13e>
 800a588:	1cc8      	adds	r0, r1, #3
 800a58a:	db02      	blt.n	800a592 <_printf_float+0x136>
 800a58c:	6863      	ldr	r3, [r4, #4]
 800a58e:	4299      	cmp	r1, r3
 800a590:	dd41      	ble.n	800a616 <_printf_float+0x1ba>
 800a592:	f1ab 0302 	sub.w	r3, fp, #2
 800a596:	fa5f fb83 	uxtb.w	fp, r3
 800a59a:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a59e:	d820      	bhi.n	800a5e2 <_printf_float+0x186>
 800a5a0:	3901      	subs	r1, #1
 800a5a2:	465a      	mov	r2, fp
 800a5a4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a5a8:	9109      	str	r1, [sp, #36]	; 0x24
 800a5aa:	f7ff ff19 	bl	800a3e0 <__exponent>
 800a5ae:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a5b0:	1813      	adds	r3, r2, r0
 800a5b2:	2a01      	cmp	r2, #1
 800a5b4:	4681      	mov	r9, r0
 800a5b6:	6123      	str	r3, [r4, #16]
 800a5b8:	dc02      	bgt.n	800a5c0 <_printf_float+0x164>
 800a5ba:	6822      	ldr	r2, [r4, #0]
 800a5bc:	07d2      	lsls	r2, r2, #31
 800a5be:	d501      	bpl.n	800a5c4 <_printf_float+0x168>
 800a5c0:	3301      	adds	r3, #1
 800a5c2:	6123      	str	r3, [r4, #16]
 800a5c4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d09c      	beq.n	800a506 <_printf_float+0xaa>
 800a5cc:	232d      	movs	r3, #45	; 0x2d
 800a5ce:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5d2:	e798      	b.n	800a506 <_printf_float+0xaa>
 800a5d4:	9a06      	ldr	r2, [sp, #24]
 800a5d6:	2a47      	cmp	r2, #71	; 0x47
 800a5d8:	d1be      	bne.n	800a558 <_printf_float+0xfc>
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1bc      	bne.n	800a558 <_printf_float+0xfc>
 800a5de:	2301      	movs	r3, #1
 800a5e0:	e7b9      	b.n	800a556 <_printf_float+0xfa>
 800a5e2:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a5e6:	d118      	bne.n	800a61a <_printf_float+0x1be>
 800a5e8:	2900      	cmp	r1, #0
 800a5ea:	6863      	ldr	r3, [r4, #4]
 800a5ec:	dd0b      	ble.n	800a606 <_printf_float+0x1aa>
 800a5ee:	6121      	str	r1, [r4, #16]
 800a5f0:	b913      	cbnz	r3, 800a5f8 <_printf_float+0x19c>
 800a5f2:	6822      	ldr	r2, [r4, #0]
 800a5f4:	07d0      	lsls	r0, r2, #31
 800a5f6:	d502      	bpl.n	800a5fe <_printf_float+0x1a2>
 800a5f8:	3301      	adds	r3, #1
 800a5fa:	440b      	add	r3, r1
 800a5fc:	6123      	str	r3, [r4, #16]
 800a5fe:	65a1      	str	r1, [r4, #88]	; 0x58
 800a600:	f04f 0900 	mov.w	r9, #0
 800a604:	e7de      	b.n	800a5c4 <_printf_float+0x168>
 800a606:	b913      	cbnz	r3, 800a60e <_printf_float+0x1b2>
 800a608:	6822      	ldr	r2, [r4, #0]
 800a60a:	07d2      	lsls	r2, r2, #31
 800a60c:	d501      	bpl.n	800a612 <_printf_float+0x1b6>
 800a60e:	3302      	adds	r3, #2
 800a610:	e7f4      	b.n	800a5fc <_printf_float+0x1a0>
 800a612:	2301      	movs	r3, #1
 800a614:	e7f2      	b.n	800a5fc <_printf_float+0x1a0>
 800a616:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a61a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a61c:	4299      	cmp	r1, r3
 800a61e:	db05      	blt.n	800a62c <_printf_float+0x1d0>
 800a620:	6823      	ldr	r3, [r4, #0]
 800a622:	6121      	str	r1, [r4, #16]
 800a624:	07d8      	lsls	r0, r3, #31
 800a626:	d5ea      	bpl.n	800a5fe <_printf_float+0x1a2>
 800a628:	1c4b      	adds	r3, r1, #1
 800a62a:	e7e7      	b.n	800a5fc <_printf_float+0x1a0>
 800a62c:	2900      	cmp	r1, #0
 800a62e:	bfd4      	ite	le
 800a630:	f1c1 0202 	rsble	r2, r1, #2
 800a634:	2201      	movgt	r2, #1
 800a636:	4413      	add	r3, r2
 800a638:	e7e0      	b.n	800a5fc <_printf_float+0x1a0>
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	055a      	lsls	r2, r3, #21
 800a63e:	d407      	bmi.n	800a650 <_printf_float+0x1f4>
 800a640:	6923      	ldr	r3, [r4, #16]
 800a642:	4642      	mov	r2, r8
 800a644:	4631      	mov	r1, r6
 800a646:	4628      	mov	r0, r5
 800a648:	47b8      	blx	r7
 800a64a:	3001      	adds	r0, #1
 800a64c:	d12c      	bne.n	800a6a8 <_printf_float+0x24c>
 800a64e:	e764      	b.n	800a51a <_printf_float+0xbe>
 800a650:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a654:	f240 80e0 	bls.w	800a818 <_printf_float+0x3bc>
 800a658:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a65c:	2200      	movs	r2, #0
 800a65e:	2300      	movs	r3, #0
 800a660:	f7f6 fa52 	bl	8000b08 <__aeabi_dcmpeq>
 800a664:	2800      	cmp	r0, #0
 800a666:	d034      	beq.n	800a6d2 <_printf_float+0x276>
 800a668:	4a37      	ldr	r2, [pc, #220]	; (800a748 <_printf_float+0x2ec>)
 800a66a:	2301      	movs	r3, #1
 800a66c:	4631      	mov	r1, r6
 800a66e:	4628      	mov	r0, r5
 800a670:	47b8      	blx	r7
 800a672:	3001      	adds	r0, #1
 800a674:	f43f af51 	beq.w	800a51a <_printf_float+0xbe>
 800a678:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a67c:	429a      	cmp	r2, r3
 800a67e:	db02      	blt.n	800a686 <_printf_float+0x22a>
 800a680:	6823      	ldr	r3, [r4, #0]
 800a682:	07d8      	lsls	r0, r3, #31
 800a684:	d510      	bpl.n	800a6a8 <_printf_float+0x24c>
 800a686:	ee18 3a10 	vmov	r3, s16
 800a68a:	4652      	mov	r2, sl
 800a68c:	4631      	mov	r1, r6
 800a68e:	4628      	mov	r0, r5
 800a690:	47b8      	blx	r7
 800a692:	3001      	adds	r0, #1
 800a694:	f43f af41 	beq.w	800a51a <_printf_float+0xbe>
 800a698:	f04f 0800 	mov.w	r8, #0
 800a69c:	f104 091a 	add.w	r9, r4, #26
 800a6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a6a2:	3b01      	subs	r3, #1
 800a6a4:	4543      	cmp	r3, r8
 800a6a6:	dc09      	bgt.n	800a6bc <_printf_float+0x260>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	079b      	lsls	r3, r3, #30
 800a6ac:	f100 8107 	bmi.w	800a8be <_printf_float+0x462>
 800a6b0:	68e0      	ldr	r0, [r4, #12]
 800a6b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a6b4:	4298      	cmp	r0, r3
 800a6b6:	bfb8      	it	lt
 800a6b8:	4618      	movlt	r0, r3
 800a6ba:	e730      	b.n	800a51e <_printf_float+0xc2>
 800a6bc:	2301      	movs	r3, #1
 800a6be:	464a      	mov	r2, r9
 800a6c0:	4631      	mov	r1, r6
 800a6c2:	4628      	mov	r0, r5
 800a6c4:	47b8      	blx	r7
 800a6c6:	3001      	adds	r0, #1
 800a6c8:	f43f af27 	beq.w	800a51a <_printf_float+0xbe>
 800a6cc:	f108 0801 	add.w	r8, r8, #1
 800a6d0:	e7e6      	b.n	800a6a0 <_printf_float+0x244>
 800a6d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dc39      	bgt.n	800a74c <_printf_float+0x2f0>
 800a6d8:	4a1b      	ldr	r2, [pc, #108]	; (800a748 <_printf_float+0x2ec>)
 800a6da:	2301      	movs	r3, #1
 800a6dc:	4631      	mov	r1, r6
 800a6de:	4628      	mov	r0, r5
 800a6e0:	47b8      	blx	r7
 800a6e2:	3001      	adds	r0, #1
 800a6e4:	f43f af19 	beq.w	800a51a <_printf_float+0xbe>
 800a6e8:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a6ec:	4313      	orrs	r3, r2
 800a6ee:	d102      	bne.n	800a6f6 <_printf_float+0x29a>
 800a6f0:	6823      	ldr	r3, [r4, #0]
 800a6f2:	07d9      	lsls	r1, r3, #31
 800a6f4:	d5d8      	bpl.n	800a6a8 <_printf_float+0x24c>
 800a6f6:	ee18 3a10 	vmov	r3, s16
 800a6fa:	4652      	mov	r2, sl
 800a6fc:	4631      	mov	r1, r6
 800a6fe:	4628      	mov	r0, r5
 800a700:	47b8      	blx	r7
 800a702:	3001      	adds	r0, #1
 800a704:	f43f af09 	beq.w	800a51a <_printf_float+0xbe>
 800a708:	f04f 0900 	mov.w	r9, #0
 800a70c:	f104 0a1a 	add.w	sl, r4, #26
 800a710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a712:	425b      	negs	r3, r3
 800a714:	454b      	cmp	r3, r9
 800a716:	dc01      	bgt.n	800a71c <_printf_float+0x2c0>
 800a718:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a71a:	e792      	b.n	800a642 <_printf_float+0x1e6>
 800a71c:	2301      	movs	r3, #1
 800a71e:	4652      	mov	r2, sl
 800a720:	4631      	mov	r1, r6
 800a722:	4628      	mov	r0, r5
 800a724:	47b8      	blx	r7
 800a726:	3001      	adds	r0, #1
 800a728:	f43f aef7 	beq.w	800a51a <_printf_float+0xbe>
 800a72c:	f109 0901 	add.w	r9, r9, #1
 800a730:	e7ee      	b.n	800a710 <_printf_float+0x2b4>
 800a732:	bf00      	nop
 800a734:	7fefffff 	.word	0x7fefffff
 800a738:	08045b50 	.word	0x08045b50
 800a73c:	08045b54 	.word	0x08045b54
 800a740:	08045b58 	.word	0x08045b58
 800a744:	08045b5c 	.word	0x08045b5c
 800a748:	08045b60 	.word	0x08045b60
 800a74c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a74e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a750:	429a      	cmp	r2, r3
 800a752:	bfa8      	it	ge
 800a754:	461a      	movge	r2, r3
 800a756:	2a00      	cmp	r2, #0
 800a758:	4691      	mov	r9, r2
 800a75a:	dc37      	bgt.n	800a7cc <_printf_float+0x370>
 800a75c:	f04f 0b00 	mov.w	fp, #0
 800a760:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a764:	f104 021a 	add.w	r2, r4, #26
 800a768:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a76a:	9305      	str	r3, [sp, #20]
 800a76c:	eba3 0309 	sub.w	r3, r3, r9
 800a770:	455b      	cmp	r3, fp
 800a772:	dc33      	bgt.n	800a7dc <_printf_float+0x380>
 800a774:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a778:	429a      	cmp	r2, r3
 800a77a:	db3b      	blt.n	800a7f4 <_printf_float+0x398>
 800a77c:	6823      	ldr	r3, [r4, #0]
 800a77e:	07da      	lsls	r2, r3, #31
 800a780:	d438      	bmi.n	800a7f4 <_printf_float+0x398>
 800a782:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a786:	eba2 0903 	sub.w	r9, r2, r3
 800a78a:	9b05      	ldr	r3, [sp, #20]
 800a78c:	1ad2      	subs	r2, r2, r3
 800a78e:	4591      	cmp	r9, r2
 800a790:	bfa8      	it	ge
 800a792:	4691      	movge	r9, r2
 800a794:	f1b9 0f00 	cmp.w	r9, #0
 800a798:	dc35      	bgt.n	800a806 <_printf_float+0x3aa>
 800a79a:	f04f 0800 	mov.w	r8, #0
 800a79e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7a2:	f104 0a1a 	add.w	sl, r4, #26
 800a7a6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7aa:	1a9b      	subs	r3, r3, r2
 800a7ac:	eba3 0309 	sub.w	r3, r3, r9
 800a7b0:	4543      	cmp	r3, r8
 800a7b2:	f77f af79 	ble.w	800a6a8 <_printf_float+0x24c>
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4652      	mov	r2, sl
 800a7ba:	4631      	mov	r1, r6
 800a7bc:	4628      	mov	r0, r5
 800a7be:	47b8      	blx	r7
 800a7c0:	3001      	adds	r0, #1
 800a7c2:	f43f aeaa 	beq.w	800a51a <_printf_float+0xbe>
 800a7c6:	f108 0801 	add.w	r8, r8, #1
 800a7ca:	e7ec      	b.n	800a7a6 <_printf_float+0x34a>
 800a7cc:	4613      	mov	r3, r2
 800a7ce:	4631      	mov	r1, r6
 800a7d0:	4642      	mov	r2, r8
 800a7d2:	4628      	mov	r0, r5
 800a7d4:	47b8      	blx	r7
 800a7d6:	3001      	adds	r0, #1
 800a7d8:	d1c0      	bne.n	800a75c <_printf_float+0x300>
 800a7da:	e69e      	b.n	800a51a <_printf_float+0xbe>
 800a7dc:	2301      	movs	r3, #1
 800a7de:	4631      	mov	r1, r6
 800a7e0:	4628      	mov	r0, r5
 800a7e2:	9205      	str	r2, [sp, #20]
 800a7e4:	47b8      	blx	r7
 800a7e6:	3001      	adds	r0, #1
 800a7e8:	f43f ae97 	beq.w	800a51a <_printf_float+0xbe>
 800a7ec:	9a05      	ldr	r2, [sp, #20]
 800a7ee:	f10b 0b01 	add.w	fp, fp, #1
 800a7f2:	e7b9      	b.n	800a768 <_printf_float+0x30c>
 800a7f4:	ee18 3a10 	vmov	r3, s16
 800a7f8:	4652      	mov	r2, sl
 800a7fa:	4631      	mov	r1, r6
 800a7fc:	4628      	mov	r0, r5
 800a7fe:	47b8      	blx	r7
 800a800:	3001      	adds	r0, #1
 800a802:	d1be      	bne.n	800a782 <_printf_float+0x326>
 800a804:	e689      	b.n	800a51a <_printf_float+0xbe>
 800a806:	9a05      	ldr	r2, [sp, #20]
 800a808:	464b      	mov	r3, r9
 800a80a:	4442      	add	r2, r8
 800a80c:	4631      	mov	r1, r6
 800a80e:	4628      	mov	r0, r5
 800a810:	47b8      	blx	r7
 800a812:	3001      	adds	r0, #1
 800a814:	d1c1      	bne.n	800a79a <_printf_float+0x33e>
 800a816:	e680      	b.n	800a51a <_printf_float+0xbe>
 800a818:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a81a:	2a01      	cmp	r2, #1
 800a81c:	dc01      	bgt.n	800a822 <_printf_float+0x3c6>
 800a81e:	07db      	lsls	r3, r3, #31
 800a820:	d53a      	bpl.n	800a898 <_printf_float+0x43c>
 800a822:	2301      	movs	r3, #1
 800a824:	4642      	mov	r2, r8
 800a826:	4631      	mov	r1, r6
 800a828:	4628      	mov	r0, r5
 800a82a:	47b8      	blx	r7
 800a82c:	3001      	adds	r0, #1
 800a82e:	f43f ae74 	beq.w	800a51a <_printf_float+0xbe>
 800a832:	ee18 3a10 	vmov	r3, s16
 800a836:	4652      	mov	r2, sl
 800a838:	4631      	mov	r1, r6
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	f43f ae6b 	beq.w	800a51a <_printf_float+0xbe>
 800a844:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a848:	2200      	movs	r2, #0
 800a84a:	2300      	movs	r3, #0
 800a84c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a850:	f7f6 f95a 	bl	8000b08 <__aeabi_dcmpeq>
 800a854:	b9d8      	cbnz	r0, 800a88e <_printf_float+0x432>
 800a856:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a85a:	f108 0201 	add.w	r2, r8, #1
 800a85e:	4631      	mov	r1, r6
 800a860:	4628      	mov	r0, r5
 800a862:	47b8      	blx	r7
 800a864:	3001      	adds	r0, #1
 800a866:	d10e      	bne.n	800a886 <_printf_float+0x42a>
 800a868:	e657      	b.n	800a51a <_printf_float+0xbe>
 800a86a:	2301      	movs	r3, #1
 800a86c:	4652      	mov	r2, sl
 800a86e:	4631      	mov	r1, r6
 800a870:	4628      	mov	r0, r5
 800a872:	47b8      	blx	r7
 800a874:	3001      	adds	r0, #1
 800a876:	f43f ae50 	beq.w	800a51a <_printf_float+0xbe>
 800a87a:	f108 0801 	add.w	r8, r8, #1
 800a87e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a880:	3b01      	subs	r3, #1
 800a882:	4543      	cmp	r3, r8
 800a884:	dcf1      	bgt.n	800a86a <_printf_float+0x40e>
 800a886:	464b      	mov	r3, r9
 800a888:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a88c:	e6da      	b.n	800a644 <_printf_float+0x1e8>
 800a88e:	f04f 0800 	mov.w	r8, #0
 800a892:	f104 0a1a 	add.w	sl, r4, #26
 800a896:	e7f2      	b.n	800a87e <_printf_float+0x422>
 800a898:	2301      	movs	r3, #1
 800a89a:	4642      	mov	r2, r8
 800a89c:	e7df      	b.n	800a85e <_printf_float+0x402>
 800a89e:	2301      	movs	r3, #1
 800a8a0:	464a      	mov	r2, r9
 800a8a2:	4631      	mov	r1, r6
 800a8a4:	4628      	mov	r0, r5
 800a8a6:	47b8      	blx	r7
 800a8a8:	3001      	adds	r0, #1
 800a8aa:	f43f ae36 	beq.w	800a51a <_printf_float+0xbe>
 800a8ae:	f108 0801 	add.w	r8, r8, #1
 800a8b2:	68e3      	ldr	r3, [r4, #12]
 800a8b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a8b6:	1a5b      	subs	r3, r3, r1
 800a8b8:	4543      	cmp	r3, r8
 800a8ba:	dcf0      	bgt.n	800a89e <_printf_float+0x442>
 800a8bc:	e6f8      	b.n	800a6b0 <_printf_float+0x254>
 800a8be:	f04f 0800 	mov.w	r8, #0
 800a8c2:	f104 0919 	add.w	r9, r4, #25
 800a8c6:	e7f4      	b.n	800a8b2 <_printf_float+0x456>

0800a8c8 <_printf_common>:
 800a8c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a8cc:	4616      	mov	r6, r2
 800a8ce:	4699      	mov	r9, r3
 800a8d0:	688a      	ldr	r2, [r1, #8]
 800a8d2:	690b      	ldr	r3, [r1, #16]
 800a8d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a8d8:	4293      	cmp	r3, r2
 800a8da:	bfb8      	it	lt
 800a8dc:	4613      	movlt	r3, r2
 800a8de:	6033      	str	r3, [r6, #0]
 800a8e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a8e4:	4607      	mov	r7, r0
 800a8e6:	460c      	mov	r4, r1
 800a8e8:	b10a      	cbz	r2, 800a8ee <_printf_common+0x26>
 800a8ea:	3301      	adds	r3, #1
 800a8ec:	6033      	str	r3, [r6, #0]
 800a8ee:	6823      	ldr	r3, [r4, #0]
 800a8f0:	0699      	lsls	r1, r3, #26
 800a8f2:	bf42      	ittt	mi
 800a8f4:	6833      	ldrmi	r3, [r6, #0]
 800a8f6:	3302      	addmi	r3, #2
 800a8f8:	6033      	strmi	r3, [r6, #0]
 800a8fa:	6825      	ldr	r5, [r4, #0]
 800a8fc:	f015 0506 	ands.w	r5, r5, #6
 800a900:	d106      	bne.n	800a910 <_printf_common+0x48>
 800a902:	f104 0a19 	add.w	sl, r4, #25
 800a906:	68e3      	ldr	r3, [r4, #12]
 800a908:	6832      	ldr	r2, [r6, #0]
 800a90a:	1a9b      	subs	r3, r3, r2
 800a90c:	42ab      	cmp	r3, r5
 800a90e:	dc26      	bgt.n	800a95e <_printf_common+0x96>
 800a910:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a914:	1e13      	subs	r3, r2, #0
 800a916:	6822      	ldr	r2, [r4, #0]
 800a918:	bf18      	it	ne
 800a91a:	2301      	movne	r3, #1
 800a91c:	0692      	lsls	r2, r2, #26
 800a91e:	d42b      	bmi.n	800a978 <_printf_common+0xb0>
 800a920:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a924:	4649      	mov	r1, r9
 800a926:	4638      	mov	r0, r7
 800a928:	47c0      	blx	r8
 800a92a:	3001      	adds	r0, #1
 800a92c:	d01e      	beq.n	800a96c <_printf_common+0xa4>
 800a92e:	6823      	ldr	r3, [r4, #0]
 800a930:	6922      	ldr	r2, [r4, #16]
 800a932:	f003 0306 	and.w	r3, r3, #6
 800a936:	2b04      	cmp	r3, #4
 800a938:	bf02      	ittt	eq
 800a93a:	68e5      	ldreq	r5, [r4, #12]
 800a93c:	6833      	ldreq	r3, [r6, #0]
 800a93e:	1aed      	subeq	r5, r5, r3
 800a940:	68a3      	ldr	r3, [r4, #8]
 800a942:	bf0c      	ite	eq
 800a944:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a948:	2500      	movne	r5, #0
 800a94a:	4293      	cmp	r3, r2
 800a94c:	bfc4      	itt	gt
 800a94e:	1a9b      	subgt	r3, r3, r2
 800a950:	18ed      	addgt	r5, r5, r3
 800a952:	2600      	movs	r6, #0
 800a954:	341a      	adds	r4, #26
 800a956:	42b5      	cmp	r5, r6
 800a958:	d11a      	bne.n	800a990 <_printf_common+0xc8>
 800a95a:	2000      	movs	r0, #0
 800a95c:	e008      	b.n	800a970 <_printf_common+0xa8>
 800a95e:	2301      	movs	r3, #1
 800a960:	4652      	mov	r2, sl
 800a962:	4649      	mov	r1, r9
 800a964:	4638      	mov	r0, r7
 800a966:	47c0      	blx	r8
 800a968:	3001      	adds	r0, #1
 800a96a:	d103      	bne.n	800a974 <_printf_common+0xac>
 800a96c:	f04f 30ff 	mov.w	r0, #4294967295
 800a970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a974:	3501      	adds	r5, #1
 800a976:	e7c6      	b.n	800a906 <_printf_common+0x3e>
 800a978:	18e1      	adds	r1, r4, r3
 800a97a:	1c5a      	adds	r2, r3, #1
 800a97c:	2030      	movs	r0, #48	; 0x30
 800a97e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a982:	4422      	add	r2, r4
 800a984:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a988:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a98c:	3302      	adds	r3, #2
 800a98e:	e7c7      	b.n	800a920 <_printf_common+0x58>
 800a990:	2301      	movs	r3, #1
 800a992:	4622      	mov	r2, r4
 800a994:	4649      	mov	r1, r9
 800a996:	4638      	mov	r0, r7
 800a998:	47c0      	blx	r8
 800a99a:	3001      	adds	r0, #1
 800a99c:	d0e6      	beq.n	800a96c <_printf_common+0xa4>
 800a99e:	3601      	adds	r6, #1
 800a9a0:	e7d9      	b.n	800a956 <_printf_common+0x8e>
	...

0800a9a4 <_printf_i>:
 800a9a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a9a8:	7e0f      	ldrb	r7, [r1, #24]
 800a9aa:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a9ac:	2f78      	cmp	r7, #120	; 0x78
 800a9ae:	4691      	mov	r9, r2
 800a9b0:	4680      	mov	r8, r0
 800a9b2:	460c      	mov	r4, r1
 800a9b4:	469a      	mov	sl, r3
 800a9b6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a9ba:	d807      	bhi.n	800a9cc <_printf_i+0x28>
 800a9bc:	2f62      	cmp	r7, #98	; 0x62
 800a9be:	d80a      	bhi.n	800a9d6 <_printf_i+0x32>
 800a9c0:	2f00      	cmp	r7, #0
 800a9c2:	f000 80d4 	beq.w	800ab6e <_printf_i+0x1ca>
 800a9c6:	2f58      	cmp	r7, #88	; 0x58
 800a9c8:	f000 80c0 	beq.w	800ab4c <_printf_i+0x1a8>
 800a9cc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a9d0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a9d4:	e03a      	b.n	800aa4c <_printf_i+0xa8>
 800a9d6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a9da:	2b15      	cmp	r3, #21
 800a9dc:	d8f6      	bhi.n	800a9cc <_printf_i+0x28>
 800a9de:	a101      	add	r1, pc, #4	; (adr r1, 800a9e4 <_printf_i+0x40>)
 800a9e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a9e4:	0800aa3d 	.word	0x0800aa3d
 800a9e8:	0800aa51 	.word	0x0800aa51
 800a9ec:	0800a9cd 	.word	0x0800a9cd
 800a9f0:	0800a9cd 	.word	0x0800a9cd
 800a9f4:	0800a9cd 	.word	0x0800a9cd
 800a9f8:	0800a9cd 	.word	0x0800a9cd
 800a9fc:	0800aa51 	.word	0x0800aa51
 800aa00:	0800a9cd 	.word	0x0800a9cd
 800aa04:	0800a9cd 	.word	0x0800a9cd
 800aa08:	0800a9cd 	.word	0x0800a9cd
 800aa0c:	0800a9cd 	.word	0x0800a9cd
 800aa10:	0800ab55 	.word	0x0800ab55
 800aa14:	0800aa7d 	.word	0x0800aa7d
 800aa18:	0800ab0f 	.word	0x0800ab0f
 800aa1c:	0800a9cd 	.word	0x0800a9cd
 800aa20:	0800a9cd 	.word	0x0800a9cd
 800aa24:	0800ab77 	.word	0x0800ab77
 800aa28:	0800a9cd 	.word	0x0800a9cd
 800aa2c:	0800aa7d 	.word	0x0800aa7d
 800aa30:	0800a9cd 	.word	0x0800a9cd
 800aa34:	0800a9cd 	.word	0x0800a9cd
 800aa38:	0800ab17 	.word	0x0800ab17
 800aa3c:	682b      	ldr	r3, [r5, #0]
 800aa3e:	1d1a      	adds	r2, r3, #4
 800aa40:	681b      	ldr	r3, [r3, #0]
 800aa42:	602a      	str	r2, [r5, #0]
 800aa44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aa4c:	2301      	movs	r3, #1
 800aa4e:	e09f      	b.n	800ab90 <_printf_i+0x1ec>
 800aa50:	6820      	ldr	r0, [r4, #0]
 800aa52:	682b      	ldr	r3, [r5, #0]
 800aa54:	0607      	lsls	r7, r0, #24
 800aa56:	f103 0104 	add.w	r1, r3, #4
 800aa5a:	6029      	str	r1, [r5, #0]
 800aa5c:	d501      	bpl.n	800aa62 <_printf_i+0xbe>
 800aa5e:	681e      	ldr	r6, [r3, #0]
 800aa60:	e003      	b.n	800aa6a <_printf_i+0xc6>
 800aa62:	0646      	lsls	r6, r0, #25
 800aa64:	d5fb      	bpl.n	800aa5e <_printf_i+0xba>
 800aa66:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aa6a:	2e00      	cmp	r6, #0
 800aa6c:	da03      	bge.n	800aa76 <_printf_i+0xd2>
 800aa6e:	232d      	movs	r3, #45	; 0x2d
 800aa70:	4276      	negs	r6, r6
 800aa72:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aa76:	485a      	ldr	r0, [pc, #360]	; (800abe0 <_printf_i+0x23c>)
 800aa78:	230a      	movs	r3, #10
 800aa7a:	e012      	b.n	800aaa2 <_printf_i+0xfe>
 800aa7c:	682b      	ldr	r3, [r5, #0]
 800aa7e:	6820      	ldr	r0, [r4, #0]
 800aa80:	1d19      	adds	r1, r3, #4
 800aa82:	6029      	str	r1, [r5, #0]
 800aa84:	0605      	lsls	r5, r0, #24
 800aa86:	d501      	bpl.n	800aa8c <_printf_i+0xe8>
 800aa88:	681e      	ldr	r6, [r3, #0]
 800aa8a:	e002      	b.n	800aa92 <_printf_i+0xee>
 800aa8c:	0641      	lsls	r1, r0, #25
 800aa8e:	d5fb      	bpl.n	800aa88 <_printf_i+0xe4>
 800aa90:	881e      	ldrh	r6, [r3, #0]
 800aa92:	4853      	ldr	r0, [pc, #332]	; (800abe0 <_printf_i+0x23c>)
 800aa94:	2f6f      	cmp	r7, #111	; 0x6f
 800aa96:	bf0c      	ite	eq
 800aa98:	2308      	moveq	r3, #8
 800aa9a:	230a      	movne	r3, #10
 800aa9c:	2100      	movs	r1, #0
 800aa9e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800aaa2:	6865      	ldr	r5, [r4, #4]
 800aaa4:	60a5      	str	r5, [r4, #8]
 800aaa6:	2d00      	cmp	r5, #0
 800aaa8:	bfa2      	ittt	ge
 800aaaa:	6821      	ldrge	r1, [r4, #0]
 800aaac:	f021 0104 	bicge.w	r1, r1, #4
 800aab0:	6021      	strge	r1, [r4, #0]
 800aab2:	b90e      	cbnz	r6, 800aab8 <_printf_i+0x114>
 800aab4:	2d00      	cmp	r5, #0
 800aab6:	d04b      	beq.n	800ab50 <_printf_i+0x1ac>
 800aab8:	4615      	mov	r5, r2
 800aaba:	fbb6 f1f3 	udiv	r1, r6, r3
 800aabe:	fb03 6711 	mls	r7, r3, r1, r6
 800aac2:	5dc7      	ldrb	r7, [r0, r7]
 800aac4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800aac8:	4637      	mov	r7, r6
 800aaca:	42bb      	cmp	r3, r7
 800aacc:	460e      	mov	r6, r1
 800aace:	d9f4      	bls.n	800aaba <_printf_i+0x116>
 800aad0:	2b08      	cmp	r3, #8
 800aad2:	d10b      	bne.n	800aaec <_printf_i+0x148>
 800aad4:	6823      	ldr	r3, [r4, #0]
 800aad6:	07de      	lsls	r6, r3, #31
 800aad8:	d508      	bpl.n	800aaec <_printf_i+0x148>
 800aada:	6923      	ldr	r3, [r4, #16]
 800aadc:	6861      	ldr	r1, [r4, #4]
 800aade:	4299      	cmp	r1, r3
 800aae0:	bfde      	ittt	le
 800aae2:	2330      	movle	r3, #48	; 0x30
 800aae4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800aae8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800aaec:	1b52      	subs	r2, r2, r5
 800aaee:	6122      	str	r2, [r4, #16]
 800aaf0:	f8cd a000 	str.w	sl, [sp]
 800aaf4:	464b      	mov	r3, r9
 800aaf6:	aa03      	add	r2, sp, #12
 800aaf8:	4621      	mov	r1, r4
 800aafa:	4640      	mov	r0, r8
 800aafc:	f7ff fee4 	bl	800a8c8 <_printf_common>
 800ab00:	3001      	adds	r0, #1
 800ab02:	d14a      	bne.n	800ab9a <_printf_i+0x1f6>
 800ab04:	f04f 30ff 	mov.w	r0, #4294967295
 800ab08:	b004      	add	sp, #16
 800ab0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab0e:	6823      	ldr	r3, [r4, #0]
 800ab10:	f043 0320 	orr.w	r3, r3, #32
 800ab14:	6023      	str	r3, [r4, #0]
 800ab16:	4833      	ldr	r0, [pc, #204]	; (800abe4 <_printf_i+0x240>)
 800ab18:	2778      	movs	r7, #120	; 0x78
 800ab1a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab1e:	6823      	ldr	r3, [r4, #0]
 800ab20:	6829      	ldr	r1, [r5, #0]
 800ab22:	061f      	lsls	r7, r3, #24
 800ab24:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab28:	d402      	bmi.n	800ab30 <_printf_i+0x18c>
 800ab2a:	065f      	lsls	r7, r3, #25
 800ab2c:	bf48      	it	mi
 800ab2e:	b2b6      	uxthmi	r6, r6
 800ab30:	07df      	lsls	r7, r3, #31
 800ab32:	bf48      	it	mi
 800ab34:	f043 0320 	orrmi.w	r3, r3, #32
 800ab38:	6029      	str	r1, [r5, #0]
 800ab3a:	bf48      	it	mi
 800ab3c:	6023      	strmi	r3, [r4, #0]
 800ab3e:	b91e      	cbnz	r6, 800ab48 <_printf_i+0x1a4>
 800ab40:	6823      	ldr	r3, [r4, #0]
 800ab42:	f023 0320 	bic.w	r3, r3, #32
 800ab46:	6023      	str	r3, [r4, #0]
 800ab48:	2310      	movs	r3, #16
 800ab4a:	e7a7      	b.n	800aa9c <_printf_i+0xf8>
 800ab4c:	4824      	ldr	r0, [pc, #144]	; (800abe0 <_printf_i+0x23c>)
 800ab4e:	e7e4      	b.n	800ab1a <_printf_i+0x176>
 800ab50:	4615      	mov	r5, r2
 800ab52:	e7bd      	b.n	800aad0 <_printf_i+0x12c>
 800ab54:	682b      	ldr	r3, [r5, #0]
 800ab56:	6826      	ldr	r6, [r4, #0]
 800ab58:	6961      	ldr	r1, [r4, #20]
 800ab5a:	1d18      	adds	r0, r3, #4
 800ab5c:	6028      	str	r0, [r5, #0]
 800ab5e:	0635      	lsls	r5, r6, #24
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	d501      	bpl.n	800ab68 <_printf_i+0x1c4>
 800ab64:	6019      	str	r1, [r3, #0]
 800ab66:	e002      	b.n	800ab6e <_printf_i+0x1ca>
 800ab68:	0670      	lsls	r0, r6, #25
 800ab6a:	d5fb      	bpl.n	800ab64 <_printf_i+0x1c0>
 800ab6c:	8019      	strh	r1, [r3, #0]
 800ab6e:	2300      	movs	r3, #0
 800ab70:	6123      	str	r3, [r4, #16]
 800ab72:	4615      	mov	r5, r2
 800ab74:	e7bc      	b.n	800aaf0 <_printf_i+0x14c>
 800ab76:	682b      	ldr	r3, [r5, #0]
 800ab78:	1d1a      	adds	r2, r3, #4
 800ab7a:	602a      	str	r2, [r5, #0]
 800ab7c:	681d      	ldr	r5, [r3, #0]
 800ab7e:	6862      	ldr	r2, [r4, #4]
 800ab80:	2100      	movs	r1, #0
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7f5 fb44 	bl	8000210 <memchr>
 800ab88:	b108      	cbz	r0, 800ab8e <_printf_i+0x1ea>
 800ab8a:	1b40      	subs	r0, r0, r5
 800ab8c:	6060      	str	r0, [r4, #4]
 800ab8e:	6863      	ldr	r3, [r4, #4]
 800ab90:	6123      	str	r3, [r4, #16]
 800ab92:	2300      	movs	r3, #0
 800ab94:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ab98:	e7aa      	b.n	800aaf0 <_printf_i+0x14c>
 800ab9a:	6923      	ldr	r3, [r4, #16]
 800ab9c:	462a      	mov	r2, r5
 800ab9e:	4649      	mov	r1, r9
 800aba0:	4640      	mov	r0, r8
 800aba2:	47d0      	blx	sl
 800aba4:	3001      	adds	r0, #1
 800aba6:	d0ad      	beq.n	800ab04 <_printf_i+0x160>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	079b      	lsls	r3, r3, #30
 800abac:	d413      	bmi.n	800abd6 <_printf_i+0x232>
 800abae:	68e0      	ldr	r0, [r4, #12]
 800abb0:	9b03      	ldr	r3, [sp, #12]
 800abb2:	4298      	cmp	r0, r3
 800abb4:	bfb8      	it	lt
 800abb6:	4618      	movlt	r0, r3
 800abb8:	e7a6      	b.n	800ab08 <_printf_i+0x164>
 800abba:	2301      	movs	r3, #1
 800abbc:	4632      	mov	r2, r6
 800abbe:	4649      	mov	r1, r9
 800abc0:	4640      	mov	r0, r8
 800abc2:	47d0      	blx	sl
 800abc4:	3001      	adds	r0, #1
 800abc6:	d09d      	beq.n	800ab04 <_printf_i+0x160>
 800abc8:	3501      	adds	r5, #1
 800abca:	68e3      	ldr	r3, [r4, #12]
 800abcc:	9903      	ldr	r1, [sp, #12]
 800abce:	1a5b      	subs	r3, r3, r1
 800abd0:	42ab      	cmp	r3, r5
 800abd2:	dcf2      	bgt.n	800abba <_printf_i+0x216>
 800abd4:	e7eb      	b.n	800abae <_printf_i+0x20a>
 800abd6:	2500      	movs	r5, #0
 800abd8:	f104 0619 	add.w	r6, r4, #25
 800abdc:	e7f5      	b.n	800abca <_printf_i+0x226>
 800abde:	bf00      	nop
 800abe0:	08045b62 	.word	0x08045b62
 800abe4:	08045b73 	.word	0x08045b73

0800abe8 <_scanf_float>:
 800abe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abec:	b087      	sub	sp, #28
 800abee:	4617      	mov	r7, r2
 800abf0:	9303      	str	r3, [sp, #12]
 800abf2:	688b      	ldr	r3, [r1, #8]
 800abf4:	1e5a      	subs	r2, r3, #1
 800abf6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800abfa:	bf83      	ittte	hi
 800abfc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac00:	195b      	addhi	r3, r3, r5
 800ac02:	9302      	strhi	r3, [sp, #8]
 800ac04:	2300      	movls	r3, #0
 800ac06:	bf86      	itte	hi
 800ac08:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac0c:	608b      	strhi	r3, [r1, #8]
 800ac0e:	9302      	strls	r3, [sp, #8]
 800ac10:	680b      	ldr	r3, [r1, #0]
 800ac12:	468b      	mov	fp, r1
 800ac14:	2500      	movs	r5, #0
 800ac16:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ac1a:	f84b 3b1c 	str.w	r3, [fp], #28
 800ac1e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ac22:	4680      	mov	r8, r0
 800ac24:	460c      	mov	r4, r1
 800ac26:	465e      	mov	r6, fp
 800ac28:	46aa      	mov	sl, r5
 800ac2a:	46a9      	mov	r9, r5
 800ac2c:	9501      	str	r5, [sp, #4]
 800ac2e:	68a2      	ldr	r2, [r4, #8]
 800ac30:	b152      	cbz	r2, 800ac48 <_scanf_float+0x60>
 800ac32:	683b      	ldr	r3, [r7, #0]
 800ac34:	781b      	ldrb	r3, [r3, #0]
 800ac36:	2b4e      	cmp	r3, #78	; 0x4e
 800ac38:	d864      	bhi.n	800ad04 <_scanf_float+0x11c>
 800ac3a:	2b40      	cmp	r3, #64	; 0x40
 800ac3c:	d83c      	bhi.n	800acb8 <_scanf_float+0xd0>
 800ac3e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800ac42:	b2c8      	uxtb	r0, r1
 800ac44:	280e      	cmp	r0, #14
 800ac46:	d93a      	bls.n	800acbe <_scanf_float+0xd6>
 800ac48:	f1b9 0f00 	cmp.w	r9, #0
 800ac4c:	d003      	beq.n	800ac56 <_scanf_float+0x6e>
 800ac4e:	6823      	ldr	r3, [r4, #0]
 800ac50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ac54:	6023      	str	r3, [r4, #0]
 800ac56:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ac5a:	f1ba 0f01 	cmp.w	sl, #1
 800ac5e:	f200 8113 	bhi.w	800ae88 <_scanf_float+0x2a0>
 800ac62:	455e      	cmp	r6, fp
 800ac64:	f200 8105 	bhi.w	800ae72 <_scanf_float+0x28a>
 800ac68:	2501      	movs	r5, #1
 800ac6a:	4628      	mov	r0, r5
 800ac6c:	b007      	add	sp, #28
 800ac6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac72:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800ac76:	2a0d      	cmp	r2, #13
 800ac78:	d8e6      	bhi.n	800ac48 <_scanf_float+0x60>
 800ac7a:	a101      	add	r1, pc, #4	; (adr r1, 800ac80 <_scanf_float+0x98>)
 800ac7c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ac80:	0800adbf 	.word	0x0800adbf
 800ac84:	0800ac49 	.word	0x0800ac49
 800ac88:	0800ac49 	.word	0x0800ac49
 800ac8c:	0800ac49 	.word	0x0800ac49
 800ac90:	0800ae1f 	.word	0x0800ae1f
 800ac94:	0800adf7 	.word	0x0800adf7
 800ac98:	0800ac49 	.word	0x0800ac49
 800ac9c:	0800ac49 	.word	0x0800ac49
 800aca0:	0800adcd 	.word	0x0800adcd
 800aca4:	0800ac49 	.word	0x0800ac49
 800aca8:	0800ac49 	.word	0x0800ac49
 800acac:	0800ac49 	.word	0x0800ac49
 800acb0:	0800ac49 	.word	0x0800ac49
 800acb4:	0800ad85 	.word	0x0800ad85
 800acb8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800acbc:	e7db      	b.n	800ac76 <_scanf_float+0x8e>
 800acbe:	290e      	cmp	r1, #14
 800acc0:	d8c2      	bhi.n	800ac48 <_scanf_float+0x60>
 800acc2:	a001      	add	r0, pc, #4	; (adr r0, 800acc8 <_scanf_float+0xe0>)
 800acc4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800acc8:	0800ad77 	.word	0x0800ad77
 800accc:	0800ac49 	.word	0x0800ac49
 800acd0:	0800ad77 	.word	0x0800ad77
 800acd4:	0800ae0b 	.word	0x0800ae0b
 800acd8:	0800ac49 	.word	0x0800ac49
 800acdc:	0800ad25 	.word	0x0800ad25
 800ace0:	0800ad61 	.word	0x0800ad61
 800ace4:	0800ad61 	.word	0x0800ad61
 800ace8:	0800ad61 	.word	0x0800ad61
 800acec:	0800ad61 	.word	0x0800ad61
 800acf0:	0800ad61 	.word	0x0800ad61
 800acf4:	0800ad61 	.word	0x0800ad61
 800acf8:	0800ad61 	.word	0x0800ad61
 800acfc:	0800ad61 	.word	0x0800ad61
 800ad00:	0800ad61 	.word	0x0800ad61
 800ad04:	2b6e      	cmp	r3, #110	; 0x6e
 800ad06:	d809      	bhi.n	800ad1c <_scanf_float+0x134>
 800ad08:	2b60      	cmp	r3, #96	; 0x60
 800ad0a:	d8b2      	bhi.n	800ac72 <_scanf_float+0x8a>
 800ad0c:	2b54      	cmp	r3, #84	; 0x54
 800ad0e:	d077      	beq.n	800ae00 <_scanf_float+0x218>
 800ad10:	2b59      	cmp	r3, #89	; 0x59
 800ad12:	d199      	bne.n	800ac48 <_scanf_float+0x60>
 800ad14:	2d07      	cmp	r5, #7
 800ad16:	d197      	bne.n	800ac48 <_scanf_float+0x60>
 800ad18:	2508      	movs	r5, #8
 800ad1a:	e029      	b.n	800ad70 <_scanf_float+0x188>
 800ad1c:	2b74      	cmp	r3, #116	; 0x74
 800ad1e:	d06f      	beq.n	800ae00 <_scanf_float+0x218>
 800ad20:	2b79      	cmp	r3, #121	; 0x79
 800ad22:	e7f6      	b.n	800ad12 <_scanf_float+0x12a>
 800ad24:	6821      	ldr	r1, [r4, #0]
 800ad26:	05c8      	lsls	r0, r1, #23
 800ad28:	d51a      	bpl.n	800ad60 <_scanf_float+0x178>
 800ad2a:	9b02      	ldr	r3, [sp, #8]
 800ad2c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad30:	6021      	str	r1, [r4, #0]
 800ad32:	f109 0901 	add.w	r9, r9, #1
 800ad36:	b11b      	cbz	r3, 800ad40 <_scanf_float+0x158>
 800ad38:	3b01      	subs	r3, #1
 800ad3a:	3201      	adds	r2, #1
 800ad3c:	9302      	str	r3, [sp, #8]
 800ad3e:	60a2      	str	r2, [r4, #8]
 800ad40:	68a3      	ldr	r3, [r4, #8]
 800ad42:	3b01      	subs	r3, #1
 800ad44:	60a3      	str	r3, [r4, #8]
 800ad46:	6923      	ldr	r3, [r4, #16]
 800ad48:	3301      	adds	r3, #1
 800ad4a:	6123      	str	r3, [r4, #16]
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	3b01      	subs	r3, #1
 800ad50:	2b00      	cmp	r3, #0
 800ad52:	607b      	str	r3, [r7, #4]
 800ad54:	f340 8084 	ble.w	800ae60 <_scanf_float+0x278>
 800ad58:	683b      	ldr	r3, [r7, #0]
 800ad5a:	3301      	adds	r3, #1
 800ad5c:	603b      	str	r3, [r7, #0]
 800ad5e:	e766      	b.n	800ac2e <_scanf_float+0x46>
 800ad60:	eb1a 0f05 	cmn.w	sl, r5
 800ad64:	f47f af70 	bne.w	800ac48 <_scanf_float+0x60>
 800ad68:	6822      	ldr	r2, [r4, #0]
 800ad6a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800ad6e:	6022      	str	r2, [r4, #0]
 800ad70:	f806 3b01 	strb.w	r3, [r6], #1
 800ad74:	e7e4      	b.n	800ad40 <_scanf_float+0x158>
 800ad76:	6822      	ldr	r2, [r4, #0]
 800ad78:	0610      	lsls	r0, r2, #24
 800ad7a:	f57f af65 	bpl.w	800ac48 <_scanf_float+0x60>
 800ad7e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800ad82:	e7f4      	b.n	800ad6e <_scanf_float+0x186>
 800ad84:	f1ba 0f00 	cmp.w	sl, #0
 800ad88:	d10e      	bne.n	800ada8 <_scanf_float+0x1c0>
 800ad8a:	f1b9 0f00 	cmp.w	r9, #0
 800ad8e:	d10e      	bne.n	800adae <_scanf_float+0x1c6>
 800ad90:	6822      	ldr	r2, [r4, #0]
 800ad92:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ad96:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ad9a:	d108      	bne.n	800adae <_scanf_float+0x1c6>
 800ad9c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ada0:	6022      	str	r2, [r4, #0]
 800ada2:	f04f 0a01 	mov.w	sl, #1
 800ada6:	e7e3      	b.n	800ad70 <_scanf_float+0x188>
 800ada8:	f1ba 0f02 	cmp.w	sl, #2
 800adac:	d055      	beq.n	800ae5a <_scanf_float+0x272>
 800adae:	2d01      	cmp	r5, #1
 800adb0:	d002      	beq.n	800adb8 <_scanf_float+0x1d0>
 800adb2:	2d04      	cmp	r5, #4
 800adb4:	f47f af48 	bne.w	800ac48 <_scanf_float+0x60>
 800adb8:	3501      	adds	r5, #1
 800adba:	b2ed      	uxtb	r5, r5
 800adbc:	e7d8      	b.n	800ad70 <_scanf_float+0x188>
 800adbe:	f1ba 0f01 	cmp.w	sl, #1
 800adc2:	f47f af41 	bne.w	800ac48 <_scanf_float+0x60>
 800adc6:	f04f 0a02 	mov.w	sl, #2
 800adca:	e7d1      	b.n	800ad70 <_scanf_float+0x188>
 800adcc:	b97d      	cbnz	r5, 800adee <_scanf_float+0x206>
 800adce:	f1b9 0f00 	cmp.w	r9, #0
 800add2:	f47f af3c 	bne.w	800ac4e <_scanf_float+0x66>
 800add6:	6822      	ldr	r2, [r4, #0]
 800add8:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800addc:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ade0:	f47f af39 	bne.w	800ac56 <_scanf_float+0x6e>
 800ade4:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ade8:	6022      	str	r2, [r4, #0]
 800adea:	2501      	movs	r5, #1
 800adec:	e7c0      	b.n	800ad70 <_scanf_float+0x188>
 800adee:	2d03      	cmp	r5, #3
 800adf0:	d0e2      	beq.n	800adb8 <_scanf_float+0x1d0>
 800adf2:	2d05      	cmp	r5, #5
 800adf4:	e7de      	b.n	800adb4 <_scanf_float+0x1cc>
 800adf6:	2d02      	cmp	r5, #2
 800adf8:	f47f af26 	bne.w	800ac48 <_scanf_float+0x60>
 800adfc:	2503      	movs	r5, #3
 800adfe:	e7b7      	b.n	800ad70 <_scanf_float+0x188>
 800ae00:	2d06      	cmp	r5, #6
 800ae02:	f47f af21 	bne.w	800ac48 <_scanf_float+0x60>
 800ae06:	2507      	movs	r5, #7
 800ae08:	e7b2      	b.n	800ad70 <_scanf_float+0x188>
 800ae0a:	6822      	ldr	r2, [r4, #0]
 800ae0c:	0591      	lsls	r1, r2, #22
 800ae0e:	f57f af1b 	bpl.w	800ac48 <_scanf_float+0x60>
 800ae12:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ae16:	6022      	str	r2, [r4, #0]
 800ae18:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae1c:	e7a8      	b.n	800ad70 <_scanf_float+0x188>
 800ae1e:	6822      	ldr	r2, [r4, #0]
 800ae20:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ae24:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ae28:	d006      	beq.n	800ae38 <_scanf_float+0x250>
 800ae2a:	0550      	lsls	r0, r2, #21
 800ae2c:	f57f af0c 	bpl.w	800ac48 <_scanf_float+0x60>
 800ae30:	f1b9 0f00 	cmp.w	r9, #0
 800ae34:	f43f af0f 	beq.w	800ac56 <_scanf_float+0x6e>
 800ae38:	0591      	lsls	r1, r2, #22
 800ae3a:	bf58      	it	pl
 800ae3c:	9901      	ldrpl	r1, [sp, #4]
 800ae3e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae42:	bf58      	it	pl
 800ae44:	eba9 0101 	subpl.w	r1, r9, r1
 800ae48:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800ae4c:	bf58      	it	pl
 800ae4e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800ae52:	6022      	str	r2, [r4, #0]
 800ae54:	f04f 0900 	mov.w	r9, #0
 800ae58:	e78a      	b.n	800ad70 <_scanf_float+0x188>
 800ae5a:	f04f 0a03 	mov.w	sl, #3
 800ae5e:	e787      	b.n	800ad70 <_scanf_float+0x188>
 800ae60:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800ae64:	4639      	mov	r1, r7
 800ae66:	4640      	mov	r0, r8
 800ae68:	4798      	blx	r3
 800ae6a:	2800      	cmp	r0, #0
 800ae6c:	f43f aedf 	beq.w	800ac2e <_scanf_float+0x46>
 800ae70:	e6ea      	b.n	800ac48 <_scanf_float+0x60>
 800ae72:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae76:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ae7a:	463a      	mov	r2, r7
 800ae7c:	4640      	mov	r0, r8
 800ae7e:	4798      	blx	r3
 800ae80:	6923      	ldr	r3, [r4, #16]
 800ae82:	3b01      	subs	r3, #1
 800ae84:	6123      	str	r3, [r4, #16]
 800ae86:	e6ec      	b.n	800ac62 <_scanf_float+0x7a>
 800ae88:	1e6b      	subs	r3, r5, #1
 800ae8a:	2b06      	cmp	r3, #6
 800ae8c:	d825      	bhi.n	800aeda <_scanf_float+0x2f2>
 800ae8e:	2d02      	cmp	r5, #2
 800ae90:	d836      	bhi.n	800af00 <_scanf_float+0x318>
 800ae92:	455e      	cmp	r6, fp
 800ae94:	f67f aee8 	bls.w	800ac68 <_scanf_float+0x80>
 800ae98:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ae9c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aea0:	463a      	mov	r2, r7
 800aea2:	4640      	mov	r0, r8
 800aea4:	4798      	blx	r3
 800aea6:	6923      	ldr	r3, [r4, #16]
 800aea8:	3b01      	subs	r3, #1
 800aeaa:	6123      	str	r3, [r4, #16]
 800aeac:	e7f1      	b.n	800ae92 <_scanf_float+0x2aa>
 800aeae:	9802      	ldr	r0, [sp, #8]
 800aeb0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeb4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aeb8:	9002      	str	r0, [sp, #8]
 800aeba:	463a      	mov	r2, r7
 800aebc:	4640      	mov	r0, r8
 800aebe:	4798      	blx	r3
 800aec0:	6923      	ldr	r3, [r4, #16]
 800aec2:	3b01      	subs	r3, #1
 800aec4:	6123      	str	r3, [r4, #16]
 800aec6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aeca:	fa5f fa8a 	uxtb.w	sl, sl
 800aece:	f1ba 0f02 	cmp.w	sl, #2
 800aed2:	d1ec      	bne.n	800aeae <_scanf_float+0x2c6>
 800aed4:	3d03      	subs	r5, #3
 800aed6:	b2ed      	uxtb	r5, r5
 800aed8:	1b76      	subs	r6, r6, r5
 800aeda:	6823      	ldr	r3, [r4, #0]
 800aedc:	05da      	lsls	r2, r3, #23
 800aede:	d52f      	bpl.n	800af40 <_scanf_float+0x358>
 800aee0:	055b      	lsls	r3, r3, #21
 800aee2:	d510      	bpl.n	800af06 <_scanf_float+0x31e>
 800aee4:	455e      	cmp	r6, fp
 800aee6:	f67f aebf 	bls.w	800ac68 <_scanf_float+0x80>
 800aeea:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aeee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aef2:	463a      	mov	r2, r7
 800aef4:	4640      	mov	r0, r8
 800aef6:	4798      	blx	r3
 800aef8:	6923      	ldr	r3, [r4, #16]
 800aefa:	3b01      	subs	r3, #1
 800aefc:	6123      	str	r3, [r4, #16]
 800aefe:	e7f1      	b.n	800aee4 <_scanf_float+0x2fc>
 800af00:	46aa      	mov	sl, r5
 800af02:	9602      	str	r6, [sp, #8]
 800af04:	e7df      	b.n	800aec6 <_scanf_float+0x2de>
 800af06:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af0a:	6923      	ldr	r3, [r4, #16]
 800af0c:	2965      	cmp	r1, #101	; 0x65
 800af0e:	f103 33ff 	add.w	r3, r3, #4294967295
 800af12:	f106 35ff 	add.w	r5, r6, #4294967295
 800af16:	6123      	str	r3, [r4, #16]
 800af18:	d00c      	beq.n	800af34 <_scanf_float+0x34c>
 800af1a:	2945      	cmp	r1, #69	; 0x45
 800af1c:	d00a      	beq.n	800af34 <_scanf_float+0x34c>
 800af1e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af22:	463a      	mov	r2, r7
 800af24:	4640      	mov	r0, r8
 800af26:	4798      	blx	r3
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800af2e:	3b01      	subs	r3, #1
 800af30:	1eb5      	subs	r5, r6, #2
 800af32:	6123      	str	r3, [r4, #16]
 800af34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af38:	463a      	mov	r2, r7
 800af3a:	4640      	mov	r0, r8
 800af3c:	4798      	blx	r3
 800af3e:	462e      	mov	r6, r5
 800af40:	6825      	ldr	r5, [r4, #0]
 800af42:	f015 0510 	ands.w	r5, r5, #16
 800af46:	d158      	bne.n	800affa <_scanf_float+0x412>
 800af48:	7035      	strb	r5, [r6, #0]
 800af4a:	6823      	ldr	r3, [r4, #0]
 800af4c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800af50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af54:	d11c      	bne.n	800af90 <_scanf_float+0x3a8>
 800af56:	9b01      	ldr	r3, [sp, #4]
 800af58:	454b      	cmp	r3, r9
 800af5a:	eba3 0209 	sub.w	r2, r3, r9
 800af5e:	d124      	bne.n	800afaa <_scanf_float+0x3c2>
 800af60:	2200      	movs	r2, #0
 800af62:	4659      	mov	r1, fp
 800af64:	4640      	mov	r0, r8
 800af66:	f7ff f9c7 	bl	800a2f8 <_strtod_r>
 800af6a:	9b03      	ldr	r3, [sp, #12]
 800af6c:	6821      	ldr	r1, [r4, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f011 0f02 	tst.w	r1, #2
 800af74:	ec57 6b10 	vmov	r6, r7, d0
 800af78:	f103 0204 	add.w	r2, r3, #4
 800af7c:	d020      	beq.n	800afc0 <_scanf_float+0x3d8>
 800af7e:	9903      	ldr	r1, [sp, #12]
 800af80:	600a      	str	r2, [r1, #0]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	e9c3 6700 	strd	r6, r7, [r3]
 800af88:	68e3      	ldr	r3, [r4, #12]
 800af8a:	3301      	adds	r3, #1
 800af8c:	60e3      	str	r3, [r4, #12]
 800af8e:	e66c      	b.n	800ac6a <_scanf_float+0x82>
 800af90:	9b04      	ldr	r3, [sp, #16]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d0e4      	beq.n	800af60 <_scanf_float+0x378>
 800af96:	9905      	ldr	r1, [sp, #20]
 800af98:	230a      	movs	r3, #10
 800af9a:	462a      	mov	r2, r5
 800af9c:	3101      	adds	r1, #1
 800af9e:	4640      	mov	r0, r8
 800afa0:	f002 fab6 	bl	800d510 <_strtol_r>
 800afa4:	9b04      	ldr	r3, [sp, #16]
 800afa6:	9e05      	ldr	r6, [sp, #20]
 800afa8:	1ac2      	subs	r2, r0, r3
 800afaa:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800afae:	429e      	cmp	r6, r3
 800afb0:	bf28      	it	cs
 800afb2:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800afb6:	4912      	ldr	r1, [pc, #72]	; (800b000 <_scanf_float+0x418>)
 800afb8:	4630      	mov	r0, r6
 800afba:	f000 f989 	bl	800b2d0 <siprintf>
 800afbe:	e7cf      	b.n	800af60 <_scanf_float+0x378>
 800afc0:	f011 0f04 	tst.w	r1, #4
 800afc4:	9903      	ldr	r1, [sp, #12]
 800afc6:	600a      	str	r2, [r1, #0]
 800afc8:	d1db      	bne.n	800af82 <_scanf_float+0x39a>
 800afca:	f8d3 8000 	ldr.w	r8, [r3]
 800afce:	ee10 2a10 	vmov	r2, s0
 800afd2:	ee10 0a10 	vmov	r0, s0
 800afd6:	463b      	mov	r3, r7
 800afd8:	4639      	mov	r1, r7
 800afda:	f7f5 fdc7 	bl	8000b6c <__aeabi_dcmpun>
 800afde:	b128      	cbz	r0, 800afec <_scanf_float+0x404>
 800afe0:	4808      	ldr	r0, [pc, #32]	; (800b004 <_scanf_float+0x41c>)
 800afe2:	f000 fb25 	bl	800b630 <nanf>
 800afe6:	ed88 0a00 	vstr	s0, [r8]
 800afea:	e7cd      	b.n	800af88 <_scanf_float+0x3a0>
 800afec:	4630      	mov	r0, r6
 800afee:	4639      	mov	r1, r7
 800aff0:	f7f5 fe1a 	bl	8000c28 <__aeabi_d2f>
 800aff4:	f8c8 0000 	str.w	r0, [r8]
 800aff8:	e7c6      	b.n	800af88 <_scanf_float+0x3a0>
 800affa:	2500      	movs	r5, #0
 800affc:	e635      	b.n	800ac6a <_scanf_float+0x82>
 800affe:	bf00      	nop
 800b000:	08045b84 	.word	0x08045b84
 800b004:	08045f21 	.word	0x08045f21

0800b008 <std>:
 800b008:	2300      	movs	r3, #0
 800b00a:	b510      	push	{r4, lr}
 800b00c:	4604      	mov	r4, r0
 800b00e:	e9c0 3300 	strd	r3, r3, [r0]
 800b012:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b016:	6083      	str	r3, [r0, #8]
 800b018:	8181      	strh	r1, [r0, #12]
 800b01a:	6643      	str	r3, [r0, #100]	; 0x64
 800b01c:	81c2      	strh	r2, [r0, #14]
 800b01e:	6183      	str	r3, [r0, #24]
 800b020:	4619      	mov	r1, r3
 800b022:	2208      	movs	r2, #8
 800b024:	305c      	adds	r0, #92	; 0x5c
 800b026:	f000 fa4b 	bl	800b4c0 <memset>
 800b02a:	4b0d      	ldr	r3, [pc, #52]	; (800b060 <std+0x58>)
 800b02c:	6263      	str	r3, [r4, #36]	; 0x24
 800b02e:	4b0d      	ldr	r3, [pc, #52]	; (800b064 <std+0x5c>)
 800b030:	62a3      	str	r3, [r4, #40]	; 0x28
 800b032:	4b0d      	ldr	r3, [pc, #52]	; (800b068 <std+0x60>)
 800b034:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b036:	4b0d      	ldr	r3, [pc, #52]	; (800b06c <std+0x64>)
 800b038:	6323      	str	r3, [r4, #48]	; 0x30
 800b03a:	4b0d      	ldr	r3, [pc, #52]	; (800b070 <std+0x68>)
 800b03c:	6224      	str	r4, [r4, #32]
 800b03e:	429c      	cmp	r4, r3
 800b040:	d006      	beq.n	800b050 <std+0x48>
 800b042:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b046:	4294      	cmp	r4, r2
 800b048:	d002      	beq.n	800b050 <std+0x48>
 800b04a:	33d0      	adds	r3, #208	; 0xd0
 800b04c:	429c      	cmp	r4, r3
 800b04e:	d105      	bne.n	800b05c <std+0x54>
 800b050:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b054:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b058:	f000 bad0 	b.w	800b5fc <__retarget_lock_init_recursive>
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	bf00      	nop
 800b060:	0800b311 	.word	0x0800b311
 800b064:	0800b333 	.word	0x0800b333
 800b068:	0800b36b 	.word	0x0800b36b
 800b06c:	0800b38f 	.word	0x0800b38f
 800b070:	20004484 	.word	0x20004484

0800b074 <stdio_exit_handler>:
 800b074:	4a02      	ldr	r2, [pc, #8]	; (800b080 <stdio_exit_handler+0xc>)
 800b076:	4903      	ldr	r1, [pc, #12]	; (800b084 <stdio_exit_handler+0x10>)
 800b078:	4803      	ldr	r0, [pc, #12]	; (800b088 <stdio_exit_handler+0x14>)
 800b07a:	f000 b869 	b.w	800b150 <_fwalk_sglue>
 800b07e:	bf00      	nop
 800b080:	20000c60 	.word	0x20000c60
 800b084:	0800db75 	.word	0x0800db75
 800b088:	20000dd8 	.word	0x20000dd8

0800b08c <cleanup_stdio>:
 800b08c:	6841      	ldr	r1, [r0, #4]
 800b08e:	4b0c      	ldr	r3, [pc, #48]	; (800b0c0 <cleanup_stdio+0x34>)
 800b090:	4299      	cmp	r1, r3
 800b092:	b510      	push	{r4, lr}
 800b094:	4604      	mov	r4, r0
 800b096:	d001      	beq.n	800b09c <cleanup_stdio+0x10>
 800b098:	f002 fd6c 	bl	800db74 <_fflush_r>
 800b09c:	68a1      	ldr	r1, [r4, #8]
 800b09e:	4b09      	ldr	r3, [pc, #36]	; (800b0c4 <cleanup_stdio+0x38>)
 800b0a0:	4299      	cmp	r1, r3
 800b0a2:	d002      	beq.n	800b0aa <cleanup_stdio+0x1e>
 800b0a4:	4620      	mov	r0, r4
 800b0a6:	f002 fd65 	bl	800db74 <_fflush_r>
 800b0aa:	68e1      	ldr	r1, [r4, #12]
 800b0ac:	4b06      	ldr	r3, [pc, #24]	; (800b0c8 <cleanup_stdio+0x3c>)
 800b0ae:	4299      	cmp	r1, r3
 800b0b0:	d004      	beq.n	800b0bc <cleanup_stdio+0x30>
 800b0b2:	4620      	mov	r0, r4
 800b0b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0b8:	f002 bd5c 	b.w	800db74 <_fflush_r>
 800b0bc:	bd10      	pop	{r4, pc}
 800b0be:	bf00      	nop
 800b0c0:	20004484 	.word	0x20004484
 800b0c4:	200044ec 	.word	0x200044ec
 800b0c8:	20004554 	.word	0x20004554

0800b0cc <global_stdio_init.part.0>:
 800b0cc:	b510      	push	{r4, lr}
 800b0ce:	4b0b      	ldr	r3, [pc, #44]	; (800b0fc <global_stdio_init.part.0+0x30>)
 800b0d0:	4c0b      	ldr	r4, [pc, #44]	; (800b100 <global_stdio_init.part.0+0x34>)
 800b0d2:	4a0c      	ldr	r2, [pc, #48]	; (800b104 <global_stdio_init.part.0+0x38>)
 800b0d4:	601a      	str	r2, [r3, #0]
 800b0d6:	4620      	mov	r0, r4
 800b0d8:	2200      	movs	r2, #0
 800b0da:	2104      	movs	r1, #4
 800b0dc:	f7ff ff94 	bl	800b008 <std>
 800b0e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b0e4:	2201      	movs	r2, #1
 800b0e6:	2109      	movs	r1, #9
 800b0e8:	f7ff ff8e 	bl	800b008 <std>
 800b0ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b0f0:	2202      	movs	r2, #2
 800b0f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0f6:	2112      	movs	r1, #18
 800b0f8:	f7ff bf86 	b.w	800b008 <std>
 800b0fc:	200045bc 	.word	0x200045bc
 800b100:	20004484 	.word	0x20004484
 800b104:	0800b075 	.word	0x0800b075

0800b108 <__sfp_lock_acquire>:
 800b108:	4801      	ldr	r0, [pc, #4]	; (800b110 <__sfp_lock_acquire+0x8>)
 800b10a:	f000 ba78 	b.w	800b5fe <__retarget_lock_acquire_recursive>
 800b10e:	bf00      	nop
 800b110:	200045c5 	.word	0x200045c5

0800b114 <__sfp_lock_release>:
 800b114:	4801      	ldr	r0, [pc, #4]	; (800b11c <__sfp_lock_release+0x8>)
 800b116:	f000 ba73 	b.w	800b600 <__retarget_lock_release_recursive>
 800b11a:	bf00      	nop
 800b11c:	200045c5 	.word	0x200045c5

0800b120 <__sinit>:
 800b120:	b510      	push	{r4, lr}
 800b122:	4604      	mov	r4, r0
 800b124:	f7ff fff0 	bl	800b108 <__sfp_lock_acquire>
 800b128:	6a23      	ldr	r3, [r4, #32]
 800b12a:	b11b      	cbz	r3, 800b134 <__sinit+0x14>
 800b12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b130:	f7ff bff0 	b.w	800b114 <__sfp_lock_release>
 800b134:	4b04      	ldr	r3, [pc, #16]	; (800b148 <__sinit+0x28>)
 800b136:	6223      	str	r3, [r4, #32]
 800b138:	4b04      	ldr	r3, [pc, #16]	; (800b14c <__sinit+0x2c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d1f5      	bne.n	800b12c <__sinit+0xc>
 800b140:	f7ff ffc4 	bl	800b0cc <global_stdio_init.part.0>
 800b144:	e7f2      	b.n	800b12c <__sinit+0xc>
 800b146:	bf00      	nop
 800b148:	0800b08d 	.word	0x0800b08d
 800b14c:	200045bc 	.word	0x200045bc

0800b150 <_fwalk_sglue>:
 800b150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b154:	4607      	mov	r7, r0
 800b156:	4688      	mov	r8, r1
 800b158:	4614      	mov	r4, r2
 800b15a:	2600      	movs	r6, #0
 800b15c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b160:	f1b9 0901 	subs.w	r9, r9, #1
 800b164:	d505      	bpl.n	800b172 <_fwalk_sglue+0x22>
 800b166:	6824      	ldr	r4, [r4, #0]
 800b168:	2c00      	cmp	r4, #0
 800b16a:	d1f7      	bne.n	800b15c <_fwalk_sglue+0xc>
 800b16c:	4630      	mov	r0, r6
 800b16e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	2b01      	cmp	r3, #1
 800b176:	d907      	bls.n	800b188 <_fwalk_sglue+0x38>
 800b178:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b17c:	3301      	adds	r3, #1
 800b17e:	d003      	beq.n	800b188 <_fwalk_sglue+0x38>
 800b180:	4629      	mov	r1, r5
 800b182:	4638      	mov	r0, r7
 800b184:	47c0      	blx	r8
 800b186:	4306      	orrs	r6, r0
 800b188:	3568      	adds	r5, #104	; 0x68
 800b18a:	e7e9      	b.n	800b160 <_fwalk_sglue+0x10>

0800b18c <iprintf>:
 800b18c:	b40f      	push	{r0, r1, r2, r3}
 800b18e:	b507      	push	{r0, r1, r2, lr}
 800b190:	4906      	ldr	r1, [pc, #24]	; (800b1ac <iprintf+0x20>)
 800b192:	ab04      	add	r3, sp, #16
 800b194:	6808      	ldr	r0, [r1, #0]
 800b196:	f853 2b04 	ldr.w	r2, [r3], #4
 800b19a:	6881      	ldr	r1, [r0, #8]
 800b19c:	9301      	str	r3, [sp, #4]
 800b19e:	f002 fb49 	bl	800d834 <_vfiprintf_r>
 800b1a2:	b003      	add	sp, #12
 800b1a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b1a8:	b004      	add	sp, #16
 800b1aa:	4770      	bx	lr
 800b1ac:	20000e24 	.word	0x20000e24

0800b1b0 <_puts_r>:
 800b1b0:	6a03      	ldr	r3, [r0, #32]
 800b1b2:	b570      	push	{r4, r5, r6, lr}
 800b1b4:	6884      	ldr	r4, [r0, #8]
 800b1b6:	4605      	mov	r5, r0
 800b1b8:	460e      	mov	r6, r1
 800b1ba:	b90b      	cbnz	r3, 800b1c0 <_puts_r+0x10>
 800b1bc:	f7ff ffb0 	bl	800b120 <__sinit>
 800b1c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b1c2:	07db      	lsls	r3, r3, #31
 800b1c4:	d405      	bmi.n	800b1d2 <_puts_r+0x22>
 800b1c6:	89a3      	ldrh	r3, [r4, #12]
 800b1c8:	0598      	lsls	r0, r3, #22
 800b1ca:	d402      	bmi.n	800b1d2 <_puts_r+0x22>
 800b1cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b1ce:	f000 fa16 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800b1d2:	89a3      	ldrh	r3, [r4, #12]
 800b1d4:	0719      	lsls	r1, r3, #28
 800b1d6:	d513      	bpl.n	800b200 <_puts_r+0x50>
 800b1d8:	6923      	ldr	r3, [r4, #16]
 800b1da:	b18b      	cbz	r3, 800b200 <_puts_r+0x50>
 800b1dc:	3e01      	subs	r6, #1
 800b1de:	68a3      	ldr	r3, [r4, #8]
 800b1e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b1e4:	3b01      	subs	r3, #1
 800b1e6:	60a3      	str	r3, [r4, #8]
 800b1e8:	b9e9      	cbnz	r1, 800b226 <_puts_r+0x76>
 800b1ea:	2b00      	cmp	r3, #0
 800b1ec:	da2e      	bge.n	800b24c <_puts_r+0x9c>
 800b1ee:	4622      	mov	r2, r4
 800b1f0:	210a      	movs	r1, #10
 800b1f2:	4628      	mov	r0, r5
 800b1f4:	f000 f8cf 	bl	800b396 <__swbuf_r>
 800b1f8:	3001      	adds	r0, #1
 800b1fa:	d007      	beq.n	800b20c <_puts_r+0x5c>
 800b1fc:	250a      	movs	r5, #10
 800b1fe:	e007      	b.n	800b210 <_puts_r+0x60>
 800b200:	4621      	mov	r1, r4
 800b202:	4628      	mov	r0, r5
 800b204:	f000 f904 	bl	800b410 <__swsetup_r>
 800b208:	2800      	cmp	r0, #0
 800b20a:	d0e7      	beq.n	800b1dc <_puts_r+0x2c>
 800b20c:	f04f 35ff 	mov.w	r5, #4294967295
 800b210:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b212:	07da      	lsls	r2, r3, #31
 800b214:	d405      	bmi.n	800b222 <_puts_r+0x72>
 800b216:	89a3      	ldrh	r3, [r4, #12]
 800b218:	059b      	lsls	r3, r3, #22
 800b21a:	d402      	bmi.n	800b222 <_puts_r+0x72>
 800b21c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b21e:	f000 f9ef 	bl	800b600 <__retarget_lock_release_recursive>
 800b222:	4628      	mov	r0, r5
 800b224:	bd70      	pop	{r4, r5, r6, pc}
 800b226:	2b00      	cmp	r3, #0
 800b228:	da04      	bge.n	800b234 <_puts_r+0x84>
 800b22a:	69a2      	ldr	r2, [r4, #24]
 800b22c:	429a      	cmp	r2, r3
 800b22e:	dc06      	bgt.n	800b23e <_puts_r+0x8e>
 800b230:	290a      	cmp	r1, #10
 800b232:	d004      	beq.n	800b23e <_puts_r+0x8e>
 800b234:	6823      	ldr	r3, [r4, #0]
 800b236:	1c5a      	adds	r2, r3, #1
 800b238:	6022      	str	r2, [r4, #0]
 800b23a:	7019      	strb	r1, [r3, #0]
 800b23c:	e7cf      	b.n	800b1de <_puts_r+0x2e>
 800b23e:	4622      	mov	r2, r4
 800b240:	4628      	mov	r0, r5
 800b242:	f000 f8a8 	bl	800b396 <__swbuf_r>
 800b246:	3001      	adds	r0, #1
 800b248:	d1c9      	bne.n	800b1de <_puts_r+0x2e>
 800b24a:	e7df      	b.n	800b20c <_puts_r+0x5c>
 800b24c:	6823      	ldr	r3, [r4, #0]
 800b24e:	250a      	movs	r5, #10
 800b250:	1c5a      	adds	r2, r3, #1
 800b252:	6022      	str	r2, [r4, #0]
 800b254:	701d      	strb	r5, [r3, #0]
 800b256:	e7db      	b.n	800b210 <_puts_r+0x60>

0800b258 <puts>:
 800b258:	4b02      	ldr	r3, [pc, #8]	; (800b264 <puts+0xc>)
 800b25a:	4601      	mov	r1, r0
 800b25c:	6818      	ldr	r0, [r3, #0]
 800b25e:	f7ff bfa7 	b.w	800b1b0 <_puts_r>
 800b262:	bf00      	nop
 800b264:	20000e24 	.word	0x20000e24

0800b268 <sniprintf>:
 800b268:	b40c      	push	{r2, r3}
 800b26a:	b530      	push	{r4, r5, lr}
 800b26c:	4b17      	ldr	r3, [pc, #92]	; (800b2cc <sniprintf+0x64>)
 800b26e:	1e0c      	subs	r4, r1, #0
 800b270:	681d      	ldr	r5, [r3, #0]
 800b272:	b09d      	sub	sp, #116	; 0x74
 800b274:	da08      	bge.n	800b288 <sniprintf+0x20>
 800b276:	238b      	movs	r3, #139	; 0x8b
 800b278:	602b      	str	r3, [r5, #0]
 800b27a:	f04f 30ff 	mov.w	r0, #4294967295
 800b27e:	b01d      	add	sp, #116	; 0x74
 800b280:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b284:	b002      	add	sp, #8
 800b286:	4770      	bx	lr
 800b288:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b28c:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b290:	bf14      	ite	ne
 800b292:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b296:	4623      	moveq	r3, r4
 800b298:	9304      	str	r3, [sp, #16]
 800b29a:	9307      	str	r3, [sp, #28]
 800b29c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b2a0:	9002      	str	r0, [sp, #8]
 800b2a2:	9006      	str	r0, [sp, #24]
 800b2a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b2a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b2aa:	ab21      	add	r3, sp, #132	; 0x84
 800b2ac:	a902      	add	r1, sp, #8
 800b2ae:	4628      	mov	r0, r5
 800b2b0:	9301      	str	r3, [sp, #4]
 800b2b2:	f002 f997 	bl	800d5e4 <_svfiprintf_r>
 800b2b6:	1c43      	adds	r3, r0, #1
 800b2b8:	bfbc      	itt	lt
 800b2ba:	238b      	movlt	r3, #139	; 0x8b
 800b2bc:	602b      	strlt	r3, [r5, #0]
 800b2be:	2c00      	cmp	r4, #0
 800b2c0:	d0dd      	beq.n	800b27e <sniprintf+0x16>
 800b2c2:	9b02      	ldr	r3, [sp, #8]
 800b2c4:	2200      	movs	r2, #0
 800b2c6:	701a      	strb	r2, [r3, #0]
 800b2c8:	e7d9      	b.n	800b27e <sniprintf+0x16>
 800b2ca:	bf00      	nop
 800b2cc:	20000e24 	.word	0x20000e24

0800b2d0 <siprintf>:
 800b2d0:	b40e      	push	{r1, r2, r3}
 800b2d2:	b500      	push	{lr}
 800b2d4:	b09c      	sub	sp, #112	; 0x70
 800b2d6:	ab1d      	add	r3, sp, #116	; 0x74
 800b2d8:	9002      	str	r0, [sp, #8]
 800b2da:	9006      	str	r0, [sp, #24]
 800b2dc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b2e0:	4809      	ldr	r0, [pc, #36]	; (800b308 <siprintf+0x38>)
 800b2e2:	9107      	str	r1, [sp, #28]
 800b2e4:	9104      	str	r1, [sp, #16]
 800b2e6:	4909      	ldr	r1, [pc, #36]	; (800b30c <siprintf+0x3c>)
 800b2e8:	f853 2b04 	ldr.w	r2, [r3], #4
 800b2ec:	9105      	str	r1, [sp, #20]
 800b2ee:	6800      	ldr	r0, [r0, #0]
 800b2f0:	9301      	str	r3, [sp, #4]
 800b2f2:	a902      	add	r1, sp, #8
 800b2f4:	f002 f976 	bl	800d5e4 <_svfiprintf_r>
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	2200      	movs	r2, #0
 800b2fc:	701a      	strb	r2, [r3, #0]
 800b2fe:	b01c      	add	sp, #112	; 0x70
 800b300:	f85d eb04 	ldr.w	lr, [sp], #4
 800b304:	b003      	add	sp, #12
 800b306:	4770      	bx	lr
 800b308:	20000e24 	.word	0x20000e24
 800b30c:	ffff0208 	.word	0xffff0208

0800b310 <__sread>:
 800b310:	b510      	push	{r4, lr}
 800b312:	460c      	mov	r4, r1
 800b314:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b318:	f000 f912 	bl	800b540 <_read_r>
 800b31c:	2800      	cmp	r0, #0
 800b31e:	bfab      	itete	ge
 800b320:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b322:	89a3      	ldrhlt	r3, [r4, #12]
 800b324:	181b      	addge	r3, r3, r0
 800b326:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b32a:	bfac      	ite	ge
 800b32c:	6563      	strge	r3, [r4, #84]	; 0x54
 800b32e:	81a3      	strhlt	r3, [r4, #12]
 800b330:	bd10      	pop	{r4, pc}

0800b332 <__swrite>:
 800b332:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b336:	461f      	mov	r7, r3
 800b338:	898b      	ldrh	r3, [r1, #12]
 800b33a:	05db      	lsls	r3, r3, #23
 800b33c:	4605      	mov	r5, r0
 800b33e:	460c      	mov	r4, r1
 800b340:	4616      	mov	r6, r2
 800b342:	d505      	bpl.n	800b350 <__swrite+0x1e>
 800b344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b348:	2302      	movs	r3, #2
 800b34a:	2200      	movs	r2, #0
 800b34c:	f000 f8e6 	bl	800b51c <_lseek_r>
 800b350:	89a3      	ldrh	r3, [r4, #12]
 800b352:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b35a:	81a3      	strh	r3, [r4, #12]
 800b35c:	4632      	mov	r2, r6
 800b35e:	463b      	mov	r3, r7
 800b360:	4628      	mov	r0, r5
 800b362:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b366:	f000 b90d 	b.w	800b584 <_write_r>

0800b36a <__sseek>:
 800b36a:	b510      	push	{r4, lr}
 800b36c:	460c      	mov	r4, r1
 800b36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b372:	f000 f8d3 	bl	800b51c <_lseek_r>
 800b376:	1c43      	adds	r3, r0, #1
 800b378:	89a3      	ldrh	r3, [r4, #12]
 800b37a:	bf15      	itete	ne
 800b37c:	6560      	strne	r0, [r4, #84]	; 0x54
 800b37e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b382:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b386:	81a3      	strheq	r3, [r4, #12]
 800b388:	bf18      	it	ne
 800b38a:	81a3      	strhne	r3, [r4, #12]
 800b38c:	bd10      	pop	{r4, pc}

0800b38e <__sclose>:
 800b38e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b392:	f000 b8b3 	b.w	800b4fc <_close_r>

0800b396 <__swbuf_r>:
 800b396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b398:	460e      	mov	r6, r1
 800b39a:	4614      	mov	r4, r2
 800b39c:	4605      	mov	r5, r0
 800b39e:	b118      	cbz	r0, 800b3a8 <__swbuf_r+0x12>
 800b3a0:	6a03      	ldr	r3, [r0, #32]
 800b3a2:	b90b      	cbnz	r3, 800b3a8 <__swbuf_r+0x12>
 800b3a4:	f7ff febc 	bl	800b120 <__sinit>
 800b3a8:	69a3      	ldr	r3, [r4, #24]
 800b3aa:	60a3      	str	r3, [r4, #8]
 800b3ac:	89a3      	ldrh	r3, [r4, #12]
 800b3ae:	071a      	lsls	r2, r3, #28
 800b3b0:	d525      	bpl.n	800b3fe <__swbuf_r+0x68>
 800b3b2:	6923      	ldr	r3, [r4, #16]
 800b3b4:	b31b      	cbz	r3, 800b3fe <__swbuf_r+0x68>
 800b3b6:	6823      	ldr	r3, [r4, #0]
 800b3b8:	6922      	ldr	r2, [r4, #16]
 800b3ba:	1a98      	subs	r0, r3, r2
 800b3bc:	6963      	ldr	r3, [r4, #20]
 800b3be:	b2f6      	uxtb	r6, r6
 800b3c0:	4283      	cmp	r3, r0
 800b3c2:	4637      	mov	r7, r6
 800b3c4:	dc04      	bgt.n	800b3d0 <__swbuf_r+0x3a>
 800b3c6:	4621      	mov	r1, r4
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	f002 fbd3 	bl	800db74 <_fflush_r>
 800b3ce:	b9e0      	cbnz	r0, 800b40a <__swbuf_r+0x74>
 800b3d0:	68a3      	ldr	r3, [r4, #8]
 800b3d2:	3b01      	subs	r3, #1
 800b3d4:	60a3      	str	r3, [r4, #8]
 800b3d6:	6823      	ldr	r3, [r4, #0]
 800b3d8:	1c5a      	adds	r2, r3, #1
 800b3da:	6022      	str	r2, [r4, #0]
 800b3dc:	701e      	strb	r6, [r3, #0]
 800b3de:	6962      	ldr	r2, [r4, #20]
 800b3e0:	1c43      	adds	r3, r0, #1
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d004      	beq.n	800b3f0 <__swbuf_r+0x5a>
 800b3e6:	89a3      	ldrh	r3, [r4, #12]
 800b3e8:	07db      	lsls	r3, r3, #31
 800b3ea:	d506      	bpl.n	800b3fa <__swbuf_r+0x64>
 800b3ec:	2e0a      	cmp	r6, #10
 800b3ee:	d104      	bne.n	800b3fa <__swbuf_r+0x64>
 800b3f0:	4621      	mov	r1, r4
 800b3f2:	4628      	mov	r0, r5
 800b3f4:	f002 fbbe 	bl	800db74 <_fflush_r>
 800b3f8:	b938      	cbnz	r0, 800b40a <__swbuf_r+0x74>
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b3fe:	4621      	mov	r1, r4
 800b400:	4628      	mov	r0, r5
 800b402:	f000 f805 	bl	800b410 <__swsetup_r>
 800b406:	2800      	cmp	r0, #0
 800b408:	d0d5      	beq.n	800b3b6 <__swbuf_r+0x20>
 800b40a:	f04f 37ff 	mov.w	r7, #4294967295
 800b40e:	e7f4      	b.n	800b3fa <__swbuf_r+0x64>

0800b410 <__swsetup_r>:
 800b410:	b538      	push	{r3, r4, r5, lr}
 800b412:	4b2a      	ldr	r3, [pc, #168]	; (800b4bc <__swsetup_r+0xac>)
 800b414:	4605      	mov	r5, r0
 800b416:	6818      	ldr	r0, [r3, #0]
 800b418:	460c      	mov	r4, r1
 800b41a:	b118      	cbz	r0, 800b424 <__swsetup_r+0x14>
 800b41c:	6a03      	ldr	r3, [r0, #32]
 800b41e:	b90b      	cbnz	r3, 800b424 <__swsetup_r+0x14>
 800b420:	f7ff fe7e 	bl	800b120 <__sinit>
 800b424:	89a3      	ldrh	r3, [r4, #12]
 800b426:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b42a:	0718      	lsls	r0, r3, #28
 800b42c:	d422      	bmi.n	800b474 <__swsetup_r+0x64>
 800b42e:	06d9      	lsls	r1, r3, #27
 800b430:	d407      	bmi.n	800b442 <__swsetup_r+0x32>
 800b432:	2309      	movs	r3, #9
 800b434:	602b      	str	r3, [r5, #0]
 800b436:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b43a:	81a3      	strh	r3, [r4, #12]
 800b43c:	f04f 30ff 	mov.w	r0, #4294967295
 800b440:	e034      	b.n	800b4ac <__swsetup_r+0x9c>
 800b442:	0758      	lsls	r0, r3, #29
 800b444:	d512      	bpl.n	800b46c <__swsetup_r+0x5c>
 800b446:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b448:	b141      	cbz	r1, 800b45c <__swsetup_r+0x4c>
 800b44a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b44e:	4299      	cmp	r1, r3
 800b450:	d002      	beq.n	800b458 <__swsetup_r+0x48>
 800b452:	4628      	mov	r0, r5
 800b454:	f000 ff6e 	bl	800c334 <_free_r>
 800b458:	2300      	movs	r3, #0
 800b45a:	6363      	str	r3, [r4, #52]	; 0x34
 800b45c:	89a3      	ldrh	r3, [r4, #12]
 800b45e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b462:	81a3      	strh	r3, [r4, #12]
 800b464:	2300      	movs	r3, #0
 800b466:	6063      	str	r3, [r4, #4]
 800b468:	6923      	ldr	r3, [r4, #16]
 800b46a:	6023      	str	r3, [r4, #0]
 800b46c:	89a3      	ldrh	r3, [r4, #12]
 800b46e:	f043 0308 	orr.w	r3, r3, #8
 800b472:	81a3      	strh	r3, [r4, #12]
 800b474:	6923      	ldr	r3, [r4, #16]
 800b476:	b94b      	cbnz	r3, 800b48c <__swsetup_r+0x7c>
 800b478:	89a3      	ldrh	r3, [r4, #12]
 800b47a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b47e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b482:	d003      	beq.n	800b48c <__swsetup_r+0x7c>
 800b484:	4621      	mov	r1, r4
 800b486:	4628      	mov	r0, r5
 800b488:	f002 fbc2 	bl	800dc10 <__smakebuf_r>
 800b48c:	89a0      	ldrh	r0, [r4, #12]
 800b48e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b492:	f010 0301 	ands.w	r3, r0, #1
 800b496:	d00a      	beq.n	800b4ae <__swsetup_r+0x9e>
 800b498:	2300      	movs	r3, #0
 800b49a:	60a3      	str	r3, [r4, #8]
 800b49c:	6963      	ldr	r3, [r4, #20]
 800b49e:	425b      	negs	r3, r3
 800b4a0:	61a3      	str	r3, [r4, #24]
 800b4a2:	6923      	ldr	r3, [r4, #16]
 800b4a4:	b943      	cbnz	r3, 800b4b8 <__swsetup_r+0xa8>
 800b4a6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b4aa:	d1c4      	bne.n	800b436 <__swsetup_r+0x26>
 800b4ac:	bd38      	pop	{r3, r4, r5, pc}
 800b4ae:	0781      	lsls	r1, r0, #30
 800b4b0:	bf58      	it	pl
 800b4b2:	6963      	ldrpl	r3, [r4, #20]
 800b4b4:	60a3      	str	r3, [r4, #8]
 800b4b6:	e7f4      	b.n	800b4a2 <__swsetup_r+0x92>
 800b4b8:	2000      	movs	r0, #0
 800b4ba:	e7f7      	b.n	800b4ac <__swsetup_r+0x9c>
 800b4bc:	20000e24 	.word	0x20000e24

0800b4c0 <memset>:
 800b4c0:	4402      	add	r2, r0
 800b4c2:	4603      	mov	r3, r0
 800b4c4:	4293      	cmp	r3, r2
 800b4c6:	d100      	bne.n	800b4ca <memset+0xa>
 800b4c8:	4770      	bx	lr
 800b4ca:	f803 1b01 	strb.w	r1, [r3], #1
 800b4ce:	e7f9      	b.n	800b4c4 <memset+0x4>

0800b4d0 <strncmp>:
 800b4d0:	b510      	push	{r4, lr}
 800b4d2:	b16a      	cbz	r2, 800b4f0 <strncmp+0x20>
 800b4d4:	3901      	subs	r1, #1
 800b4d6:	1884      	adds	r4, r0, r2
 800b4d8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b4dc:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b4e0:	429a      	cmp	r2, r3
 800b4e2:	d103      	bne.n	800b4ec <strncmp+0x1c>
 800b4e4:	42a0      	cmp	r0, r4
 800b4e6:	d001      	beq.n	800b4ec <strncmp+0x1c>
 800b4e8:	2a00      	cmp	r2, #0
 800b4ea:	d1f5      	bne.n	800b4d8 <strncmp+0x8>
 800b4ec:	1ad0      	subs	r0, r2, r3
 800b4ee:	bd10      	pop	{r4, pc}
 800b4f0:	4610      	mov	r0, r2
 800b4f2:	e7fc      	b.n	800b4ee <strncmp+0x1e>

0800b4f4 <_localeconv_r>:
 800b4f4:	4800      	ldr	r0, [pc, #0]	; (800b4f8 <_localeconv_r+0x4>)
 800b4f6:	4770      	bx	lr
 800b4f8:	20000d5c 	.word	0x20000d5c

0800b4fc <_close_r>:
 800b4fc:	b538      	push	{r3, r4, r5, lr}
 800b4fe:	4d06      	ldr	r5, [pc, #24]	; (800b518 <_close_r+0x1c>)
 800b500:	2300      	movs	r3, #0
 800b502:	4604      	mov	r4, r0
 800b504:	4608      	mov	r0, r1
 800b506:	602b      	str	r3, [r5, #0]
 800b508:	f7f6 fc39 	bl	8001d7e <_close>
 800b50c:	1c43      	adds	r3, r0, #1
 800b50e:	d102      	bne.n	800b516 <_close_r+0x1a>
 800b510:	682b      	ldr	r3, [r5, #0]
 800b512:	b103      	cbz	r3, 800b516 <_close_r+0x1a>
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	bd38      	pop	{r3, r4, r5, pc}
 800b518:	200045c0 	.word	0x200045c0

0800b51c <_lseek_r>:
 800b51c:	b538      	push	{r3, r4, r5, lr}
 800b51e:	4d07      	ldr	r5, [pc, #28]	; (800b53c <_lseek_r+0x20>)
 800b520:	4604      	mov	r4, r0
 800b522:	4608      	mov	r0, r1
 800b524:	4611      	mov	r1, r2
 800b526:	2200      	movs	r2, #0
 800b528:	602a      	str	r2, [r5, #0]
 800b52a:	461a      	mov	r2, r3
 800b52c:	f7f6 fc4e 	bl	8001dcc <_lseek>
 800b530:	1c43      	adds	r3, r0, #1
 800b532:	d102      	bne.n	800b53a <_lseek_r+0x1e>
 800b534:	682b      	ldr	r3, [r5, #0]
 800b536:	b103      	cbz	r3, 800b53a <_lseek_r+0x1e>
 800b538:	6023      	str	r3, [r4, #0]
 800b53a:	bd38      	pop	{r3, r4, r5, pc}
 800b53c:	200045c0 	.word	0x200045c0

0800b540 <_read_r>:
 800b540:	b538      	push	{r3, r4, r5, lr}
 800b542:	4d07      	ldr	r5, [pc, #28]	; (800b560 <_read_r+0x20>)
 800b544:	4604      	mov	r4, r0
 800b546:	4608      	mov	r0, r1
 800b548:	4611      	mov	r1, r2
 800b54a:	2200      	movs	r2, #0
 800b54c:	602a      	str	r2, [r5, #0]
 800b54e:	461a      	mov	r2, r3
 800b550:	f7f6 fbdc 	bl	8001d0c <_read>
 800b554:	1c43      	adds	r3, r0, #1
 800b556:	d102      	bne.n	800b55e <_read_r+0x1e>
 800b558:	682b      	ldr	r3, [r5, #0]
 800b55a:	b103      	cbz	r3, 800b55e <_read_r+0x1e>
 800b55c:	6023      	str	r3, [r4, #0]
 800b55e:	bd38      	pop	{r3, r4, r5, pc}
 800b560:	200045c0 	.word	0x200045c0

0800b564 <_sbrk_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d06      	ldr	r5, [pc, #24]	; (800b580 <_sbrk_r+0x1c>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	f7f6 fc3a 	bl	8001de8 <_sbrk>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_sbrk_r+0x1a>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_sbrk_r+0x1a>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	200045c0 	.word	0x200045c0

0800b584 <_write_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	; (800b5a4 <_write_r+0x20>)
 800b588:	4604      	mov	r4, r0
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f6 fbd7 	bl	8001d46 <_write>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_write_r+0x1e>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_write_r+0x1e>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	200045c0 	.word	0x200045c0

0800b5a8 <__errno>:
 800b5a8:	4b01      	ldr	r3, [pc, #4]	; (800b5b0 <__errno+0x8>)
 800b5aa:	6818      	ldr	r0, [r3, #0]
 800b5ac:	4770      	bx	lr
 800b5ae:	bf00      	nop
 800b5b0:	20000e24 	.word	0x20000e24

0800b5b4 <__libc_init_array>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	4d0d      	ldr	r5, [pc, #52]	; (800b5ec <__libc_init_array+0x38>)
 800b5b8:	4c0d      	ldr	r4, [pc, #52]	; (800b5f0 <__libc_init_array+0x3c>)
 800b5ba:	1b64      	subs	r4, r4, r5
 800b5bc:	10a4      	asrs	r4, r4, #2
 800b5be:	2600      	movs	r6, #0
 800b5c0:	42a6      	cmp	r6, r4
 800b5c2:	d109      	bne.n	800b5d8 <__libc_init_array+0x24>
 800b5c4:	4d0b      	ldr	r5, [pc, #44]	; (800b5f4 <__libc_init_array+0x40>)
 800b5c6:	4c0c      	ldr	r4, [pc, #48]	; (800b5f8 <__libc_init_array+0x44>)
 800b5c8:	f002 feee 	bl	800e3a8 <_init>
 800b5cc:	1b64      	subs	r4, r4, r5
 800b5ce:	10a4      	asrs	r4, r4, #2
 800b5d0:	2600      	movs	r6, #0
 800b5d2:	42a6      	cmp	r6, r4
 800b5d4:	d105      	bne.n	800b5e2 <__libc_init_array+0x2e>
 800b5d6:	bd70      	pop	{r4, r5, r6, pc}
 800b5d8:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5dc:	4798      	blx	r3
 800b5de:	3601      	adds	r6, #1
 800b5e0:	e7ee      	b.n	800b5c0 <__libc_init_array+0xc>
 800b5e2:	f855 3b04 	ldr.w	r3, [r5], #4
 800b5e6:	4798      	blx	r3
 800b5e8:	3601      	adds	r6, #1
 800b5ea:	e7f2      	b.n	800b5d2 <__libc_init_array+0x1e>
 800b5ec:	08045f44 	.word	0x08045f44
 800b5f0:	08045f44 	.word	0x08045f44
 800b5f4:	08045f44 	.word	0x08045f44
 800b5f8:	08045f48 	.word	0x08045f48

0800b5fc <__retarget_lock_init_recursive>:
 800b5fc:	4770      	bx	lr

0800b5fe <__retarget_lock_acquire_recursive>:
 800b5fe:	4770      	bx	lr

0800b600 <__retarget_lock_release_recursive>:
 800b600:	4770      	bx	lr

0800b602 <memcpy>:
 800b602:	440a      	add	r2, r1
 800b604:	4291      	cmp	r1, r2
 800b606:	f100 33ff 	add.w	r3, r0, #4294967295
 800b60a:	d100      	bne.n	800b60e <memcpy+0xc>
 800b60c:	4770      	bx	lr
 800b60e:	b510      	push	{r4, lr}
 800b610:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b614:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b618:	4291      	cmp	r1, r2
 800b61a:	d1f9      	bne.n	800b610 <memcpy+0xe>
 800b61c:	bd10      	pop	{r4, pc}
	...

0800b620 <nan>:
 800b620:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b628 <nan+0x8>
 800b624:	4770      	bx	lr
 800b626:	bf00      	nop
 800b628:	00000000 	.word	0x00000000
 800b62c:	7ff80000 	.word	0x7ff80000

0800b630 <nanf>:
 800b630:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b638 <nanf+0x8>
 800b634:	4770      	bx	lr
 800b636:	bf00      	nop
 800b638:	7fc00000 	.word	0x7fc00000

0800b63c <quorem>:
 800b63c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b640:	6903      	ldr	r3, [r0, #16]
 800b642:	690c      	ldr	r4, [r1, #16]
 800b644:	42a3      	cmp	r3, r4
 800b646:	4607      	mov	r7, r0
 800b648:	db7e      	blt.n	800b748 <quorem+0x10c>
 800b64a:	3c01      	subs	r4, #1
 800b64c:	f101 0814 	add.w	r8, r1, #20
 800b650:	f100 0514 	add.w	r5, r0, #20
 800b654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b658:	9301      	str	r3, [sp, #4]
 800b65a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b65e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b662:	3301      	adds	r3, #1
 800b664:	429a      	cmp	r2, r3
 800b666:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b66a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b66e:	fbb2 f6f3 	udiv	r6, r2, r3
 800b672:	d331      	bcc.n	800b6d8 <quorem+0x9c>
 800b674:	f04f 0e00 	mov.w	lr, #0
 800b678:	4640      	mov	r0, r8
 800b67a:	46ac      	mov	ip, r5
 800b67c:	46f2      	mov	sl, lr
 800b67e:	f850 2b04 	ldr.w	r2, [r0], #4
 800b682:	b293      	uxth	r3, r2
 800b684:	fb06 e303 	mla	r3, r6, r3, lr
 800b688:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b68c:	0c1a      	lsrs	r2, r3, #16
 800b68e:	b29b      	uxth	r3, r3
 800b690:	ebaa 0303 	sub.w	r3, sl, r3
 800b694:	f8dc a000 	ldr.w	sl, [ip]
 800b698:	fa13 f38a 	uxtah	r3, r3, sl
 800b69c:	fb06 220e 	mla	r2, r6, lr, r2
 800b6a0:	9300      	str	r3, [sp, #0]
 800b6a2:	9b00      	ldr	r3, [sp, #0]
 800b6a4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6a8:	b292      	uxth	r2, r2
 800b6aa:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b6ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b6b2:	f8bd 3000 	ldrh.w	r3, [sp]
 800b6b6:	4581      	cmp	r9, r0
 800b6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b6bc:	f84c 3b04 	str.w	r3, [ip], #4
 800b6c0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b6c4:	d2db      	bcs.n	800b67e <quorem+0x42>
 800b6c6:	f855 300b 	ldr.w	r3, [r5, fp]
 800b6ca:	b92b      	cbnz	r3, 800b6d8 <quorem+0x9c>
 800b6cc:	9b01      	ldr	r3, [sp, #4]
 800b6ce:	3b04      	subs	r3, #4
 800b6d0:	429d      	cmp	r5, r3
 800b6d2:	461a      	mov	r2, r3
 800b6d4:	d32c      	bcc.n	800b730 <quorem+0xf4>
 800b6d6:	613c      	str	r4, [r7, #16]
 800b6d8:	4638      	mov	r0, r7
 800b6da:	f001 fca7 	bl	800d02c <__mcmp>
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	db22      	blt.n	800b728 <quorem+0xec>
 800b6e2:	3601      	adds	r6, #1
 800b6e4:	4629      	mov	r1, r5
 800b6e6:	2000      	movs	r0, #0
 800b6e8:	f858 2b04 	ldr.w	r2, [r8], #4
 800b6ec:	f8d1 c000 	ldr.w	ip, [r1]
 800b6f0:	b293      	uxth	r3, r2
 800b6f2:	1ac3      	subs	r3, r0, r3
 800b6f4:	0c12      	lsrs	r2, r2, #16
 800b6f6:	fa13 f38c 	uxtah	r3, r3, ip
 800b6fa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b6fe:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b702:	b29b      	uxth	r3, r3
 800b704:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b708:	45c1      	cmp	r9, r8
 800b70a:	f841 3b04 	str.w	r3, [r1], #4
 800b70e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b712:	d2e9      	bcs.n	800b6e8 <quorem+0xac>
 800b714:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b718:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b71c:	b922      	cbnz	r2, 800b728 <quorem+0xec>
 800b71e:	3b04      	subs	r3, #4
 800b720:	429d      	cmp	r5, r3
 800b722:	461a      	mov	r2, r3
 800b724:	d30a      	bcc.n	800b73c <quorem+0x100>
 800b726:	613c      	str	r4, [r7, #16]
 800b728:	4630      	mov	r0, r6
 800b72a:	b003      	add	sp, #12
 800b72c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b730:	6812      	ldr	r2, [r2, #0]
 800b732:	3b04      	subs	r3, #4
 800b734:	2a00      	cmp	r2, #0
 800b736:	d1ce      	bne.n	800b6d6 <quorem+0x9a>
 800b738:	3c01      	subs	r4, #1
 800b73a:	e7c9      	b.n	800b6d0 <quorem+0x94>
 800b73c:	6812      	ldr	r2, [r2, #0]
 800b73e:	3b04      	subs	r3, #4
 800b740:	2a00      	cmp	r2, #0
 800b742:	d1f0      	bne.n	800b726 <quorem+0xea>
 800b744:	3c01      	subs	r4, #1
 800b746:	e7eb      	b.n	800b720 <quorem+0xe4>
 800b748:	2000      	movs	r0, #0
 800b74a:	e7ee      	b.n	800b72a <quorem+0xee>
 800b74c:	0000      	movs	r0, r0
	...

0800b750 <_dtoa_r>:
 800b750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b754:	ed2d 8b04 	vpush	{d8-d9}
 800b758:	69c5      	ldr	r5, [r0, #28]
 800b75a:	b093      	sub	sp, #76	; 0x4c
 800b75c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b760:	ec57 6b10 	vmov	r6, r7, d0
 800b764:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b768:	9107      	str	r1, [sp, #28]
 800b76a:	4604      	mov	r4, r0
 800b76c:	920a      	str	r2, [sp, #40]	; 0x28
 800b76e:	930d      	str	r3, [sp, #52]	; 0x34
 800b770:	b975      	cbnz	r5, 800b790 <_dtoa_r+0x40>
 800b772:	2010      	movs	r0, #16
 800b774:	f7fd fece 	bl	8009514 <malloc>
 800b778:	4602      	mov	r2, r0
 800b77a:	61e0      	str	r0, [r4, #28]
 800b77c:	b920      	cbnz	r0, 800b788 <_dtoa_r+0x38>
 800b77e:	4bae      	ldr	r3, [pc, #696]	; (800ba38 <_dtoa_r+0x2e8>)
 800b780:	21ef      	movs	r1, #239	; 0xef
 800b782:	48ae      	ldr	r0, [pc, #696]	; (800ba3c <_dtoa_r+0x2ec>)
 800b784:	f002 fabc 	bl	800dd00 <__assert_func>
 800b788:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b78c:	6005      	str	r5, [r0, #0]
 800b78e:	60c5      	str	r5, [r0, #12]
 800b790:	69e3      	ldr	r3, [r4, #28]
 800b792:	6819      	ldr	r1, [r3, #0]
 800b794:	b151      	cbz	r1, 800b7ac <_dtoa_r+0x5c>
 800b796:	685a      	ldr	r2, [r3, #4]
 800b798:	604a      	str	r2, [r1, #4]
 800b79a:	2301      	movs	r3, #1
 800b79c:	4093      	lsls	r3, r2
 800b79e:	608b      	str	r3, [r1, #8]
 800b7a0:	4620      	mov	r0, r4
 800b7a2:	f001 f9bd 	bl	800cb20 <_Bfree>
 800b7a6:	69e3      	ldr	r3, [r4, #28]
 800b7a8:	2200      	movs	r2, #0
 800b7aa:	601a      	str	r2, [r3, #0]
 800b7ac:	1e3b      	subs	r3, r7, #0
 800b7ae:	bfbb      	ittet	lt
 800b7b0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b7b4:	9303      	strlt	r3, [sp, #12]
 800b7b6:	2300      	movge	r3, #0
 800b7b8:	2201      	movlt	r2, #1
 800b7ba:	bfac      	ite	ge
 800b7bc:	f8c8 3000 	strge.w	r3, [r8]
 800b7c0:	f8c8 2000 	strlt.w	r2, [r8]
 800b7c4:	4b9e      	ldr	r3, [pc, #632]	; (800ba40 <_dtoa_r+0x2f0>)
 800b7c6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b7ca:	ea33 0308 	bics.w	r3, r3, r8
 800b7ce:	d11b      	bne.n	800b808 <_dtoa_r+0xb8>
 800b7d0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7d2:	f242 730f 	movw	r3, #9999	; 0x270f
 800b7d6:	6013      	str	r3, [r2, #0]
 800b7d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b7dc:	4333      	orrs	r3, r6
 800b7de:	f000 8593 	beq.w	800c308 <_dtoa_r+0xbb8>
 800b7e2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b7e4:	b963      	cbnz	r3, 800b800 <_dtoa_r+0xb0>
 800b7e6:	4b97      	ldr	r3, [pc, #604]	; (800ba44 <_dtoa_r+0x2f4>)
 800b7e8:	e027      	b.n	800b83a <_dtoa_r+0xea>
 800b7ea:	4b97      	ldr	r3, [pc, #604]	; (800ba48 <_dtoa_r+0x2f8>)
 800b7ec:	9300      	str	r3, [sp, #0]
 800b7ee:	3308      	adds	r3, #8
 800b7f0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b7f2:	6013      	str	r3, [r2, #0]
 800b7f4:	9800      	ldr	r0, [sp, #0]
 800b7f6:	b013      	add	sp, #76	; 0x4c
 800b7f8:	ecbd 8b04 	vpop	{d8-d9}
 800b7fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b800:	4b90      	ldr	r3, [pc, #576]	; (800ba44 <_dtoa_r+0x2f4>)
 800b802:	9300      	str	r3, [sp, #0]
 800b804:	3303      	adds	r3, #3
 800b806:	e7f3      	b.n	800b7f0 <_dtoa_r+0xa0>
 800b808:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b80c:	2200      	movs	r2, #0
 800b80e:	ec51 0b17 	vmov	r0, r1, d7
 800b812:	eeb0 8a47 	vmov.f32	s16, s14
 800b816:	eef0 8a67 	vmov.f32	s17, s15
 800b81a:	2300      	movs	r3, #0
 800b81c:	f7f5 f974 	bl	8000b08 <__aeabi_dcmpeq>
 800b820:	4681      	mov	r9, r0
 800b822:	b160      	cbz	r0, 800b83e <_dtoa_r+0xee>
 800b824:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b826:	2301      	movs	r3, #1
 800b828:	6013      	str	r3, [r2, #0]
 800b82a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	f000 8568 	beq.w	800c302 <_dtoa_r+0xbb2>
 800b832:	4b86      	ldr	r3, [pc, #536]	; (800ba4c <_dtoa_r+0x2fc>)
 800b834:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b836:	6013      	str	r3, [r2, #0]
 800b838:	3b01      	subs	r3, #1
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	e7da      	b.n	800b7f4 <_dtoa_r+0xa4>
 800b83e:	aa10      	add	r2, sp, #64	; 0x40
 800b840:	a911      	add	r1, sp, #68	; 0x44
 800b842:	4620      	mov	r0, r4
 800b844:	eeb0 0a48 	vmov.f32	s0, s16
 800b848:	eef0 0a68 	vmov.f32	s1, s17
 800b84c:	f001 fd04 	bl	800d258 <__d2b>
 800b850:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b854:	4682      	mov	sl, r0
 800b856:	2d00      	cmp	r5, #0
 800b858:	d07f      	beq.n	800b95a <_dtoa_r+0x20a>
 800b85a:	ee18 3a90 	vmov	r3, s17
 800b85e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b862:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b866:	ec51 0b18 	vmov	r0, r1, d8
 800b86a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b86e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b872:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b876:	4619      	mov	r1, r3
 800b878:	2200      	movs	r2, #0
 800b87a:	4b75      	ldr	r3, [pc, #468]	; (800ba50 <_dtoa_r+0x300>)
 800b87c:	f7f4 fd24 	bl	80002c8 <__aeabi_dsub>
 800b880:	a367      	add	r3, pc, #412	; (adr r3, 800ba20 <_dtoa_r+0x2d0>)
 800b882:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b886:	f7f4 fed7 	bl	8000638 <__aeabi_dmul>
 800b88a:	a367      	add	r3, pc, #412	; (adr r3, 800ba28 <_dtoa_r+0x2d8>)
 800b88c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b890:	f7f4 fd1c 	bl	80002cc <__adddf3>
 800b894:	4606      	mov	r6, r0
 800b896:	4628      	mov	r0, r5
 800b898:	460f      	mov	r7, r1
 800b89a:	f7f4 fe63 	bl	8000564 <__aeabi_i2d>
 800b89e:	a364      	add	r3, pc, #400	; (adr r3, 800ba30 <_dtoa_r+0x2e0>)
 800b8a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8a4:	f7f4 fec8 	bl	8000638 <__aeabi_dmul>
 800b8a8:	4602      	mov	r2, r0
 800b8aa:	460b      	mov	r3, r1
 800b8ac:	4630      	mov	r0, r6
 800b8ae:	4639      	mov	r1, r7
 800b8b0:	f7f4 fd0c 	bl	80002cc <__adddf3>
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	460f      	mov	r7, r1
 800b8b8:	f7f5 f96e 	bl	8000b98 <__aeabi_d2iz>
 800b8bc:	2200      	movs	r2, #0
 800b8be:	4683      	mov	fp, r0
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	4630      	mov	r0, r6
 800b8c4:	4639      	mov	r1, r7
 800b8c6:	f7f5 f929 	bl	8000b1c <__aeabi_dcmplt>
 800b8ca:	b148      	cbz	r0, 800b8e0 <_dtoa_r+0x190>
 800b8cc:	4658      	mov	r0, fp
 800b8ce:	f7f4 fe49 	bl	8000564 <__aeabi_i2d>
 800b8d2:	4632      	mov	r2, r6
 800b8d4:	463b      	mov	r3, r7
 800b8d6:	f7f5 f917 	bl	8000b08 <__aeabi_dcmpeq>
 800b8da:	b908      	cbnz	r0, 800b8e0 <_dtoa_r+0x190>
 800b8dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b8e0:	f1bb 0f16 	cmp.w	fp, #22
 800b8e4:	d857      	bhi.n	800b996 <_dtoa_r+0x246>
 800b8e6:	4b5b      	ldr	r3, [pc, #364]	; (800ba54 <_dtoa_r+0x304>)
 800b8e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b8ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f0:	ec51 0b18 	vmov	r0, r1, d8
 800b8f4:	f7f5 f912 	bl	8000b1c <__aeabi_dcmplt>
 800b8f8:	2800      	cmp	r0, #0
 800b8fa:	d04e      	beq.n	800b99a <_dtoa_r+0x24a>
 800b8fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b900:	2300      	movs	r3, #0
 800b902:	930c      	str	r3, [sp, #48]	; 0x30
 800b904:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b906:	1b5b      	subs	r3, r3, r5
 800b908:	1e5a      	subs	r2, r3, #1
 800b90a:	bf45      	ittet	mi
 800b90c:	f1c3 0301 	rsbmi	r3, r3, #1
 800b910:	9305      	strmi	r3, [sp, #20]
 800b912:	2300      	movpl	r3, #0
 800b914:	2300      	movmi	r3, #0
 800b916:	9206      	str	r2, [sp, #24]
 800b918:	bf54      	ite	pl
 800b91a:	9305      	strpl	r3, [sp, #20]
 800b91c:	9306      	strmi	r3, [sp, #24]
 800b91e:	f1bb 0f00 	cmp.w	fp, #0
 800b922:	db3c      	blt.n	800b99e <_dtoa_r+0x24e>
 800b924:	9b06      	ldr	r3, [sp, #24]
 800b926:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b92a:	445b      	add	r3, fp
 800b92c:	9306      	str	r3, [sp, #24]
 800b92e:	2300      	movs	r3, #0
 800b930:	9308      	str	r3, [sp, #32]
 800b932:	9b07      	ldr	r3, [sp, #28]
 800b934:	2b09      	cmp	r3, #9
 800b936:	d868      	bhi.n	800ba0a <_dtoa_r+0x2ba>
 800b938:	2b05      	cmp	r3, #5
 800b93a:	bfc4      	itt	gt
 800b93c:	3b04      	subgt	r3, #4
 800b93e:	9307      	strgt	r3, [sp, #28]
 800b940:	9b07      	ldr	r3, [sp, #28]
 800b942:	f1a3 0302 	sub.w	r3, r3, #2
 800b946:	bfcc      	ite	gt
 800b948:	2500      	movgt	r5, #0
 800b94a:	2501      	movle	r5, #1
 800b94c:	2b03      	cmp	r3, #3
 800b94e:	f200 8085 	bhi.w	800ba5c <_dtoa_r+0x30c>
 800b952:	e8df f003 	tbb	[pc, r3]
 800b956:	3b2e      	.short	0x3b2e
 800b958:	5839      	.short	0x5839
 800b95a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b95e:	441d      	add	r5, r3
 800b960:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b964:	2b20      	cmp	r3, #32
 800b966:	bfc1      	itttt	gt
 800b968:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b96c:	fa08 f803 	lslgt.w	r8, r8, r3
 800b970:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b974:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b978:	bfd6      	itet	le
 800b97a:	f1c3 0320 	rsble	r3, r3, #32
 800b97e:	ea48 0003 	orrgt.w	r0, r8, r3
 800b982:	fa06 f003 	lslle.w	r0, r6, r3
 800b986:	f7f4 fddd 	bl	8000544 <__aeabi_ui2d>
 800b98a:	2201      	movs	r2, #1
 800b98c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b990:	3d01      	subs	r5, #1
 800b992:	920e      	str	r2, [sp, #56]	; 0x38
 800b994:	e76f      	b.n	800b876 <_dtoa_r+0x126>
 800b996:	2301      	movs	r3, #1
 800b998:	e7b3      	b.n	800b902 <_dtoa_r+0x1b2>
 800b99a:	900c      	str	r0, [sp, #48]	; 0x30
 800b99c:	e7b2      	b.n	800b904 <_dtoa_r+0x1b4>
 800b99e:	9b05      	ldr	r3, [sp, #20]
 800b9a0:	eba3 030b 	sub.w	r3, r3, fp
 800b9a4:	9305      	str	r3, [sp, #20]
 800b9a6:	f1cb 0300 	rsb	r3, fp, #0
 800b9aa:	9308      	str	r3, [sp, #32]
 800b9ac:	2300      	movs	r3, #0
 800b9ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9b0:	e7bf      	b.n	800b932 <_dtoa_r+0x1e2>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	dc52      	bgt.n	800ba62 <_dtoa_r+0x312>
 800b9bc:	2301      	movs	r3, #1
 800b9be:	9301      	str	r3, [sp, #4]
 800b9c0:	9304      	str	r3, [sp, #16]
 800b9c2:	461a      	mov	r2, r3
 800b9c4:	920a      	str	r2, [sp, #40]	; 0x28
 800b9c6:	e00b      	b.n	800b9e0 <_dtoa_r+0x290>
 800b9c8:	2301      	movs	r3, #1
 800b9ca:	e7f3      	b.n	800b9b4 <_dtoa_r+0x264>
 800b9cc:	2300      	movs	r3, #0
 800b9ce:	9309      	str	r3, [sp, #36]	; 0x24
 800b9d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b9d2:	445b      	add	r3, fp
 800b9d4:	9301      	str	r3, [sp, #4]
 800b9d6:	3301      	adds	r3, #1
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	9304      	str	r3, [sp, #16]
 800b9dc:	bfb8      	it	lt
 800b9de:	2301      	movlt	r3, #1
 800b9e0:	69e0      	ldr	r0, [r4, #28]
 800b9e2:	2100      	movs	r1, #0
 800b9e4:	2204      	movs	r2, #4
 800b9e6:	f102 0614 	add.w	r6, r2, #20
 800b9ea:	429e      	cmp	r6, r3
 800b9ec:	d93d      	bls.n	800ba6a <_dtoa_r+0x31a>
 800b9ee:	6041      	str	r1, [r0, #4]
 800b9f0:	4620      	mov	r0, r4
 800b9f2:	f001 f855 	bl	800caa0 <_Balloc>
 800b9f6:	9000      	str	r0, [sp, #0]
 800b9f8:	2800      	cmp	r0, #0
 800b9fa:	d139      	bne.n	800ba70 <_dtoa_r+0x320>
 800b9fc:	4b16      	ldr	r3, [pc, #88]	; (800ba58 <_dtoa_r+0x308>)
 800b9fe:	4602      	mov	r2, r0
 800ba00:	f240 11af 	movw	r1, #431	; 0x1af
 800ba04:	e6bd      	b.n	800b782 <_dtoa_r+0x32>
 800ba06:	2301      	movs	r3, #1
 800ba08:	e7e1      	b.n	800b9ce <_dtoa_r+0x27e>
 800ba0a:	2501      	movs	r5, #1
 800ba0c:	2300      	movs	r3, #0
 800ba0e:	9307      	str	r3, [sp, #28]
 800ba10:	9509      	str	r5, [sp, #36]	; 0x24
 800ba12:	f04f 33ff 	mov.w	r3, #4294967295
 800ba16:	9301      	str	r3, [sp, #4]
 800ba18:	9304      	str	r3, [sp, #16]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	2312      	movs	r3, #18
 800ba1e:	e7d1      	b.n	800b9c4 <_dtoa_r+0x274>
 800ba20:	636f4361 	.word	0x636f4361
 800ba24:	3fd287a7 	.word	0x3fd287a7
 800ba28:	8b60c8b3 	.word	0x8b60c8b3
 800ba2c:	3fc68a28 	.word	0x3fc68a28
 800ba30:	509f79fb 	.word	0x509f79fb
 800ba34:	3fd34413 	.word	0x3fd34413
 800ba38:	08045b9e 	.word	0x08045b9e
 800ba3c:	08045bb5 	.word	0x08045bb5
 800ba40:	7ff00000 	.word	0x7ff00000
 800ba44:	08045b9a 	.word	0x08045b9a
 800ba48:	08045b91 	.word	0x08045b91
 800ba4c:	08045b61 	.word	0x08045b61
 800ba50:	3ff80000 	.word	0x3ff80000
 800ba54:	08045d00 	.word	0x08045d00
 800ba58:	08045c0d 	.word	0x08045c0d
 800ba5c:	2301      	movs	r3, #1
 800ba5e:	9309      	str	r3, [sp, #36]	; 0x24
 800ba60:	e7d7      	b.n	800ba12 <_dtoa_r+0x2c2>
 800ba62:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba64:	9301      	str	r3, [sp, #4]
 800ba66:	9304      	str	r3, [sp, #16]
 800ba68:	e7ba      	b.n	800b9e0 <_dtoa_r+0x290>
 800ba6a:	3101      	adds	r1, #1
 800ba6c:	0052      	lsls	r2, r2, #1
 800ba6e:	e7ba      	b.n	800b9e6 <_dtoa_r+0x296>
 800ba70:	69e3      	ldr	r3, [r4, #28]
 800ba72:	9a00      	ldr	r2, [sp, #0]
 800ba74:	601a      	str	r2, [r3, #0]
 800ba76:	9b04      	ldr	r3, [sp, #16]
 800ba78:	2b0e      	cmp	r3, #14
 800ba7a:	f200 80a8 	bhi.w	800bbce <_dtoa_r+0x47e>
 800ba7e:	2d00      	cmp	r5, #0
 800ba80:	f000 80a5 	beq.w	800bbce <_dtoa_r+0x47e>
 800ba84:	f1bb 0f00 	cmp.w	fp, #0
 800ba88:	dd38      	ble.n	800bafc <_dtoa_r+0x3ac>
 800ba8a:	4bc0      	ldr	r3, [pc, #768]	; (800bd8c <_dtoa_r+0x63c>)
 800ba8c:	f00b 020f 	and.w	r2, fp, #15
 800ba90:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ba94:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800ba98:	e9d3 6700 	ldrd	r6, r7, [r3]
 800ba9c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800baa0:	d019      	beq.n	800bad6 <_dtoa_r+0x386>
 800baa2:	4bbb      	ldr	r3, [pc, #748]	; (800bd90 <_dtoa_r+0x640>)
 800baa4:	ec51 0b18 	vmov	r0, r1, d8
 800baa8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800baac:	f7f4 feee 	bl	800088c <__aeabi_ddiv>
 800bab0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bab4:	f008 080f 	and.w	r8, r8, #15
 800bab8:	2503      	movs	r5, #3
 800baba:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bd90 <_dtoa_r+0x640>
 800babe:	f1b8 0f00 	cmp.w	r8, #0
 800bac2:	d10a      	bne.n	800bada <_dtoa_r+0x38a>
 800bac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bac8:	4632      	mov	r2, r6
 800baca:	463b      	mov	r3, r7
 800bacc:	f7f4 fede 	bl	800088c <__aeabi_ddiv>
 800bad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bad4:	e02b      	b.n	800bb2e <_dtoa_r+0x3de>
 800bad6:	2502      	movs	r5, #2
 800bad8:	e7ef      	b.n	800baba <_dtoa_r+0x36a>
 800bada:	f018 0f01 	tst.w	r8, #1
 800bade:	d008      	beq.n	800baf2 <_dtoa_r+0x3a2>
 800bae0:	4630      	mov	r0, r6
 800bae2:	4639      	mov	r1, r7
 800bae4:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bae8:	f7f4 fda6 	bl	8000638 <__aeabi_dmul>
 800baec:	3501      	adds	r5, #1
 800baee:	4606      	mov	r6, r0
 800baf0:	460f      	mov	r7, r1
 800baf2:	ea4f 0868 	mov.w	r8, r8, asr #1
 800baf6:	f109 0908 	add.w	r9, r9, #8
 800bafa:	e7e0      	b.n	800babe <_dtoa_r+0x36e>
 800bafc:	f000 809f 	beq.w	800bc3e <_dtoa_r+0x4ee>
 800bb00:	f1cb 0600 	rsb	r6, fp, #0
 800bb04:	4ba1      	ldr	r3, [pc, #644]	; (800bd8c <_dtoa_r+0x63c>)
 800bb06:	4fa2      	ldr	r7, [pc, #648]	; (800bd90 <_dtoa_r+0x640>)
 800bb08:	f006 020f 	and.w	r2, r6, #15
 800bb0c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb14:	ec51 0b18 	vmov	r0, r1, d8
 800bb18:	f7f4 fd8e 	bl	8000638 <__aeabi_dmul>
 800bb1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb20:	1136      	asrs	r6, r6, #4
 800bb22:	2300      	movs	r3, #0
 800bb24:	2502      	movs	r5, #2
 800bb26:	2e00      	cmp	r6, #0
 800bb28:	d17e      	bne.n	800bc28 <_dtoa_r+0x4d8>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d1d0      	bne.n	800bad0 <_dtoa_r+0x380>
 800bb2e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb30:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	f000 8084 	beq.w	800bc42 <_dtoa_r+0x4f2>
 800bb3a:	4b96      	ldr	r3, [pc, #600]	; (800bd94 <_dtoa_r+0x644>)
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4640      	mov	r0, r8
 800bb40:	4649      	mov	r1, r9
 800bb42:	f7f4 ffeb 	bl	8000b1c <__aeabi_dcmplt>
 800bb46:	2800      	cmp	r0, #0
 800bb48:	d07b      	beq.n	800bc42 <_dtoa_r+0x4f2>
 800bb4a:	9b04      	ldr	r3, [sp, #16]
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d078      	beq.n	800bc42 <_dtoa_r+0x4f2>
 800bb50:	9b01      	ldr	r3, [sp, #4]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	dd39      	ble.n	800bbca <_dtoa_r+0x47a>
 800bb56:	4b90      	ldr	r3, [pc, #576]	; (800bd98 <_dtoa_r+0x648>)
 800bb58:	2200      	movs	r2, #0
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	4649      	mov	r1, r9
 800bb5e:	f7f4 fd6b 	bl	8000638 <__aeabi_dmul>
 800bb62:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb66:	9e01      	ldr	r6, [sp, #4]
 800bb68:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bb6c:	3501      	adds	r5, #1
 800bb6e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb72:	4628      	mov	r0, r5
 800bb74:	f7f4 fcf6 	bl	8000564 <__aeabi_i2d>
 800bb78:	4642      	mov	r2, r8
 800bb7a:	464b      	mov	r3, r9
 800bb7c:	f7f4 fd5c 	bl	8000638 <__aeabi_dmul>
 800bb80:	4b86      	ldr	r3, [pc, #536]	; (800bd9c <_dtoa_r+0x64c>)
 800bb82:	2200      	movs	r2, #0
 800bb84:	f7f4 fba2 	bl	80002cc <__adddf3>
 800bb88:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bb8c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb90:	9303      	str	r3, [sp, #12]
 800bb92:	2e00      	cmp	r6, #0
 800bb94:	d158      	bne.n	800bc48 <_dtoa_r+0x4f8>
 800bb96:	4b82      	ldr	r3, [pc, #520]	; (800bda0 <_dtoa_r+0x650>)
 800bb98:	2200      	movs	r2, #0
 800bb9a:	4640      	mov	r0, r8
 800bb9c:	4649      	mov	r1, r9
 800bb9e:	f7f4 fb93 	bl	80002c8 <__aeabi_dsub>
 800bba2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bba6:	4680      	mov	r8, r0
 800bba8:	4689      	mov	r9, r1
 800bbaa:	f7f4 ffd5 	bl	8000b58 <__aeabi_dcmpgt>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	f040 8296 	bne.w	800c0e0 <_dtoa_r+0x990>
 800bbb4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bbb8:	4640      	mov	r0, r8
 800bbba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bbbe:	4649      	mov	r1, r9
 800bbc0:	f7f4 ffac 	bl	8000b1c <__aeabi_dcmplt>
 800bbc4:	2800      	cmp	r0, #0
 800bbc6:	f040 8289 	bne.w	800c0dc <_dtoa_r+0x98c>
 800bbca:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bbce:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bbd0:	2b00      	cmp	r3, #0
 800bbd2:	f2c0 814e 	blt.w	800be72 <_dtoa_r+0x722>
 800bbd6:	f1bb 0f0e 	cmp.w	fp, #14
 800bbda:	f300 814a 	bgt.w	800be72 <_dtoa_r+0x722>
 800bbde:	4b6b      	ldr	r3, [pc, #428]	; (800bd8c <_dtoa_r+0x63c>)
 800bbe0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bbe4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bbe8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	f280 80dc 	bge.w	800bda8 <_dtoa_r+0x658>
 800bbf0:	9b04      	ldr	r3, [sp, #16]
 800bbf2:	2b00      	cmp	r3, #0
 800bbf4:	f300 80d8 	bgt.w	800bda8 <_dtoa_r+0x658>
 800bbf8:	f040 826f 	bne.w	800c0da <_dtoa_r+0x98a>
 800bbfc:	4b68      	ldr	r3, [pc, #416]	; (800bda0 <_dtoa_r+0x650>)
 800bbfe:	2200      	movs	r2, #0
 800bc00:	4640      	mov	r0, r8
 800bc02:	4649      	mov	r1, r9
 800bc04:	f7f4 fd18 	bl	8000638 <__aeabi_dmul>
 800bc08:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc0c:	f7f4 ff9a 	bl	8000b44 <__aeabi_dcmpge>
 800bc10:	9e04      	ldr	r6, [sp, #16]
 800bc12:	4637      	mov	r7, r6
 800bc14:	2800      	cmp	r0, #0
 800bc16:	f040 8245 	bne.w	800c0a4 <_dtoa_r+0x954>
 800bc1a:	9d00      	ldr	r5, [sp, #0]
 800bc1c:	2331      	movs	r3, #49	; 0x31
 800bc1e:	f805 3b01 	strb.w	r3, [r5], #1
 800bc22:	f10b 0b01 	add.w	fp, fp, #1
 800bc26:	e241      	b.n	800c0ac <_dtoa_r+0x95c>
 800bc28:	07f2      	lsls	r2, r6, #31
 800bc2a:	d505      	bpl.n	800bc38 <_dtoa_r+0x4e8>
 800bc2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc30:	f7f4 fd02 	bl	8000638 <__aeabi_dmul>
 800bc34:	3501      	adds	r5, #1
 800bc36:	2301      	movs	r3, #1
 800bc38:	1076      	asrs	r6, r6, #1
 800bc3a:	3708      	adds	r7, #8
 800bc3c:	e773      	b.n	800bb26 <_dtoa_r+0x3d6>
 800bc3e:	2502      	movs	r5, #2
 800bc40:	e775      	b.n	800bb2e <_dtoa_r+0x3de>
 800bc42:	9e04      	ldr	r6, [sp, #16]
 800bc44:	465f      	mov	r7, fp
 800bc46:	e792      	b.n	800bb6e <_dtoa_r+0x41e>
 800bc48:	9900      	ldr	r1, [sp, #0]
 800bc4a:	4b50      	ldr	r3, [pc, #320]	; (800bd8c <_dtoa_r+0x63c>)
 800bc4c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc50:	4431      	add	r1, r6
 800bc52:	9102      	str	r1, [sp, #8]
 800bc54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc56:	eeb0 9a47 	vmov.f32	s18, s14
 800bc5a:	eef0 9a67 	vmov.f32	s19, s15
 800bc5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bc62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bc66:	2900      	cmp	r1, #0
 800bc68:	d044      	beq.n	800bcf4 <_dtoa_r+0x5a4>
 800bc6a:	494e      	ldr	r1, [pc, #312]	; (800bda4 <_dtoa_r+0x654>)
 800bc6c:	2000      	movs	r0, #0
 800bc6e:	f7f4 fe0d 	bl	800088c <__aeabi_ddiv>
 800bc72:	ec53 2b19 	vmov	r2, r3, d9
 800bc76:	f7f4 fb27 	bl	80002c8 <__aeabi_dsub>
 800bc7a:	9d00      	ldr	r5, [sp, #0]
 800bc7c:	ec41 0b19 	vmov	d9, r0, r1
 800bc80:	4649      	mov	r1, r9
 800bc82:	4640      	mov	r0, r8
 800bc84:	f7f4 ff88 	bl	8000b98 <__aeabi_d2iz>
 800bc88:	4606      	mov	r6, r0
 800bc8a:	f7f4 fc6b 	bl	8000564 <__aeabi_i2d>
 800bc8e:	4602      	mov	r2, r0
 800bc90:	460b      	mov	r3, r1
 800bc92:	4640      	mov	r0, r8
 800bc94:	4649      	mov	r1, r9
 800bc96:	f7f4 fb17 	bl	80002c8 <__aeabi_dsub>
 800bc9a:	3630      	adds	r6, #48	; 0x30
 800bc9c:	f805 6b01 	strb.w	r6, [r5], #1
 800bca0:	ec53 2b19 	vmov	r2, r3, d9
 800bca4:	4680      	mov	r8, r0
 800bca6:	4689      	mov	r9, r1
 800bca8:	f7f4 ff38 	bl	8000b1c <__aeabi_dcmplt>
 800bcac:	2800      	cmp	r0, #0
 800bcae:	d164      	bne.n	800bd7a <_dtoa_r+0x62a>
 800bcb0:	4642      	mov	r2, r8
 800bcb2:	464b      	mov	r3, r9
 800bcb4:	4937      	ldr	r1, [pc, #220]	; (800bd94 <_dtoa_r+0x644>)
 800bcb6:	2000      	movs	r0, #0
 800bcb8:	f7f4 fb06 	bl	80002c8 <__aeabi_dsub>
 800bcbc:	ec53 2b19 	vmov	r2, r3, d9
 800bcc0:	f7f4 ff2c 	bl	8000b1c <__aeabi_dcmplt>
 800bcc4:	2800      	cmp	r0, #0
 800bcc6:	f040 80b6 	bne.w	800be36 <_dtoa_r+0x6e6>
 800bcca:	9b02      	ldr	r3, [sp, #8]
 800bccc:	429d      	cmp	r5, r3
 800bcce:	f43f af7c 	beq.w	800bbca <_dtoa_r+0x47a>
 800bcd2:	4b31      	ldr	r3, [pc, #196]	; (800bd98 <_dtoa_r+0x648>)
 800bcd4:	ec51 0b19 	vmov	r0, r1, d9
 800bcd8:	2200      	movs	r2, #0
 800bcda:	f7f4 fcad 	bl	8000638 <__aeabi_dmul>
 800bcde:	4b2e      	ldr	r3, [pc, #184]	; (800bd98 <_dtoa_r+0x648>)
 800bce0:	ec41 0b19 	vmov	d9, r0, r1
 800bce4:	2200      	movs	r2, #0
 800bce6:	4640      	mov	r0, r8
 800bce8:	4649      	mov	r1, r9
 800bcea:	f7f4 fca5 	bl	8000638 <__aeabi_dmul>
 800bcee:	4680      	mov	r8, r0
 800bcf0:	4689      	mov	r9, r1
 800bcf2:	e7c5      	b.n	800bc80 <_dtoa_r+0x530>
 800bcf4:	ec51 0b17 	vmov	r0, r1, d7
 800bcf8:	f7f4 fc9e 	bl	8000638 <__aeabi_dmul>
 800bcfc:	9b02      	ldr	r3, [sp, #8]
 800bcfe:	9d00      	ldr	r5, [sp, #0]
 800bd00:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd02:	ec41 0b19 	vmov	d9, r0, r1
 800bd06:	4649      	mov	r1, r9
 800bd08:	4640      	mov	r0, r8
 800bd0a:	f7f4 ff45 	bl	8000b98 <__aeabi_d2iz>
 800bd0e:	4606      	mov	r6, r0
 800bd10:	f7f4 fc28 	bl	8000564 <__aeabi_i2d>
 800bd14:	3630      	adds	r6, #48	; 0x30
 800bd16:	4602      	mov	r2, r0
 800bd18:	460b      	mov	r3, r1
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	f7f4 fad3 	bl	80002c8 <__aeabi_dsub>
 800bd22:	f805 6b01 	strb.w	r6, [r5], #1
 800bd26:	9b02      	ldr	r3, [sp, #8]
 800bd28:	429d      	cmp	r5, r3
 800bd2a:	4680      	mov	r8, r0
 800bd2c:	4689      	mov	r9, r1
 800bd2e:	f04f 0200 	mov.w	r2, #0
 800bd32:	d124      	bne.n	800bd7e <_dtoa_r+0x62e>
 800bd34:	4b1b      	ldr	r3, [pc, #108]	; (800bda4 <_dtoa_r+0x654>)
 800bd36:	ec51 0b19 	vmov	r0, r1, d9
 800bd3a:	f7f4 fac7 	bl	80002cc <__adddf3>
 800bd3e:	4602      	mov	r2, r0
 800bd40:	460b      	mov	r3, r1
 800bd42:	4640      	mov	r0, r8
 800bd44:	4649      	mov	r1, r9
 800bd46:	f7f4 ff07 	bl	8000b58 <__aeabi_dcmpgt>
 800bd4a:	2800      	cmp	r0, #0
 800bd4c:	d173      	bne.n	800be36 <_dtoa_r+0x6e6>
 800bd4e:	ec53 2b19 	vmov	r2, r3, d9
 800bd52:	4914      	ldr	r1, [pc, #80]	; (800bda4 <_dtoa_r+0x654>)
 800bd54:	2000      	movs	r0, #0
 800bd56:	f7f4 fab7 	bl	80002c8 <__aeabi_dsub>
 800bd5a:	4602      	mov	r2, r0
 800bd5c:	460b      	mov	r3, r1
 800bd5e:	4640      	mov	r0, r8
 800bd60:	4649      	mov	r1, r9
 800bd62:	f7f4 fedb 	bl	8000b1c <__aeabi_dcmplt>
 800bd66:	2800      	cmp	r0, #0
 800bd68:	f43f af2f 	beq.w	800bbca <_dtoa_r+0x47a>
 800bd6c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bd6e:	1e6b      	subs	r3, r5, #1
 800bd70:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd72:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bd76:	2b30      	cmp	r3, #48	; 0x30
 800bd78:	d0f8      	beq.n	800bd6c <_dtoa_r+0x61c>
 800bd7a:	46bb      	mov	fp, r7
 800bd7c:	e04a      	b.n	800be14 <_dtoa_r+0x6c4>
 800bd7e:	4b06      	ldr	r3, [pc, #24]	; (800bd98 <_dtoa_r+0x648>)
 800bd80:	f7f4 fc5a 	bl	8000638 <__aeabi_dmul>
 800bd84:	4680      	mov	r8, r0
 800bd86:	4689      	mov	r9, r1
 800bd88:	e7bd      	b.n	800bd06 <_dtoa_r+0x5b6>
 800bd8a:	bf00      	nop
 800bd8c:	08045d00 	.word	0x08045d00
 800bd90:	08045cd8 	.word	0x08045cd8
 800bd94:	3ff00000 	.word	0x3ff00000
 800bd98:	40240000 	.word	0x40240000
 800bd9c:	401c0000 	.word	0x401c0000
 800bda0:	40140000 	.word	0x40140000
 800bda4:	3fe00000 	.word	0x3fe00000
 800bda8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800bdac:	9d00      	ldr	r5, [sp, #0]
 800bdae:	4642      	mov	r2, r8
 800bdb0:	464b      	mov	r3, r9
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	4639      	mov	r1, r7
 800bdb6:	f7f4 fd69 	bl	800088c <__aeabi_ddiv>
 800bdba:	f7f4 feed 	bl	8000b98 <__aeabi_d2iz>
 800bdbe:	9001      	str	r0, [sp, #4]
 800bdc0:	f7f4 fbd0 	bl	8000564 <__aeabi_i2d>
 800bdc4:	4642      	mov	r2, r8
 800bdc6:	464b      	mov	r3, r9
 800bdc8:	f7f4 fc36 	bl	8000638 <__aeabi_dmul>
 800bdcc:	4602      	mov	r2, r0
 800bdce:	460b      	mov	r3, r1
 800bdd0:	4630      	mov	r0, r6
 800bdd2:	4639      	mov	r1, r7
 800bdd4:	f7f4 fa78 	bl	80002c8 <__aeabi_dsub>
 800bdd8:	9e01      	ldr	r6, [sp, #4]
 800bdda:	9f04      	ldr	r7, [sp, #16]
 800bddc:	3630      	adds	r6, #48	; 0x30
 800bdde:	f805 6b01 	strb.w	r6, [r5], #1
 800bde2:	9e00      	ldr	r6, [sp, #0]
 800bde4:	1bae      	subs	r6, r5, r6
 800bde6:	42b7      	cmp	r7, r6
 800bde8:	4602      	mov	r2, r0
 800bdea:	460b      	mov	r3, r1
 800bdec:	d134      	bne.n	800be58 <_dtoa_r+0x708>
 800bdee:	f7f4 fa6d 	bl	80002cc <__adddf3>
 800bdf2:	4642      	mov	r2, r8
 800bdf4:	464b      	mov	r3, r9
 800bdf6:	4606      	mov	r6, r0
 800bdf8:	460f      	mov	r7, r1
 800bdfa:	f7f4 fead 	bl	8000b58 <__aeabi_dcmpgt>
 800bdfe:	b9c8      	cbnz	r0, 800be34 <_dtoa_r+0x6e4>
 800be00:	4642      	mov	r2, r8
 800be02:	464b      	mov	r3, r9
 800be04:	4630      	mov	r0, r6
 800be06:	4639      	mov	r1, r7
 800be08:	f7f4 fe7e 	bl	8000b08 <__aeabi_dcmpeq>
 800be0c:	b110      	cbz	r0, 800be14 <_dtoa_r+0x6c4>
 800be0e:	9b01      	ldr	r3, [sp, #4]
 800be10:	07db      	lsls	r3, r3, #31
 800be12:	d40f      	bmi.n	800be34 <_dtoa_r+0x6e4>
 800be14:	4651      	mov	r1, sl
 800be16:	4620      	mov	r0, r4
 800be18:	f000 fe82 	bl	800cb20 <_Bfree>
 800be1c:	2300      	movs	r3, #0
 800be1e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be20:	702b      	strb	r3, [r5, #0]
 800be22:	f10b 0301 	add.w	r3, fp, #1
 800be26:	6013      	str	r3, [r2, #0]
 800be28:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be2a:	2b00      	cmp	r3, #0
 800be2c:	f43f ace2 	beq.w	800b7f4 <_dtoa_r+0xa4>
 800be30:	601d      	str	r5, [r3, #0]
 800be32:	e4df      	b.n	800b7f4 <_dtoa_r+0xa4>
 800be34:	465f      	mov	r7, fp
 800be36:	462b      	mov	r3, r5
 800be38:	461d      	mov	r5, r3
 800be3a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be3e:	2a39      	cmp	r2, #57	; 0x39
 800be40:	d106      	bne.n	800be50 <_dtoa_r+0x700>
 800be42:	9a00      	ldr	r2, [sp, #0]
 800be44:	429a      	cmp	r2, r3
 800be46:	d1f7      	bne.n	800be38 <_dtoa_r+0x6e8>
 800be48:	9900      	ldr	r1, [sp, #0]
 800be4a:	2230      	movs	r2, #48	; 0x30
 800be4c:	3701      	adds	r7, #1
 800be4e:	700a      	strb	r2, [r1, #0]
 800be50:	781a      	ldrb	r2, [r3, #0]
 800be52:	3201      	adds	r2, #1
 800be54:	701a      	strb	r2, [r3, #0]
 800be56:	e790      	b.n	800bd7a <_dtoa_r+0x62a>
 800be58:	4ba3      	ldr	r3, [pc, #652]	; (800c0e8 <_dtoa_r+0x998>)
 800be5a:	2200      	movs	r2, #0
 800be5c:	f7f4 fbec 	bl	8000638 <__aeabi_dmul>
 800be60:	2200      	movs	r2, #0
 800be62:	2300      	movs	r3, #0
 800be64:	4606      	mov	r6, r0
 800be66:	460f      	mov	r7, r1
 800be68:	f7f4 fe4e 	bl	8000b08 <__aeabi_dcmpeq>
 800be6c:	2800      	cmp	r0, #0
 800be6e:	d09e      	beq.n	800bdae <_dtoa_r+0x65e>
 800be70:	e7d0      	b.n	800be14 <_dtoa_r+0x6c4>
 800be72:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be74:	2a00      	cmp	r2, #0
 800be76:	f000 80ca 	beq.w	800c00e <_dtoa_r+0x8be>
 800be7a:	9a07      	ldr	r2, [sp, #28]
 800be7c:	2a01      	cmp	r2, #1
 800be7e:	f300 80ad 	bgt.w	800bfdc <_dtoa_r+0x88c>
 800be82:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800be84:	2a00      	cmp	r2, #0
 800be86:	f000 80a5 	beq.w	800bfd4 <_dtoa_r+0x884>
 800be8a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800be8e:	9e08      	ldr	r6, [sp, #32]
 800be90:	9d05      	ldr	r5, [sp, #20]
 800be92:	9a05      	ldr	r2, [sp, #20]
 800be94:	441a      	add	r2, r3
 800be96:	9205      	str	r2, [sp, #20]
 800be98:	9a06      	ldr	r2, [sp, #24]
 800be9a:	2101      	movs	r1, #1
 800be9c:	441a      	add	r2, r3
 800be9e:	4620      	mov	r0, r4
 800bea0:	9206      	str	r2, [sp, #24]
 800bea2:	f000 ff3d 	bl	800cd20 <__i2b>
 800bea6:	4607      	mov	r7, r0
 800bea8:	b165      	cbz	r5, 800bec4 <_dtoa_r+0x774>
 800beaa:	9b06      	ldr	r3, [sp, #24]
 800beac:	2b00      	cmp	r3, #0
 800beae:	dd09      	ble.n	800bec4 <_dtoa_r+0x774>
 800beb0:	42ab      	cmp	r3, r5
 800beb2:	9a05      	ldr	r2, [sp, #20]
 800beb4:	bfa8      	it	ge
 800beb6:	462b      	movge	r3, r5
 800beb8:	1ad2      	subs	r2, r2, r3
 800beba:	9205      	str	r2, [sp, #20]
 800bebc:	9a06      	ldr	r2, [sp, #24]
 800bebe:	1aed      	subs	r5, r5, r3
 800bec0:	1ad3      	subs	r3, r2, r3
 800bec2:	9306      	str	r3, [sp, #24]
 800bec4:	9b08      	ldr	r3, [sp, #32]
 800bec6:	b1f3      	cbz	r3, 800bf06 <_dtoa_r+0x7b6>
 800bec8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beca:	2b00      	cmp	r3, #0
 800becc:	f000 80a3 	beq.w	800c016 <_dtoa_r+0x8c6>
 800bed0:	2e00      	cmp	r6, #0
 800bed2:	dd10      	ble.n	800bef6 <_dtoa_r+0x7a6>
 800bed4:	4639      	mov	r1, r7
 800bed6:	4632      	mov	r2, r6
 800bed8:	4620      	mov	r0, r4
 800beda:	f000 ffe1 	bl	800cea0 <__pow5mult>
 800bede:	4652      	mov	r2, sl
 800bee0:	4601      	mov	r1, r0
 800bee2:	4607      	mov	r7, r0
 800bee4:	4620      	mov	r0, r4
 800bee6:	f000 ff31 	bl	800cd4c <__multiply>
 800beea:	4651      	mov	r1, sl
 800beec:	4680      	mov	r8, r0
 800beee:	4620      	mov	r0, r4
 800bef0:	f000 fe16 	bl	800cb20 <_Bfree>
 800bef4:	46c2      	mov	sl, r8
 800bef6:	9b08      	ldr	r3, [sp, #32]
 800bef8:	1b9a      	subs	r2, r3, r6
 800befa:	d004      	beq.n	800bf06 <_dtoa_r+0x7b6>
 800befc:	4651      	mov	r1, sl
 800befe:	4620      	mov	r0, r4
 800bf00:	f000 ffce 	bl	800cea0 <__pow5mult>
 800bf04:	4682      	mov	sl, r0
 800bf06:	2101      	movs	r1, #1
 800bf08:	4620      	mov	r0, r4
 800bf0a:	f000 ff09 	bl	800cd20 <__i2b>
 800bf0e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	4606      	mov	r6, r0
 800bf14:	f340 8081 	ble.w	800c01a <_dtoa_r+0x8ca>
 800bf18:	461a      	mov	r2, r3
 800bf1a:	4601      	mov	r1, r0
 800bf1c:	4620      	mov	r0, r4
 800bf1e:	f000 ffbf 	bl	800cea0 <__pow5mult>
 800bf22:	9b07      	ldr	r3, [sp, #28]
 800bf24:	2b01      	cmp	r3, #1
 800bf26:	4606      	mov	r6, r0
 800bf28:	dd7a      	ble.n	800c020 <_dtoa_r+0x8d0>
 800bf2a:	f04f 0800 	mov.w	r8, #0
 800bf2e:	6933      	ldr	r3, [r6, #16]
 800bf30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf34:	6918      	ldr	r0, [r3, #16]
 800bf36:	f000 fea5 	bl	800cc84 <__hi0bits>
 800bf3a:	f1c0 0020 	rsb	r0, r0, #32
 800bf3e:	9b06      	ldr	r3, [sp, #24]
 800bf40:	4418      	add	r0, r3
 800bf42:	f010 001f 	ands.w	r0, r0, #31
 800bf46:	f000 8094 	beq.w	800c072 <_dtoa_r+0x922>
 800bf4a:	f1c0 0320 	rsb	r3, r0, #32
 800bf4e:	2b04      	cmp	r3, #4
 800bf50:	f340 8085 	ble.w	800c05e <_dtoa_r+0x90e>
 800bf54:	9b05      	ldr	r3, [sp, #20]
 800bf56:	f1c0 001c 	rsb	r0, r0, #28
 800bf5a:	4403      	add	r3, r0
 800bf5c:	9305      	str	r3, [sp, #20]
 800bf5e:	9b06      	ldr	r3, [sp, #24]
 800bf60:	4403      	add	r3, r0
 800bf62:	4405      	add	r5, r0
 800bf64:	9306      	str	r3, [sp, #24]
 800bf66:	9b05      	ldr	r3, [sp, #20]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	dd05      	ble.n	800bf78 <_dtoa_r+0x828>
 800bf6c:	4651      	mov	r1, sl
 800bf6e:	461a      	mov	r2, r3
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 ffef 	bl	800cf54 <__lshift>
 800bf76:	4682      	mov	sl, r0
 800bf78:	9b06      	ldr	r3, [sp, #24]
 800bf7a:	2b00      	cmp	r3, #0
 800bf7c:	dd05      	ble.n	800bf8a <_dtoa_r+0x83a>
 800bf7e:	4631      	mov	r1, r6
 800bf80:	461a      	mov	r2, r3
 800bf82:	4620      	mov	r0, r4
 800bf84:	f000 ffe6 	bl	800cf54 <__lshift>
 800bf88:	4606      	mov	r6, r0
 800bf8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d072      	beq.n	800c076 <_dtoa_r+0x926>
 800bf90:	4631      	mov	r1, r6
 800bf92:	4650      	mov	r0, sl
 800bf94:	f001 f84a 	bl	800d02c <__mcmp>
 800bf98:	2800      	cmp	r0, #0
 800bf9a:	da6c      	bge.n	800c076 <_dtoa_r+0x926>
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4651      	mov	r1, sl
 800bfa0:	220a      	movs	r2, #10
 800bfa2:	4620      	mov	r0, r4
 800bfa4:	f000 fdde 	bl	800cb64 <__multadd>
 800bfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfaa:	f10b 3bff 	add.w	fp, fp, #4294967295
 800bfae:	4682      	mov	sl, r0
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	f000 81b0 	beq.w	800c316 <_dtoa_r+0xbc6>
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	4639      	mov	r1, r7
 800bfba:	220a      	movs	r2, #10
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f000 fdd1 	bl	800cb64 <__multadd>
 800bfc2:	9b01      	ldr	r3, [sp, #4]
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	4607      	mov	r7, r0
 800bfc8:	f300 8096 	bgt.w	800c0f8 <_dtoa_r+0x9a8>
 800bfcc:	9b07      	ldr	r3, [sp, #28]
 800bfce:	2b02      	cmp	r3, #2
 800bfd0:	dc59      	bgt.n	800c086 <_dtoa_r+0x936>
 800bfd2:	e091      	b.n	800c0f8 <_dtoa_r+0x9a8>
 800bfd4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bfd6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bfda:	e758      	b.n	800be8e <_dtoa_r+0x73e>
 800bfdc:	9b04      	ldr	r3, [sp, #16]
 800bfde:	1e5e      	subs	r6, r3, #1
 800bfe0:	9b08      	ldr	r3, [sp, #32]
 800bfe2:	42b3      	cmp	r3, r6
 800bfe4:	bfbf      	itttt	lt
 800bfe6:	9b08      	ldrlt	r3, [sp, #32]
 800bfe8:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800bfea:	9608      	strlt	r6, [sp, #32]
 800bfec:	1af3      	sublt	r3, r6, r3
 800bfee:	bfb4      	ite	lt
 800bff0:	18d2      	addlt	r2, r2, r3
 800bff2:	1b9e      	subge	r6, r3, r6
 800bff4:	9b04      	ldr	r3, [sp, #16]
 800bff6:	bfbc      	itt	lt
 800bff8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800bffa:	2600      	movlt	r6, #0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	bfb7      	itett	lt
 800c000:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c004:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c008:	1a9d      	sublt	r5, r3, r2
 800c00a:	2300      	movlt	r3, #0
 800c00c:	e741      	b.n	800be92 <_dtoa_r+0x742>
 800c00e:	9e08      	ldr	r6, [sp, #32]
 800c010:	9d05      	ldr	r5, [sp, #20]
 800c012:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c014:	e748      	b.n	800bea8 <_dtoa_r+0x758>
 800c016:	9a08      	ldr	r2, [sp, #32]
 800c018:	e770      	b.n	800befc <_dtoa_r+0x7ac>
 800c01a:	9b07      	ldr	r3, [sp, #28]
 800c01c:	2b01      	cmp	r3, #1
 800c01e:	dc19      	bgt.n	800c054 <_dtoa_r+0x904>
 800c020:	9b02      	ldr	r3, [sp, #8]
 800c022:	b9bb      	cbnz	r3, 800c054 <_dtoa_r+0x904>
 800c024:	9b03      	ldr	r3, [sp, #12]
 800c026:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c02a:	b99b      	cbnz	r3, 800c054 <_dtoa_r+0x904>
 800c02c:	9b03      	ldr	r3, [sp, #12]
 800c02e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c032:	0d1b      	lsrs	r3, r3, #20
 800c034:	051b      	lsls	r3, r3, #20
 800c036:	b183      	cbz	r3, 800c05a <_dtoa_r+0x90a>
 800c038:	9b05      	ldr	r3, [sp, #20]
 800c03a:	3301      	adds	r3, #1
 800c03c:	9305      	str	r3, [sp, #20]
 800c03e:	9b06      	ldr	r3, [sp, #24]
 800c040:	3301      	adds	r3, #1
 800c042:	9306      	str	r3, [sp, #24]
 800c044:	f04f 0801 	mov.w	r8, #1
 800c048:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	f47f af6f 	bne.w	800bf2e <_dtoa_r+0x7de>
 800c050:	2001      	movs	r0, #1
 800c052:	e774      	b.n	800bf3e <_dtoa_r+0x7ee>
 800c054:	f04f 0800 	mov.w	r8, #0
 800c058:	e7f6      	b.n	800c048 <_dtoa_r+0x8f8>
 800c05a:	4698      	mov	r8, r3
 800c05c:	e7f4      	b.n	800c048 <_dtoa_r+0x8f8>
 800c05e:	d082      	beq.n	800bf66 <_dtoa_r+0x816>
 800c060:	9a05      	ldr	r2, [sp, #20]
 800c062:	331c      	adds	r3, #28
 800c064:	441a      	add	r2, r3
 800c066:	9205      	str	r2, [sp, #20]
 800c068:	9a06      	ldr	r2, [sp, #24]
 800c06a:	441a      	add	r2, r3
 800c06c:	441d      	add	r5, r3
 800c06e:	9206      	str	r2, [sp, #24]
 800c070:	e779      	b.n	800bf66 <_dtoa_r+0x816>
 800c072:	4603      	mov	r3, r0
 800c074:	e7f4      	b.n	800c060 <_dtoa_r+0x910>
 800c076:	9b04      	ldr	r3, [sp, #16]
 800c078:	2b00      	cmp	r3, #0
 800c07a:	dc37      	bgt.n	800c0ec <_dtoa_r+0x99c>
 800c07c:	9b07      	ldr	r3, [sp, #28]
 800c07e:	2b02      	cmp	r3, #2
 800c080:	dd34      	ble.n	800c0ec <_dtoa_r+0x99c>
 800c082:	9b04      	ldr	r3, [sp, #16]
 800c084:	9301      	str	r3, [sp, #4]
 800c086:	9b01      	ldr	r3, [sp, #4]
 800c088:	b963      	cbnz	r3, 800c0a4 <_dtoa_r+0x954>
 800c08a:	4631      	mov	r1, r6
 800c08c:	2205      	movs	r2, #5
 800c08e:	4620      	mov	r0, r4
 800c090:	f000 fd68 	bl	800cb64 <__multadd>
 800c094:	4601      	mov	r1, r0
 800c096:	4606      	mov	r6, r0
 800c098:	4650      	mov	r0, sl
 800c09a:	f000 ffc7 	bl	800d02c <__mcmp>
 800c09e:	2800      	cmp	r0, #0
 800c0a0:	f73f adbb 	bgt.w	800bc1a <_dtoa_r+0x4ca>
 800c0a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c0a6:	9d00      	ldr	r5, [sp, #0]
 800c0a8:	ea6f 0b03 	mvn.w	fp, r3
 800c0ac:	f04f 0800 	mov.w	r8, #0
 800c0b0:	4631      	mov	r1, r6
 800c0b2:	4620      	mov	r0, r4
 800c0b4:	f000 fd34 	bl	800cb20 <_Bfree>
 800c0b8:	2f00      	cmp	r7, #0
 800c0ba:	f43f aeab 	beq.w	800be14 <_dtoa_r+0x6c4>
 800c0be:	f1b8 0f00 	cmp.w	r8, #0
 800c0c2:	d005      	beq.n	800c0d0 <_dtoa_r+0x980>
 800c0c4:	45b8      	cmp	r8, r7
 800c0c6:	d003      	beq.n	800c0d0 <_dtoa_r+0x980>
 800c0c8:	4641      	mov	r1, r8
 800c0ca:	4620      	mov	r0, r4
 800c0cc:	f000 fd28 	bl	800cb20 <_Bfree>
 800c0d0:	4639      	mov	r1, r7
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f000 fd24 	bl	800cb20 <_Bfree>
 800c0d8:	e69c      	b.n	800be14 <_dtoa_r+0x6c4>
 800c0da:	2600      	movs	r6, #0
 800c0dc:	4637      	mov	r7, r6
 800c0de:	e7e1      	b.n	800c0a4 <_dtoa_r+0x954>
 800c0e0:	46bb      	mov	fp, r7
 800c0e2:	4637      	mov	r7, r6
 800c0e4:	e599      	b.n	800bc1a <_dtoa_r+0x4ca>
 800c0e6:	bf00      	nop
 800c0e8:	40240000 	.word	0x40240000
 800c0ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0ee:	2b00      	cmp	r3, #0
 800c0f0:	f000 80c8 	beq.w	800c284 <_dtoa_r+0xb34>
 800c0f4:	9b04      	ldr	r3, [sp, #16]
 800c0f6:	9301      	str	r3, [sp, #4]
 800c0f8:	2d00      	cmp	r5, #0
 800c0fa:	dd05      	ble.n	800c108 <_dtoa_r+0x9b8>
 800c0fc:	4639      	mov	r1, r7
 800c0fe:	462a      	mov	r2, r5
 800c100:	4620      	mov	r0, r4
 800c102:	f000 ff27 	bl	800cf54 <__lshift>
 800c106:	4607      	mov	r7, r0
 800c108:	f1b8 0f00 	cmp.w	r8, #0
 800c10c:	d05b      	beq.n	800c1c6 <_dtoa_r+0xa76>
 800c10e:	6879      	ldr	r1, [r7, #4]
 800c110:	4620      	mov	r0, r4
 800c112:	f000 fcc5 	bl	800caa0 <_Balloc>
 800c116:	4605      	mov	r5, r0
 800c118:	b928      	cbnz	r0, 800c126 <_dtoa_r+0x9d6>
 800c11a:	4b83      	ldr	r3, [pc, #524]	; (800c328 <_dtoa_r+0xbd8>)
 800c11c:	4602      	mov	r2, r0
 800c11e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c122:	f7ff bb2e 	b.w	800b782 <_dtoa_r+0x32>
 800c126:	693a      	ldr	r2, [r7, #16]
 800c128:	3202      	adds	r2, #2
 800c12a:	0092      	lsls	r2, r2, #2
 800c12c:	f107 010c 	add.w	r1, r7, #12
 800c130:	300c      	adds	r0, #12
 800c132:	f7ff fa66 	bl	800b602 <memcpy>
 800c136:	2201      	movs	r2, #1
 800c138:	4629      	mov	r1, r5
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 ff0a 	bl	800cf54 <__lshift>
 800c140:	9b00      	ldr	r3, [sp, #0]
 800c142:	3301      	adds	r3, #1
 800c144:	9304      	str	r3, [sp, #16]
 800c146:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c14a:	4413      	add	r3, r2
 800c14c:	9308      	str	r3, [sp, #32]
 800c14e:	9b02      	ldr	r3, [sp, #8]
 800c150:	f003 0301 	and.w	r3, r3, #1
 800c154:	46b8      	mov	r8, r7
 800c156:	9306      	str	r3, [sp, #24]
 800c158:	4607      	mov	r7, r0
 800c15a:	9b04      	ldr	r3, [sp, #16]
 800c15c:	4631      	mov	r1, r6
 800c15e:	3b01      	subs	r3, #1
 800c160:	4650      	mov	r0, sl
 800c162:	9301      	str	r3, [sp, #4]
 800c164:	f7ff fa6a 	bl	800b63c <quorem>
 800c168:	4641      	mov	r1, r8
 800c16a:	9002      	str	r0, [sp, #8]
 800c16c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c170:	4650      	mov	r0, sl
 800c172:	f000 ff5b 	bl	800d02c <__mcmp>
 800c176:	463a      	mov	r2, r7
 800c178:	9005      	str	r0, [sp, #20]
 800c17a:	4631      	mov	r1, r6
 800c17c:	4620      	mov	r0, r4
 800c17e:	f000 ff71 	bl	800d064 <__mdiff>
 800c182:	68c2      	ldr	r2, [r0, #12]
 800c184:	4605      	mov	r5, r0
 800c186:	bb02      	cbnz	r2, 800c1ca <_dtoa_r+0xa7a>
 800c188:	4601      	mov	r1, r0
 800c18a:	4650      	mov	r0, sl
 800c18c:	f000 ff4e 	bl	800d02c <__mcmp>
 800c190:	4602      	mov	r2, r0
 800c192:	4629      	mov	r1, r5
 800c194:	4620      	mov	r0, r4
 800c196:	9209      	str	r2, [sp, #36]	; 0x24
 800c198:	f000 fcc2 	bl	800cb20 <_Bfree>
 800c19c:	9b07      	ldr	r3, [sp, #28]
 800c19e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c1a0:	9d04      	ldr	r5, [sp, #16]
 800c1a2:	ea43 0102 	orr.w	r1, r3, r2
 800c1a6:	9b06      	ldr	r3, [sp, #24]
 800c1a8:	4319      	orrs	r1, r3
 800c1aa:	d110      	bne.n	800c1ce <_dtoa_r+0xa7e>
 800c1ac:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c1b0:	d029      	beq.n	800c206 <_dtoa_r+0xab6>
 800c1b2:	9b05      	ldr	r3, [sp, #20]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dd02      	ble.n	800c1be <_dtoa_r+0xa6e>
 800c1b8:	9b02      	ldr	r3, [sp, #8]
 800c1ba:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	f883 9000 	strb.w	r9, [r3]
 800c1c4:	e774      	b.n	800c0b0 <_dtoa_r+0x960>
 800c1c6:	4638      	mov	r0, r7
 800c1c8:	e7ba      	b.n	800c140 <_dtoa_r+0x9f0>
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	e7e1      	b.n	800c192 <_dtoa_r+0xa42>
 800c1ce:	9b05      	ldr	r3, [sp, #20]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	db04      	blt.n	800c1de <_dtoa_r+0xa8e>
 800c1d4:	9907      	ldr	r1, [sp, #28]
 800c1d6:	430b      	orrs	r3, r1
 800c1d8:	9906      	ldr	r1, [sp, #24]
 800c1da:	430b      	orrs	r3, r1
 800c1dc:	d120      	bne.n	800c220 <_dtoa_r+0xad0>
 800c1de:	2a00      	cmp	r2, #0
 800c1e0:	dded      	ble.n	800c1be <_dtoa_r+0xa6e>
 800c1e2:	4651      	mov	r1, sl
 800c1e4:	2201      	movs	r2, #1
 800c1e6:	4620      	mov	r0, r4
 800c1e8:	f000 feb4 	bl	800cf54 <__lshift>
 800c1ec:	4631      	mov	r1, r6
 800c1ee:	4682      	mov	sl, r0
 800c1f0:	f000 ff1c 	bl	800d02c <__mcmp>
 800c1f4:	2800      	cmp	r0, #0
 800c1f6:	dc03      	bgt.n	800c200 <_dtoa_r+0xab0>
 800c1f8:	d1e1      	bne.n	800c1be <_dtoa_r+0xa6e>
 800c1fa:	f019 0f01 	tst.w	r9, #1
 800c1fe:	d0de      	beq.n	800c1be <_dtoa_r+0xa6e>
 800c200:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c204:	d1d8      	bne.n	800c1b8 <_dtoa_r+0xa68>
 800c206:	9a01      	ldr	r2, [sp, #4]
 800c208:	2339      	movs	r3, #57	; 0x39
 800c20a:	7013      	strb	r3, [r2, #0]
 800c20c:	462b      	mov	r3, r5
 800c20e:	461d      	mov	r5, r3
 800c210:	3b01      	subs	r3, #1
 800c212:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c216:	2a39      	cmp	r2, #57	; 0x39
 800c218:	d06c      	beq.n	800c2f4 <_dtoa_r+0xba4>
 800c21a:	3201      	adds	r2, #1
 800c21c:	701a      	strb	r2, [r3, #0]
 800c21e:	e747      	b.n	800c0b0 <_dtoa_r+0x960>
 800c220:	2a00      	cmp	r2, #0
 800c222:	dd07      	ble.n	800c234 <_dtoa_r+0xae4>
 800c224:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c228:	d0ed      	beq.n	800c206 <_dtoa_r+0xab6>
 800c22a:	9a01      	ldr	r2, [sp, #4]
 800c22c:	f109 0301 	add.w	r3, r9, #1
 800c230:	7013      	strb	r3, [r2, #0]
 800c232:	e73d      	b.n	800c0b0 <_dtoa_r+0x960>
 800c234:	9b04      	ldr	r3, [sp, #16]
 800c236:	9a08      	ldr	r2, [sp, #32]
 800c238:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c23c:	4293      	cmp	r3, r2
 800c23e:	d043      	beq.n	800c2c8 <_dtoa_r+0xb78>
 800c240:	4651      	mov	r1, sl
 800c242:	2300      	movs	r3, #0
 800c244:	220a      	movs	r2, #10
 800c246:	4620      	mov	r0, r4
 800c248:	f000 fc8c 	bl	800cb64 <__multadd>
 800c24c:	45b8      	cmp	r8, r7
 800c24e:	4682      	mov	sl, r0
 800c250:	f04f 0300 	mov.w	r3, #0
 800c254:	f04f 020a 	mov.w	r2, #10
 800c258:	4641      	mov	r1, r8
 800c25a:	4620      	mov	r0, r4
 800c25c:	d107      	bne.n	800c26e <_dtoa_r+0xb1e>
 800c25e:	f000 fc81 	bl	800cb64 <__multadd>
 800c262:	4680      	mov	r8, r0
 800c264:	4607      	mov	r7, r0
 800c266:	9b04      	ldr	r3, [sp, #16]
 800c268:	3301      	adds	r3, #1
 800c26a:	9304      	str	r3, [sp, #16]
 800c26c:	e775      	b.n	800c15a <_dtoa_r+0xa0a>
 800c26e:	f000 fc79 	bl	800cb64 <__multadd>
 800c272:	4639      	mov	r1, r7
 800c274:	4680      	mov	r8, r0
 800c276:	2300      	movs	r3, #0
 800c278:	220a      	movs	r2, #10
 800c27a:	4620      	mov	r0, r4
 800c27c:	f000 fc72 	bl	800cb64 <__multadd>
 800c280:	4607      	mov	r7, r0
 800c282:	e7f0      	b.n	800c266 <_dtoa_r+0xb16>
 800c284:	9b04      	ldr	r3, [sp, #16]
 800c286:	9301      	str	r3, [sp, #4]
 800c288:	9d00      	ldr	r5, [sp, #0]
 800c28a:	4631      	mov	r1, r6
 800c28c:	4650      	mov	r0, sl
 800c28e:	f7ff f9d5 	bl	800b63c <quorem>
 800c292:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c296:	9b00      	ldr	r3, [sp, #0]
 800c298:	f805 9b01 	strb.w	r9, [r5], #1
 800c29c:	1aea      	subs	r2, r5, r3
 800c29e:	9b01      	ldr	r3, [sp, #4]
 800c2a0:	4293      	cmp	r3, r2
 800c2a2:	dd07      	ble.n	800c2b4 <_dtoa_r+0xb64>
 800c2a4:	4651      	mov	r1, sl
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	220a      	movs	r2, #10
 800c2aa:	4620      	mov	r0, r4
 800c2ac:	f000 fc5a 	bl	800cb64 <__multadd>
 800c2b0:	4682      	mov	sl, r0
 800c2b2:	e7ea      	b.n	800c28a <_dtoa_r+0xb3a>
 800c2b4:	9b01      	ldr	r3, [sp, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	bfc8      	it	gt
 800c2ba:	461d      	movgt	r5, r3
 800c2bc:	9b00      	ldr	r3, [sp, #0]
 800c2be:	bfd8      	it	le
 800c2c0:	2501      	movle	r5, #1
 800c2c2:	441d      	add	r5, r3
 800c2c4:	f04f 0800 	mov.w	r8, #0
 800c2c8:	4651      	mov	r1, sl
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	4620      	mov	r0, r4
 800c2ce:	f000 fe41 	bl	800cf54 <__lshift>
 800c2d2:	4631      	mov	r1, r6
 800c2d4:	4682      	mov	sl, r0
 800c2d6:	f000 fea9 	bl	800d02c <__mcmp>
 800c2da:	2800      	cmp	r0, #0
 800c2dc:	dc96      	bgt.n	800c20c <_dtoa_r+0xabc>
 800c2de:	d102      	bne.n	800c2e6 <_dtoa_r+0xb96>
 800c2e0:	f019 0f01 	tst.w	r9, #1
 800c2e4:	d192      	bne.n	800c20c <_dtoa_r+0xabc>
 800c2e6:	462b      	mov	r3, r5
 800c2e8:	461d      	mov	r5, r3
 800c2ea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2ee:	2a30      	cmp	r2, #48	; 0x30
 800c2f0:	d0fa      	beq.n	800c2e8 <_dtoa_r+0xb98>
 800c2f2:	e6dd      	b.n	800c0b0 <_dtoa_r+0x960>
 800c2f4:	9a00      	ldr	r2, [sp, #0]
 800c2f6:	429a      	cmp	r2, r3
 800c2f8:	d189      	bne.n	800c20e <_dtoa_r+0xabe>
 800c2fa:	f10b 0b01 	add.w	fp, fp, #1
 800c2fe:	2331      	movs	r3, #49	; 0x31
 800c300:	e796      	b.n	800c230 <_dtoa_r+0xae0>
 800c302:	4b0a      	ldr	r3, [pc, #40]	; (800c32c <_dtoa_r+0xbdc>)
 800c304:	f7ff ba99 	b.w	800b83a <_dtoa_r+0xea>
 800c308:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f47f aa6d 	bne.w	800b7ea <_dtoa_r+0x9a>
 800c310:	4b07      	ldr	r3, [pc, #28]	; (800c330 <_dtoa_r+0xbe0>)
 800c312:	f7ff ba92 	b.w	800b83a <_dtoa_r+0xea>
 800c316:	9b01      	ldr	r3, [sp, #4]
 800c318:	2b00      	cmp	r3, #0
 800c31a:	dcb5      	bgt.n	800c288 <_dtoa_r+0xb38>
 800c31c:	9b07      	ldr	r3, [sp, #28]
 800c31e:	2b02      	cmp	r3, #2
 800c320:	f73f aeb1 	bgt.w	800c086 <_dtoa_r+0x936>
 800c324:	e7b0      	b.n	800c288 <_dtoa_r+0xb38>
 800c326:	bf00      	nop
 800c328:	08045c0d 	.word	0x08045c0d
 800c32c:	08045b60 	.word	0x08045b60
 800c330:	08045b91 	.word	0x08045b91

0800c334 <_free_r>:
 800c334:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c336:	2900      	cmp	r1, #0
 800c338:	d044      	beq.n	800c3c4 <_free_r+0x90>
 800c33a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c33e:	9001      	str	r0, [sp, #4]
 800c340:	2b00      	cmp	r3, #0
 800c342:	f1a1 0404 	sub.w	r4, r1, #4
 800c346:	bfb8      	it	lt
 800c348:	18e4      	addlt	r4, r4, r3
 800c34a:	f7fd f98b 	bl	8009664 <__malloc_lock>
 800c34e:	4a1e      	ldr	r2, [pc, #120]	; (800c3c8 <_free_r+0x94>)
 800c350:	9801      	ldr	r0, [sp, #4]
 800c352:	6813      	ldr	r3, [r2, #0]
 800c354:	b933      	cbnz	r3, 800c364 <_free_r+0x30>
 800c356:	6063      	str	r3, [r4, #4]
 800c358:	6014      	str	r4, [r2, #0]
 800c35a:	b003      	add	sp, #12
 800c35c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c360:	f7fd b986 	b.w	8009670 <__malloc_unlock>
 800c364:	42a3      	cmp	r3, r4
 800c366:	d908      	bls.n	800c37a <_free_r+0x46>
 800c368:	6825      	ldr	r5, [r4, #0]
 800c36a:	1961      	adds	r1, r4, r5
 800c36c:	428b      	cmp	r3, r1
 800c36e:	bf01      	itttt	eq
 800c370:	6819      	ldreq	r1, [r3, #0]
 800c372:	685b      	ldreq	r3, [r3, #4]
 800c374:	1949      	addeq	r1, r1, r5
 800c376:	6021      	streq	r1, [r4, #0]
 800c378:	e7ed      	b.n	800c356 <_free_r+0x22>
 800c37a:	461a      	mov	r2, r3
 800c37c:	685b      	ldr	r3, [r3, #4]
 800c37e:	b10b      	cbz	r3, 800c384 <_free_r+0x50>
 800c380:	42a3      	cmp	r3, r4
 800c382:	d9fa      	bls.n	800c37a <_free_r+0x46>
 800c384:	6811      	ldr	r1, [r2, #0]
 800c386:	1855      	adds	r5, r2, r1
 800c388:	42a5      	cmp	r5, r4
 800c38a:	d10b      	bne.n	800c3a4 <_free_r+0x70>
 800c38c:	6824      	ldr	r4, [r4, #0]
 800c38e:	4421      	add	r1, r4
 800c390:	1854      	adds	r4, r2, r1
 800c392:	42a3      	cmp	r3, r4
 800c394:	6011      	str	r1, [r2, #0]
 800c396:	d1e0      	bne.n	800c35a <_free_r+0x26>
 800c398:	681c      	ldr	r4, [r3, #0]
 800c39a:	685b      	ldr	r3, [r3, #4]
 800c39c:	6053      	str	r3, [r2, #4]
 800c39e:	440c      	add	r4, r1
 800c3a0:	6014      	str	r4, [r2, #0]
 800c3a2:	e7da      	b.n	800c35a <_free_r+0x26>
 800c3a4:	d902      	bls.n	800c3ac <_free_r+0x78>
 800c3a6:	230c      	movs	r3, #12
 800c3a8:	6003      	str	r3, [r0, #0]
 800c3aa:	e7d6      	b.n	800c35a <_free_r+0x26>
 800c3ac:	6825      	ldr	r5, [r4, #0]
 800c3ae:	1961      	adds	r1, r4, r5
 800c3b0:	428b      	cmp	r3, r1
 800c3b2:	bf04      	itt	eq
 800c3b4:	6819      	ldreq	r1, [r3, #0]
 800c3b6:	685b      	ldreq	r3, [r3, #4]
 800c3b8:	6063      	str	r3, [r4, #4]
 800c3ba:	bf04      	itt	eq
 800c3bc:	1949      	addeq	r1, r1, r5
 800c3be:	6021      	streq	r1, [r4, #0]
 800c3c0:	6054      	str	r4, [r2, #4]
 800c3c2:	e7ca      	b.n	800c35a <_free_r+0x26>
 800c3c4:	b003      	add	sp, #12
 800c3c6:	bd30      	pop	{r4, r5, pc}
 800c3c8:	2000447c 	.word	0x2000447c

0800c3cc <rshift>:
 800c3cc:	6903      	ldr	r3, [r0, #16]
 800c3ce:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c3d2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c3d6:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c3da:	f100 0414 	add.w	r4, r0, #20
 800c3de:	dd45      	ble.n	800c46c <rshift+0xa0>
 800c3e0:	f011 011f 	ands.w	r1, r1, #31
 800c3e4:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c3e8:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c3ec:	d10c      	bne.n	800c408 <rshift+0x3c>
 800c3ee:	f100 0710 	add.w	r7, r0, #16
 800c3f2:	4629      	mov	r1, r5
 800c3f4:	42b1      	cmp	r1, r6
 800c3f6:	d334      	bcc.n	800c462 <rshift+0x96>
 800c3f8:	1a9b      	subs	r3, r3, r2
 800c3fa:	009b      	lsls	r3, r3, #2
 800c3fc:	1eea      	subs	r2, r5, #3
 800c3fe:	4296      	cmp	r6, r2
 800c400:	bf38      	it	cc
 800c402:	2300      	movcc	r3, #0
 800c404:	4423      	add	r3, r4
 800c406:	e015      	b.n	800c434 <rshift+0x68>
 800c408:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c40c:	f1c1 0820 	rsb	r8, r1, #32
 800c410:	40cf      	lsrs	r7, r1
 800c412:	f105 0e04 	add.w	lr, r5, #4
 800c416:	46a1      	mov	r9, r4
 800c418:	4576      	cmp	r6, lr
 800c41a:	46f4      	mov	ip, lr
 800c41c:	d815      	bhi.n	800c44a <rshift+0x7e>
 800c41e:	1a9a      	subs	r2, r3, r2
 800c420:	0092      	lsls	r2, r2, #2
 800c422:	3a04      	subs	r2, #4
 800c424:	3501      	adds	r5, #1
 800c426:	42ae      	cmp	r6, r5
 800c428:	bf38      	it	cc
 800c42a:	2200      	movcc	r2, #0
 800c42c:	18a3      	adds	r3, r4, r2
 800c42e:	50a7      	str	r7, [r4, r2]
 800c430:	b107      	cbz	r7, 800c434 <rshift+0x68>
 800c432:	3304      	adds	r3, #4
 800c434:	1b1a      	subs	r2, r3, r4
 800c436:	42a3      	cmp	r3, r4
 800c438:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c43c:	bf08      	it	eq
 800c43e:	2300      	moveq	r3, #0
 800c440:	6102      	str	r2, [r0, #16]
 800c442:	bf08      	it	eq
 800c444:	6143      	streq	r3, [r0, #20]
 800c446:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c44a:	f8dc c000 	ldr.w	ip, [ip]
 800c44e:	fa0c fc08 	lsl.w	ip, ip, r8
 800c452:	ea4c 0707 	orr.w	r7, ip, r7
 800c456:	f849 7b04 	str.w	r7, [r9], #4
 800c45a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c45e:	40cf      	lsrs	r7, r1
 800c460:	e7da      	b.n	800c418 <rshift+0x4c>
 800c462:	f851 cb04 	ldr.w	ip, [r1], #4
 800c466:	f847 cf04 	str.w	ip, [r7, #4]!
 800c46a:	e7c3      	b.n	800c3f4 <rshift+0x28>
 800c46c:	4623      	mov	r3, r4
 800c46e:	e7e1      	b.n	800c434 <rshift+0x68>

0800c470 <__hexdig_fun>:
 800c470:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c474:	2b09      	cmp	r3, #9
 800c476:	d802      	bhi.n	800c47e <__hexdig_fun+0xe>
 800c478:	3820      	subs	r0, #32
 800c47a:	b2c0      	uxtb	r0, r0
 800c47c:	4770      	bx	lr
 800c47e:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c482:	2b05      	cmp	r3, #5
 800c484:	d801      	bhi.n	800c48a <__hexdig_fun+0x1a>
 800c486:	3847      	subs	r0, #71	; 0x47
 800c488:	e7f7      	b.n	800c47a <__hexdig_fun+0xa>
 800c48a:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c48e:	2b05      	cmp	r3, #5
 800c490:	d801      	bhi.n	800c496 <__hexdig_fun+0x26>
 800c492:	3827      	subs	r0, #39	; 0x27
 800c494:	e7f1      	b.n	800c47a <__hexdig_fun+0xa>
 800c496:	2000      	movs	r0, #0
 800c498:	4770      	bx	lr
	...

0800c49c <__gethex>:
 800c49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4a0:	4617      	mov	r7, r2
 800c4a2:	680a      	ldr	r2, [r1, #0]
 800c4a4:	b085      	sub	sp, #20
 800c4a6:	f102 0b02 	add.w	fp, r2, #2
 800c4aa:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c4ae:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c4b2:	4681      	mov	r9, r0
 800c4b4:	468a      	mov	sl, r1
 800c4b6:	9302      	str	r3, [sp, #8]
 800c4b8:	32fe      	adds	r2, #254	; 0xfe
 800c4ba:	eb02 030b 	add.w	r3, r2, fp
 800c4be:	46d8      	mov	r8, fp
 800c4c0:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c4c4:	9301      	str	r3, [sp, #4]
 800c4c6:	2830      	cmp	r0, #48	; 0x30
 800c4c8:	d0f7      	beq.n	800c4ba <__gethex+0x1e>
 800c4ca:	f7ff ffd1 	bl	800c470 <__hexdig_fun>
 800c4ce:	4604      	mov	r4, r0
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d138      	bne.n	800c546 <__gethex+0xaa>
 800c4d4:	49a7      	ldr	r1, [pc, #668]	; (800c774 <__gethex+0x2d8>)
 800c4d6:	2201      	movs	r2, #1
 800c4d8:	4640      	mov	r0, r8
 800c4da:	f7fe fff9 	bl	800b4d0 <strncmp>
 800c4de:	4606      	mov	r6, r0
 800c4e0:	2800      	cmp	r0, #0
 800c4e2:	d169      	bne.n	800c5b8 <__gethex+0x11c>
 800c4e4:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c4e8:	465d      	mov	r5, fp
 800c4ea:	f7ff ffc1 	bl	800c470 <__hexdig_fun>
 800c4ee:	2800      	cmp	r0, #0
 800c4f0:	d064      	beq.n	800c5bc <__gethex+0x120>
 800c4f2:	465a      	mov	r2, fp
 800c4f4:	7810      	ldrb	r0, [r2, #0]
 800c4f6:	2830      	cmp	r0, #48	; 0x30
 800c4f8:	4690      	mov	r8, r2
 800c4fa:	f102 0201 	add.w	r2, r2, #1
 800c4fe:	d0f9      	beq.n	800c4f4 <__gethex+0x58>
 800c500:	f7ff ffb6 	bl	800c470 <__hexdig_fun>
 800c504:	2301      	movs	r3, #1
 800c506:	fab0 f480 	clz	r4, r0
 800c50a:	0964      	lsrs	r4, r4, #5
 800c50c:	465e      	mov	r6, fp
 800c50e:	9301      	str	r3, [sp, #4]
 800c510:	4642      	mov	r2, r8
 800c512:	4615      	mov	r5, r2
 800c514:	3201      	adds	r2, #1
 800c516:	7828      	ldrb	r0, [r5, #0]
 800c518:	f7ff ffaa 	bl	800c470 <__hexdig_fun>
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d1f8      	bne.n	800c512 <__gethex+0x76>
 800c520:	4994      	ldr	r1, [pc, #592]	; (800c774 <__gethex+0x2d8>)
 800c522:	2201      	movs	r2, #1
 800c524:	4628      	mov	r0, r5
 800c526:	f7fe ffd3 	bl	800b4d0 <strncmp>
 800c52a:	b978      	cbnz	r0, 800c54c <__gethex+0xb0>
 800c52c:	b946      	cbnz	r6, 800c540 <__gethex+0xa4>
 800c52e:	1c6e      	adds	r6, r5, #1
 800c530:	4632      	mov	r2, r6
 800c532:	4615      	mov	r5, r2
 800c534:	3201      	adds	r2, #1
 800c536:	7828      	ldrb	r0, [r5, #0]
 800c538:	f7ff ff9a 	bl	800c470 <__hexdig_fun>
 800c53c:	2800      	cmp	r0, #0
 800c53e:	d1f8      	bne.n	800c532 <__gethex+0x96>
 800c540:	1b73      	subs	r3, r6, r5
 800c542:	009e      	lsls	r6, r3, #2
 800c544:	e004      	b.n	800c550 <__gethex+0xb4>
 800c546:	2400      	movs	r4, #0
 800c548:	4626      	mov	r6, r4
 800c54a:	e7e1      	b.n	800c510 <__gethex+0x74>
 800c54c:	2e00      	cmp	r6, #0
 800c54e:	d1f7      	bne.n	800c540 <__gethex+0xa4>
 800c550:	782b      	ldrb	r3, [r5, #0]
 800c552:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c556:	2b50      	cmp	r3, #80	; 0x50
 800c558:	d13d      	bne.n	800c5d6 <__gethex+0x13a>
 800c55a:	786b      	ldrb	r3, [r5, #1]
 800c55c:	2b2b      	cmp	r3, #43	; 0x2b
 800c55e:	d02f      	beq.n	800c5c0 <__gethex+0x124>
 800c560:	2b2d      	cmp	r3, #45	; 0x2d
 800c562:	d031      	beq.n	800c5c8 <__gethex+0x12c>
 800c564:	1c69      	adds	r1, r5, #1
 800c566:	f04f 0b00 	mov.w	fp, #0
 800c56a:	7808      	ldrb	r0, [r1, #0]
 800c56c:	f7ff ff80 	bl	800c470 <__hexdig_fun>
 800c570:	1e42      	subs	r2, r0, #1
 800c572:	b2d2      	uxtb	r2, r2
 800c574:	2a18      	cmp	r2, #24
 800c576:	d82e      	bhi.n	800c5d6 <__gethex+0x13a>
 800c578:	f1a0 0210 	sub.w	r2, r0, #16
 800c57c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c580:	f7ff ff76 	bl	800c470 <__hexdig_fun>
 800c584:	f100 3cff 	add.w	ip, r0, #4294967295
 800c588:	fa5f fc8c 	uxtb.w	ip, ip
 800c58c:	f1bc 0f18 	cmp.w	ip, #24
 800c590:	d91d      	bls.n	800c5ce <__gethex+0x132>
 800c592:	f1bb 0f00 	cmp.w	fp, #0
 800c596:	d000      	beq.n	800c59a <__gethex+0xfe>
 800c598:	4252      	negs	r2, r2
 800c59a:	4416      	add	r6, r2
 800c59c:	f8ca 1000 	str.w	r1, [sl]
 800c5a0:	b1dc      	cbz	r4, 800c5da <__gethex+0x13e>
 800c5a2:	9b01      	ldr	r3, [sp, #4]
 800c5a4:	2b00      	cmp	r3, #0
 800c5a6:	bf14      	ite	ne
 800c5a8:	f04f 0800 	movne.w	r8, #0
 800c5ac:	f04f 0806 	moveq.w	r8, #6
 800c5b0:	4640      	mov	r0, r8
 800c5b2:	b005      	add	sp, #20
 800c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c5b8:	4645      	mov	r5, r8
 800c5ba:	4626      	mov	r6, r4
 800c5bc:	2401      	movs	r4, #1
 800c5be:	e7c7      	b.n	800c550 <__gethex+0xb4>
 800c5c0:	f04f 0b00 	mov.w	fp, #0
 800c5c4:	1ca9      	adds	r1, r5, #2
 800c5c6:	e7d0      	b.n	800c56a <__gethex+0xce>
 800c5c8:	f04f 0b01 	mov.w	fp, #1
 800c5cc:	e7fa      	b.n	800c5c4 <__gethex+0x128>
 800c5ce:	230a      	movs	r3, #10
 800c5d0:	fb03 0002 	mla	r0, r3, r2, r0
 800c5d4:	e7d0      	b.n	800c578 <__gethex+0xdc>
 800c5d6:	4629      	mov	r1, r5
 800c5d8:	e7e0      	b.n	800c59c <__gethex+0x100>
 800c5da:	eba5 0308 	sub.w	r3, r5, r8
 800c5de:	3b01      	subs	r3, #1
 800c5e0:	4621      	mov	r1, r4
 800c5e2:	2b07      	cmp	r3, #7
 800c5e4:	dc0a      	bgt.n	800c5fc <__gethex+0x160>
 800c5e6:	4648      	mov	r0, r9
 800c5e8:	f000 fa5a 	bl	800caa0 <_Balloc>
 800c5ec:	4604      	mov	r4, r0
 800c5ee:	b940      	cbnz	r0, 800c602 <__gethex+0x166>
 800c5f0:	4b61      	ldr	r3, [pc, #388]	; (800c778 <__gethex+0x2dc>)
 800c5f2:	4602      	mov	r2, r0
 800c5f4:	21e4      	movs	r1, #228	; 0xe4
 800c5f6:	4861      	ldr	r0, [pc, #388]	; (800c77c <__gethex+0x2e0>)
 800c5f8:	f001 fb82 	bl	800dd00 <__assert_func>
 800c5fc:	3101      	adds	r1, #1
 800c5fe:	105b      	asrs	r3, r3, #1
 800c600:	e7ef      	b.n	800c5e2 <__gethex+0x146>
 800c602:	f100 0a14 	add.w	sl, r0, #20
 800c606:	2300      	movs	r3, #0
 800c608:	495a      	ldr	r1, [pc, #360]	; (800c774 <__gethex+0x2d8>)
 800c60a:	f8cd a004 	str.w	sl, [sp, #4]
 800c60e:	469b      	mov	fp, r3
 800c610:	45a8      	cmp	r8, r5
 800c612:	d342      	bcc.n	800c69a <__gethex+0x1fe>
 800c614:	9801      	ldr	r0, [sp, #4]
 800c616:	f840 bb04 	str.w	fp, [r0], #4
 800c61a:	eba0 000a 	sub.w	r0, r0, sl
 800c61e:	1080      	asrs	r0, r0, #2
 800c620:	6120      	str	r0, [r4, #16]
 800c622:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c626:	4658      	mov	r0, fp
 800c628:	f000 fb2c 	bl	800cc84 <__hi0bits>
 800c62c:	683d      	ldr	r5, [r7, #0]
 800c62e:	eba8 0000 	sub.w	r0, r8, r0
 800c632:	42a8      	cmp	r0, r5
 800c634:	dd59      	ble.n	800c6ea <__gethex+0x24e>
 800c636:	eba0 0805 	sub.w	r8, r0, r5
 800c63a:	4641      	mov	r1, r8
 800c63c:	4620      	mov	r0, r4
 800c63e:	f000 febb 	bl	800d3b8 <__any_on>
 800c642:	4683      	mov	fp, r0
 800c644:	b1b8      	cbz	r0, 800c676 <__gethex+0x1da>
 800c646:	f108 33ff 	add.w	r3, r8, #4294967295
 800c64a:	1159      	asrs	r1, r3, #5
 800c64c:	f003 021f 	and.w	r2, r3, #31
 800c650:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c654:	f04f 0b01 	mov.w	fp, #1
 800c658:	fa0b f202 	lsl.w	r2, fp, r2
 800c65c:	420a      	tst	r2, r1
 800c65e:	d00a      	beq.n	800c676 <__gethex+0x1da>
 800c660:	455b      	cmp	r3, fp
 800c662:	dd06      	ble.n	800c672 <__gethex+0x1d6>
 800c664:	f1a8 0102 	sub.w	r1, r8, #2
 800c668:	4620      	mov	r0, r4
 800c66a:	f000 fea5 	bl	800d3b8 <__any_on>
 800c66e:	2800      	cmp	r0, #0
 800c670:	d138      	bne.n	800c6e4 <__gethex+0x248>
 800c672:	f04f 0b02 	mov.w	fp, #2
 800c676:	4641      	mov	r1, r8
 800c678:	4620      	mov	r0, r4
 800c67a:	f7ff fea7 	bl	800c3cc <rshift>
 800c67e:	4446      	add	r6, r8
 800c680:	68bb      	ldr	r3, [r7, #8]
 800c682:	42b3      	cmp	r3, r6
 800c684:	da41      	bge.n	800c70a <__gethex+0x26e>
 800c686:	4621      	mov	r1, r4
 800c688:	4648      	mov	r0, r9
 800c68a:	f000 fa49 	bl	800cb20 <_Bfree>
 800c68e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c690:	2300      	movs	r3, #0
 800c692:	6013      	str	r3, [r2, #0]
 800c694:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c698:	e78a      	b.n	800c5b0 <__gethex+0x114>
 800c69a:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c69e:	2a2e      	cmp	r2, #46	; 0x2e
 800c6a0:	d014      	beq.n	800c6cc <__gethex+0x230>
 800c6a2:	2b20      	cmp	r3, #32
 800c6a4:	d106      	bne.n	800c6b4 <__gethex+0x218>
 800c6a6:	9b01      	ldr	r3, [sp, #4]
 800c6a8:	f843 bb04 	str.w	fp, [r3], #4
 800c6ac:	f04f 0b00 	mov.w	fp, #0
 800c6b0:	9301      	str	r3, [sp, #4]
 800c6b2:	465b      	mov	r3, fp
 800c6b4:	7828      	ldrb	r0, [r5, #0]
 800c6b6:	9303      	str	r3, [sp, #12]
 800c6b8:	f7ff feda 	bl	800c470 <__hexdig_fun>
 800c6bc:	9b03      	ldr	r3, [sp, #12]
 800c6be:	f000 000f 	and.w	r0, r0, #15
 800c6c2:	4098      	lsls	r0, r3
 800c6c4:	ea4b 0b00 	orr.w	fp, fp, r0
 800c6c8:	3304      	adds	r3, #4
 800c6ca:	e7a1      	b.n	800c610 <__gethex+0x174>
 800c6cc:	45a8      	cmp	r8, r5
 800c6ce:	d8e8      	bhi.n	800c6a2 <__gethex+0x206>
 800c6d0:	2201      	movs	r2, #1
 800c6d2:	4628      	mov	r0, r5
 800c6d4:	9303      	str	r3, [sp, #12]
 800c6d6:	f7fe fefb 	bl	800b4d0 <strncmp>
 800c6da:	4926      	ldr	r1, [pc, #152]	; (800c774 <__gethex+0x2d8>)
 800c6dc:	9b03      	ldr	r3, [sp, #12]
 800c6de:	2800      	cmp	r0, #0
 800c6e0:	d1df      	bne.n	800c6a2 <__gethex+0x206>
 800c6e2:	e795      	b.n	800c610 <__gethex+0x174>
 800c6e4:	f04f 0b03 	mov.w	fp, #3
 800c6e8:	e7c5      	b.n	800c676 <__gethex+0x1da>
 800c6ea:	da0b      	bge.n	800c704 <__gethex+0x268>
 800c6ec:	eba5 0800 	sub.w	r8, r5, r0
 800c6f0:	4621      	mov	r1, r4
 800c6f2:	4642      	mov	r2, r8
 800c6f4:	4648      	mov	r0, r9
 800c6f6:	f000 fc2d 	bl	800cf54 <__lshift>
 800c6fa:	eba6 0608 	sub.w	r6, r6, r8
 800c6fe:	4604      	mov	r4, r0
 800c700:	f100 0a14 	add.w	sl, r0, #20
 800c704:	f04f 0b00 	mov.w	fp, #0
 800c708:	e7ba      	b.n	800c680 <__gethex+0x1e4>
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	42b3      	cmp	r3, r6
 800c70e:	dd73      	ble.n	800c7f8 <__gethex+0x35c>
 800c710:	1b9e      	subs	r6, r3, r6
 800c712:	42b5      	cmp	r5, r6
 800c714:	dc34      	bgt.n	800c780 <__gethex+0x2e4>
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	2b02      	cmp	r3, #2
 800c71a:	d023      	beq.n	800c764 <__gethex+0x2c8>
 800c71c:	2b03      	cmp	r3, #3
 800c71e:	d025      	beq.n	800c76c <__gethex+0x2d0>
 800c720:	2b01      	cmp	r3, #1
 800c722:	d115      	bne.n	800c750 <__gethex+0x2b4>
 800c724:	42b5      	cmp	r5, r6
 800c726:	d113      	bne.n	800c750 <__gethex+0x2b4>
 800c728:	2d01      	cmp	r5, #1
 800c72a:	d10b      	bne.n	800c744 <__gethex+0x2a8>
 800c72c:	9a02      	ldr	r2, [sp, #8]
 800c72e:	687b      	ldr	r3, [r7, #4]
 800c730:	6013      	str	r3, [r2, #0]
 800c732:	2301      	movs	r3, #1
 800c734:	6123      	str	r3, [r4, #16]
 800c736:	f8ca 3000 	str.w	r3, [sl]
 800c73a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c73c:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c740:	601c      	str	r4, [r3, #0]
 800c742:	e735      	b.n	800c5b0 <__gethex+0x114>
 800c744:	1e69      	subs	r1, r5, #1
 800c746:	4620      	mov	r0, r4
 800c748:	f000 fe36 	bl	800d3b8 <__any_on>
 800c74c:	2800      	cmp	r0, #0
 800c74e:	d1ed      	bne.n	800c72c <__gethex+0x290>
 800c750:	4621      	mov	r1, r4
 800c752:	4648      	mov	r0, r9
 800c754:	f000 f9e4 	bl	800cb20 <_Bfree>
 800c758:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c75a:	2300      	movs	r3, #0
 800c75c:	6013      	str	r3, [r2, #0]
 800c75e:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c762:	e725      	b.n	800c5b0 <__gethex+0x114>
 800c764:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c766:	2b00      	cmp	r3, #0
 800c768:	d1f2      	bne.n	800c750 <__gethex+0x2b4>
 800c76a:	e7df      	b.n	800c72c <__gethex+0x290>
 800c76c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d1dc      	bne.n	800c72c <__gethex+0x290>
 800c772:	e7ed      	b.n	800c750 <__gethex+0x2b4>
 800c774:	08045af8 	.word	0x08045af8
 800c778:	08045c0d 	.word	0x08045c0d
 800c77c:	08045c1e 	.word	0x08045c1e
 800c780:	f106 38ff 	add.w	r8, r6, #4294967295
 800c784:	f1bb 0f00 	cmp.w	fp, #0
 800c788:	d133      	bne.n	800c7f2 <__gethex+0x356>
 800c78a:	f1b8 0f00 	cmp.w	r8, #0
 800c78e:	d004      	beq.n	800c79a <__gethex+0x2fe>
 800c790:	4641      	mov	r1, r8
 800c792:	4620      	mov	r0, r4
 800c794:	f000 fe10 	bl	800d3b8 <__any_on>
 800c798:	4683      	mov	fp, r0
 800c79a:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c79e:	2301      	movs	r3, #1
 800c7a0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c7a4:	f008 081f 	and.w	r8, r8, #31
 800c7a8:	fa03 f308 	lsl.w	r3, r3, r8
 800c7ac:	4213      	tst	r3, r2
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	bf18      	it	ne
 800c7b4:	f04b 0b02 	orrne.w	fp, fp, #2
 800c7b8:	1bad      	subs	r5, r5, r6
 800c7ba:	f7ff fe07 	bl	800c3cc <rshift>
 800c7be:	687e      	ldr	r6, [r7, #4]
 800c7c0:	f04f 0802 	mov.w	r8, #2
 800c7c4:	f1bb 0f00 	cmp.w	fp, #0
 800c7c8:	d04a      	beq.n	800c860 <__gethex+0x3c4>
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	2b02      	cmp	r3, #2
 800c7ce:	d016      	beq.n	800c7fe <__gethex+0x362>
 800c7d0:	2b03      	cmp	r3, #3
 800c7d2:	d018      	beq.n	800c806 <__gethex+0x36a>
 800c7d4:	2b01      	cmp	r3, #1
 800c7d6:	d109      	bne.n	800c7ec <__gethex+0x350>
 800c7d8:	f01b 0f02 	tst.w	fp, #2
 800c7dc:	d006      	beq.n	800c7ec <__gethex+0x350>
 800c7de:	f8da 3000 	ldr.w	r3, [sl]
 800c7e2:	ea4b 0b03 	orr.w	fp, fp, r3
 800c7e6:	f01b 0f01 	tst.w	fp, #1
 800c7ea:	d10f      	bne.n	800c80c <__gethex+0x370>
 800c7ec:	f048 0810 	orr.w	r8, r8, #16
 800c7f0:	e036      	b.n	800c860 <__gethex+0x3c4>
 800c7f2:	f04f 0b01 	mov.w	fp, #1
 800c7f6:	e7d0      	b.n	800c79a <__gethex+0x2fe>
 800c7f8:	f04f 0801 	mov.w	r8, #1
 800c7fc:	e7e2      	b.n	800c7c4 <__gethex+0x328>
 800c7fe:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c800:	f1c3 0301 	rsb	r3, r3, #1
 800c804:	930f      	str	r3, [sp, #60]	; 0x3c
 800c806:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d0ef      	beq.n	800c7ec <__gethex+0x350>
 800c80c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c810:	f104 0214 	add.w	r2, r4, #20
 800c814:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c818:	9301      	str	r3, [sp, #4]
 800c81a:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c81e:	2300      	movs	r3, #0
 800c820:	4694      	mov	ip, r2
 800c822:	f852 1b04 	ldr.w	r1, [r2], #4
 800c826:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c82a:	d01e      	beq.n	800c86a <__gethex+0x3ce>
 800c82c:	3101      	adds	r1, #1
 800c82e:	f8cc 1000 	str.w	r1, [ip]
 800c832:	f1b8 0f02 	cmp.w	r8, #2
 800c836:	f104 0214 	add.w	r2, r4, #20
 800c83a:	d13d      	bne.n	800c8b8 <__gethex+0x41c>
 800c83c:	683b      	ldr	r3, [r7, #0]
 800c83e:	3b01      	subs	r3, #1
 800c840:	42ab      	cmp	r3, r5
 800c842:	d10b      	bne.n	800c85c <__gethex+0x3c0>
 800c844:	1169      	asrs	r1, r5, #5
 800c846:	2301      	movs	r3, #1
 800c848:	f005 051f 	and.w	r5, r5, #31
 800c84c:	fa03 f505 	lsl.w	r5, r3, r5
 800c850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c854:	421d      	tst	r5, r3
 800c856:	bf18      	it	ne
 800c858:	f04f 0801 	movne.w	r8, #1
 800c85c:	f048 0820 	orr.w	r8, r8, #32
 800c860:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c862:	601c      	str	r4, [r3, #0]
 800c864:	9b02      	ldr	r3, [sp, #8]
 800c866:	601e      	str	r6, [r3, #0]
 800c868:	e6a2      	b.n	800c5b0 <__gethex+0x114>
 800c86a:	4290      	cmp	r0, r2
 800c86c:	f842 3c04 	str.w	r3, [r2, #-4]
 800c870:	d8d6      	bhi.n	800c820 <__gethex+0x384>
 800c872:	68a2      	ldr	r2, [r4, #8]
 800c874:	4593      	cmp	fp, r2
 800c876:	db17      	blt.n	800c8a8 <__gethex+0x40c>
 800c878:	6861      	ldr	r1, [r4, #4]
 800c87a:	4648      	mov	r0, r9
 800c87c:	3101      	adds	r1, #1
 800c87e:	f000 f90f 	bl	800caa0 <_Balloc>
 800c882:	4682      	mov	sl, r0
 800c884:	b918      	cbnz	r0, 800c88e <__gethex+0x3f2>
 800c886:	4b1b      	ldr	r3, [pc, #108]	; (800c8f4 <__gethex+0x458>)
 800c888:	4602      	mov	r2, r0
 800c88a:	2184      	movs	r1, #132	; 0x84
 800c88c:	e6b3      	b.n	800c5f6 <__gethex+0x15a>
 800c88e:	6922      	ldr	r2, [r4, #16]
 800c890:	3202      	adds	r2, #2
 800c892:	f104 010c 	add.w	r1, r4, #12
 800c896:	0092      	lsls	r2, r2, #2
 800c898:	300c      	adds	r0, #12
 800c89a:	f7fe feb2 	bl	800b602 <memcpy>
 800c89e:	4621      	mov	r1, r4
 800c8a0:	4648      	mov	r0, r9
 800c8a2:	f000 f93d 	bl	800cb20 <_Bfree>
 800c8a6:	4654      	mov	r4, sl
 800c8a8:	6922      	ldr	r2, [r4, #16]
 800c8aa:	1c51      	adds	r1, r2, #1
 800c8ac:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c8b0:	6121      	str	r1, [r4, #16]
 800c8b2:	2101      	movs	r1, #1
 800c8b4:	6151      	str	r1, [r2, #20]
 800c8b6:	e7bc      	b.n	800c832 <__gethex+0x396>
 800c8b8:	6921      	ldr	r1, [r4, #16]
 800c8ba:	4559      	cmp	r1, fp
 800c8bc:	dd0b      	ble.n	800c8d6 <__gethex+0x43a>
 800c8be:	2101      	movs	r1, #1
 800c8c0:	4620      	mov	r0, r4
 800c8c2:	f7ff fd83 	bl	800c3cc <rshift>
 800c8c6:	68bb      	ldr	r3, [r7, #8]
 800c8c8:	3601      	adds	r6, #1
 800c8ca:	42b3      	cmp	r3, r6
 800c8cc:	f6ff aedb 	blt.w	800c686 <__gethex+0x1ea>
 800c8d0:	f04f 0801 	mov.w	r8, #1
 800c8d4:	e7c2      	b.n	800c85c <__gethex+0x3c0>
 800c8d6:	f015 051f 	ands.w	r5, r5, #31
 800c8da:	d0f9      	beq.n	800c8d0 <__gethex+0x434>
 800c8dc:	9b01      	ldr	r3, [sp, #4]
 800c8de:	441a      	add	r2, r3
 800c8e0:	f1c5 0520 	rsb	r5, r5, #32
 800c8e4:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c8e8:	f000 f9cc 	bl	800cc84 <__hi0bits>
 800c8ec:	42a8      	cmp	r0, r5
 800c8ee:	dbe6      	blt.n	800c8be <__gethex+0x422>
 800c8f0:	e7ee      	b.n	800c8d0 <__gethex+0x434>
 800c8f2:	bf00      	nop
 800c8f4:	08045c0d 	.word	0x08045c0d

0800c8f8 <L_shift>:
 800c8f8:	f1c2 0208 	rsb	r2, r2, #8
 800c8fc:	0092      	lsls	r2, r2, #2
 800c8fe:	b570      	push	{r4, r5, r6, lr}
 800c900:	f1c2 0620 	rsb	r6, r2, #32
 800c904:	6843      	ldr	r3, [r0, #4]
 800c906:	6804      	ldr	r4, [r0, #0]
 800c908:	fa03 f506 	lsl.w	r5, r3, r6
 800c90c:	432c      	orrs	r4, r5
 800c90e:	40d3      	lsrs	r3, r2
 800c910:	6004      	str	r4, [r0, #0]
 800c912:	f840 3f04 	str.w	r3, [r0, #4]!
 800c916:	4288      	cmp	r0, r1
 800c918:	d3f4      	bcc.n	800c904 <L_shift+0xc>
 800c91a:	bd70      	pop	{r4, r5, r6, pc}

0800c91c <__match>:
 800c91c:	b530      	push	{r4, r5, lr}
 800c91e:	6803      	ldr	r3, [r0, #0]
 800c920:	3301      	adds	r3, #1
 800c922:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c926:	b914      	cbnz	r4, 800c92e <__match+0x12>
 800c928:	6003      	str	r3, [r0, #0]
 800c92a:	2001      	movs	r0, #1
 800c92c:	bd30      	pop	{r4, r5, pc}
 800c92e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c932:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c936:	2d19      	cmp	r5, #25
 800c938:	bf98      	it	ls
 800c93a:	3220      	addls	r2, #32
 800c93c:	42a2      	cmp	r2, r4
 800c93e:	d0f0      	beq.n	800c922 <__match+0x6>
 800c940:	2000      	movs	r0, #0
 800c942:	e7f3      	b.n	800c92c <__match+0x10>

0800c944 <__hexnan>:
 800c944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c948:	680b      	ldr	r3, [r1, #0]
 800c94a:	6801      	ldr	r1, [r0, #0]
 800c94c:	115e      	asrs	r6, r3, #5
 800c94e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c952:	f013 031f 	ands.w	r3, r3, #31
 800c956:	b087      	sub	sp, #28
 800c958:	bf18      	it	ne
 800c95a:	3604      	addne	r6, #4
 800c95c:	2500      	movs	r5, #0
 800c95e:	1f37      	subs	r7, r6, #4
 800c960:	4682      	mov	sl, r0
 800c962:	4690      	mov	r8, r2
 800c964:	9301      	str	r3, [sp, #4]
 800c966:	f846 5c04 	str.w	r5, [r6, #-4]
 800c96a:	46b9      	mov	r9, r7
 800c96c:	463c      	mov	r4, r7
 800c96e:	9502      	str	r5, [sp, #8]
 800c970:	46ab      	mov	fp, r5
 800c972:	784a      	ldrb	r2, [r1, #1]
 800c974:	1c4b      	adds	r3, r1, #1
 800c976:	9303      	str	r3, [sp, #12]
 800c978:	b342      	cbz	r2, 800c9cc <__hexnan+0x88>
 800c97a:	4610      	mov	r0, r2
 800c97c:	9105      	str	r1, [sp, #20]
 800c97e:	9204      	str	r2, [sp, #16]
 800c980:	f7ff fd76 	bl	800c470 <__hexdig_fun>
 800c984:	2800      	cmp	r0, #0
 800c986:	d14f      	bne.n	800ca28 <__hexnan+0xe4>
 800c988:	9a04      	ldr	r2, [sp, #16]
 800c98a:	9905      	ldr	r1, [sp, #20]
 800c98c:	2a20      	cmp	r2, #32
 800c98e:	d818      	bhi.n	800c9c2 <__hexnan+0x7e>
 800c990:	9b02      	ldr	r3, [sp, #8]
 800c992:	459b      	cmp	fp, r3
 800c994:	dd13      	ble.n	800c9be <__hexnan+0x7a>
 800c996:	454c      	cmp	r4, r9
 800c998:	d206      	bcs.n	800c9a8 <__hexnan+0x64>
 800c99a:	2d07      	cmp	r5, #7
 800c99c:	dc04      	bgt.n	800c9a8 <__hexnan+0x64>
 800c99e:	462a      	mov	r2, r5
 800c9a0:	4649      	mov	r1, r9
 800c9a2:	4620      	mov	r0, r4
 800c9a4:	f7ff ffa8 	bl	800c8f8 <L_shift>
 800c9a8:	4544      	cmp	r4, r8
 800c9aa:	d950      	bls.n	800ca4e <__hexnan+0x10a>
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	f1a4 0904 	sub.w	r9, r4, #4
 800c9b2:	f844 3c04 	str.w	r3, [r4, #-4]
 800c9b6:	f8cd b008 	str.w	fp, [sp, #8]
 800c9ba:	464c      	mov	r4, r9
 800c9bc:	461d      	mov	r5, r3
 800c9be:	9903      	ldr	r1, [sp, #12]
 800c9c0:	e7d7      	b.n	800c972 <__hexnan+0x2e>
 800c9c2:	2a29      	cmp	r2, #41	; 0x29
 800c9c4:	d155      	bne.n	800ca72 <__hexnan+0x12e>
 800c9c6:	3102      	adds	r1, #2
 800c9c8:	f8ca 1000 	str.w	r1, [sl]
 800c9cc:	f1bb 0f00 	cmp.w	fp, #0
 800c9d0:	d04f      	beq.n	800ca72 <__hexnan+0x12e>
 800c9d2:	454c      	cmp	r4, r9
 800c9d4:	d206      	bcs.n	800c9e4 <__hexnan+0xa0>
 800c9d6:	2d07      	cmp	r5, #7
 800c9d8:	dc04      	bgt.n	800c9e4 <__hexnan+0xa0>
 800c9da:	462a      	mov	r2, r5
 800c9dc:	4649      	mov	r1, r9
 800c9de:	4620      	mov	r0, r4
 800c9e0:	f7ff ff8a 	bl	800c8f8 <L_shift>
 800c9e4:	4544      	cmp	r4, r8
 800c9e6:	d934      	bls.n	800ca52 <__hexnan+0x10e>
 800c9e8:	f1a8 0204 	sub.w	r2, r8, #4
 800c9ec:	4623      	mov	r3, r4
 800c9ee:	f853 1b04 	ldr.w	r1, [r3], #4
 800c9f2:	f842 1f04 	str.w	r1, [r2, #4]!
 800c9f6:	429f      	cmp	r7, r3
 800c9f8:	d2f9      	bcs.n	800c9ee <__hexnan+0xaa>
 800c9fa:	1b3b      	subs	r3, r7, r4
 800c9fc:	f023 0303 	bic.w	r3, r3, #3
 800ca00:	3304      	adds	r3, #4
 800ca02:	3e03      	subs	r6, #3
 800ca04:	3401      	adds	r4, #1
 800ca06:	42a6      	cmp	r6, r4
 800ca08:	bf38      	it	cc
 800ca0a:	2304      	movcc	r3, #4
 800ca0c:	4443      	add	r3, r8
 800ca0e:	2200      	movs	r2, #0
 800ca10:	f843 2b04 	str.w	r2, [r3], #4
 800ca14:	429f      	cmp	r7, r3
 800ca16:	d2fb      	bcs.n	800ca10 <__hexnan+0xcc>
 800ca18:	683b      	ldr	r3, [r7, #0]
 800ca1a:	b91b      	cbnz	r3, 800ca24 <__hexnan+0xe0>
 800ca1c:	4547      	cmp	r7, r8
 800ca1e:	d126      	bne.n	800ca6e <__hexnan+0x12a>
 800ca20:	2301      	movs	r3, #1
 800ca22:	603b      	str	r3, [r7, #0]
 800ca24:	2005      	movs	r0, #5
 800ca26:	e025      	b.n	800ca74 <__hexnan+0x130>
 800ca28:	3501      	adds	r5, #1
 800ca2a:	2d08      	cmp	r5, #8
 800ca2c:	f10b 0b01 	add.w	fp, fp, #1
 800ca30:	dd06      	ble.n	800ca40 <__hexnan+0xfc>
 800ca32:	4544      	cmp	r4, r8
 800ca34:	d9c3      	bls.n	800c9be <__hexnan+0x7a>
 800ca36:	2300      	movs	r3, #0
 800ca38:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca3c:	2501      	movs	r5, #1
 800ca3e:	3c04      	subs	r4, #4
 800ca40:	6822      	ldr	r2, [r4, #0]
 800ca42:	f000 000f 	and.w	r0, r0, #15
 800ca46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ca4a:	6020      	str	r0, [r4, #0]
 800ca4c:	e7b7      	b.n	800c9be <__hexnan+0x7a>
 800ca4e:	2508      	movs	r5, #8
 800ca50:	e7b5      	b.n	800c9be <__hexnan+0x7a>
 800ca52:	9b01      	ldr	r3, [sp, #4]
 800ca54:	2b00      	cmp	r3, #0
 800ca56:	d0df      	beq.n	800ca18 <__hexnan+0xd4>
 800ca58:	f1c3 0320 	rsb	r3, r3, #32
 800ca5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca60:	40da      	lsrs	r2, r3
 800ca62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ca66:	4013      	ands	r3, r2
 800ca68:	f846 3c04 	str.w	r3, [r6, #-4]
 800ca6c:	e7d4      	b.n	800ca18 <__hexnan+0xd4>
 800ca6e:	3f04      	subs	r7, #4
 800ca70:	e7d2      	b.n	800ca18 <__hexnan+0xd4>
 800ca72:	2004      	movs	r0, #4
 800ca74:	b007      	add	sp, #28
 800ca76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ca7a <__ascii_mbtowc>:
 800ca7a:	b082      	sub	sp, #8
 800ca7c:	b901      	cbnz	r1, 800ca80 <__ascii_mbtowc+0x6>
 800ca7e:	a901      	add	r1, sp, #4
 800ca80:	b142      	cbz	r2, 800ca94 <__ascii_mbtowc+0x1a>
 800ca82:	b14b      	cbz	r3, 800ca98 <__ascii_mbtowc+0x1e>
 800ca84:	7813      	ldrb	r3, [r2, #0]
 800ca86:	600b      	str	r3, [r1, #0]
 800ca88:	7812      	ldrb	r2, [r2, #0]
 800ca8a:	1e10      	subs	r0, r2, #0
 800ca8c:	bf18      	it	ne
 800ca8e:	2001      	movne	r0, #1
 800ca90:	b002      	add	sp, #8
 800ca92:	4770      	bx	lr
 800ca94:	4610      	mov	r0, r2
 800ca96:	e7fb      	b.n	800ca90 <__ascii_mbtowc+0x16>
 800ca98:	f06f 0001 	mvn.w	r0, #1
 800ca9c:	e7f8      	b.n	800ca90 <__ascii_mbtowc+0x16>
	...

0800caa0 <_Balloc>:
 800caa0:	b570      	push	{r4, r5, r6, lr}
 800caa2:	69c6      	ldr	r6, [r0, #28]
 800caa4:	4604      	mov	r4, r0
 800caa6:	460d      	mov	r5, r1
 800caa8:	b976      	cbnz	r6, 800cac8 <_Balloc+0x28>
 800caaa:	2010      	movs	r0, #16
 800caac:	f7fc fd32 	bl	8009514 <malloc>
 800cab0:	4602      	mov	r2, r0
 800cab2:	61e0      	str	r0, [r4, #28]
 800cab4:	b920      	cbnz	r0, 800cac0 <_Balloc+0x20>
 800cab6:	4b18      	ldr	r3, [pc, #96]	; (800cb18 <_Balloc+0x78>)
 800cab8:	4818      	ldr	r0, [pc, #96]	; (800cb1c <_Balloc+0x7c>)
 800caba:	216b      	movs	r1, #107	; 0x6b
 800cabc:	f001 f920 	bl	800dd00 <__assert_func>
 800cac0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cac4:	6006      	str	r6, [r0, #0]
 800cac6:	60c6      	str	r6, [r0, #12]
 800cac8:	69e6      	ldr	r6, [r4, #28]
 800caca:	68f3      	ldr	r3, [r6, #12]
 800cacc:	b183      	cbz	r3, 800caf0 <_Balloc+0x50>
 800cace:	69e3      	ldr	r3, [r4, #28]
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cad6:	b9b8      	cbnz	r0, 800cb08 <_Balloc+0x68>
 800cad8:	2101      	movs	r1, #1
 800cada:	fa01 f605 	lsl.w	r6, r1, r5
 800cade:	1d72      	adds	r2, r6, #5
 800cae0:	0092      	lsls	r2, r2, #2
 800cae2:	4620      	mov	r0, r4
 800cae4:	f001 f92a 	bl	800dd3c <_calloc_r>
 800cae8:	b160      	cbz	r0, 800cb04 <_Balloc+0x64>
 800caea:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caee:	e00e      	b.n	800cb0e <_Balloc+0x6e>
 800caf0:	2221      	movs	r2, #33	; 0x21
 800caf2:	2104      	movs	r1, #4
 800caf4:	4620      	mov	r0, r4
 800caf6:	f001 f921 	bl	800dd3c <_calloc_r>
 800cafa:	69e3      	ldr	r3, [r4, #28]
 800cafc:	60f0      	str	r0, [r6, #12]
 800cafe:	68db      	ldr	r3, [r3, #12]
 800cb00:	2b00      	cmp	r3, #0
 800cb02:	d1e4      	bne.n	800cace <_Balloc+0x2e>
 800cb04:	2000      	movs	r0, #0
 800cb06:	bd70      	pop	{r4, r5, r6, pc}
 800cb08:	6802      	ldr	r2, [r0, #0]
 800cb0a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb0e:	2300      	movs	r3, #0
 800cb10:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb14:	e7f7      	b.n	800cb06 <_Balloc+0x66>
 800cb16:	bf00      	nop
 800cb18:	08045b9e 	.word	0x08045b9e
 800cb1c:	08045c7e 	.word	0x08045c7e

0800cb20 <_Bfree>:
 800cb20:	b570      	push	{r4, r5, r6, lr}
 800cb22:	69c6      	ldr	r6, [r0, #28]
 800cb24:	4605      	mov	r5, r0
 800cb26:	460c      	mov	r4, r1
 800cb28:	b976      	cbnz	r6, 800cb48 <_Bfree+0x28>
 800cb2a:	2010      	movs	r0, #16
 800cb2c:	f7fc fcf2 	bl	8009514 <malloc>
 800cb30:	4602      	mov	r2, r0
 800cb32:	61e8      	str	r0, [r5, #28]
 800cb34:	b920      	cbnz	r0, 800cb40 <_Bfree+0x20>
 800cb36:	4b09      	ldr	r3, [pc, #36]	; (800cb5c <_Bfree+0x3c>)
 800cb38:	4809      	ldr	r0, [pc, #36]	; (800cb60 <_Bfree+0x40>)
 800cb3a:	218f      	movs	r1, #143	; 0x8f
 800cb3c:	f001 f8e0 	bl	800dd00 <__assert_func>
 800cb40:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb44:	6006      	str	r6, [r0, #0]
 800cb46:	60c6      	str	r6, [r0, #12]
 800cb48:	b13c      	cbz	r4, 800cb5a <_Bfree+0x3a>
 800cb4a:	69eb      	ldr	r3, [r5, #28]
 800cb4c:	6862      	ldr	r2, [r4, #4]
 800cb4e:	68db      	ldr	r3, [r3, #12]
 800cb50:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb54:	6021      	str	r1, [r4, #0]
 800cb56:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb5a:	bd70      	pop	{r4, r5, r6, pc}
 800cb5c:	08045b9e 	.word	0x08045b9e
 800cb60:	08045c7e 	.word	0x08045c7e

0800cb64 <__multadd>:
 800cb64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb68:	690d      	ldr	r5, [r1, #16]
 800cb6a:	4607      	mov	r7, r0
 800cb6c:	460c      	mov	r4, r1
 800cb6e:	461e      	mov	r6, r3
 800cb70:	f101 0c14 	add.w	ip, r1, #20
 800cb74:	2000      	movs	r0, #0
 800cb76:	f8dc 3000 	ldr.w	r3, [ip]
 800cb7a:	b299      	uxth	r1, r3
 800cb7c:	fb02 6101 	mla	r1, r2, r1, r6
 800cb80:	0c1e      	lsrs	r6, r3, #16
 800cb82:	0c0b      	lsrs	r3, r1, #16
 800cb84:	fb02 3306 	mla	r3, r2, r6, r3
 800cb88:	b289      	uxth	r1, r1
 800cb8a:	3001      	adds	r0, #1
 800cb8c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb90:	4285      	cmp	r5, r0
 800cb92:	f84c 1b04 	str.w	r1, [ip], #4
 800cb96:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb9a:	dcec      	bgt.n	800cb76 <__multadd+0x12>
 800cb9c:	b30e      	cbz	r6, 800cbe2 <__multadd+0x7e>
 800cb9e:	68a3      	ldr	r3, [r4, #8]
 800cba0:	42ab      	cmp	r3, r5
 800cba2:	dc19      	bgt.n	800cbd8 <__multadd+0x74>
 800cba4:	6861      	ldr	r1, [r4, #4]
 800cba6:	4638      	mov	r0, r7
 800cba8:	3101      	adds	r1, #1
 800cbaa:	f7ff ff79 	bl	800caa0 <_Balloc>
 800cbae:	4680      	mov	r8, r0
 800cbb0:	b928      	cbnz	r0, 800cbbe <__multadd+0x5a>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	4b0c      	ldr	r3, [pc, #48]	; (800cbe8 <__multadd+0x84>)
 800cbb6:	480d      	ldr	r0, [pc, #52]	; (800cbec <__multadd+0x88>)
 800cbb8:	21ba      	movs	r1, #186	; 0xba
 800cbba:	f001 f8a1 	bl	800dd00 <__assert_func>
 800cbbe:	6922      	ldr	r2, [r4, #16]
 800cbc0:	3202      	adds	r2, #2
 800cbc2:	f104 010c 	add.w	r1, r4, #12
 800cbc6:	0092      	lsls	r2, r2, #2
 800cbc8:	300c      	adds	r0, #12
 800cbca:	f7fe fd1a 	bl	800b602 <memcpy>
 800cbce:	4621      	mov	r1, r4
 800cbd0:	4638      	mov	r0, r7
 800cbd2:	f7ff ffa5 	bl	800cb20 <_Bfree>
 800cbd6:	4644      	mov	r4, r8
 800cbd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cbdc:	3501      	adds	r5, #1
 800cbde:	615e      	str	r6, [r3, #20]
 800cbe0:	6125      	str	r5, [r4, #16]
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cbe8:	08045c0d 	.word	0x08045c0d
 800cbec:	08045c7e 	.word	0x08045c7e

0800cbf0 <__s2b>:
 800cbf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbf4:	460c      	mov	r4, r1
 800cbf6:	4615      	mov	r5, r2
 800cbf8:	461f      	mov	r7, r3
 800cbfa:	2209      	movs	r2, #9
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	4606      	mov	r6, r0
 800cc00:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc04:	2100      	movs	r1, #0
 800cc06:	2201      	movs	r2, #1
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	db09      	blt.n	800cc20 <__s2b+0x30>
 800cc0c:	4630      	mov	r0, r6
 800cc0e:	f7ff ff47 	bl	800caa0 <_Balloc>
 800cc12:	b940      	cbnz	r0, 800cc26 <__s2b+0x36>
 800cc14:	4602      	mov	r2, r0
 800cc16:	4b19      	ldr	r3, [pc, #100]	; (800cc7c <__s2b+0x8c>)
 800cc18:	4819      	ldr	r0, [pc, #100]	; (800cc80 <__s2b+0x90>)
 800cc1a:	21d3      	movs	r1, #211	; 0xd3
 800cc1c:	f001 f870 	bl	800dd00 <__assert_func>
 800cc20:	0052      	lsls	r2, r2, #1
 800cc22:	3101      	adds	r1, #1
 800cc24:	e7f0      	b.n	800cc08 <__s2b+0x18>
 800cc26:	9b08      	ldr	r3, [sp, #32]
 800cc28:	6143      	str	r3, [r0, #20]
 800cc2a:	2d09      	cmp	r5, #9
 800cc2c:	f04f 0301 	mov.w	r3, #1
 800cc30:	6103      	str	r3, [r0, #16]
 800cc32:	dd16      	ble.n	800cc62 <__s2b+0x72>
 800cc34:	f104 0909 	add.w	r9, r4, #9
 800cc38:	46c8      	mov	r8, r9
 800cc3a:	442c      	add	r4, r5
 800cc3c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cc40:	4601      	mov	r1, r0
 800cc42:	3b30      	subs	r3, #48	; 0x30
 800cc44:	220a      	movs	r2, #10
 800cc46:	4630      	mov	r0, r6
 800cc48:	f7ff ff8c 	bl	800cb64 <__multadd>
 800cc4c:	45a0      	cmp	r8, r4
 800cc4e:	d1f5      	bne.n	800cc3c <__s2b+0x4c>
 800cc50:	f1a5 0408 	sub.w	r4, r5, #8
 800cc54:	444c      	add	r4, r9
 800cc56:	1b2d      	subs	r5, r5, r4
 800cc58:	1963      	adds	r3, r4, r5
 800cc5a:	42bb      	cmp	r3, r7
 800cc5c:	db04      	blt.n	800cc68 <__s2b+0x78>
 800cc5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc62:	340a      	adds	r4, #10
 800cc64:	2509      	movs	r5, #9
 800cc66:	e7f6      	b.n	800cc56 <__s2b+0x66>
 800cc68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc6c:	4601      	mov	r1, r0
 800cc6e:	3b30      	subs	r3, #48	; 0x30
 800cc70:	220a      	movs	r2, #10
 800cc72:	4630      	mov	r0, r6
 800cc74:	f7ff ff76 	bl	800cb64 <__multadd>
 800cc78:	e7ee      	b.n	800cc58 <__s2b+0x68>
 800cc7a:	bf00      	nop
 800cc7c:	08045c0d 	.word	0x08045c0d
 800cc80:	08045c7e 	.word	0x08045c7e

0800cc84 <__hi0bits>:
 800cc84:	0c03      	lsrs	r3, r0, #16
 800cc86:	041b      	lsls	r3, r3, #16
 800cc88:	b9d3      	cbnz	r3, 800ccc0 <__hi0bits+0x3c>
 800cc8a:	0400      	lsls	r0, r0, #16
 800cc8c:	2310      	movs	r3, #16
 800cc8e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800cc92:	bf04      	itt	eq
 800cc94:	0200      	lsleq	r0, r0, #8
 800cc96:	3308      	addeq	r3, #8
 800cc98:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cc9c:	bf04      	itt	eq
 800cc9e:	0100      	lsleq	r0, r0, #4
 800cca0:	3304      	addeq	r3, #4
 800cca2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cca6:	bf04      	itt	eq
 800cca8:	0080      	lsleq	r0, r0, #2
 800ccaa:	3302      	addeq	r3, #2
 800ccac:	2800      	cmp	r0, #0
 800ccae:	db05      	blt.n	800ccbc <__hi0bits+0x38>
 800ccb0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ccb4:	f103 0301 	add.w	r3, r3, #1
 800ccb8:	bf08      	it	eq
 800ccba:	2320      	moveq	r3, #32
 800ccbc:	4618      	mov	r0, r3
 800ccbe:	4770      	bx	lr
 800ccc0:	2300      	movs	r3, #0
 800ccc2:	e7e4      	b.n	800cc8e <__hi0bits+0xa>

0800ccc4 <__lo0bits>:
 800ccc4:	6803      	ldr	r3, [r0, #0]
 800ccc6:	f013 0207 	ands.w	r2, r3, #7
 800ccca:	d00c      	beq.n	800cce6 <__lo0bits+0x22>
 800cccc:	07d9      	lsls	r1, r3, #31
 800ccce:	d422      	bmi.n	800cd16 <__lo0bits+0x52>
 800ccd0:	079a      	lsls	r2, r3, #30
 800ccd2:	bf49      	itett	mi
 800ccd4:	085b      	lsrmi	r3, r3, #1
 800ccd6:	089b      	lsrpl	r3, r3, #2
 800ccd8:	6003      	strmi	r3, [r0, #0]
 800ccda:	2201      	movmi	r2, #1
 800ccdc:	bf5c      	itt	pl
 800ccde:	6003      	strpl	r3, [r0, #0]
 800cce0:	2202      	movpl	r2, #2
 800cce2:	4610      	mov	r0, r2
 800cce4:	4770      	bx	lr
 800cce6:	b299      	uxth	r1, r3
 800cce8:	b909      	cbnz	r1, 800ccee <__lo0bits+0x2a>
 800ccea:	0c1b      	lsrs	r3, r3, #16
 800ccec:	2210      	movs	r2, #16
 800ccee:	b2d9      	uxtb	r1, r3
 800ccf0:	b909      	cbnz	r1, 800ccf6 <__lo0bits+0x32>
 800ccf2:	3208      	adds	r2, #8
 800ccf4:	0a1b      	lsrs	r3, r3, #8
 800ccf6:	0719      	lsls	r1, r3, #28
 800ccf8:	bf04      	itt	eq
 800ccfa:	091b      	lsreq	r3, r3, #4
 800ccfc:	3204      	addeq	r2, #4
 800ccfe:	0799      	lsls	r1, r3, #30
 800cd00:	bf04      	itt	eq
 800cd02:	089b      	lsreq	r3, r3, #2
 800cd04:	3202      	addeq	r2, #2
 800cd06:	07d9      	lsls	r1, r3, #31
 800cd08:	d403      	bmi.n	800cd12 <__lo0bits+0x4e>
 800cd0a:	085b      	lsrs	r3, r3, #1
 800cd0c:	f102 0201 	add.w	r2, r2, #1
 800cd10:	d003      	beq.n	800cd1a <__lo0bits+0x56>
 800cd12:	6003      	str	r3, [r0, #0]
 800cd14:	e7e5      	b.n	800cce2 <__lo0bits+0x1e>
 800cd16:	2200      	movs	r2, #0
 800cd18:	e7e3      	b.n	800cce2 <__lo0bits+0x1e>
 800cd1a:	2220      	movs	r2, #32
 800cd1c:	e7e1      	b.n	800cce2 <__lo0bits+0x1e>
	...

0800cd20 <__i2b>:
 800cd20:	b510      	push	{r4, lr}
 800cd22:	460c      	mov	r4, r1
 800cd24:	2101      	movs	r1, #1
 800cd26:	f7ff febb 	bl	800caa0 <_Balloc>
 800cd2a:	4602      	mov	r2, r0
 800cd2c:	b928      	cbnz	r0, 800cd3a <__i2b+0x1a>
 800cd2e:	4b05      	ldr	r3, [pc, #20]	; (800cd44 <__i2b+0x24>)
 800cd30:	4805      	ldr	r0, [pc, #20]	; (800cd48 <__i2b+0x28>)
 800cd32:	f240 1145 	movw	r1, #325	; 0x145
 800cd36:	f000 ffe3 	bl	800dd00 <__assert_func>
 800cd3a:	2301      	movs	r3, #1
 800cd3c:	6144      	str	r4, [r0, #20]
 800cd3e:	6103      	str	r3, [r0, #16]
 800cd40:	bd10      	pop	{r4, pc}
 800cd42:	bf00      	nop
 800cd44:	08045c0d 	.word	0x08045c0d
 800cd48:	08045c7e 	.word	0x08045c7e

0800cd4c <__multiply>:
 800cd4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd50:	4691      	mov	r9, r2
 800cd52:	690a      	ldr	r2, [r1, #16]
 800cd54:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd58:	429a      	cmp	r2, r3
 800cd5a:	bfb8      	it	lt
 800cd5c:	460b      	movlt	r3, r1
 800cd5e:	460c      	mov	r4, r1
 800cd60:	bfbc      	itt	lt
 800cd62:	464c      	movlt	r4, r9
 800cd64:	4699      	movlt	r9, r3
 800cd66:	6927      	ldr	r7, [r4, #16]
 800cd68:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd6c:	68a3      	ldr	r3, [r4, #8]
 800cd6e:	6861      	ldr	r1, [r4, #4]
 800cd70:	eb07 060a 	add.w	r6, r7, sl
 800cd74:	42b3      	cmp	r3, r6
 800cd76:	b085      	sub	sp, #20
 800cd78:	bfb8      	it	lt
 800cd7a:	3101      	addlt	r1, #1
 800cd7c:	f7ff fe90 	bl	800caa0 <_Balloc>
 800cd80:	b930      	cbnz	r0, 800cd90 <__multiply+0x44>
 800cd82:	4602      	mov	r2, r0
 800cd84:	4b44      	ldr	r3, [pc, #272]	; (800ce98 <__multiply+0x14c>)
 800cd86:	4845      	ldr	r0, [pc, #276]	; (800ce9c <__multiply+0x150>)
 800cd88:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cd8c:	f000 ffb8 	bl	800dd00 <__assert_func>
 800cd90:	f100 0514 	add.w	r5, r0, #20
 800cd94:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd98:	462b      	mov	r3, r5
 800cd9a:	2200      	movs	r2, #0
 800cd9c:	4543      	cmp	r3, r8
 800cd9e:	d321      	bcc.n	800cde4 <__multiply+0x98>
 800cda0:	f104 0314 	add.w	r3, r4, #20
 800cda4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cda8:	f109 0314 	add.w	r3, r9, #20
 800cdac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cdb0:	9202      	str	r2, [sp, #8]
 800cdb2:	1b3a      	subs	r2, r7, r4
 800cdb4:	3a15      	subs	r2, #21
 800cdb6:	f022 0203 	bic.w	r2, r2, #3
 800cdba:	3204      	adds	r2, #4
 800cdbc:	f104 0115 	add.w	r1, r4, #21
 800cdc0:	428f      	cmp	r7, r1
 800cdc2:	bf38      	it	cc
 800cdc4:	2204      	movcc	r2, #4
 800cdc6:	9201      	str	r2, [sp, #4]
 800cdc8:	9a02      	ldr	r2, [sp, #8]
 800cdca:	9303      	str	r3, [sp, #12]
 800cdcc:	429a      	cmp	r2, r3
 800cdce:	d80c      	bhi.n	800cdea <__multiply+0x9e>
 800cdd0:	2e00      	cmp	r6, #0
 800cdd2:	dd03      	ble.n	800cddc <__multiply+0x90>
 800cdd4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cdd8:	2b00      	cmp	r3, #0
 800cdda:	d05b      	beq.n	800ce94 <__multiply+0x148>
 800cddc:	6106      	str	r6, [r0, #16]
 800cdde:	b005      	add	sp, #20
 800cde0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cde4:	f843 2b04 	str.w	r2, [r3], #4
 800cde8:	e7d8      	b.n	800cd9c <__multiply+0x50>
 800cdea:	f8b3 a000 	ldrh.w	sl, [r3]
 800cdee:	f1ba 0f00 	cmp.w	sl, #0
 800cdf2:	d024      	beq.n	800ce3e <__multiply+0xf2>
 800cdf4:	f104 0e14 	add.w	lr, r4, #20
 800cdf8:	46a9      	mov	r9, r5
 800cdfa:	f04f 0c00 	mov.w	ip, #0
 800cdfe:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce02:	f8d9 1000 	ldr.w	r1, [r9]
 800ce06:	fa1f fb82 	uxth.w	fp, r2
 800ce0a:	b289      	uxth	r1, r1
 800ce0c:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce10:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce14:	f8d9 2000 	ldr.w	r2, [r9]
 800ce18:	4461      	add	r1, ip
 800ce1a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce1e:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce22:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce26:	b289      	uxth	r1, r1
 800ce28:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce2c:	4577      	cmp	r7, lr
 800ce2e:	f849 1b04 	str.w	r1, [r9], #4
 800ce32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce36:	d8e2      	bhi.n	800cdfe <__multiply+0xb2>
 800ce38:	9a01      	ldr	r2, [sp, #4]
 800ce3a:	f845 c002 	str.w	ip, [r5, r2]
 800ce3e:	9a03      	ldr	r2, [sp, #12]
 800ce40:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ce44:	3304      	adds	r3, #4
 800ce46:	f1b9 0f00 	cmp.w	r9, #0
 800ce4a:	d021      	beq.n	800ce90 <__multiply+0x144>
 800ce4c:	6829      	ldr	r1, [r5, #0]
 800ce4e:	f104 0c14 	add.w	ip, r4, #20
 800ce52:	46ae      	mov	lr, r5
 800ce54:	f04f 0a00 	mov.w	sl, #0
 800ce58:	f8bc b000 	ldrh.w	fp, [ip]
 800ce5c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce60:	fb09 220b 	mla	r2, r9, fp, r2
 800ce64:	4452      	add	r2, sl
 800ce66:	b289      	uxth	r1, r1
 800ce68:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce6c:	f84e 1b04 	str.w	r1, [lr], #4
 800ce70:	f85c 1b04 	ldr.w	r1, [ip], #4
 800ce74:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce78:	f8be 1000 	ldrh.w	r1, [lr]
 800ce7c:	fb09 110a 	mla	r1, r9, sl, r1
 800ce80:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ce84:	4567      	cmp	r7, ip
 800ce86:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce8a:	d8e5      	bhi.n	800ce58 <__multiply+0x10c>
 800ce8c:	9a01      	ldr	r2, [sp, #4]
 800ce8e:	50a9      	str	r1, [r5, r2]
 800ce90:	3504      	adds	r5, #4
 800ce92:	e799      	b.n	800cdc8 <__multiply+0x7c>
 800ce94:	3e01      	subs	r6, #1
 800ce96:	e79b      	b.n	800cdd0 <__multiply+0x84>
 800ce98:	08045c0d 	.word	0x08045c0d
 800ce9c:	08045c7e 	.word	0x08045c7e

0800cea0 <__pow5mult>:
 800cea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cea4:	4615      	mov	r5, r2
 800cea6:	f012 0203 	ands.w	r2, r2, #3
 800ceaa:	4606      	mov	r6, r0
 800ceac:	460f      	mov	r7, r1
 800ceae:	d007      	beq.n	800cec0 <__pow5mult+0x20>
 800ceb0:	4c25      	ldr	r4, [pc, #148]	; (800cf48 <__pow5mult+0xa8>)
 800ceb2:	3a01      	subs	r2, #1
 800ceb4:	2300      	movs	r3, #0
 800ceb6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ceba:	f7ff fe53 	bl	800cb64 <__multadd>
 800cebe:	4607      	mov	r7, r0
 800cec0:	10ad      	asrs	r5, r5, #2
 800cec2:	d03d      	beq.n	800cf40 <__pow5mult+0xa0>
 800cec4:	69f4      	ldr	r4, [r6, #28]
 800cec6:	b97c      	cbnz	r4, 800cee8 <__pow5mult+0x48>
 800cec8:	2010      	movs	r0, #16
 800ceca:	f7fc fb23 	bl	8009514 <malloc>
 800cece:	4602      	mov	r2, r0
 800ced0:	61f0      	str	r0, [r6, #28]
 800ced2:	b928      	cbnz	r0, 800cee0 <__pow5mult+0x40>
 800ced4:	4b1d      	ldr	r3, [pc, #116]	; (800cf4c <__pow5mult+0xac>)
 800ced6:	481e      	ldr	r0, [pc, #120]	; (800cf50 <__pow5mult+0xb0>)
 800ced8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cedc:	f000 ff10 	bl	800dd00 <__assert_func>
 800cee0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cee4:	6004      	str	r4, [r0, #0]
 800cee6:	60c4      	str	r4, [r0, #12]
 800cee8:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800ceec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cef0:	b94c      	cbnz	r4, 800cf06 <__pow5mult+0x66>
 800cef2:	f240 2171 	movw	r1, #625	; 0x271
 800cef6:	4630      	mov	r0, r6
 800cef8:	f7ff ff12 	bl	800cd20 <__i2b>
 800cefc:	2300      	movs	r3, #0
 800cefe:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf02:	4604      	mov	r4, r0
 800cf04:	6003      	str	r3, [r0, #0]
 800cf06:	f04f 0900 	mov.w	r9, #0
 800cf0a:	07eb      	lsls	r3, r5, #31
 800cf0c:	d50a      	bpl.n	800cf24 <__pow5mult+0x84>
 800cf0e:	4639      	mov	r1, r7
 800cf10:	4622      	mov	r2, r4
 800cf12:	4630      	mov	r0, r6
 800cf14:	f7ff ff1a 	bl	800cd4c <__multiply>
 800cf18:	4639      	mov	r1, r7
 800cf1a:	4680      	mov	r8, r0
 800cf1c:	4630      	mov	r0, r6
 800cf1e:	f7ff fdff 	bl	800cb20 <_Bfree>
 800cf22:	4647      	mov	r7, r8
 800cf24:	106d      	asrs	r5, r5, #1
 800cf26:	d00b      	beq.n	800cf40 <__pow5mult+0xa0>
 800cf28:	6820      	ldr	r0, [r4, #0]
 800cf2a:	b938      	cbnz	r0, 800cf3c <__pow5mult+0x9c>
 800cf2c:	4622      	mov	r2, r4
 800cf2e:	4621      	mov	r1, r4
 800cf30:	4630      	mov	r0, r6
 800cf32:	f7ff ff0b 	bl	800cd4c <__multiply>
 800cf36:	6020      	str	r0, [r4, #0]
 800cf38:	f8c0 9000 	str.w	r9, [r0]
 800cf3c:	4604      	mov	r4, r0
 800cf3e:	e7e4      	b.n	800cf0a <__pow5mult+0x6a>
 800cf40:	4638      	mov	r0, r7
 800cf42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cf46:	bf00      	nop
 800cf48:	08045dc8 	.word	0x08045dc8
 800cf4c:	08045b9e 	.word	0x08045b9e
 800cf50:	08045c7e 	.word	0x08045c7e

0800cf54 <__lshift>:
 800cf54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf58:	460c      	mov	r4, r1
 800cf5a:	6849      	ldr	r1, [r1, #4]
 800cf5c:	6923      	ldr	r3, [r4, #16]
 800cf5e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf62:	68a3      	ldr	r3, [r4, #8]
 800cf64:	4607      	mov	r7, r0
 800cf66:	4691      	mov	r9, r2
 800cf68:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf6c:	f108 0601 	add.w	r6, r8, #1
 800cf70:	42b3      	cmp	r3, r6
 800cf72:	db0b      	blt.n	800cf8c <__lshift+0x38>
 800cf74:	4638      	mov	r0, r7
 800cf76:	f7ff fd93 	bl	800caa0 <_Balloc>
 800cf7a:	4605      	mov	r5, r0
 800cf7c:	b948      	cbnz	r0, 800cf92 <__lshift+0x3e>
 800cf7e:	4602      	mov	r2, r0
 800cf80:	4b28      	ldr	r3, [pc, #160]	; (800d024 <__lshift+0xd0>)
 800cf82:	4829      	ldr	r0, [pc, #164]	; (800d028 <__lshift+0xd4>)
 800cf84:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cf88:	f000 feba 	bl	800dd00 <__assert_func>
 800cf8c:	3101      	adds	r1, #1
 800cf8e:	005b      	lsls	r3, r3, #1
 800cf90:	e7ee      	b.n	800cf70 <__lshift+0x1c>
 800cf92:	2300      	movs	r3, #0
 800cf94:	f100 0114 	add.w	r1, r0, #20
 800cf98:	f100 0210 	add.w	r2, r0, #16
 800cf9c:	4618      	mov	r0, r3
 800cf9e:	4553      	cmp	r3, sl
 800cfa0:	db33      	blt.n	800d00a <__lshift+0xb6>
 800cfa2:	6920      	ldr	r0, [r4, #16]
 800cfa4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cfa8:	f104 0314 	add.w	r3, r4, #20
 800cfac:	f019 091f 	ands.w	r9, r9, #31
 800cfb0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cfb4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cfb8:	d02b      	beq.n	800d012 <__lshift+0xbe>
 800cfba:	f1c9 0e20 	rsb	lr, r9, #32
 800cfbe:	468a      	mov	sl, r1
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	6818      	ldr	r0, [r3, #0]
 800cfc4:	fa00 f009 	lsl.w	r0, r0, r9
 800cfc8:	4310      	orrs	r0, r2
 800cfca:	f84a 0b04 	str.w	r0, [sl], #4
 800cfce:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd2:	459c      	cmp	ip, r3
 800cfd4:	fa22 f20e 	lsr.w	r2, r2, lr
 800cfd8:	d8f3      	bhi.n	800cfc2 <__lshift+0x6e>
 800cfda:	ebac 0304 	sub.w	r3, ip, r4
 800cfde:	3b15      	subs	r3, #21
 800cfe0:	f023 0303 	bic.w	r3, r3, #3
 800cfe4:	3304      	adds	r3, #4
 800cfe6:	f104 0015 	add.w	r0, r4, #21
 800cfea:	4584      	cmp	ip, r0
 800cfec:	bf38      	it	cc
 800cfee:	2304      	movcc	r3, #4
 800cff0:	50ca      	str	r2, [r1, r3]
 800cff2:	b10a      	cbz	r2, 800cff8 <__lshift+0xa4>
 800cff4:	f108 0602 	add.w	r6, r8, #2
 800cff8:	3e01      	subs	r6, #1
 800cffa:	4638      	mov	r0, r7
 800cffc:	612e      	str	r6, [r5, #16]
 800cffe:	4621      	mov	r1, r4
 800d000:	f7ff fd8e 	bl	800cb20 <_Bfree>
 800d004:	4628      	mov	r0, r5
 800d006:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d00a:	f842 0f04 	str.w	r0, [r2, #4]!
 800d00e:	3301      	adds	r3, #1
 800d010:	e7c5      	b.n	800cf9e <__lshift+0x4a>
 800d012:	3904      	subs	r1, #4
 800d014:	f853 2b04 	ldr.w	r2, [r3], #4
 800d018:	f841 2f04 	str.w	r2, [r1, #4]!
 800d01c:	459c      	cmp	ip, r3
 800d01e:	d8f9      	bhi.n	800d014 <__lshift+0xc0>
 800d020:	e7ea      	b.n	800cff8 <__lshift+0xa4>
 800d022:	bf00      	nop
 800d024:	08045c0d 	.word	0x08045c0d
 800d028:	08045c7e 	.word	0x08045c7e

0800d02c <__mcmp>:
 800d02c:	b530      	push	{r4, r5, lr}
 800d02e:	6902      	ldr	r2, [r0, #16]
 800d030:	690c      	ldr	r4, [r1, #16]
 800d032:	1b12      	subs	r2, r2, r4
 800d034:	d10e      	bne.n	800d054 <__mcmp+0x28>
 800d036:	f100 0314 	add.w	r3, r0, #20
 800d03a:	3114      	adds	r1, #20
 800d03c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d040:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d044:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d048:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d04c:	42a5      	cmp	r5, r4
 800d04e:	d003      	beq.n	800d058 <__mcmp+0x2c>
 800d050:	d305      	bcc.n	800d05e <__mcmp+0x32>
 800d052:	2201      	movs	r2, #1
 800d054:	4610      	mov	r0, r2
 800d056:	bd30      	pop	{r4, r5, pc}
 800d058:	4283      	cmp	r3, r0
 800d05a:	d3f3      	bcc.n	800d044 <__mcmp+0x18>
 800d05c:	e7fa      	b.n	800d054 <__mcmp+0x28>
 800d05e:	f04f 32ff 	mov.w	r2, #4294967295
 800d062:	e7f7      	b.n	800d054 <__mcmp+0x28>

0800d064 <__mdiff>:
 800d064:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d068:	460c      	mov	r4, r1
 800d06a:	4606      	mov	r6, r0
 800d06c:	4611      	mov	r1, r2
 800d06e:	4620      	mov	r0, r4
 800d070:	4690      	mov	r8, r2
 800d072:	f7ff ffdb 	bl	800d02c <__mcmp>
 800d076:	1e05      	subs	r5, r0, #0
 800d078:	d110      	bne.n	800d09c <__mdiff+0x38>
 800d07a:	4629      	mov	r1, r5
 800d07c:	4630      	mov	r0, r6
 800d07e:	f7ff fd0f 	bl	800caa0 <_Balloc>
 800d082:	b930      	cbnz	r0, 800d092 <__mdiff+0x2e>
 800d084:	4b3a      	ldr	r3, [pc, #232]	; (800d170 <__mdiff+0x10c>)
 800d086:	4602      	mov	r2, r0
 800d088:	f240 2137 	movw	r1, #567	; 0x237
 800d08c:	4839      	ldr	r0, [pc, #228]	; (800d174 <__mdiff+0x110>)
 800d08e:	f000 fe37 	bl	800dd00 <__assert_func>
 800d092:	2301      	movs	r3, #1
 800d094:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d098:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d09c:	bfa4      	itt	ge
 800d09e:	4643      	movge	r3, r8
 800d0a0:	46a0      	movge	r8, r4
 800d0a2:	4630      	mov	r0, r6
 800d0a4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d0a8:	bfa6      	itte	ge
 800d0aa:	461c      	movge	r4, r3
 800d0ac:	2500      	movge	r5, #0
 800d0ae:	2501      	movlt	r5, #1
 800d0b0:	f7ff fcf6 	bl	800caa0 <_Balloc>
 800d0b4:	b920      	cbnz	r0, 800d0c0 <__mdiff+0x5c>
 800d0b6:	4b2e      	ldr	r3, [pc, #184]	; (800d170 <__mdiff+0x10c>)
 800d0b8:	4602      	mov	r2, r0
 800d0ba:	f240 2145 	movw	r1, #581	; 0x245
 800d0be:	e7e5      	b.n	800d08c <__mdiff+0x28>
 800d0c0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d0c4:	6926      	ldr	r6, [r4, #16]
 800d0c6:	60c5      	str	r5, [r0, #12]
 800d0c8:	f104 0914 	add.w	r9, r4, #20
 800d0cc:	f108 0514 	add.w	r5, r8, #20
 800d0d0:	f100 0e14 	add.w	lr, r0, #20
 800d0d4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d0d8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d0dc:	f108 0210 	add.w	r2, r8, #16
 800d0e0:	46f2      	mov	sl, lr
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0e8:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d0ec:	fa11 f88b 	uxtah	r8, r1, fp
 800d0f0:	b299      	uxth	r1, r3
 800d0f2:	0c1b      	lsrs	r3, r3, #16
 800d0f4:	eba8 0801 	sub.w	r8, r8, r1
 800d0f8:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0fc:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d100:	fa1f f888 	uxth.w	r8, r8
 800d104:	1419      	asrs	r1, r3, #16
 800d106:	454e      	cmp	r6, r9
 800d108:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d10c:	f84a 3b04 	str.w	r3, [sl], #4
 800d110:	d8e8      	bhi.n	800d0e4 <__mdiff+0x80>
 800d112:	1b33      	subs	r3, r6, r4
 800d114:	3b15      	subs	r3, #21
 800d116:	f023 0303 	bic.w	r3, r3, #3
 800d11a:	3304      	adds	r3, #4
 800d11c:	3415      	adds	r4, #21
 800d11e:	42a6      	cmp	r6, r4
 800d120:	bf38      	it	cc
 800d122:	2304      	movcc	r3, #4
 800d124:	441d      	add	r5, r3
 800d126:	4473      	add	r3, lr
 800d128:	469e      	mov	lr, r3
 800d12a:	462e      	mov	r6, r5
 800d12c:	4566      	cmp	r6, ip
 800d12e:	d30e      	bcc.n	800d14e <__mdiff+0xea>
 800d130:	f10c 0203 	add.w	r2, ip, #3
 800d134:	1b52      	subs	r2, r2, r5
 800d136:	f022 0203 	bic.w	r2, r2, #3
 800d13a:	3d03      	subs	r5, #3
 800d13c:	45ac      	cmp	ip, r5
 800d13e:	bf38      	it	cc
 800d140:	2200      	movcc	r2, #0
 800d142:	4413      	add	r3, r2
 800d144:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d148:	b17a      	cbz	r2, 800d16a <__mdiff+0x106>
 800d14a:	6107      	str	r7, [r0, #16]
 800d14c:	e7a4      	b.n	800d098 <__mdiff+0x34>
 800d14e:	f856 8b04 	ldr.w	r8, [r6], #4
 800d152:	fa11 f288 	uxtah	r2, r1, r8
 800d156:	1414      	asrs	r4, r2, #16
 800d158:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d15c:	b292      	uxth	r2, r2
 800d15e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d162:	f84e 2b04 	str.w	r2, [lr], #4
 800d166:	1421      	asrs	r1, r4, #16
 800d168:	e7e0      	b.n	800d12c <__mdiff+0xc8>
 800d16a:	3f01      	subs	r7, #1
 800d16c:	e7ea      	b.n	800d144 <__mdiff+0xe0>
 800d16e:	bf00      	nop
 800d170:	08045c0d 	.word	0x08045c0d
 800d174:	08045c7e 	.word	0x08045c7e

0800d178 <__ulp>:
 800d178:	b082      	sub	sp, #8
 800d17a:	ed8d 0b00 	vstr	d0, [sp]
 800d17e:	9a01      	ldr	r2, [sp, #4]
 800d180:	4b0f      	ldr	r3, [pc, #60]	; (800d1c0 <__ulp+0x48>)
 800d182:	4013      	ands	r3, r2
 800d184:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d188:	2b00      	cmp	r3, #0
 800d18a:	dc08      	bgt.n	800d19e <__ulp+0x26>
 800d18c:	425b      	negs	r3, r3
 800d18e:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d192:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d196:	da04      	bge.n	800d1a2 <__ulp+0x2a>
 800d198:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d19c:	4113      	asrs	r3, r2
 800d19e:	2200      	movs	r2, #0
 800d1a0:	e008      	b.n	800d1b4 <__ulp+0x3c>
 800d1a2:	f1a2 0314 	sub.w	r3, r2, #20
 800d1a6:	2b1e      	cmp	r3, #30
 800d1a8:	bfda      	itte	le
 800d1aa:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d1ae:	40da      	lsrle	r2, r3
 800d1b0:	2201      	movgt	r2, #1
 800d1b2:	2300      	movs	r3, #0
 800d1b4:	4619      	mov	r1, r3
 800d1b6:	4610      	mov	r0, r2
 800d1b8:	ec41 0b10 	vmov	d0, r0, r1
 800d1bc:	b002      	add	sp, #8
 800d1be:	4770      	bx	lr
 800d1c0:	7ff00000 	.word	0x7ff00000

0800d1c4 <__b2d>:
 800d1c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d1c8:	6906      	ldr	r6, [r0, #16]
 800d1ca:	f100 0814 	add.w	r8, r0, #20
 800d1ce:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d1d2:	1f37      	subs	r7, r6, #4
 800d1d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d1d8:	4610      	mov	r0, r2
 800d1da:	f7ff fd53 	bl	800cc84 <__hi0bits>
 800d1de:	f1c0 0320 	rsb	r3, r0, #32
 800d1e2:	280a      	cmp	r0, #10
 800d1e4:	600b      	str	r3, [r1, #0]
 800d1e6:	491b      	ldr	r1, [pc, #108]	; (800d254 <__b2d+0x90>)
 800d1e8:	dc15      	bgt.n	800d216 <__b2d+0x52>
 800d1ea:	f1c0 0c0b 	rsb	ip, r0, #11
 800d1ee:	fa22 f30c 	lsr.w	r3, r2, ip
 800d1f2:	45b8      	cmp	r8, r7
 800d1f4:	ea43 0501 	orr.w	r5, r3, r1
 800d1f8:	bf34      	ite	cc
 800d1fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d1fe:	2300      	movcs	r3, #0
 800d200:	3015      	adds	r0, #21
 800d202:	fa02 f000 	lsl.w	r0, r2, r0
 800d206:	fa23 f30c 	lsr.w	r3, r3, ip
 800d20a:	4303      	orrs	r3, r0
 800d20c:	461c      	mov	r4, r3
 800d20e:	ec45 4b10 	vmov	d0, r4, r5
 800d212:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d216:	45b8      	cmp	r8, r7
 800d218:	bf3a      	itte	cc
 800d21a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d21e:	f1a6 0708 	subcc.w	r7, r6, #8
 800d222:	2300      	movcs	r3, #0
 800d224:	380b      	subs	r0, #11
 800d226:	d012      	beq.n	800d24e <__b2d+0x8a>
 800d228:	f1c0 0120 	rsb	r1, r0, #32
 800d22c:	fa23 f401 	lsr.w	r4, r3, r1
 800d230:	4082      	lsls	r2, r0
 800d232:	4322      	orrs	r2, r4
 800d234:	4547      	cmp	r7, r8
 800d236:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d23a:	bf8c      	ite	hi
 800d23c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d240:	2200      	movls	r2, #0
 800d242:	4083      	lsls	r3, r0
 800d244:	40ca      	lsrs	r2, r1
 800d246:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d24a:	4313      	orrs	r3, r2
 800d24c:	e7de      	b.n	800d20c <__b2d+0x48>
 800d24e:	ea42 0501 	orr.w	r5, r2, r1
 800d252:	e7db      	b.n	800d20c <__b2d+0x48>
 800d254:	3ff00000 	.word	0x3ff00000

0800d258 <__d2b>:
 800d258:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d25c:	460f      	mov	r7, r1
 800d25e:	2101      	movs	r1, #1
 800d260:	ec59 8b10 	vmov	r8, r9, d0
 800d264:	4616      	mov	r6, r2
 800d266:	f7ff fc1b 	bl	800caa0 <_Balloc>
 800d26a:	4604      	mov	r4, r0
 800d26c:	b930      	cbnz	r0, 800d27c <__d2b+0x24>
 800d26e:	4602      	mov	r2, r0
 800d270:	4b24      	ldr	r3, [pc, #144]	; (800d304 <__d2b+0xac>)
 800d272:	4825      	ldr	r0, [pc, #148]	; (800d308 <__d2b+0xb0>)
 800d274:	f240 310f 	movw	r1, #783	; 0x30f
 800d278:	f000 fd42 	bl	800dd00 <__assert_func>
 800d27c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d280:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d284:	bb2d      	cbnz	r5, 800d2d2 <__d2b+0x7a>
 800d286:	9301      	str	r3, [sp, #4]
 800d288:	f1b8 0300 	subs.w	r3, r8, #0
 800d28c:	d026      	beq.n	800d2dc <__d2b+0x84>
 800d28e:	4668      	mov	r0, sp
 800d290:	9300      	str	r3, [sp, #0]
 800d292:	f7ff fd17 	bl	800ccc4 <__lo0bits>
 800d296:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d29a:	b1e8      	cbz	r0, 800d2d8 <__d2b+0x80>
 800d29c:	f1c0 0320 	rsb	r3, r0, #32
 800d2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800d2a4:	430b      	orrs	r3, r1
 800d2a6:	40c2      	lsrs	r2, r0
 800d2a8:	6163      	str	r3, [r4, #20]
 800d2aa:	9201      	str	r2, [sp, #4]
 800d2ac:	9b01      	ldr	r3, [sp, #4]
 800d2ae:	61a3      	str	r3, [r4, #24]
 800d2b0:	2b00      	cmp	r3, #0
 800d2b2:	bf14      	ite	ne
 800d2b4:	2202      	movne	r2, #2
 800d2b6:	2201      	moveq	r2, #1
 800d2b8:	6122      	str	r2, [r4, #16]
 800d2ba:	b1bd      	cbz	r5, 800d2ec <__d2b+0x94>
 800d2bc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d2c0:	4405      	add	r5, r0
 800d2c2:	603d      	str	r5, [r7, #0]
 800d2c4:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d2c8:	6030      	str	r0, [r6, #0]
 800d2ca:	4620      	mov	r0, r4
 800d2cc:	b003      	add	sp, #12
 800d2ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d2d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2d6:	e7d6      	b.n	800d286 <__d2b+0x2e>
 800d2d8:	6161      	str	r1, [r4, #20]
 800d2da:	e7e7      	b.n	800d2ac <__d2b+0x54>
 800d2dc:	a801      	add	r0, sp, #4
 800d2de:	f7ff fcf1 	bl	800ccc4 <__lo0bits>
 800d2e2:	9b01      	ldr	r3, [sp, #4]
 800d2e4:	6163      	str	r3, [r4, #20]
 800d2e6:	3020      	adds	r0, #32
 800d2e8:	2201      	movs	r2, #1
 800d2ea:	e7e5      	b.n	800d2b8 <__d2b+0x60>
 800d2ec:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d2f0:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2f4:	6038      	str	r0, [r7, #0]
 800d2f6:	6918      	ldr	r0, [r3, #16]
 800d2f8:	f7ff fcc4 	bl	800cc84 <__hi0bits>
 800d2fc:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d300:	e7e2      	b.n	800d2c8 <__d2b+0x70>
 800d302:	bf00      	nop
 800d304:	08045c0d 	.word	0x08045c0d
 800d308:	08045c7e 	.word	0x08045c7e

0800d30c <__ratio>:
 800d30c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d310:	4688      	mov	r8, r1
 800d312:	4669      	mov	r1, sp
 800d314:	4681      	mov	r9, r0
 800d316:	f7ff ff55 	bl	800d1c4 <__b2d>
 800d31a:	a901      	add	r1, sp, #4
 800d31c:	4640      	mov	r0, r8
 800d31e:	ec55 4b10 	vmov	r4, r5, d0
 800d322:	f7ff ff4f 	bl	800d1c4 <__b2d>
 800d326:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d32a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d32e:	eba3 0c02 	sub.w	ip, r3, r2
 800d332:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d336:	1a9b      	subs	r3, r3, r2
 800d338:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d33c:	ec51 0b10 	vmov	r0, r1, d0
 800d340:	2b00      	cmp	r3, #0
 800d342:	bfd6      	itet	le
 800d344:	460a      	movle	r2, r1
 800d346:	462a      	movgt	r2, r5
 800d348:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d34c:	468b      	mov	fp, r1
 800d34e:	462f      	mov	r7, r5
 800d350:	bfd4      	ite	le
 800d352:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d356:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d35a:	4620      	mov	r0, r4
 800d35c:	ee10 2a10 	vmov	r2, s0
 800d360:	465b      	mov	r3, fp
 800d362:	4639      	mov	r1, r7
 800d364:	f7f3 fa92 	bl	800088c <__aeabi_ddiv>
 800d368:	ec41 0b10 	vmov	d0, r0, r1
 800d36c:	b003      	add	sp, #12
 800d36e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d372 <__copybits>:
 800d372:	3901      	subs	r1, #1
 800d374:	b570      	push	{r4, r5, r6, lr}
 800d376:	1149      	asrs	r1, r1, #5
 800d378:	6914      	ldr	r4, [r2, #16]
 800d37a:	3101      	adds	r1, #1
 800d37c:	f102 0314 	add.w	r3, r2, #20
 800d380:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d384:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d388:	1f05      	subs	r5, r0, #4
 800d38a:	42a3      	cmp	r3, r4
 800d38c:	d30c      	bcc.n	800d3a8 <__copybits+0x36>
 800d38e:	1aa3      	subs	r3, r4, r2
 800d390:	3b11      	subs	r3, #17
 800d392:	f023 0303 	bic.w	r3, r3, #3
 800d396:	3211      	adds	r2, #17
 800d398:	42a2      	cmp	r2, r4
 800d39a:	bf88      	it	hi
 800d39c:	2300      	movhi	r3, #0
 800d39e:	4418      	add	r0, r3
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	4288      	cmp	r0, r1
 800d3a4:	d305      	bcc.n	800d3b2 <__copybits+0x40>
 800d3a6:	bd70      	pop	{r4, r5, r6, pc}
 800d3a8:	f853 6b04 	ldr.w	r6, [r3], #4
 800d3ac:	f845 6f04 	str.w	r6, [r5, #4]!
 800d3b0:	e7eb      	b.n	800d38a <__copybits+0x18>
 800d3b2:	f840 3b04 	str.w	r3, [r0], #4
 800d3b6:	e7f4      	b.n	800d3a2 <__copybits+0x30>

0800d3b8 <__any_on>:
 800d3b8:	f100 0214 	add.w	r2, r0, #20
 800d3bc:	6900      	ldr	r0, [r0, #16]
 800d3be:	114b      	asrs	r3, r1, #5
 800d3c0:	4298      	cmp	r0, r3
 800d3c2:	b510      	push	{r4, lr}
 800d3c4:	db11      	blt.n	800d3ea <__any_on+0x32>
 800d3c6:	dd0a      	ble.n	800d3de <__any_on+0x26>
 800d3c8:	f011 011f 	ands.w	r1, r1, #31
 800d3cc:	d007      	beq.n	800d3de <__any_on+0x26>
 800d3ce:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3d2:	fa24 f001 	lsr.w	r0, r4, r1
 800d3d6:	fa00 f101 	lsl.w	r1, r0, r1
 800d3da:	428c      	cmp	r4, r1
 800d3dc:	d10b      	bne.n	800d3f6 <__any_on+0x3e>
 800d3de:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3e2:	4293      	cmp	r3, r2
 800d3e4:	d803      	bhi.n	800d3ee <__any_on+0x36>
 800d3e6:	2000      	movs	r0, #0
 800d3e8:	bd10      	pop	{r4, pc}
 800d3ea:	4603      	mov	r3, r0
 800d3ec:	e7f7      	b.n	800d3de <__any_on+0x26>
 800d3ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3f2:	2900      	cmp	r1, #0
 800d3f4:	d0f5      	beq.n	800d3e2 <__any_on+0x2a>
 800d3f6:	2001      	movs	r0, #1
 800d3f8:	e7f6      	b.n	800d3e8 <__any_on+0x30>

0800d3fa <_malloc_usable_size_r>:
 800d3fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d3fe:	1f18      	subs	r0, r3, #4
 800d400:	2b00      	cmp	r3, #0
 800d402:	bfbc      	itt	lt
 800d404:	580b      	ldrlt	r3, [r1, r0]
 800d406:	18c0      	addlt	r0, r0, r3
 800d408:	4770      	bx	lr
	...

0800d40c <_strtol_l.constprop.0>:
 800d40c:	2b01      	cmp	r3, #1
 800d40e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d412:	d001      	beq.n	800d418 <_strtol_l.constprop.0+0xc>
 800d414:	2b24      	cmp	r3, #36	; 0x24
 800d416:	d906      	bls.n	800d426 <_strtol_l.constprop.0+0x1a>
 800d418:	f7fe f8c6 	bl	800b5a8 <__errno>
 800d41c:	2316      	movs	r3, #22
 800d41e:	6003      	str	r3, [r0, #0]
 800d420:	2000      	movs	r0, #0
 800d422:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d426:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d50c <_strtol_l.constprop.0+0x100>
 800d42a:	460d      	mov	r5, r1
 800d42c:	462e      	mov	r6, r5
 800d42e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d432:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d436:	f017 0708 	ands.w	r7, r7, #8
 800d43a:	d1f7      	bne.n	800d42c <_strtol_l.constprop.0+0x20>
 800d43c:	2c2d      	cmp	r4, #45	; 0x2d
 800d43e:	d132      	bne.n	800d4a6 <_strtol_l.constprop.0+0x9a>
 800d440:	782c      	ldrb	r4, [r5, #0]
 800d442:	2701      	movs	r7, #1
 800d444:	1cb5      	adds	r5, r6, #2
 800d446:	2b00      	cmp	r3, #0
 800d448:	d05b      	beq.n	800d502 <_strtol_l.constprop.0+0xf6>
 800d44a:	2b10      	cmp	r3, #16
 800d44c:	d109      	bne.n	800d462 <_strtol_l.constprop.0+0x56>
 800d44e:	2c30      	cmp	r4, #48	; 0x30
 800d450:	d107      	bne.n	800d462 <_strtol_l.constprop.0+0x56>
 800d452:	782c      	ldrb	r4, [r5, #0]
 800d454:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d458:	2c58      	cmp	r4, #88	; 0x58
 800d45a:	d14d      	bne.n	800d4f8 <_strtol_l.constprop.0+0xec>
 800d45c:	786c      	ldrb	r4, [r5, #1]
 800d45e:	2310      	movs	r3, #16
 800d460:	3502      	adds	r5, #2
 800d462:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d466:	f108 38ff 	add.w	r8, r8, #4294967295
 800d46a:	f04f 0e00 	mov.w	lr, #0
 800d46e:	fbb8 f9f3 	udiv	r9, r8, r3
 800d472:	4676      	mov	r6, lr
 800d474:	fb03 8a19 	mls	sl, r3, r9, r8
 800d478:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d47c:	f1bc 0f09 	cmp.w	ip, #9
 800d480:	d816      	bhi.n	800d4b0 <_strtol_l.constprop.0+0xa4>
 800d482:	4664      	mov	r4, ip
 800d484:	42a3      	cmp	r3, r4
 800d486:	dd24      	ble.n	800d4d2 <_strtol_l.constprop.0+0xc6>
 800d488:	f1be 3fff 	cmp.w	lr, #4294967295
 800d48c:	d008      	beq.n	800d4a0 <_strtol_l.constprop.0+0x94>
 800d48e:	45b1      	cmp	r9, r6
 800d490:	d31c      	bcc.n	800d4cc <_strtol_l.constprop.0+0xc0>
 800d492:	d101      	bne.n	800d498 <_strtol_l.constprop.0+0x8c>
 800d494:	45a2      	cmp	sl, r4
 800d496:	db19      	blt.n	800d4cc <_strtol_l.constprop.0+0xc0>
 800d498:	fb06 4603 	mla	r6, r6, r3, r4
 800d49c:	f04f 0e01 	mov.w	lr, #1
 800d4a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d4a4:	e7e8      	b.n	800d478 <_strtol_l.constprop.0+0x6c>
 800d4a6:	2c2b      	cmp	r4, #43	; 0x2b
 800d4a8:	bf04      	itt	eq
 800d4aa:	782c      	ldrbeq	r4, [r5, #0]
 800d4ac:	1cb5      	addeq	r5, r6, #2
 800d4ae:	e7ca      	b.n	800d446 <_strtol_l.constprop.0+0x3a>
 800d4b0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d4b4:	f1bc 0f19 	cmp.w	ip, #25
 800d4b8:	d801      	bhi.n	800d4be <_strtol_l.constprop.0+0xb2>
 800d4ba:	3c37      	subs	r4, #55	; 0x37
 800d4bc:	e7e2      	b.n	800d484 <_strtol_l.constprop.0+0x78>
 800d4be:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d4c2:	f1bc 0f19 	cmp.w	ip, #25
 800d4c6:	d804      	bhi.n	800d4d2 <_strtol_l.constprop.0+0xc6>
 800d4c8:	3c57      	subs	r4, #87	; 0x57
 800d4ca:	e7db      	b.n	800d484 <_strtol_l.constprop.0+0x78>
 800d4cc:	f04f 3eff 	mov.w	lr, #4294967295
 800d4d0:	e7e6      	b.n	800d4a0 <_strtol_l.constprop.0+0x94>
 800d4d2:	f1be 3fff 	cmp.w	lr, #4294967295
 800d4d6:	d105      	bne.n	800d4e4 <_strtol_l.constprop.0+0xd8>
 800d4d8:	2322      	movs	r3, #34	; 0x22
 800d4da:	6003      	str	r3, [r0, #0]
 800d4dc:	4646      	mov	r6, r8
 800d4de:	b942      	cbnz	r2, 800d4f2 <_strtol_l.constprop.0+0xe6>
 800d4e0:	4630      	mov	r0, r6
 800d4e2:	e79e      	b.n	800d422 <_strtol_l.constprop.0+0x16>
 800d4e4:	b107      	cbz	r7, 800d4e8 <_strtol_l.constprop.0+0xdc>
 800d4e6:	4276      	negs	r6, r6
 800d4e8:	2a00      	cmp	r2, #0
 800d4ea:	d0f9      	beq.n	800d4e0 <_strtol_l.constprop.0+0xd4>
 800d4ec:	f1be 0f00 	cmp.w	lr, #0
 800d4f0:	d000      	beq.n	800d4f4 <_strtol_l.constprop.0+0xe8>
 800d4f2:	1e69      	subs	r1, r5, #1
 800d4f4:	6011      	str	r1, [r2, #0]
 800d4f6:	e7f3      	b.n	800d4e0 <_strtol_l.constprop.0+0xd4>
 800d4f8:	2430      	movs	r4, #48	; 0x30
 800d4fa:	2b00      	cmp	r3, #0
 800d4fc:	d1b1      	bne.n	800d462 <_strtol_l.constprop.0+0x56>
 800d4fe:	2308      	movs	r3, #8
 800d500:	e7af      	b.n	800d462 <_strtol_l.constprop.0+0x56>
 800d502:	2c30      	cmp	r4, #48	; 0x30
 800d504:	d0a5      	beq.n	800d452 <_strtol_l.constprop.0+0x46>
 800d506:	230a      	movs	r3, #10
 800d508:	e7ab      	b.n	800d462 <_strtol_l.constprop.0+0x56>
 800d50a:	bf00      	nop
 800d50c:	08045dd5 	.word	0x08045dd5

0800d510 <_strtol_r>:
 800d510:	f7ff bf7c 	b.w	800d40c <_strtol_l.constprop.0>

0800d514 <__ascii_wctomb>:
 800d514:	b149      	cbz	r1, 800d52a <__ascii_wctomb+0x16>
 800d516:	2aff      	cmp	r2, #255	; 0xff
 800d518:	bf85      	ittet	hi
 800d51a:	238a      	movhi	r3, #138	; 0x8a
 800d51c:	6003      	strhi	r3, [r0, #0]
 800d51e:	700a      	strbls	r2, [r1, #0]
 800d520:	f04f 30ff 	movhi.w	r0, #4294967295
 800d524:	bf98      	it	ls
 800d526:	2001      	movls	r0, #1
 800d528:	4770      	bx	lr
 800d52a:	4608      	mov	r0, r1
 800d52c:	4770      	bx	lr

0800d52e <__ssputs_r>:
 800d52e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d532:	688e      	ldr	r6, [r1, #8]
 800d534:	461f      	mov	r7, r3
 800d536:	42be      	cmp	r6, r7
 800d538:	680b      	ldr	r3, [r1, #0]
 800d53a:	4682      	mov	sl, r0
 800d53c:	460c      	mov	r4, r1
 800d53e:	4690      	mov	r8, r2
 800d540:	d82c      	bhi.n	800d59c <__ssputs_r+0x6e>
 800d542:	898a      	ldrh	r2, [r1, #12]
 800d544:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d548:	d026      	beq.n	800d598 <__ssputs_r+0x6a>
 800d54a:	6965      	ldr	r5, [r4, #20]
 800d54c:	6909      	ldr	r1, [r1, #16]
 800d54e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d552:	eba3 0901 	sub.w	r9, r3, r1
 800d556:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d55a:	1c7b      	adds	r3, r7, #1
 800d55c:	444b      	add	r3, r9
 800d55e:	106d      	asrs	r5, r5, #1
 800d560:	429d      	cmp	r5, r3
 800d562:	bf38      	it	cc
 800d564:	461d      	movcc	r5, r3
 800d566:	0553      	lsls	r3, r2, #21
 800d568:	d527      	bpl.n	800d5ba <__ssputs_r+0x8c>
 800d56a:	4629      	mov	r1, r5
 800d56c:	f7fb fffa 	bl	8009564 <_malloc_r>
 800d570:	4606      	mov	r6, r0
 800d572:	b360      	cbz	r0, 800d5ce <__ssputs_r+0xa0>
 800d574:	6921      	ldr	r1, [r4, #16]
 800d576:	464a      	mov	r2, r9
 800d578:	f7fe f843 	bl	800b602 <memcpy>
 800d57c:	89a3      	ldrh	r3, [r4, #12]
 800d57e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d586:	81a3      	strh	r3, [r4, #12]
 800d588:	6126      	str	r6, [r4, #16]
 800d58a:	6165      	str	r5, [r4, #20]
 800d58c:	444e      	add	r6, r9
 800d58e:	eba5 0509 	sub.w	r5, r5, r9
 800d592:	6026      	str	r6, [r4, #0]
 800d594:	60a5      	str	r5, [r4, #8]
 800d596:	463e      	mov	r6, r7
 800d598:	42be      	cmp	r6, r7
 800d59a:	d900      	bls.n	800d59e <__ssputs_r+0x70>
 800d59c:	463e      	mov	r6, r7
 800d59e:	6820      	ldr	r0, [r4, #0]
 800d5a0:	4632      	mov	r2, r6
 800d5a2:	4641      	mov	r1, r8
 800d5a4:	f000 fb70 	bl	800dc88 <memmove>
 800d5a8:	68a3      	ldr	r3, [r4, #8]
 800d5aa:	1b9b      	subs	r3, r3, r6
 800d5ac:	60a3      	str	r3, [r4, #8]
 800d5ae:	6823      	ldr	r3, [r4, #0]
 800d5b0:	4433      	add	r3, r6
 800d5b2:	6023      	str	r3, [r4, #0]
 800d5b4:	2000      	movs	r0, #0
 800d5b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d5ba:	462a      	mov	r2, r5
 800d5bc:	f7fc f85e 	bl	800967c <_realloc_r>
 800d5c0:	4606      	mov	r6, r0
 800d5c2:	2800      	cmp	r0, #0
 800d5c4:	d1e0      	bne.n	800d588 <__ssputs_r+0x5a>
 800d5c6:	6921      	ldr	r1, [r4, #16]
 800d5c8:	4650      	mov	r0, sl
 800d5ca:	f7fe feb3 	bl	800c334 <_free_r>
 800d5ce:	230c      	movs	r3, #12
 800d5d0:	f8ca 3000 	str.w	r3, [sl]
 800d5d4:	89a3      	ldrh	r3, [r4, #12]
 800d5d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5da:	81a3      	strh	r3, [r4, #12]
 800d5dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d5e0:	e7e9      	b.n	800d5b6 <__ssputs_r+0x88>
	...

0800d5e4 <_svfiprintf_r>:
 800d5e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d5e8:	4698      	mov	r8, r3
 800d5ea:	898b      	ldrh	r3, [r1, #12]
 800d5ec:	061b      	lsls	r3, r3, #24
 800d5ee:	b09d      	sub	sp, #116	; 0x74
 800d5f0:	4607      	mov	r7, r0
 800d5f2:	460d      	mov	r5, r1
 800d5f4:	4614      	mov	r4, r2
 800d5f6:	d50e      	bpl.n	800d616 <_svfiprintf_r+0x32>
 800d5f8:	690b      	ldr	r3, [r1, #16]
 800d5fa:	b963      	cbnz	r3, 800d616 <_svfiprintf_r+0x32>
 800d5fc:	2140      	movs	r1, #64	; 0x40
 800d5fe:	f7fb ffb1 	bl	8009564 <_malloc_r>
 800d602:	6028      	str	r0, [r5, #0]
 800d604:	6128      	str	r0, [r5, #16]
 800d606:	b920      	cbnz	r0, 800d612 <_svfiprintf_r+0x2e>
 800d608:	230c      	movs	r3, #12
 800d60a:	603b      	str	r3, [r7, #0]
 800d60c:	f04f 30ff 	mov.w	r0, #4294967295
 800d610:	e0d0      	b.n	800d7b4 <_svfiprintf_r+0x1d0>
 800d612:	2340      	movs	r3, #64	; 0x40
 800d614:	616b      	str	r3, [r5, #20]
 800d616:	2300      	movs	r3, #0
 800d618:	9309      	str	r3, [sp, #36]	; 0x24
 800d61a:	2320      	movs	r3, #32
 800d61c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d620:	f8cd 800c 	str.w	r8, [sp, #12]
 800d624:	2330      	movs	r3, #48	; 0x30
 800d626:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d7cc <_svfiprintf_r+0x1e8>
 800d62a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d62e:	f04f 0901 	mov.w	r9, #1
 800d632:	4623      	mov	r3, r4
 800d634:	469a      	mov	sl, r3
 800d636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d63a:	b10a      	cbz	r2, 800d640 <_svfiprintf_r+0x5c>
 800d63c:	2a25      	cmp	r2, #37	; 0x25
 800d63e:	d1f9      	bne.n	800d634 <_svfiprintf_r+0x50>
 800d640:	ebba 0b04 	subs.w	fp, sl, r4
 800d644:	d00b      	beq.n	800d65e <_svfiprintf_r+0x7a>
 800d646:	465b      	mov	r3, fp
 800d648:	4622      	mov	r2, r4
 800d64a:	4629      	mov	r1, r5
 800d64c:	4638      	mov	r0, r7
 800d64e:	f7ff ff6e 	bl	800d52e <__ssputs_r>
 800d652:	3001      	adds	r0, #1
 800d654:	f000 80a9 	beq.w	800d7aa <_svfiprintf_r+0x1c6>
 800d658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d65a:	445a      	add	r2, fp
 800d65c:	9209      	str	r2, [sp, #36]	; 0x24
 800d65e:	f89a 3000 	ldrb.w	r3, [sl]
 800d662:	2b00      	cmp	r3, #0
 800d664:	f000 80a1 	beq.w	800d7aa <_svfiprintf_r+0x1c6>
 800d668:	2300      	movs	r3, #0
 800d66a:	f04f 32ff 	mov.w	r2, #4294967295
 800d66e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d672:	f10a 0a01 	add.w	sl, sl, #1
 800d676:	9304      	str	r3, [sp, #16]
 800d678:	9307      	str	r3, [sp, #28]
 800d67a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d67e:	931a      	str	r3, [sp, #104]	; 0x68
 800d680:	4654      	mov	r4, sl
 800d682:	2205      	movs	r2, #5
 800d684:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d688:	4850      	ldr	r0, [pc, #320]	; (800d7cc <_svfiprintf_r+0x1e8>)
 800d68a:	f7f2 fdc1 	bl	8000210 <memchr>
 800d68e:	9a04      	ldr	r2, [sp, #16]
 800d690:	b9d8      	cbnz	r0, 800d6ca <_svfiprintf_r+0xe6>
 800d692:	06d0      	lsls	r0, r2, #27
 800d694:	bf44      	itt	mi
 800d696:	2320      	movmi	r3, #32
 800d698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d69c:	0711      	lsls	r1, r2, #28
 800d69e:	bf44      	itt	mi
 800d6a0:	232b      	movmi	r3, #43	; 0x2b
 800d6a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d6a6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6aa:	2b2a      	cmp	r3, #42	; 0x2a
 800d6ac:	d015      	beq.n	800d6da <_svfiprintf_r+0xf6>
 800d6ae:	9a07      	ldr	r2, [sp, #28]
 800d6b0:	4654      	mov	r4, sl
 800d6b2:	2000      	movs	r0, #0
 800d6b4:	f04f 0c0a 	mov.w	ip, #10
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d6be:	3b30      	subs	r3, #48	; 0x30
 800d6c0:	2b09      	cmp	r3, #9
 800d6c2:	d94d      	bls.n	800d760 <_svfiprintf_r+0x17c>
 800d6c4:	b1b0      	cbz	r0, 800d6f4 <_svfiprintf_r+0x110>
 800d6c6:	9207      	str	r2, [sp, #28]
 800d6c8:	e014      	b.n	800d6f4 <_svfiprintf_r+0x110>
 800d6ca:	eba0 0308 	sub.w	r3, r0, r8
 800d6ce:	fa09 f303 	lsl.w	r3, r9, r3
 800d6d2:	4313      	orrs	r3, r2
 800d6d4:	9304      	str	r3, [sp, #16]
 800d6d6:	46a2      	mov	sl, r4
 800d6d8:	e7d2      	b.n	800d680 <_svfiprintf_r+0x9c>
 800d6da:	9b03      	ldr	r3, [sp, #12]
 800d6dc:	1d19      	adds	r1, r3, #4
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	9103      	str	r1, [sp, #12]
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	bfbb      	ittet	lt
 800d6e6:	425b      	neglt	r3, r3
 800d6e8:	f042 0202 	orrlt.w	r2, r2, #2
 800d6ec:	9307      	strge	r3, [sp, #28]
 800d6ee:	9307      	strlt	r3, [sp, #28]
 800d6f0:	bfb8      	it	lt
 800d6f2:	9204      	strlt	r2, [sp, #16]
 800d6f4:	7823      	ldrb	r3, [r4, #0]
 800d6f6:	2b2e      	cmp	r3, #46	; 0x2e
 800d6f8:	d10c      	bne.n	800d714 <_svfiprintf_r+0x130>
 800d6fa:	7863      	ldrb	r3, [r4, #1]
 800d6fc:	2b2a      	cmp	r3, #42	; 0x2a
 800d6fe:	d134      	bne.n	800d76a <_svfiprintf_r+0x186>
 800d700:	9b03      	ldr	r3, [sp, #12]
 800d702:	1d1a      	adds	r2, r3, #4
 800d704:	681b      	ldr	r3, [r3, #0]
 800d706:	9203      	str	r2, [sp, #12]
 800d708:	2b00      	cmp	r3, #0
 800d70a:	bfb8      	it	lt
 800d70c:	f04f 33ff 	movlt.w	r3, #4294967295
 800d710:	3402      	adds	r4, #2
 800d712:	9305      	str	r3, [sp, #20]
 800d714:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d7dc <_svfiprintf_r+0x1f8>
 800d718:	7821      	ldrb	r1, [r4, #0]
 800d71a:	2203      	movs	r2, #3
 800d71c:	4650      	mov	r0, sl
 800d71e:	f7f2 fd77 	bl	8000210 <memchr>
 800d722:	b138      	cbz	r0, 800d734 <_svfiprintf_r+0x150>
 800d724:	9b04      	ldr	r3, [sp, #16]
 800d726:	eba0 000a 	sub.w	r0, r0, sl
 800d72a:	2240      	movs	r2, #64	; 0x40
 800d72c:	4082      	lsls	r2, r0
 800d72e:	4313      	orrs	r3, r2
 800d730:	3401      	adds	r4, #1
 800d732:	9304      	str	r3, [sp, #16]
 800d734:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d738:	4825      	ldr	r0, [pc, #148]	; (800d7d0 <_svfiprintf_r+0x1ec>)
 800d73a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d73e:	2206      	movs	r2, #6
 800d740:	f7f2 fd66 	bl	8000210 <memchr>
 800d744:	2800      	cmp	r0, #0
 800d746:	d038      	beq.n	800d7ba <_svfiprintf_r+0x1d6>
 800d748:	4b22      	ldr	r3, [pc, #136]	; (800d7d4 <_svfiprintf_r+0x1f0>)
 800d74a:	bb1b      	cbnz	r3, 800d794 <_svfiprintf_r+0x1b0>
 800d74c:	9b03      	ldr	r3, [sp, #12]
 800d74e:	3307      	adds	r3, #7
 800d750:	f023 0307 	bic.w	r3, r3, #7
 800d754:	3308      	adds	r3, #8
 800d756:	9303      	str	r3, [sp, #12]
 800d758:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d75a:	4433      	add	r3, r6
 800d75c:	9309      	str	r3, [sp, #36]	; 0x24
 800d75e:	e768      	b.n	800d632 <_svfiprintf_r+0x4e>
 800d760:	fb0c 3202 	mla	r2, ip, r2, r3
 800d764:	460c      	mov	r4, r1
 800d766:	2001      	movs	r0, #1
 800d768:	e7a6      	b.n	800d6b8 <_svfiprintf_r+0xd4>
 800d76a:	2300      	movs	r3, #0
 800d76c:	3401      	adds	r4, #1
 800d76e:	9305      	str	r3, [sp, #20]
 800d770:	4619      	mov	r1, r3
 800d772:	f04f 0c0a 	mov.w	ip, #10
 800d776:	4620      	mov	r0, r4
 800d778:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d77c:	3a30      	subs	r2, #48	; 0x30
 800d77e:	2a09      	cmp	r2, #9
 800d780:	d903      	bls.n	800d78a <_svfiprintf_r+0x1a6>
 800d782:	2b00      	cmp	r3, #0
 800d784:	d0c6      	beq.n	800d714 <_svfiprintf_r+0x130>
 800d786:	9105      	str	r1, [sp, #20]
 800d788:	e7c4      	b.n	800d714 <_svfiprintf_r+0x130>
 800d78a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d78e:	4604      	mov	r4, r0
 800d790:	2301      	movs	r3, #1
 800d792:	e7f0      	b.n	800d776 <_svfiprintf_r+0x192>
 800d794:	ab03      	add	r3, sp, #12
 800d796:	9300      	str	r3, [sp, #0]
 800d798:	462a      	mov	r2, r5
 800d79a:	4b0f      	ldr	r3, [pc, #60]	; (800d7d8 <_svfiprintf_r+0x1f4>)
 800d79c:	a904      	add	r1, sp, #16
 800d79e:	4638      	mov	r0, r7
 800d7a0:	f7fc fe5c 	bl	800a45c <_printf_float>
 800d7a4:	1c42      	adds	r2, r0, #1
 800d7a6:	4606      	mov	r6, r0
 800d7a8:	d1d6      	bne.n	800d758 <_svfiprintf_r+0x174>
 800d7aa:	89ab      	ldrh	r3, [r5, #12]
 800d7ac:	065b      	lsls	r3, r3, #25
 800d7ae:	f53f af2d 	bmi.w	800d60c <_svfiprintf_r+0x28>
 800d7b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d7b4:	b01d      	add	sp, #116	; 0x74
 800d7b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7ba:	ab03      	add	r3, sp, #12
 800d7bc:	9300      	str	r3, [sp, #0]
 800d7be:	462a      	mov	r2, r5
 800d7c0:	4b05      	ldr	r3, [pc, #20]	; (800d7d8 <_svfiprintf_r+0x1f4>)
 800d7c2:	a904      	add	r1, sp, #16
 800d7c4:	4638      	mov	r0, r7
 800d7c6:	f7fd f8ed 	bl	800a9a4 <_printf_i>
 800d7ca:	e7eb      	b.n	800d7a4 <_svfiprintf_r+0x1c0>
 800d7cc:	08045ed5 	.word	0x08045ed5
 800d7d0:	08045edf 	.word	0x08045edf
 800d7d4:	0800a45d 	.word	0x0800a45d
 800d7d8:	0800d52f 	.word	0x0800d52f
 800d7dc:	08045edb 	.word	0x08045edb

0800d7e0 <__sfputc_r>:
 800d7e0:	6893      	ldr	r3, [r2, #8]
 800d7e2:	3b01      	subs	r3, #1
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	b410      	push	{r4}
 800d7e8:	6093      	str	r3, [r2, #8]
 800d7ea:	da08      	bge.n	800d7fe <__sfputc_r+0x1e>
 800d7ec:	6994      	ldr	r4, [r2, #24]
 800d7ee:	42a3      	cmp	r3, r4
 800d7f0:	db01      	blt.n	800d7f6 <__sfputc_r+0x16>
 800d7f2:	290a      	cmp	r1, #10
 800d7f4:	d103      	bne.n	800d7fe <__sfputc_r+0x1e>
 800d7f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d7fa:	f7fd bdcc 	b.w	800b396 <__swbuf_r>
 800d7fe:	6813      	ldr	r3, [r2, #0]
 800d800:	1c58      	adds	r0, r3, #1
 800d802:	6010      	str	r0, [r2, #0]
 800d804:	7019      	strb	r1, [r3, #0]
 800d806:	4608      	mov	r0, r1
 800d808:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <__sfputs_r>:
 800d80e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d810:	4606      	mov	r6, r0
 800d812:	460f      	mov	r7, r1
 800d814:	4614      	mov	r4, r2
 800d816:	18d5      	adds	r5, r2, r3
 800d818:	42ac      	cmp	r4, r5
 800d81a:	d101      	bne.n	800d820 <__sfputs_r+0x12>
 800d81c:	2000      	movs	r0, #0
 800d81e:	e007      	b.n	800d830 <__sfputs_r+0x22>
 800d820:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d824:	463a      	mov	r2, r7
 800d826:	4630      	mov	r0, r6
 800d828:	f7ff ffda 	bl	800d7e0 <__sfputc_r>
 800d82c:	1c43      	adds	r3, r0, #1
 800d82e:	d1f3      	bne.n	800d818 <__sfputs_r+0xa>
 800d830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d834 <_vfiprintf_r>:
 800d834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d838:	460d      	mov	r5, r1
 800d83a:	b09d      	sub	sp, #116	; 0x74
 800d83c:	4614      	mov	r4, r2
 800d83e:	4698      	mov	r8, r3
 800d840:	4606      	mov	r6, r0
 800d842:	b118      	cbz	r0, 800d84c <_vfiprintf_r+0x18>
 800d844:	6a03      	ldr	r3, [r0, #32]
 800d846:	b90b      	cbnz	r3, 800d84c <_vfiprintf_r+0x18>
 800d848:	f7fd fc6a 	bl	800b120 <__sinit>
 800d84c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d84e:	07d9      	lsls	r1, r3, #31
 800d850:	d405      	bmi.n	800d85e <_vfiprintf_r+0x2a>
 800d852:	89ab      	ldrh	r3, [r5, #12]
 800d854:	059a      	lsls	r2, r3, #22
 800d856:	d402      	bmi.n	800d85e <_vfiprintf_r+0x2a>
 800d858:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d85a:	f7fd fed0 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800d85e:	89ab      	ldrh	r3, [r5, #12]
 800d860:	071b      	lsls	r3, r3, #28
 800d862:	d501      	bpl.n	800d868 <_vfiprintf_r+0x34>
 800d864:	692b      	ldr	r3, [r5, #16]
 800d866:	b99b      	cbnz	r3, 800d890 <_vfiprintf_r+0x5c>
 800d868:	4629      	mov	r1, r5
 800d86a:	4630      	mov	r0, r6
 800d86c:	f7fd fdd0 	bl	800b410 <__swsetup_r>
 800d870:	b170      	cbz	r0, 800d890 <_vfiprintf_r+0x5c>
 800d872:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d874:	07dc      	lsls	r4, r3, #31
 800d876:	d504      	bpl.n	800d882 <_vfiprintf_r+0x4e>
 800d878:	f04f 30ff 	mov.w	r0, #4294967295
 800d87c:	b01d      	add	sp, #116	; 0x74
 800d87e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d882:	89ab      	ldrh	r3, [r5, #12]
 800d884:	0598      	lsls	r0, r3, #22
 800d886:	d4f7      	bmi.n	800d878 <_vfiprintf_r+0x44>
 800d888:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d88a:	f7fd feb9 	bl	800b600 <__retarget_lock_release_recursive>
 800d88e:	e7f3      	b.n	800d878 <_vfiprintf_r+0x44>
 800d890:	2300      	movs	r3, #0
 800d892:	9309      	str	r3, [sp, #36]	; 0x24
 800d894:	2320      	movs	r3, #32
 800d896:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d89a:	f8cd 800c 	str.w	r8, [sp, #12]
 800d89e:	2330      	movs	r3, #48	; 0x30
 800d8a0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800da54 <_vfiprintf_r+0x220>
 800d8a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d8a8:	f04f 0901 	mov.w	r9, #1
 800d8ac:	4623      	mov	r3, r4
 800d8ae:	469a      	mov	sl, r3
 800d8b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d8b4:	b10a      	cbz	r2, 800d8ba <_vfiprintf_r+0x86>
 800d8b6:	2a25      	cmp	r2, #37	; 0x25
 800d8b8:	d1f9      	bne.n	800d8ae <_vfiprintf_r+0x7a>
 800d8ba:	ebba 0b04 	subs.w	fp, sl, r4
 800d8be:	d00b      	beq.n	800d8d8 <_vfiprintf_r+0xa4>
 800d8c0:	465b      	mov	r3, fp
 800d8c2:	4622      	mov	r2, r4
 800d8c4:	4629      	mov	r1, r5
 800d8c6:	4630      	mov	r0, r6
 800d8c8:	f7ff ffa1 	bl	800d80e <__sfputs_r>
 800d8cc:	3001      	adds	r0, #1
 800d8ce:	f000 80a9 	beq.w	800da24 <_vfiprintf_r+0x1f0>
 800d8d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d8d4:	445a      	add	r2, fp
 800d8d6:	9209      	str	r2, [sp, #36]	; 0x24
 800d8d8:	f89a 3000 	ldrb.w	r3, [sl]
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	f000 80a1 	beq.w	800da24 <_vfiprintf_r+0x1f0>
 800d8e2:	2300      	movs	r3, #0
 800d8e4:	f04f 32ff 	mov.w	r2, #4294967295
 800d8e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d8ec:	f10a 0a01 	add.w	sl, sl, #1
 800d8f0:	9304      	str	r3, [sp, #16]
 800d8f2:	9307      	str	r3, [sp, #28]
 800d8f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d8f8:	931a      	str	r3, [sp, #104]	; 0x68
 800d8fa:	4654      	mov	r4, sl
 800d8fc:	2205      	movs	r2, #5
 800d8fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d902:	4854      	ldr	r0, [pc, #336]	; (800da54 <_vfiprintf_r+0x220>)
 800d904:	f7f2 fc84 	bl	8000210 <memchr>
 800d908:	9a04      	ldr	r2, [sp, #16]
 800d90a:	b9d8      	cbnz	r0, 800d944 <_vfiprintf_r+0x110>
 800d90c:	06d1      	lsls	r1, r2, #27
 800d90e:	bf44      	itt	mi
 800d910:	2320      	movmi	r3, #32
 800d912:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d916:	0713      	lsls	r3, r2, #28
 800d918:	bf44      	itt	mi
 800d91a:	232b      	movmi	r3, #43	; 0x2b
 800d91c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d920:	f89a 3000 	ldrb.w	r3, [sl]
 800d924:	2b2a      	cmp	r3, #42	; 0x2a
 800d926:	d015      	beq.n	800d954 <_vfiprintf_r+0x120>
 800d928:	9a07      	ldr	r2, [sp, #28]
 800d92a:	4654      	mov	r4, sl
 800d92c:	2000      	movs	r0, #0
 800d92e:	f04f 0c0a 	mov.w	ip, #10
 800d932:	4621      	mov	r1, r4
 800d934:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d938:	3b30      	subs	r3, #48	; 0x30
 800d93a:	2b09      	cmp	r3, #9
 800d93c:	d94d      	bls.n	800d9da <_vfiprintf_r+0x1a6>
 800d93e:	b1b0      	cbz	r0, 800d96e <_vfiprintf_r+0x13a>
 800d940:	9207      	str	r2, [sp, #28]
 800d942:	e014      	b.n	800d96e <_vfiprintf_r+0x13a>
 800d944:	eba0 0308 	sub.w	r3, r0, r8
 800d948:	fa09 f303 	lsl.w	r3, r9, r3
 800d94c:	4313      	orrs	r3, r2
 800d94e:	9304      	str	r3, [sp, #16]
 800d950:	46a2      	mov	sl, r4
 800d952:	e7d2      	b.n	800d8fa <_vfiprintf_r+0xc6>
 800d954:	9b03      	ldr	r3, [sp, #12]
 800d956:	1d19      	adds	r1, r3, #4
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	9103      	str	r1, [sp, #12]
 800d95c:	2b00      	cmp	r3, #0
 800d95e:	bfbb      	ittet	lt
 800d960:	425b      	neglt	r3, r3
 800d962:	f042 0202 	orrlt.w	r2, r2, #2
 800d966:	9307      	strge	r3, [sp, #28]
 800d968:	9307      	strlt	r3, [sp, #28]
 800d96a:	bfb8      	it	lt
 800d96c:	9204      	strlt	r2, [sp, #16]
 800d96e:	7823      	ldrb	r3, [r4, #0]
 800d970:	2b2e      	cmp	r3, #46	; 0x2e
 800d972:	d10c      	bne.n	800d98e <_vfiprintf_r+0x15a>
 800d974:	7863      	ldrb	r3, [r4, #1]
 800d976:	2b2a      	cmp	r3, #42	; 0x2a
 800d978:	d134      	bne.n	800d9e4 <_vfiprintf_r+0x1b0>
 800d97a:	9b03      	ldr	r3, [sp, #12]
 800d97c:	1d1a      	adds	r2, r3, #4
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	9203      	str	r2, [sp, #12]
 800d982:	2b00      	cmp	r3, #0
 800d984:	bfb8      	it	lt
 800d986:	f04f 33ff 	movlt.w	r3, #4294967295
 800d98a:	3402      	adds	r4, #2
 800d98c:	9305      	str	r3, [sp, #20]
 800d98e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800da64 <_vfiprintf_r+0x230>
 800d992:	7821      	ldrb	r1, [r4, #0]
 800d994:	2203      	movs	r2, #3
 800d996:	4650      	mov	r0, sl
 800d998:	f7f2 fc3a 	bl	8000210 <memchr>
 800d99c:	b138      	cbz	r0, 800d9ae <_vfiprintf_r+0x17a>
 800d99e:	9b04      	ldr	r3, [sp, #16]
 800d9a0:	eba0 000a 	sub.w	r0, r0, sl
 800d9a4:	2240      	movs	r2, #64	; 0x40
 800d9a6:	4082      	lsls	r2, r0
 800d9a8:	4313      	orrs	r3, r2
 800d9aa:	3401      	adds	r4, #1
 800d9ac:	9304      	str	r3, [sp, #16]
 800d9ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d9b2:	4829      	ldr	r0, [pc, #164]	; (800da58 <_vfiprintf_r+0x224>)
 800d9b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d9b8:	2206      	movs	r2, #6
 800d9ba:	f7f2 fc29 	bl	8000210 <memchr>
 800d9be:	2800      	cmp	r0, #0
 800d9c0:	d03f      	beq.n	800da42 <_vfiprintf_r+0x20e>
 800d9c2:	4b26      	ldr	r3, [pc, #152]	; (800da5c <_vfiprintf_r+0x228>)
 800d9c4:	bb1b      	cbnz	r3, 800da0e <_vfiprintf_r+0x1da>
 800d9c6:	9b03      	ldr	r3, [sp, #12]
 800d9c8:	3307      	adds	r3, #7
 800d9ca:	f023 0307 	bic.w	r3, r3, #7
 800d9ce:	3308      	adds	r3, #8
 800d9d0:	9303      	str	r3, [sp, #12]
 800d9d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d9d4:	443b      	add	r3, r7
 800d9d6:	9309      	str	r3, [sp, #36]	; 0x24
 800d9d8:	e768      	b.n	800d8ac <_vfiprintf_r+0x78>
 800d9da:	fb0c 3202 	mla	r2, ip, r2, r3
 800d9de:	460c      	mov	r4, r1
 800d9e0:	2001      	movs	r0, #1
 800d9e2:	e7a6      	b.n	800d932 <_vfiprintf_r+0xfe>
 800d9e4:	2300      	movs	r3, #0
 800d9e6:	3401      	adds	r4, #1
 800d9e8:	9305      	str	r3, [sp, #20]
 800d9ea:	4619      	mov	r1, r3
 800d9ec:	f04f 0c0a 	mov.w	ip, #10
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d9f6:	3a30      	subs	r2, #48	; 0x30
 800d9f8:	2a09      	cmp	r2, #9
 800d9fa:	d903      	bls.n	800da04 <_vfiprintf_r+0x1d0>
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d0c6      	beq.n	800d98e <_vfiprintf_r+0x15a>
 800da00:	9105      	str	r1, [sp, #20]
 800da02:	e7c4      	b.n	800d98e <_vfiprintf_r+0x15a>
 800da04:	fb0c 2101 	mla	r1, ip, r1, r2
 800da08:	4604      	mov	r4, r0
 800da0a:	2301      	movs	r3, #1
 800da0c:	e7f0      	b.n	800d9f0 <_vfiprintf_r+0x1bc>
 800da0e:	ab03      	add	r3, sp, #12
 800da10:	9300      	str	r3, [sp, #0]
 800da12:	462a      	mov	r2, r5
 800da14:	4b12      	ldr	r3, [pc, #72]	; (800da60 <_vfiprintf_r+0x22c>)
 800da16:	a904      	add	r1, sp, #16
 800da18:	4630      	mov	r0, r6
 800da1a:	f7fc fd1f 	bl	800a45c <_printf_float>
 800da1e:	4607      	mov	r7, r0
 800da20:	1c78      	adds	r0, r7, #1
 800da22:	d1d6      	bne.n	800d9d2 <_vfiprintf_r+0x19e>
 800da24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da26:	07d9      	lsls	r1, r3, #31
 800da28:	d405      	bmi.n	800da36 <_vfiprintf_r+0x202>
 800da2a:	89ab      	ldrh	r3, [r5, #12]
 800da2c:	059a      	lsls	r2, r3, #22
 800da2e:	d402      	bmi.n	800da36 <_vfiprintf_r+0x202>
 800da30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da32:	f7fd fde5 	bl	800b600 <__retarget_lock_release_recursive>
 800da36:	89ab      	ldrh	r3, [r5, #12]
 800da38:	065b      	lsls	r3, r3, #25
 800da3a:	f53f af1d 	bmi.w	800d878 <_vfiprintf_r+0x44>
 800da3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800da40:	e71c      	b.n	800d87c <_vfiprintf_r+0x48>
 800da42:	ab03      	add	r3, sp, #12
 800da44:	9300      	str	r3, [sp, #0]
 800da46:	462a      	mov	r2, r5
 800da48:	4b05      	ldr	r3, [pc, #20]	; (800da60 <_vfiprintf_r+0x22c>)
 800da4a:	a904      	add	r1, sp, #16
 800da4c:	4630      	mov	r0, r6
 800da4e:	f7fc ffa9 	bl	800a9a4 <_printf_i>
 800da52:	e7e4      	b.n	800da1e <_vfiprintf_r+0x1ea>
 800da54:	08045ed5 	.word	0x08045ed5
 800da58:	08045edf 	.word	0x08045edf
 800da5c:	0800a45d 	.word	0x0800a45d
 800da60:	0800d80f 	.word	0x0800d80f
 800da64:	08045edb 	.word	0x08045edb

0800da68 <__sflush_r>:
 800da68:	898a      	ldrh	r2, [r1, #12]
 800da6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da6e:	4605      	mov	r5, r0
 800da70:	0710      	lsls	r0, r2, #28
 800da72:	460c      	mov	r4, r1
 800da74:	d458      	bmi.n	800db28 <__sflush_r+0xc0>
 800da76:	684b      	ldr	r3, [r1, #4]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	dc05      	bgt.n	800da88 <__sflush_r+0x20>
 800da7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800da7e:	2b00      	cmp	r3, #0
 800da80:	dc02      	bgt.n	800da88 <__sflush_r+0x20>
 800da82:	2000      	movs	r0, #0
 800da84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800da8a:	2e00      	cmp	r6, #0
 800da8c:	d0f9      	beq.n	800da82 <__sflush_r+0x1a>
 800da8e:	2300      	movs	r3, #0
 800da90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800da94:	682f      	ldr	r7, [r5, #0]
 800da96:	6a21      	ldr	r1, [r4, #32]
 800da98:	602b      	str	r3, [r5, #0]
 800da9a:	d032      	beq.n	800db02 <__sflush_r+0x9a>
 800da9c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800da9e:	89a3      	ldrh	r3, [r4, #12]
 800daa0:	075a      	lsls	r2, r3, #29
 800daa2:	d505      	bpl.n	800dab0 <__sflush_r+0x48>
 800daa4:	6863      	ldr	r3, [r4, #4]
 800daa6:	1ac0      	subs	r0, r0, r3
 800daa8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800daaa:	b10b      	cbz	r3, 800dab0 <__sflush_r+0x48>
 800daac:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800daae:	1ac0      	subs	r0, r0, r3
 800dab0:	2300      	movs	r3, #0
 800dab2:	4602      	mov	r2, r0
 800dab4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800dab6:	6a21      	ldr	r1, [r4, #32]
 800dab8:	4628      	mov	r0, r5
 800daba:	47b0      	blx	r6
 800dabc:	1c43      	adds	r3, r0, #1
 800dabe:	89a3      	ldrh	r3, [r4, #12]
 800dac0:	d106      	bne.n	800dad0 <__sflush_r+0x68>
 800dac2:	6829      	ldr	r1, [r5, #0]
 800dac4:	291d      	cmp	r1, #29
 800dac6:	d82b      	bhi.n	800db20 <__sflush_r+0xb8>
 800dac8:	4a29      	ldr	r2, [pc, #164]	; (800db70 <__sflush_r+0x108>)
 800daca:	410a      	asrs	r2, r1
 800dacc:	07d6      	lsls	r6, r2, #31
 800dace:	d427      	bmi.n	800db20 <__sflush_r+0xb8>
 800dad0:	2200      	movs	r2, #0
 800dad2:	6062      	str	r2, [r4, #4]
 800dad4:	04d9      	lsls	r1, r3, #19
 800dad6:	6922      	ldr	r2, [r4, #16]
 800dad8:	6022      	str	r2, [r4, #0]
 800dada:	d504      	bpl.n	800dae6 <__sflush_r+0x7e>
 800dadc:	1c42      	adds	r2, r0, #1
 800dade:	d101      	bne.n	800dae4 <__sflush_r+0x7c>
 800dae0:	682b      	ldr	r3, [r5, #0]
 800dae2:	b903      	cbnz	r3, 800dae6 <__sflush_r+0x7e>
 800dae4:	6560      	str	r0, [r4, #84]	; 0x54
 800dae6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800dae8:	602f      	str	r7, [r5, #0]
 800daea:	2900      	cmp	r1, #0
 800daec:	d0c9      	beq.n	800da82 <__sflush_r+0x1a>
 800daee:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800daf2:	4299      	cmp	r1, r3
 800daf4:	d002      	beq.n	800dafc <__sflush_r+0x94>
 800daf6:	4628      	mov	r0, r5
 800daf8:	f7fe fc1c 	bl	800c334 <_free_r>
 800dafc:	2000      	movs	r0, #0
 800dafe:	6360      	str	r0, [r4, #52]	; 0x34
 800db00:	e7c0      	b.n	800da84 <__sflush_r+0x1c>
 800db02:	2301      	movs	r3, #1
 800db04:	4628      	mov	r0, r5
 800db06:	47b0      	blx	r6
 800db08:	1c41      	adds	r1, r0, #1
 800db0a:	d1c8      	bne.n	800da9e <__sflush_r+0x36>
 800db0c:	682b      	ldr	r3, [r5, #0]
 800db0e:	2b00      	cmp	r3, #0
 800db10:	d0c5      	beq.n	800da9e <__sflush_r+0x36>
 800db12:	2b1d      	cmp	r3, #29
 800db14:	d001      	beq.n	800db1a <__sflush_r+0xb2>
 800db16:	2b16      	cmp	r3, #22
 800db18:	d101      	bne.n	800db1e <__sflush_r+0xb6>
 800db1a:	602f      	str	r7, [r5, #0]
 800db1c:	e7b1      	b.n	800da82 <__sflush_r+0x1a>
 800db1e:	89a3      	ldrh	r3, [r4, #12]
 800db20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db24:	81a3      	strh	r3, [r4, #12]
 800db26:	e7ad      	b.n	800da84 <__sflush_r+0x1c>
 800db28:	690f      	ldr	r7, [r1, #16]
 800db2a:	2f00      	cmp	r7, #0
 800db2c:	d0a9      	beq.n	800da82 <__sflush_r+0x1a>
 800db2e:	0793      	lsls	r3, r2, #30
 800db30:	680e      	ldr	r6, [r1, #0]
 800db32:	bf08      	it	eq
 800db34:	694b      	ldreq	r3, [r1, #20]
 800db36:	600f      	str	r7, [r1, #0]
 800db38:	bf18      	it	ne
 800db3a:	2300      	movne	r3, #0
 800db3c:	eba6 0807 	sub.w	r8, r6, r7
 800db40:	608b      	str	r3, [r1, #8]
 800db42:	f1b8 0f00 	cmp.w	r8, #0
 800db46:	dd9c      	ble.n	800da82 <__sflush_r+0x1a>
 800db48:	6a21      	ldr	r1, [r4, #32]
 800db4a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800db4c:	4643      	mov	r3, r8
 800db4e:	463a      	mov	r2, r7
 800db50:	4628      	mov	r0, r5
 800db52:	47b0      	blx	r6
 800db54:	2800      	cmp	r0, #0
 800db56:	dc06      	bgt.n	800db66 <__sflush_r+0xfe>
 800db58:	89a3      	ldrh	r3, [r4, #12]
 800db5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db5e:	81a3      	strh	r3, [r4, #12]
 800db60:	f04f 30ff 	mov.w	r0, #4294967295
 800db64:	e78e      	b.n	800da84 <__sflush_r+0x1c>
 800db66:	4407      	add	r7, r0
 800db68:	eba8 0800 	sub.w	r8, r8, r0
 800db6c:	e7e9      	b.n	800db42 <__sflush_r+0xda>
 800db6e:	bf00      	nop
 800db70:	dfbffffe 	.word	0xdfbffffe

0800db74 <_fflush_r>:
 800db74:	b538      	push	{r3, r4, r5, lr}
 800db76:	690b      	ldr	r3, [r1, #16]
 800db78:	4605      	mov	r5, r0
 800db7a:	460c      	mov	r4, r1
 800db7c:	b913      	cbnz	r3, 800db84 <_fflush_r+0x10>
 800db7e:	2500      	movs	r5, #0
 800db80:	4628      	mov	r0, r5
 800db82:	bd38      	pop	{r3, r4, r5, pc}
 800db84:	b118      	cbz	r0, 800db8e <_fflush_r+0x1a>
 800db86:	6a03      	ldr	r3, [r0, #32]
 800db88:	b90b      	cbnz	r3, 800db8e <_fflush_r+0x1a>
 800db8a:	f7fd fac9 	bl	800b120 <__sinit>
 800db8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800db92:	2b00      	cmp	r3, #0
 800db94:	d0f3      	beq.n	800db7e <_fflush_r+0xa>
 800db96:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800db98:	07d0      	lsls	r0, r2, #31
 800db9a:	d404      	bmi.n	800dba6 <_fflush_r+0x32>
 800db9c:	0599      	lsls	r1, r3, #22
 800db9e:	d402      	bmi.n	800dba6 <_fflush_r+0x32>
 800dba0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dba2:	f7fd fd2c 	bl	800b5fe <__retarget_lock_acquire_recursive>
 800dba6:	4628      	mov	r0, r5
 800dba8:	4621      	mov	r1, r4
 800dbaa:	f7ff ff5d 	bl	800da68 <__sflush_r>
 800dbae:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dbb0:	07da      	lsls	r2, r3, #31
 800dbb2:	4605      	mov	r5, r0
 800dbb4:	d4e4      	bmi.n	800db80 <_fflush_r+0xc>
 800dbb6:	89a3      	ldrh	r3, [r4, #12]
 800dbb8:	059b      	lsls	r3, r3, #22
 800dbba:	d4e1      	bmi.n	800db80 <_fflush_r+0xc>
 800dbbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dbbe:	f7fd fd1f 	bl	800b600 <__retarget_lock_release_recursive>
 800dbc2:	e7dd      	b.n	800db80 <_fflush_r+0xc>

0800dbc4 <__swhatbuf_r>:
 800dbc4:	b570      	push	{r4, r5, r6, lr}
 800dbc6:	460c      	mov	r4, r1
 800dbc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbcc:	2900      	cmp	r1, #0
 800dbce:	b096      	sub	sp, #88	; 0x58
 800dbd0:	4615      	mov	r5, r2
 800dbd2:	461e      	mov	r6, r3
 800dbd4:	da0d      	bge.n	800dbf2 <__swhatbuf_r+0x2e>
 800dbd6:	89a3      	ldrh	r3, [r4, #12]
 800dbd8:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dbdc:	f04f 0100 	mov.w	r1, #0
 800dbe0:	bf0c      	ite	eq
 800dbe2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dbe6:	2340      	movne	r3, #64	; 0x40
 800dbe8:	2000      	movs	r0, #0
 800dbea:	6031      	str	r1, [r6, #0]
 800dbec:	602b      	str	r3, [r5, #0]
 800dbee:	b016      	add	sp, #88	; 0x58
 800dbf0:	bd70      	pop	{r4, r5, r6, pc}
 800dbf2:	466a      	mov	r2, sp
 800dbf4:	f000 f862 	bl	800dcbc <_fstat_r>
 800dbf8:	2800      	cmp	r0, #0
 800dbfa:	dbec      	blt.n	800dbd6 <__swhatbuf_r+0x12>
 800dbfc:	9901      	ldr	r1, [sp, #4]
 800dbfe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc02:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc06:	4259      	negs	r1, r3
 800dc08:	4159      	adcs	r1, r3
 800dc0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc0e:	e7eb      	b.n	800dbe8 <__swhatbuf_r+0x24>

0800dc10 <__smakebuf_r>:
 800dc10:	898b      	ldrh	r3, [r1, #12]
 800dc12:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc14:	079d      	lsls	r5, r3, #30
 800dc16:	4606      	mov	r6, r0
 800dc18:	460c      	mov	r4, r1
 800dc1a:	d507      	bpl.n	800dc2c <__smakebuf_r+0x1c>
 800dc1c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc20:	6023      	str	r3, [r4, #0]
 800dc22:	6123      	str	r3, [r4, #16]
 800dc24:	2301      	movs	r3, #1
 800dc26:	6163      	str	r3, [r4, #20]
 800dc28:	b002      	add	sp, #8
 800dc2a:	bd70      	pop	{r4, r5, r6, pc}
 800dc2c:	ab01      	add	r3, sp, #4
 800dc2e:	466a      	mov	r2, sp
 800dc30:	f7ff ffc8 	bl	800dbc4 <__swhatbuf_r>
 800dc34:	9900      	ldr	r1, [sp, #0]
 800dc36:	4605      	mov	r5, r0
 800dc38:	4630      	mov	r0, r6
 800dc3a:	f7fb fc93 	bl	8009564 <_malloc_r>
 800dc3e:	b948      	cbnz	r0, 800dc54 <__smakebuf_r+0x44>
 800dc40:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dc44:	059a      	lsls	r2, r3, #22
 800dc46:	d4ef      	bmi.n	800dc28 <__smakebuf_r+0x18>
 800dc48:	f023 0303 	bic.w	r3, r3, #3
 800dc4c:	f043 0302 	orr.w	r3, r3, #2
 800dc50:	81a3      	strh	r3, [r4, #12]
 800dc52:	e7e3      	b.n	800dc1c <__smakebuf_r+0xc>
 800dc54:	89a3      	ldrh	r3, [r4, #12]
 800dc56:	6020      	str	r0, [r4, #0]
 800dc58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dc5c:	81a3      	strh	r3, [r4, #12]
 800dc5e:	9b00      	ldr	r3, [sp, #0]
 800dc60:	6163      	str	r3, [r4, #20]
 800dc62:	9b01      	ldr	r3, [sp, #4]
 800dc64:	6120      	str	r0, [r4, #16]
 800dc66:	b15b      	cbz	r3, 800dc80 <__smakebuf_r+0x70>
 800dc68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dc6c:	4630      	mov	r0, r6
 800dc6e:	f000 f837 	bl	800dce0 <_isatty_r>
 800dc72:	b128      	cbz	r0, 800dc80 <__smakebuf_r+0x70>
 800dc74:	89a3      	ldrh	r3, [r4, #12]
 800dc76:	f023 0303 	bic.w	r3, r3, #3
 800dc7a:	f043 0301 	orr.w	r3, r3, #1
 800dc7e:	81a3      	strh	r3, [r4, #12]
 800dc80:	89a3      	ldrh	r3, [r4, #12]
 800dc82:	431d      	orrs	r5, r3
 800dc84:	81a5      	strh	r5, [r4, #12]
 800dc86:	e7cf      	b.n	800dc28 <__smakebuf_r+0x18>

0800dc88 <memmove>:
 800dc88:	4288      	cmp	r0, r1
 800dc8a:	b510      	push	{r4, lr}
 800dc8c:	eb01 0402 	add.w	r4, r1, r2
 800dc90:	d902      	bls.n	800dc98 <memmove+0x10>
 800dc92:	4284      	cmp	r4, r0
 800dc94:	4623      	mov	r3, r4
 800dc96:	d807      	bhi.n	800dca8 <memmove+0x20>
 800dc98:	1e43      	subs	r3, r0, #1
 800dc9a:	42a1      	cmp	r1, r4
 800dc9c:	d008      	beq.n	800dcb0 <memmove+0x28>
 800dc9e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dca2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dca6:	e7f8      	b.n	800dc9a <memmove+0x12>
 800dca8:	4402      	add	r2, r0
 800dcaa:	4601      	mov	r1, r0
 800dcac:	428a      	cmp	r2, r1
 800dcae:	d100      	bne.n	800dcb2 <memmove+0x2a>
 800dcb0:	bd10      	pop	{r4, pc}
 800dcb2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dcb6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dcba:	e7f7      	b.n	800dcac <memmove+0x24>

0800dcbc <_fstat_r>:
 800dcbc:	b538      	push	{r3, r4, r5, lr}
 800dcbe:	4d07      	ldr	r5, [pc, #28]	; (800dcdc <_fstat_r+0x20>)
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	4604      	mov	r4, r0
 800dcc4:	4608      	mov	r0, r1
 800dcc6:	4611      	mov	r1, r2
 800dcc8:	602b      	str	r3, [r5, #0]
 800dcca:	f7f4 f864 	bl	8001d96 <_fstat>
 800dcce:	1c43      	adds	r3, r0, #1
 800dcd0:	d102      	bne.n	800dcd8 <_fstat_r+0x1c>
 800dcd2:	682b      	ldr	r3, [r5, #0]
 800dcd4:	b103      	cbz	r3, 800dcd8 <_fstat_r+0x1c>
 800dcd6:	6023      	str	r3, [r4, #0]
 800dcd8:	bd38      	pop	{r3, r4, r5, pc}
 800dcda:	bf00      	nop
 800dcdc:	200045c0 	.word	0x200045c0

0800dce0 <_isatty_r>:
 800dce0:	b538      	push	{r3, r4, r5, lr}
 800dce2:	4d06      	ldr	r5, [pc, #24]	; (800dcfc <_isatty_r+0x1c>)
 800dce4:	2300      	movs	r3, #0
 800dce6:	4604      	mov	r4, r0
 800dce8:	4608      	mov	r0, r1
 800dcea:	602b      	str	r3, [r5, #0]
 800dcec:	f7f4 f863 	bl	8001db6 <_isatty>
 800dcf0:	1c43      	adds	r3, r0, #1
 800dcf2:	d102      	bne.n	800dcfa <_isatty_r+0x1a>
 800dcf4:	682b      	ldr	r3, [r5, #0]
 800dcf6:	b103      	cbz	r3, 800dcfa <_isatty_r+0x1a>
 800dcf8:	6023      	str	r3, [r4, #0]
 800dcfa:	bd38      	pop	{r3, r4, r5, pc}
 800dcfc:	200045c0 	.word	0x200045c0

0800dd00 <__assert_func>:
 800dd00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd02:	4614      	mov	r4, r2
 800dd04:	461a      	mov	r2, r3
 800dd06:	4b09      	ldr	r3, [pc, #36]	; (800dd2c <__assert_func+0x2c>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	4605      	mov	r5, r0
 800dd0c:	68d8      	ldr	r0, [r3, #12]
 800dd0e:	b14c      	cbz	r4, 800dd24 <__assert_func+0x24>
 800dd10:	4b07      	ldr	r3, [pc, #28]	; (800dd30 <__assert_func+0x30>)
 800dd12:	9100      	str	r1, [sp, #0]
 800dd14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd18:	4906      	ldr	r1, [pc, #24]	; (800dd34 <__assert_func+0x34>)
 800dd1a:	462b      	mov	r3, r5
 800dd1c:	f000 f824 	bl	800dd68 <fiprintf>
 800dd20:	f000 f834 	bl	800dd8c <abort>
 800dd24:	4b04      	ldr	r3, [pc, #16]	; (800dd38 <__assert_func+0x38>)
 800dd26:	461c      	mov	r4, r3
 800dd28:	e7f3      	b.n	800dd12 <__assert_func+0x12>
 800dd2a:	bf00      	nop
 800dd2c:	20000e24 	.word	0x20000e24
 800dd30:	08045ee6 	.word	0x08045ee6
 800dd34:	08045ef3 	.word	0x08045ef3
 800dd38:	08045f21 	.word	0x08045f21

0800dd3c <_calloc_r>:
 800dd3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dd3e:	fba1 2402 	umull	r2, r4, r1, r2
 800dd42:	b94c      	cbnz	r4, 800dd58 <_calloc_r+0x1c>
 800dd44:	4611      	mov	r1, r2
 800dd46:	9201      	str	r2, [sp, #4]
 800dd48:	f7fb fc0c 	bl	8009564 <_malloc_r>
 800dd4c:	9a01      	ldr	r2, [sp, #4]
 800dd4e:	4605      	mov	r5, r0
 800dd50:	b930      	cbnz	r0, 800dd60 <_calloc_r+0x24>
 800dd52:	4628      	mov	r0, r5
 800dd54:	b003      	add	sp, #12
 800dd56:	bd30      	pop	{r4, r5, pc}
 800dd58:	220c      	movs	r2, #12
 800dd5a:	6002      	str	r2, [r0, #0]
 800dd5c:	2500      	movs	r5, #0
 800dd5e:	e7f8      	b.n	800dd52 <_calloc_r+0x16>
 800dd60:	4621      	mov	r1, r4
 800dd62:	f7fd fbad 	bl	800b4c0 <memset>
 800dd66:	e7f4      	b.n	800dd52 <_calloc_r+0x16>

0800dd68 <fiprintf>:
 800dd68:	b40e      	push	{r1, r2, r3}
 800dd6a:	b503      	push	{r0, r1, lr}
 800dd6c:	4601      	mov	r1, r0
 800dd6e:	ab03      	add	r3, sp, #12
 800dd70:	4805      	ldr	r0, [pc, #20]	; (800dd88 <fiprintf+0x20>)
 800dd72:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd76:	6800      	ldr	r0, [r0, #0]
 800dd78:	9301      	str	r3, [sp, #4]
 800dd7a:	f7ff fd5b 	bl	800d834 <_vfiprintf_r>
 800dd7e:	b002      	add	sp, #8
 800dd80:	f85d eb04 	ldr.w	lr, [sp], #4
 800dd84:	b003      	add	sp, #12
 800dd86:	4770      	bx	lr
 800dd88:	20000e24 	.word	0x20000e24

0800dd8c <abort>:
 800dd8c:	b508      	push	{r3, lr}
 800dd8e:	2006      	movs	r0, #6
 800dd90:	f000 f82c 	bl	800ddec <raise>
 800dd94:	2001      	movs	r0, #1
 800dd96:	f7f3 ffaf 	bl	8001cf8 <_exit>

0800dd9a <_raise_r>:
 800dd9a:	291f      	cmp	r1, #31
 800dd9c:	b538      	push	{r3, r4, r5, lr}
 800dd9e:	4604      	mov	r4, r0
 800dda0:	460d      	mov	r5, r1
 800dda2:	d904      	bls.n	800ddae <_raise_r+0x14>
 800dda4:	2316      	movs	r3, #22
 800dda6:	6003      	str	r3, [r0, #0]
 800dda8:	f04f 30ff 	mov.w	r0, #4294967295
 800ddac:	bd38      	pop	{r3, r4, r5, pc}
 800ddae:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800ddb0:	b112      	cbz	r2, 800ddb8 <_raise_r+0x1e>
 800ddb2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ddb6:	b94b      	cbnz	r3, 800ddcc <_raise_r+0x32>
 800ddb8:	4620      	mov	r0, r4
 800ddba:	f000 f831 	bl	800de20 <_getpid_r>
 800ddbe:	462a      	mov	r2, r5
 800ddc0:	4601      	mov	r1, r0
 800ddc2:	4620      	mov	r0, r4
 800ddc4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ddc8:	f000 b818 	b.w	800ddfc <_kill_r>
 800ddcc:	2b01      	cmp	r3, #1
 800ddce:	d00a      	beq.n	800dde6 <_raise_r+0x4c>
 800ddd0:	1c59      	adds	r1, r3, #1
 800ddd2:	d103      	bne.n	800dddc <_raise_r+0x42>
 800ddd4:	2316      	movs	r3, #22
 800ddd6:	6003      	str	r3, [r0, #0]
 800ddd8:	2001      	movs	r0, #1
 800ddda:	e7e7      	b.n	800ddac <_raise_r+0x12>
 800dddc:	2400      	movs	r4, #0
 800ddde:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800dde2:	4628      	mov	r0, r5
 800dde4:	4798      	blx	r3
 800dde6:	2000      	movs	r0, #0
 800dde8:	e7e0      	b.n	800ddac <_raise_r+0x12>
	...

0800ddec <raise>:
 800ddec:	4b02      	ldr	r3, [pc, #8]	; (800ddf8 <raise+0xc>)
 800ddee:	4601      	mov	r1, r0
 800ddf0:	6818      	ldr	r0, [r3, #0]
 800ddf2:	f7ff bfd2 	b.w	800dd9a <_raise_r>
 800ddf6:	bf00      	nop
 800ddf8:	20000e24 	.word	0x20000e24

0800ddfc <_kill_r>:
 800ddfc:	b538      	push	{r3, r4, r5, lr}
 800ddfe:	4d07      	ldr	r5, [pc, #28]	; (800de1c <_kill_r+0x20>)
 800de00:	2300      	movs	r3, #0
 800de02:	4604      	mov	r4, r0
 800de04:	4608      	mov	r0, r1
 800de06:	4611      	mov	r1, r2
 800de08:	602b      	str	r3, [r5, #0]
 800de0a:	f7f3 ff65 	bl	8001cd8 <_kill>
 800de0e:	1c43      	adds	r3, r0, #1
 800de10:	d102      	bne.n	800de18 <_kill_r+0x1c>
 800de12:	682b      	ldr	r3, [r5, #0]
 800de14:	b103      	cbz	r3, 800de18 <_kill_r+0x1c>
 800de16:	6023      	str	r3, [r4, #0]
 800de18:	bd38      	pop	{r3, r4, r5, pc}
 800de1a:	bf00      	nop
 800de1c:	200045c0 	.word	0x200045c0

0800de20 <_getpid_r>:
 800de20:	f7f3 bf52 	b.w	8001cc8 <_getpid>

0800de24 <expf>:
 800de24:	b508      	push	{r3, lr}
 800de26:	ed2d 8b02 	vpush	{d8}
 800de2a:	eef0 8a40 	vmov.f32	s17, s0
 800de2e:	f000 f9ed 	bl	800e20c <__ieee754_expf>
 800de32:	eeb0 8a40 	vmov.f32	s16, s0
 800de36:	eeb0 0a68 	vmov.f32	s0, s17
 800de3a:	f000 f899 	bl	800df70 <finitef>
 800de3e:	b160      	cbz	r0, 800de5a <expf+0x36>
 800de40:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800de80 <expf+0x5c>
 800de44:	eef4 8ae7 	vcmpe.f32	s17, s15
 800de48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de4c:	dd0a      	ble.n	800de64 <expf+0x40>
 800de4e:	f7fd fbab 	bl	800b5a8 <__errno>
 800de52:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800de84 <expf+0x60>
 800de56:	2322      	movs	r3, #34	; 0x22
 800de58:	6003      	str	r3, [r0, #0]
 800de5a:	eeb0 0a48 	vmov.f32	s0, s16
 800de5e:	ecbd 8b02 	vpop	{d8}
 800de62:	bd08      	pop	{r3, pc}
 800de64:	eddf 7a08 	vldr	s15, [pc, #32]	; 800de88 <expf+0x64>
 800de68:	eef4 8ae7 	vcmpe.f32	s17, s15
 800de6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800de70:	d5f3      	bpl.n	800de5a <expf+0x36>
 800de72:	f7fd fb99 	bl	800b5a8 <__errno>
 800de76:	2322      	movs	r3, #34	; 0x22
 800de78:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800de8c <expf+0x68>
 800de7c:	6003      	str	r3, [r0, #0]
 800de7e:	e7ec      	b.n	800de5a <expf+0x36>
 800de80:	42b17217 	.word	0x42b17217
 800de84:	7f800000 	.word	0x7f800000
 800de88:	c2cff1b5 	.word	0xc2cff1b5
 800de8c:	00000000 	.word	0x00000000

0800de90 <fabsf>:
 800de90:	ee10 3a10 	vmov	r3, s0
 800de94:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800de98:	ee00 3a10 	vmov	s0, r3
 800de9c:	4770      	bx	lr
	...

0800dea0 <tanhf>:
 800dea0:	b538      	push	{r3, r4, r5, lr}
 800dea2:	ee10 5a10 	vmov	r5, s0
 800dea6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800deaa:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800deae:	ed2d 8b02 	vpush	{d8}
 800deb2:	db0f      	blt.n	800ded4 <tanhf+0x34>
 800deb4:	4b2a      	ldr	r3, [pc, #168]	; (800df60 <tanhf+0xc0>)
 800deb6:	ed93 6a00 	vldr	s12, [r3]
 800deba:	edd3 6a00 	vldr	s13, [r3]
 800debe:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800dec2:	2d00      	cmp	r5, #0
 800dec4:	bfac      	ite	ge
 800dec6:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 800deca:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800dece:	ecbd 8b02 	vpop	{d8}
 800ded2:	bd38      	pop	{r3, r4, r5, pc}
 800ded4:	4a23      	ldr	r2, [pc, #140]	; (800df64 <tanhf+0xc4>)
 800ded6:	4293      	cmp	r3, r2
 800ded8:	dc39      	bgt.n	800df4e <tanhf+0xae>
 800deda:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800dede:	da07      	bge.n	800def0 <tanhf+0x50>
 800dee0:	4b1f      	ldr	r3, [pc, #124]	; (800df60 <tanhf+0xc0>)
 800dee2:	edd3 7a00 	vldr	s15, [r3]
 800dee6:	ee77 7a80 	vadd.f32	s15, s15, s0
 800deea:	ee27 0a80 	vmul.f32	s0, s15, s0
 800deee:	e7ee      	b.n	800dece <tanhf+0x2e>
 800def0:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800def4:	4c1c      	ldr	r4, [pc, #112]	; (800df68 <tanhf+0xc8>)
 800def6:	db19      	blt.n	800df2c <tanhf+0x8c>
 800def8:	f7ff ffca 	bl	800de90 <fabsf>
 800defc:	edd4 7a00 	vldr	s15, [r4]
 800df00:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df04:	f000 f842 	bl	800df8c <expm1f>
 800df08:	4b15      	ldr	r3, [pc, #84]	; (800df60 <tanhf+0xc0>)
 800df0a:	edd3 7a00 	vldr	s15, [r3]
 800df0e:	edd4 6a00 	vldr	s13, [r4]
 800df12:	ed94 7a00 	vldr	s14, [r4]
 800df16:	ee37 0a00 	vadd.f32	s0, s14, s0
 800df1a:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800df1e:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800df22:	2d00      	cmp	r5, #0
 800df24:	bfb8      	it	lt
 800df26:	eeb1 0a40 	vneglt.f32	s0, s0
 800df2a:	e7d0      	b.n	800dece <tanhf+0x2e>
 800df2c:	ed94 8a00 	vldr	s16, [r4]
 800df30:	f7ff ffae 	bl	800de90 <fabsf>
 800df34:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800df38:	f000 f828 	bl	800df8c <expm1f>
 800df3c:	edd4 7a00 	vldr	s15, [r4]
 800df40:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df44:	eeb1 7a40 	vneg.f32	s14, s0
 800df48:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800df4c:	e7e9      	b.n	800df22 <tanhf+0x82>
 800df4e:	4b04      	ldr	r3, [pc, #16]	; (800df60 <tanhf+0xc0>)
 800df50:	ed93 0a00 	vldr	s0, [r3]
 800df54:	4b05      	ldr	r3, [pc, #20]	; (800df6c <tanhf+0xcc>)
 800df56:	edd3 7a00 	vldr	s15, [r3]
 800df5a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800df5e:	e7e0      	b.n	800df22 <tanhf+0x82>
 800df60:	20000e28 	.word	0x20000e28
 800df64:	41afffff 	.word	0x41afffff
 800df68:	20000e30 	.word	0x20000e30
 800df6c:	20000e2c 	.word	0x20000e2c

0800df70 <finitef>:
 800df70:	b082      	sub	sp, #8
 800df72:	ed8d 0a01 	vstr	s0, [sp, #4]
 800df76:	9801      	ldr	r0, [sp, #4]
 800df78:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800df7c:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800df80:	bfac      	ite	ge
 800df82:	2000      	movge	r0, #0
 800df84:	2001      	movlt	r0, #1
 800df86:	b002      	add	sp, #8
 800df88:	4770      	bx	lr
	...

0800df8c <expm1f>:
 800df8c:	ee10 2a10 	vmov	r2, s0
 800df90:	497e      	ldr	r1, [pc, #504]	; (800e18c <expm1f+0x200>)
 800df92:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800df96:	428b      	cmp	r3, r1
 800df98:	d921      	bls.n	800dfde <expm1f+0x52>
 800df9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df9e:	d902      	bls.n	800dfa6 <expm1f+0x1a>
 800dfa0:	ee30 0a00 	vadd.f32	s0, s0, s0
 800dfa4:	4770      	bx	lr
 800dfa6:	d106      	bne.n	800dfb6 <expm1f+0x2a>
 800dfa8:	2a00      	cmp	r2, #0
 800dfaa:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800dfae:	bfb8      	it	lt
 800dfb0:	eeb0 0a67 	vmovlt.f32	s0, s15
 800dfb4:	4770      	bx	lr
 800dfb6:	2a00      	cmp	r2, #0
 800dfb8:	db05      	blt.n	800dfc6 <expm1f+0x3a>
 800dfba:	4975      	ldr	r1, [pc, #468]	; (800e190 <expm1f+0x204>)
 800dfbc:	428b      	cmp	r3, r1
 800dfbe:	d95c      	bls.n	800e07a <expm1f+0xee>
 800dfc0:	2000      	movs	r0, #0
 800dfc2:	f000 b91d 	b.w	800e200 <__math_oflowf>
 800dfc6:	eddf 7a73 	vldr	s15, [pc, #460]	; 800e194 <expm1f+0x208>
 800dfca:	ee70 7a27 	vadd.f32	s15, s0, s15
 800dfce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800dfd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dfd6:	d550      	bpl.n	800e07a <expm1f+0xee>
 800dfd8:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800dfdc:	4770      	bx	lr
 800dfde:	496e      	ldr	r1, [pc, #440]	; (800e198 <expm1f+0x20c>)
 800dfe0:	428b      	cmp	r3, r1
 800dfe2:	d967      	bls.n	800e0b4 <expm1f+0x128>
 800dfe4:	496d      	ldr	r1, [pc, #436]	; (800e19c <expm1f+0x210>)
 800dfe6:	428b      	cmp	r3, r1
 800dfe8:	d847      	bhi.n	800e07a <expm1f+0xee>
 800dfea:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e1a0 <expm1f+0x214>
 800dfee:	2a00      	cmp	r2, #0
 800dff0:	bfa7      	ittee	ge
 800dff2:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800dff6:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 800e1a4 <expm1f+0x218>
 800dffa:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 800e1a8 <expm1f+0x21c>
 800dffe:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800e002:	bfac      	ite	ge
 800e004:	2301      	movge	r3, #1
 800e006:	f04f 33ff 	movlt.w	r3, #4294967295
 800e00a:	ee37 0a66 	vsub.f32	s0, s14, s13
 800e00e:	ee77 7a40 	vsub.f32	s15, s14, s0
 800e012:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e016:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e01a:	ee20 4a25 	vmul.f32	s8, s0, s11
 800e01e:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800e1ac <expm1f+0x220>
 800e022:	eddf 6a63 	vldr	s13, [pc, #396]	; 800e1b0 <expm1f+0x224>
 800e026:	ed9f 5a63 	vldr	s10, [pc, #396]	; 800e1b4 <expm1f+0x228>
 800e02a:	ee20 7a04 	vmul.f32	s14, s0, s8
 800e02e:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800e032:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e036:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800e1b8 <expm1f+0x22c>
 800e03a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e03e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e1bc <expm1f+0x230>
 800e042:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e046:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e04a:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e04e:	eef0 6a46 	vmov.f32	s13, s12
 800e052:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e056:	eee4 4a66 	vfms.f32	s9, s8, s13
 800e05a:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800e05e:	eea0 4a64 	vfms.f32	s8, s0, s9
 800e062:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800e066:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800e06a:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e06e:	bb7b      	cbnz	r3, 800e0d0 <expm1f+0x144>
 800e070:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800e074:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e078:	4770      	bx	lr
 800e07a:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e07e:	2a00      	cmp	r2, #0
 800e080:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e084:	bfb8      	it	lt
 800e086:	eef0 7a47 	vmovlt.f32	s15, s14
 800e08a:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e1c0 <expm1f+0x234>
 800e08e:	ee40 7a07 	vmla.f32	s15, s0, s14
 800e092:	eeb0 7a40 	vmov.f32	s14, s0
 800e096:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e09a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e09e:	ee17 3a90 	vmov	r3, s15
 800e0a2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800e1a0 <expm1f+0x214>
 800e0a6:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800e0aa:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800e1a4 <expm1f+0x218>
 800e0ae:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e0b2:	e7aa      	b.n	800e00a <expm1f+0x7e>
 800e0b4:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800e0b8:	d208      	bcs.n	800e0cc <expm1f+0x140>
 800e0ba:	eddf 7a42 	vldr	s15, [pc, #264]	; 800e1c4 <expm1f+0x238>
 800e0be:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e0c2:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800e0c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e0ca:	4770      	bx	lr
 800e0cc:	2300      	movs	r3, #0
 800e0ce:	e7a2      	b.n	800e016 <expm1f+0x8a>
 800e0d0:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e0d4:	1c5a      	adds	r2, r3, #1
 800e0d6:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800e0da:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0de:	d106      	bne.n	800e0ee <expm1f+0x162>
 800e0e0:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e0e4:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800e0e8:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800e0ec:	4770      	bx	lr
 800e0ee:	2b01      	cmp	r3, #1
 800e0f0:	d118      	bne.n	800e124 <expm1f+0x198>
 800e0f2:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800e0f6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e0fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0fe:	bf5b      	ittet	pl
 800e100:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800e104:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800e108:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800e10c:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800e110:	bf43      	ittte	mi
 800e112:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800e116:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800e11a:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800e11e:	eeb0 0a46 	vmovpl.f32	s0, s12
 800e122:	4770      	bx	lr
 800e124:	1c5a      	adds	r2, r3, #1
 800e126:	2a39      	cmp	r2, #57	; 0x39
 800e128:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800e12c:	d90b      	bls.n	800e146 <expm1f+0x1ba>
 800e12e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e132:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e136:	ee17 3a90 	vmov	r3, s15
 800e13a:	4419      	add	r1, r3
 800e13c:	ee07 1a90 	vmov	s15, r1
 800e140:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800e144:	4770      	bx	lr
 800e146:	2b16      	cmp	r3, #22
 800e148:	dc11      	bgt.n	800e16e <expm1f+0x1e2>
 800e14a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e14e:	fa42 f303 	asr.w	r3, r2, r3
 800e152:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800e156:	ee07 3a10 	vmov	s14, r3
 800e15a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e15e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e162:	ee17 3a90 	vmov	r3, s15
 800e166:	440b      	add	r3, r1
 800e168:	ee00 3a10 	vmov	s0, r3
 800e16c:	4770      	bx	lr
 800e16e:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e172:	05db      	lsls	r3, r3, #23
 800e174:	ee07 3a10 	vmov	s14, r3
 800e178:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e17c:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e180:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e184:	ee17 3a90 	vmov	r3, s15
 800e188:	e7ed      	b.n	800e166 <expm1f+0x1da>
 800e18a:	bf00      	nop
 800e18c:	4195b843 	.word	0x4195b843
 800e190:	42b17217 	.word	0x42b17217
 800e194:	0da24260 	.word	0x0da24260
 800e198:	3eb17218 	.word	0x3eb17218
 800e19c:	3f851591 	.word	0x3f851591
 800e1a0:	3f317180 	.word	0x3f317180
 800e1a4:	3717f7d1 	.word	0x3717f7d1
 800e1a8:	b717f7d1 	.word	0xb717f7d1
 800e1ac:	b457edbb 	.word	0xb457edbb
 800e1b0:	36867e54 	.word	0x36867e54
 800e1b4:	bd088889 	.word	0xbd088889
 800e1b8:	b8a670cd 	.word	0xb8a670cd
 800e1bc:	3ad00d01 	.word	0x3ad00d01
 800e1c0:	3fb8aa3b 	.word	0x3fb8aa3b
 800e1c4:	7149f2ca 	.word	0x7149f2ca

0800e1c8 <with_errnof>:
 800e1c8:	b513      	push	{r0, r1, r4, lr}
 800e1ca:	4604      	mov	r4, r0
 800e1cc:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e1d0:	f7fd f9ea 	bl	800b5a8 <__errno>
 800e1d4:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e1d8:	6004      	str	r4, [r0, #0]
 800e1da:	b002      	add	sp, #8
 800e1dc:	bd10      	pop	{r4, pc}

0800e1de <xflowf>:
 800e1de:	b130      	cbz	r0, 800e1ee <xflowf+0x10>
 800e1e0:	eef1 7a40 	vneg.f32	s15, s0
 800e1e4:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e1e8:	2022      	movs	r0, #34	; 0x22
 800e1ea:	f7ff bfed 	b.w	800e1c8 <with_errnof>
 800e1ee:	eef0 7a40 	vmov.f32	s15, s0
 800e1f2:	e7f7      	b.n	800e1e4 <xflowf+0x6>

0800e1f4 <__math_uflowf>:
 800e1f4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e1fc <__math_uflowf+0x8>
 800e1f8:	f7ff bff1 	b.w	800e1de <xflowf>
 800e1fc:	10000000 	.word	0x10000000

0800e200 <__math_oflowf>:
 800e200:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e208 <__math_oflowf+0x8>
 800e204:	f7ff bfeb 	b.w	800e1de <xflowf>
 800e208:	70000000 	.word	0x70000000

0800e20c <__ieee754_expf>:
 800e20c:	ee10 2a10 	vmov	r2, s0
 800e210:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e214:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e218:	d902      	bls.n	800e220 <__ieee754_expf+0x14>
 800e21a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e21e:	4770      	bx	lr
 800e220:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800e224:	d106      	bne.n	800e234 <__ieee754_expf+0x28>
 800e226:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800e360 <__ieee754_expf+0x154>
 800e22a:	2900      	cmp	r1, #0
 800e22c:	bf18      	it	ne
 800e22e:	eeb0 0a67 	vmovne.f32	s0, s15
 800e232:	4770      	bx	lr
 800e234:	484b      	ldr	r0, [pc, #300]	; (800e364 <__ieee754_expf+0x158>)
 800e236:	4282      	cmp	r2, r0
 800e238:	dd02      	ble.n	800e240 <__ieee754_expf+0x34>
 800e23a:	2000      	movs	r0, #0
 800e23c:	f7ff bfe0 	b.w	800e200 <__math_oflowf>
 800e240:	2a00      	cmp	r2, #0
 800e242:	da05      	bge.n	800e250 <__ieee754_expf+0x44>
 800e244:	4a48      	ldr	r2, [pc, #288]	; (800e368 <__ieee754_expf+0x15c>)
 800e246:	4293      	cmp	r3, r2
 800e248:	d902      	bls.n	800e250 <__ieee754_expf+0x44>
 800e24a:	2000      	movs	r0, #0
 800e24c:	f7ff bfd2 	b.w	800e1f4 <__math_uflowf>
 800e250:	4a46      	ldr	r2, [pc, #280]	; (800e36c <__ieee754_expf+0x160>)
 800e252:	4293      	cmp	r3, r2
 800e254:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e258:	d952      	bls.n	800e300 <__ieee754_expf+0xf4>
 800e25a:	4a45      	ldr	r2, [pc, #276]	; (800e370 <__ieee754_expf+0x164>)
 800e25c:	4293      	cmp	r3, r2
 800e25e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800e262:	d834      	bhi.n	800e2ce <__ieee754_expf+0xc2>
 800e264:	4b43      	ldr	r3, [pc, #268]	; (800e374 <__ieee754_expf+0x168>)
 800e266:	4413      	add	r3, r2
 800e268:	ed93 7a00 	vldr	s14, [r3]
 800e26c:	4b42      	ldr	r3, [pc, #264]	; (800e378 <__ieee754_expf+0x16c>)
 800e26e:	4413      	add	r3, r2
 800e270:	ee30 7a47 	vsub.f32	s14, s0, s14
 800e274:	f1c1 0201 	rsb	r2, r1, #1
 800e278:	edd3 7a00 	vldr	s15, [r3]
 800e27c:	1a52      	subs	r2, r2, r1
 800e27e:	ee37 0a67 	vsub.f32	s0, s14, s15
 800e282:	ee20 6a00 	vmul.f32	s12, s0, s0
 800e286:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800e37c <__ieee754_expf+0x170>
 800e28a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e380 <__ieee754_expf+0x174>
 800e28e:	eee6 6a05 	vfma.f32	s13, s12, s10
 800e292:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800e384 <__ieee754_expf+0x178>
 800e296:	eea6 5a86 	vfma.f32	s10, s13, s12
 800e29a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e388 <__ieee754_expf+0x17c>
 800e29e:	eee5 6a06 	vfma.f32	s13, s10, s12
 800e2a2:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800e38c <__ieee754_expf+0x180>
 800e2a6:	eea6 5a86 	vfma.f32	s10, s13, s12
 800e2aa:	eef0 6a40 	vmov.f32	s13, s0
 800e2ae:	eee5 6a46 	vfms.f32	s13, s10, s12
 800e2b2:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e2b6:	ee20 5a26 	vmul.f32	s10, s0, s13
 800e2ba:	bb92      	cbnz	r2, 800e322 <__ieee754_expf+0x116>
 800e2bc:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e2c0:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800e2c4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e2c8:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e2cc:	4770      	bx	lr
 800e2ce:	4b30      	ldr	r3, [pc, #192]	; (800e390 <__ieee754_expf+0x184>)
 800e2d0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e394 <__ieee754_expf+0x188>
 800e2d4:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e398 <__ieee754_expf+0x18c>
 800e2d8:	4413      	add	r3, r2
 800e2da:	edd3 7a00 	vldr	s15, [r3]
 800e2de:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e2e2:	eeb0 7a40 	vmov.f32	s14, s0
 800e2e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e2ea:	ee17 2a90 	vmov	r2, s15
 800e2ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e2f2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e2f6:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e39c <__ieee754_expf+0x190>
 800e2fa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e2fe:	e7be      	b.n	800e27e <__ieee754_expf+0x72>
 800e300:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800e304:	d20b      	bcs.n	800e31e <__ieee754_expf+0x112>
 800e306:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e3a0 <__ieee754_expf+0x194>
 800e30a:	ee70 6a26 	vadd.f32	s13, s0, s13
 800e30e:	eef4 6ae5 	vcmpe.f32	s13, s11
 800e312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e316:	dd02      	ble.n	800e31e <__ieee754_expf+0x112>
 800e318:	ee30 0a25 	vadd.f32	s0, s0, s11
 800e31c:	4770      	bx	lr
 800e31e:	2200      	movs	r2, #0
 800e320:	e7af      	b.n	800e282 <__ieee754_expf+0x76>
 800e322:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e326:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800e32a:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800e32e:	bfb8      	it	lt
 800e330:	3264      	addlt	r2, #100	; 0x64
 800e332:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e336:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e33a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e33e:	ee17 3a90 	vmov	r3, s15
 800e342:	bfab      	itete	ge
 800e344:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800e348:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800e34c:	ee00 3a10 	vmovge	s0, r3
 800e350:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800e3a4 <__ieee754_expf+0x198>
 800e354:	bfbc      	itt	lt
 800e356:	ee00 3a10 	vmovlt	s0, r3
 800e35a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800e35e:	4770      	bx	lr
 800e360:	00000000 	.word	0x00000000
 800e364:	42b17217 	.word	0x42b17217
 800e368:	42cff1b5 	.word	0x42cff1b5
 800e36c:	3eb17218 	.word	0x3eb17218
 800e370:	3f851591 	.word	0x3f851591
 800e374:	08045f2c 	.word	0x08045f2c
 800e378:	08045f34 	.word	0x08045f34
 800e37c:	3331bb4c 	.word	0x3331bb4c
 800e380:	b5ddea0e 	.word	0xb5ddea0e
 800e384:	388ab355 	.word	0x388ab355
 800e388:	bb360b61 	.word	0xbb360b61
 800e38c:	3e2aaaab 	.word	0x3e2aaaab
 800e390:	08045f24 	.word	0x08045f24
 800e394:	3fb8aa3b 	.word	0x3fb8aa3b
 800e398:	3f317180 	.word	0x3f317180
 800e39c:	3717f7d1 	.word	0x3717f7d1
 800e3a0:	7149f2ca 	.word	0x7149f2ca
 800e3a4:	0d800000 	.word	0x0d800000

0800e3a8 <_init>:
 800e3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3aa:	bf00      	nop
 800e3ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ae:	bc08      	pop	{r3}
 800e3b0:	469e      	mov	lr, r3
 800e3b2:	4770      	bx	lr

0800e3b4 <_fini>:
 800e3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3b6:	bf00      	nop
 800e3b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3ba:	bc08      	pop	{r3}
 800e3bc:	469e      	mov	lr, r3
 800e3be:	4770      	bx	lr
