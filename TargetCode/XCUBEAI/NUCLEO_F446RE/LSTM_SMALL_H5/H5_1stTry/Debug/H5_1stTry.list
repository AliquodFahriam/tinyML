
H5_1stTry.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e258  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00037b7c  0800e440  0800e440  0001e440  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08045fbc  08045fbc  00060e34  2**0
                  CONTENTS
  4 .ARM          00000008  08045fbc  08045fbc  00055fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08045fc4  08045fc4  00060e34  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08045fc4  08045fc4  00055fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08045fc8  08045fc8  00055fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e34  20000000  08045fcc  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003798  20000e34  08046e00  00060e34  2**2
                  ALLOC
 10 ._user_heap_stack 00001004  200045cc  08046e00  000645cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00060e34  2**0
                  CONTENTS, READONLY
 12 .comment      00000093  00000000  00000000  00060e64  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001064b  00000000  00000000  00060ef7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ae8  00000000  00000000  00071542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  00074030  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a5f  00000000  00000000  00074dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024a8c  00000000  00000000  0007581f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012478  00000000  00000000  0009a2ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d9be1  00000000  00000000  000ac723  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004e78  00000000  00000000  00186304  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018b17c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000e34 	.word	0x20000e34
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e410 	.word	0x0800e410

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000e38 	.word	0x20000e38
 800020c:	0800e410 	.word	0x0800e410

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 800103a:	4a38      	ldr	r2, [pc, #224]	; (800111c <HD44780_Init+0xec>)
 800103c:	79fb      	ldrb	r3, [r7, #7]
 800103e:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001040:	4b37      	ldr	r3, [pc, #220]	; (8001120 <HD44780_Init+0xf0>)
 8001042:	2208      	movs	r2, #8
 8001044:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 8001046:	4b37      	ldr	r3, [pc, #220]	; (8001124 <HD44780_Init+0xf4>)
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 800104c:	4b33      	ldr	r3, [pc, #204]	; (800111c <HD44780_Init+0xec>)
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	2b01      	cmp	r3, #1
 8001052:	d907      	bls.n	8001064 <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 8001054:	4b33      	ldr	r3, [pc, #204]	; (8001124 <HD44780_Init+0xf4>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	f043 0308 	orr.w	r3, r3, #8
 800105c:	b2da      	uxtb	r2, r3
 800105e:	4b31      	ldr	r3, [pc, #196]	; (8001124 <HD44780_Init+0xf4>)
 8001060:	701a      	strb	r2, [r3, #0]
 8001062:	e006      	b.n	8001072 <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 8001064:	4b2f      	ldr	r3, [pc, #188]	; (8001124 <HD44780_Init+0xf4>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	f043 0304 	orr.w	r3, r3, #4
 800106c:	b2da      	uxtb	r2, r3
 800106e:	4b2d      	ldr	r3, [pc, #180]	; (8001124 <HD44780_Init+0xf4>)
 8001070:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 8001072:	f000 f985 	bl	8001380 <DelayInit>
  HAL_Delay(50);
 8001076:	2032      	movs	r0, #50	; 0x32
 8001078:	f000 ff9a 	bl	8001fb0 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 800107c:	4b28      	ldr	r3, [pc, #160]	; (8001120 <HD44780_Init+0xf0>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f000 f943 	bl	800130c <ExpanderWrite>
  HAL_Delay(1000);
 8001086:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800108a:	f000 ff91 	bl	8001fb0 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 800108e:	2030      	movs	r0, #48	; 0x30
 8001090:	f000 f92b 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 8001094:	f241 1094 	movw	r0, #4500	; 0x1194
 8001098:	f000 f99c 	bl	80013d4 <DelayUS>

  Write4Bits(0x03 << 4);
 800109c:	2030      	movs	r0, #48	; 0x30
 800109e:	f000 f924 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 80010a2:	f241 1094 	movw	r0, #4500	; 0x1194
 80010a6:	f000 f995 	bl	80013d4 <DelayUS>

  Write4Bits(0x03 << 4);
 80010aa:	2030      	movs	r0, #48	; 0x30
 80010ac:	f000 f91d 	bl	80012ea <Write4Bits>
  DelayUS(4500);
 80010b0:	f241 1094 	movw	r0, #4500	; 0x1194
 80010b4:	f000 f98e 	bl	80013d4 <DelayUS>

  Write4Bits(0x02 << 4);
 80010b8:	2020      	movs	r0, #32
 80010ba:	f000 f916 	bl	80012ea <Write4Bits>
  DelayUS(100);
 80010be:	2064      	movs	r0, #100	; 0x64
 80010c0:	f000 f988 	bl	80013d4 <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80010c4:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HD44780_Init+0xf4>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	f043 0320 	orr.w	r3, r3, #32
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	4618      	mov	r0, r3
 80010d0:	f000 f8ce 	bl	8001270 <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 80010d4:	4b14      	ldr	r3, [pc, #80]	; (8001128 <HD44780_Init+0xf8>)
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 80010da:	f000 f875 	bl	80011c8 <HD44780_Display>
  HD44780_Clear();
 80010de:	f000 f82b 	bl	8001138 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 80010e2:	4b12      	ldr	r3, [pc, #72]	; (800112c <HD44780_Init+0xfc>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80010e8:	4b10      	ldr	r3, [pc, #64]	; (800112c <HD44780_Init+0xfc>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f043 0304 	orr.w	r3, r3, #4
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	4618      	mov	r0, r3
 80010f4:	f000 f8bc 	bl	8001270 <SendCommand>
  DelayUS(4500);
 80010f8:	f241 1094 	movw	r0, #4500	; 0x1194
 80010fc:	f000 f96a 	bl	80013d4 <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001100:	490b      	ldr	r1, [pc, #44]	; (8001130 <HD44780_Init+0x100>)
 8001102:	2000      	movs	r0, #0
 8001104:	f000 f876 	bl	80011f4 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001108:	490a      	ldr	r1, [pc, #40]	; (8001134 <HD44780_Init+0x104>)
 800110a:	2001      	movs	r0, #1
 800110c:	f000 f872 	bl	80011f4 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001110:	f000 f81d 	bl	800114e <HD44780_Home>
}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	20000e53 	.word	0x20000e53
 8001120:	20000e54 	.word	0x20000e54
 8001124:	20000e50 	.word	0x20000e50
 8001128:	20000e51 	.word	0x20000e51
 800112c:	20000e52 	.word	0x20000e52
 8001130:	20000000 	.word	0x20000000
 8001134:	20000008 	.word	0x20000008

08001138 <HD44780_Clear>:

void HD44780_Clear()
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 800113c:	2001      	movs	r0, #1
 800113e:	f000 f897 	bl	8001270 <SendCommand>
  DelayUS(2000);
 8001142:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001146:	f000 f945 	bl	80013d4 <DelayUS>
}
 800114a:	bf00      	nop
 800114c:	bd80      	pop	{r7, pc}

0800114e <HD44780_Home>:

void HD44780_Home()
{
 800114e:	b580      	push	{r7, lr}
 8001150:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 8001152:	2002      	movs	r0, #2
 8001154:	f000 f88c 	bl	8001270 <SendCommand>
  DelayUS(2000);
 8001158:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800115c:	f000 f93a 	bl	80013d4 <DelayUS>
}
 8001160:	bf00      	nop
 8001162:	bd80      	pop	{r7, pc}

08001164 <HD44780_SetCursor>:

void HD44780_SetCursor(uint8_t col, uint8_t row)
{
 8001164:	b590      	push	{r4, r7, lr}
 8001166:	b087      	sub	sp, #28
 8001168:	af00      	add	r7, sp, #0
 800116a:	4603      	mov	r3, r0
 800116c:	460a      	mov	r2, r1
 800116e:	71fb      	strb	r3, [r7, #7]
 8001170:	4613      	mov	r3, r2
 8001172:	71bb      	strb	r3, [r7, #6]
  int row_offsets[] = { 0x00, 0x40, 0x14, 0x54 };
 8001174:	4b12      	ldr	r3, [pc, #72]	; (80011c0 <HD44780_SetCursor+0x5c>)
 8001176:	f107 0408 	add.w	r4, r7, #8
 800117a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800117c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  if (row >= dpRows)
 8001180:	4b10      	ldr	r3, [pc, #64]	; (80011c4 <HD44780_SetCursor+0x60>)
 8001182:	781b      	ldrb	r3, [r3, #0]
 8001184:	79ba      	ldrb	r2, [r7, #6]
 8001186:	429a      	cmp	r2, r3
 8001188:	d303      	bcc.n	8001192 <HD44780_SetCursor+0x2e>
  {
    row = dpRows-1;
 800118a:	4b0e      	ldr	r3, [pc, #56]	; (80011c4 <HD44780_SetCursor+0x60>)
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	3b01      	subs	r3, #1
 8001190:	71bb      	strb	r3, [r7, #6]
  }
  SendCommand(LCD_SETDDRAMADDR | (col + row_offsets[row]));
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	009b      	lsls	r3, r3, #2
 8001196:	3318      	adds	r3, #24
 8001198:	443b      	add	r3, r7
 800119a:	f853 3c10 	ldr.w	r3, [r3, #-16]
 800119e:	b2da      	uxtb	r2, r3
 80011a0:	79fb      	ldrb	r3, [r7, #7]
 80011a2:	4413      	add	r3, r2
 80011a4:	b2db      	uxtb	r3, r3
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80011ac:	b25b      	sxtb	r3, r3
 80011ae:	b2db      	uxtb	r3, r3
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 f85d 	bl	8001270 <SendCommand>
}
 80011b6:	bf00      	nop
 80011b8:	371c      	adds	r7, #28
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd90      	pop	{r4, r7, pc}
 80011be:	bf00      	nop
 80011c0:	0800e440 	.word	0x0800e440
 80011c4:	20000e53 	.word	0x20000e53

080011c8 <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80011cc:	4b08      	ldr	r3, [pc, #32]	; (80011f0 <HD44780_Display+0x28>)
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	f043 0304 	orr.w	r3, r3, #4
 80011d4:	b2da      	uxtb	r2, r3
 80011d6:	4b06      	ldr	r3, [pc, #24]	; (80011f0 <HD44780_Display+0x28>)
 80011d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80011da:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <HD44780_Display+0x28>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	f043 0308 	orr.w	r3, r3, #8
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	4618      	mov	r0, r3
 80011e6:	f000 f843 	bl	8001270 <SendCommand>
}
 80011ea:	bf00      	nop
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000e51 	.word	0x20000e51

080011f4 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 8001200:	79fb      	ldrb	r3, [r7, #7]
 8001202:	f003 0307 	and.w	r3, r3, #7
 8001206:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001208:	79fb      	ldrb	r3, [r7, #7]
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	b25b      	sxtb	r3, r3
 800120e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001212:	b25b      	sxtb	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	4618      	mov	r0, r3
 8001218:	f000 f82a 	bl	8001270 <SendCommand>
  for (int i=0; i<8; i++)
 800121c:	2300      	movs	r3, #0
 800121e:	60fb      	str	r3, [r7, #12]
 8001220:	e009      	b.n	8001236 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	683a      	ldr	r2, [r7, #0]
 8001226:	4413      	add	r3, r2
 8001228:	781b      	ldrb	r3, [r3, #0]
 800122a:	4618      	mov	r0, r3
 800122c:	f000 f82e 	bl	800128c <SendChar>
  for (int i=0; i<8; i++)
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	3301      	adds	r3, #1
 8001234:	60fb      	str	r3, [r7, #12]
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	2b07      	cmp	r3, #7
 800123a:	ddf2      	ble.n	8001222 <HD44780_CreateSpecialChar+0x2e>
  }
}
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b082      	sub	sp, #8
 800124a:	af00      	add	r7, sp, #0
 800124c:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800124e:	e006      	b.n	800125e <HD44780_PrintStr+0x18>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	1c5a      	adds	r2, r3, #1
 8001254:	607a      	str	r2, [r7, #4]
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	4618      	mov	r0, r3
 800125a:	f000 f817 	bl	800128c <SendChar>
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d1f4      	bne.n	8001250 <HD44780_PrintStr+0xa>
}
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}

08001270 <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	4603      	mov	r3, r0
 8001278:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 800127a:	79fb      	ldrb	r3, [r7, #7]
 800127c:	2100      	movs	r1, #0
 800127e:	4618      	mov	r0, r3
 8001280:	f000 f812 	bl	80012a8 <Send>
}
 8001284:	bf00      	nop
 8001286:	3708      	adds	r7, #8
 8001288:	46bd      	mov	sp, r7
 800128a:	bd80      	pop	{r7, pc}

0800128c <SendChar>:

static void SendChar(uint8_t ch)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af00      	add	r7, sp, #0
 8001292:	4603      	mov	r3, r0
 8001294:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2101      	movs	r1, #1
 800129a:	4618      	mov	r0, r3
 800129c:	f000 f804 	bl	80012a8 <Send>
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b084      	sub	sp, #16
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	4603      	mov	r3, r0
 80012b0:	460a      	mov	r2, r1
 80012b2:	71fb      	strb	r3, [r7, #7]
 80012b4:	4613      	mov	r3, r2
 80012b6:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80012b8:	79fb      	ldrb	r3, [r7, #7]
 80012ba:	f023 030f 	bic.w	r3, r3, #15
 80012be:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80012c0:	79fb      	ldrb	r3, [r7, #7]
 80012c2:	011b      	lsls	r3, r3, #4
 80012c4:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80012c6:	7bfa      	ldrb	r2, [r7, #15]
 80012c8:	79bb      	ldrb	r3, [r7, #6]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	4618      	mov	r0, r3
 80012d0:	f000 f80b 	bl	80012ea <Write4Bits>
  Write4Bits((lownib)|mode);
 80012d4:	7bba      	ldrb	r2, [r7, #14]
 80012d6:	79bb      	ldrb	r3, [r7, #6]
 80012d8:	4313      	orrs	r3, r2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	4618      	mov	r0, r3
 80012de:	f000 f804 	bl	80012ea <Write4Bits>
}
 80012e2:	bf00      	nop
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}

080012ea <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 80012ea:	b580      	push	{r7, lr}
 80012ec:	b082      	sub	sp, #8
 80012ee:	af00      	add	r7, sp, #0
 80012f0:	4603      	mov	r3, r0
 80012f2:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f000 f808 	bl	800130c <ExpanderWrite>
  PulseEnable(value);
 80012fc:	79fb      	ldrb	r3, [r7, #7]
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f820 	bl	8001344 <PulseEnable>
}
 8001304:	bf00      	nop
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}

0800130c <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b086      	sub	sp, #24
 8001310:	af02      	add	r7, sp, #8
 8001312:	4603      	mov	r3, r0
 8001314:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <ExpanderWrite+0x30>)
 8001318:	781a      	ldrb	r2, [r3, #0]
 800131a:	79fb      	ldrb	r3, [r7, #7]
 800131c:	4313      	orrs	r3, r2
 800131e:	b2db      	uxtb	r3, r3
 8001320:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 8001322:	f107 020f 	add.w	r2, r7, #15
 8001326:	230a      	movs	r3, #10
 8001328:	9300      	str	r3, [sp, #0]
 800132a:	2301      	movs	r3, #1
 800132c:	217e      	movs	r1, #126	; 0x7e
 800132e:	4804      	ldr	r0, [pc, #16]	; (8001340 <ExpanderWrite+0x34>)
 8001330:	f001 fe84 	bl	800303c <HAL_I2C_Master_Transmit>
}
 8001334:	bf00      	nop
 8001336:	3710      	adds	r7, #16
 8001338:	46bd      	mov	sp, r7
 800133a:	bd80      	pop	{r7, pc}
 800133c:	20000e54 	.word	0x20000e54
 8001340:	20000e60 	.word	0x20000e60

08001344 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	4603      	mov	r3, r0
 800134c:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800134e:	79fb      	ldrb	r3, [r7, #7]
 8001350:	f043 0304 	orr.w	r3, r3, #4
 8001354:	b2db      	uxtb	r3, r3
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff ffd8 	bl	800130c <ExpanderWrite>
  DelayUS(20);
 800135c:	2014      	movs	r0, #20
 800135e:	f000 f839 	bl	80013d4 <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 8001362:	79fb      	ldrb	r3, [r7, #7]
 8001364:	f023 0304 	bic.w	r3, r3, #4
 8001368:	b2db      	uxtb	r3, r3
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff ffce 	bl	800130c <ExpanderWrite>
  DelayUS(20);
 8001370:	2014      	movs	r0, #20
 8001372:	f000 f82f 	bl	80013d4 <DelayUS>
}
 8001376:	bf00      	nop
 8001378:	3708      	adds	r7, #8
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
	...

08001380 <DelayInit>:

static void DelayInit(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 8001384:	4b11      	ldr	r3, [pc, #68]	; (80013cc <DelayInit+0x4c>)
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4a10      	ldr	r2, [pc, #64]	; (80013cc <DelayInit+0x4c>)
 800138a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800138e:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <DelayInit+0x4c>)
 8001392:	68db      	ldr	r3, [r3, #12]
 8001394:	4a0d      	ldr	r2, [pc, #52]	; (80013cc <DelayInit+0x4c>)
 8001396:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800139a:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 800139c:	4b0c      	ldr	r3, [pc, #48]	; (80013d0 <DelayInit+0x50>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	4a0b      	ldr	r2, [pc, #44]	; (80013d0 <DelayInit+0x50>)
 80013a2:	f023 0301 	bic.w	r3, r3, #1
 80013a6:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80013a8:	4b09      	ldr	r3, [pc, #36]	; (80013d0 <DelayInit+0x50>)
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a08      	ldr	r2, [pc, #32]	; (80013d0 <DelayInit+0x50>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80013b4:	4b06      	ldr	r3, [pc, #24]	; (80013d0 <DelayInit+0x50>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80013ba:	bf00      	nop
  __ASM volatile ("NOP");
 80013bc:	bf00      	nop
  __ASM volatile ("NOP");
 80013be:	bf00      	nop
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000edf0 	.word	0xe000edf0
 80013d0:	e0001000 	.word	0xe0001000

080013d4 <DelayUS>:

static void DelayUS(uint32_t us) {
 80013d4:	b480      	push	{r7}
 80013d6:	b087      	sub	sp, #28
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 80013dc:	4b0e      	ldr	r3, [pc, #56]	; (8001418 <DelayUS+0x44>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a0e      	ldr	r2, [pc, #56]	; (800141c <DelayUS+0x48>)
 80013e2:	fba2 2303 	umull	r2, r3, r2, r3
 80013e6:	0c9a      	lsrs	r2, r3, #18
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	fb02 f303 	mul.w	r3, r2, r3
 80013ee:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <DelayUS+0x4c>)
 80013f2:	685b      	ldr	r3, [r3, #4]
 80013f4:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 80013f6:	4b0a      	ldr	r3, [pc, #40]	; (8001420 <DelayUS+0x4c>)
 80013f8:	685a      	ldr	r2, [r3, #4]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	1ad3      	subs	r3, r2, r3
 80013fe:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	697a      	ldr	r2, [r7, #20]
 8001404:	429a      	cmp	r2, r3
 8001406:	d8f6      	bhi.n	80013f6 <DelayUS+0x22>
}
 8001408:	bf00      	nop
 800140a:	bf00      	nop
 800140c:	371c      	adds	r7, #28
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr
 8001416:	bf00      	nop
 8001418:	20000014 	.word	0x20000014
 800141c:	431bde83 	.word	0x431bde83
 8001420:	e0001000 	.word	0xe0001000

08001424 <HAL_UARTEx_RxEventCallback>:
uint16_t counter = 0;
uint8_t response[] = "OK\n";


void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
  {
 8001424:	b590      	push	{r4, r7, lr}
 8001426:	b083      	sub	sp, #12
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	460b      	mov	r3, r1
 800142e:	807b      	strh	r3, [r7, #2]
	 if(huart -> Instance == USART2){
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a15      	ldr	r2, [pc, #84]	; (800148c <HAL_UARTEx_RxEventCallback+0x68>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d123      	bne.n	8001482 <HAL_UARTEx_RxEventCallback+0x5e>
		 if(counter < 420 ){
 800143a:	4b15      	ldr	r3, [pc, #84]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 8001442:	d21e      	bcs.n	8001482 <HAL_UARTEx_RxEventCallback+0x5e>
		 		aiInData[counter] = atof((char *)rx_buffer);
 8001444:	4813      	ldr	r0, [pc, #76]	; (8001494 <HAL_UARTEx_RxEventCallback+0x70>)
 8001446:	f008 f897 	bl	8009578 <atof>
 800144a:	ec51 0b10 	vmov	r0, r1, d0
 800144e:	4b10      	ldr	r3, [pc, #64]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	461c      	mov	r4, r3
 8001454:	f7ff fbe8 	bl	8000c28 <__aeabi_d2f>
 8001458:	4602      	mov	r2, r0
 800145a:	490f      	ldr	r1, [pc, #60]	; (8001498 <HAL_UARTEx_RxEventCallback+0x74>)
 800145c:	00a3      	lsls	r3, r4, #2
 800145e:	440b      	add	r3, r1
 8001460:	601a      	str	r2, [r3, #0]
		 		counter++;
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 8001464:	881b      	ldrh	r3, [r3, #0]
 8001466:	3301      	adds	r3, #1
 8001468:	b29a      	uxth	r2, r3
 800146a:	4b09      	ldr	r3, [pc, #36]	; (8001490 <HAL_UARTEx_RxEventCallback+0x6c>)
 800146c:	801a      	strh	r2, [r3, #0]
		 		memset(rx_buffer, 0, sizeof(rx_buffer));
 800146e:	220b      	movs	r2, #11
 8001470:	2100      	movs	r1, #0
 8001472:	4808      	ldr	r0, [pc, #32]	; (8001494 <HAL_UARTEx_RxEventCallback+0x70>)
 8001474:	f00a f858 	bl	800b528 <memset>
		 		HAL_UART_Transmit_DMA(&huart2, response, sizeof(response));
 8001478:	2204      	movs	r2, #4
 800147a:	4908      	ldr	r1, [pc, #32]	; (800149c <HAL_UARTEx_RxEventCallback+0x78>)
 800147c:	4808      	ldr	r0, [pc, #32]	; (80014a0 <HAL_UARTEx_RxEventCallback+0x7c>)
 800147e:	f002 ffbf 	bl	8004400 <HAL_UART_Transmit_DMA>
		 }

	 }
  }
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bd90      	pop	{r4, r7, pc}
 800148a:	bf00      	nop
 800148c:	40004400 	.word	0x40004400
 8001490:	200043e0 	.word	0x200043e0
 8001494:	200043d4 	.word	0x200043d4
 8001498:	20000fc0 	.word	0x20000fc0
 800149c:	20000010 	.word	0x20000010
 80014a0:	20000eb4 	.word	0x20000eb4

080014a4 <HAL_UART_TxCpltCallback>:



void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, 10);
 80014ac:	220a      	movs	r2, #10
 80014ae:	4908      	ldr	r1, [pc, #32]	; (80014d0 <HAL_UART_TxCpltCallback+0x2c>)
 80014b0:	4808      	ldr	r0, [pc, #32]	; (80014d4 <HAL_UART_TxCpltCallback+0x30>)
 80014b2:	f003 f815 	bl	80044e0 <HAL_UARTEx_ReceiveToIdle_DMA>
	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <HAL_UART_TxCpltCallback+0x34>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <HAL_UART_TxCpltCallback+0x34>)
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	f022 0208 	bic.w	r2, r2, #8
 80014c4:	601a      	str	r2, [r3, #0]
}
 80014c6:	bf00      	nop
 80014c8:	3708      	adds	r7, #8
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	200043d4 	.word	0x200043d4
 80014d4:	20000eb4 	.word	0x20000eb4
 80014d8:	20000efc 	.word	0x20000efc

080014dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b086      	sub	sp, #24
 80014e0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014e2:	f000 fcf3 	bl	8001ecc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014e6:	f000 f873 	bl	80015d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014ea:	f000 f977 	bl	80017dc <MX_GPIO_Init>
  MX_DMA_Init();
 80014ee:	f000 f94d 	bl	800178c <MX_DMA_Init>
  MX_CRC_Init();
 80014f2:	f000 f8df 	bl	80016b4 <MX_CRC_Init>
  MX_I2C1_Init();
 80014f6:	f000 f8f1 	bl	80016dc <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80014fa:	f000 f91d 	bl	8001738 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  	  	HD44780_Init(2);
 80014fe:	2002      	movs	r0, #2
 8001500:	f7ff fd96 	bl	8001030 <HD44780_Init>
    	HD44780_Clear();
 8001504:	f7ff fe18 	bl	8001138 <HD44780_Clear>
    	HD44780_SetCursor(0,0);
 8001508:	2100      	movs	r1, #0
 800150a:	2000      	movs	r0, #0
 800150c:	f7ff fe2a 	bl	8001164 <HD44780_SetCursor>
    	HD44780_PrintStr("Ready for Data");
 8001510:	4825      	ldr	r0, [pc, #148]	; (80015a8 <main+0xcc>)
 8001512:	f7ff fe98 	bl	8001246 <HD44780_PrintStr>


      	//USART
      	HAL_UARTEx_ReceiveToIdle_DMA(&huart2, rx_buffer, sizeof(rx_buffer));
 8001516:	220b      	movs	r2, #11
 8001518:	4924      	ldr	r1, [pc, #144]	; (80015ac <main+0xd0>)
 800151a:	4825      	ldr	r0, [pc, #148]	; (80015b0 <main+0xd4>)
 800151c:	f002 ffe0 	bl	80044e0 <HAL_UARTEx_ReceiveToIdle_DMA>
      	__HAL_DMA_DISABLE_IT(&hdma_usart2_rx, DMA_IT_HT);
 8001520:	4b24      	ldr	r3, [pc, #144]	; (80015b4 <main+0xd8>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	681a      	ldr	r2, [r3, #0]
 8001526:	4b23      	ldr	r3, [pc, #140]	; (80015b4 <main+0xd8>)
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f022 0208 	bic.w	r2, r2, #8
 800152e:	601a      	str	r2, [r3, #0]
      	//AI_INIT
      	AI_Init();
 8001530:	f000 f9c2 	bl	80018b8 <AI_Init>
	  	  HD44780_Clear();
	  	  HD44780_SetCursor(0, 0);
	  	  HD44780_PrintStr(uint16String);
	  	  HAL_Delay(500);
	  	  DEBUG*/
	  	  if(counter ==  AI_NETWORK_IN_1_SIZE){
 8001534:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <main+0xdc>)
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	f5b3 7fd2 	cmp.w	r3, #420	; 0x1a4
 800153c:	d1fa      	bne.n	8001534 <main+0x58>
	  	  		  	HD44780_Clear();
 800153e:	f7ff fdfb 	bl	8001138 <HD44780_Clear>
	  	  		  	HD44780_SetCursor(0,0);
 8001542:	2100      	movs	r1, #0
 8001544:	2000      	movs	r0, #0
 8001546:	f7ff fe0d 	bl	8001164 <HD44780_SetCursor>
	  	  		  	HD44780_PrintStr("Inference");
 800154a:	481c      	ldr	r0, [pc, #112]	; (80015bc <main+0xe0>)
 800154c:	f7ff fe7b 	bl	8001246 <HD44780_PrintStr>
	  	  	        printf("Running inference\r\n");
 8001550:	481b      	ldr	r0, [pc, #108]	; (80015c0 <main+0xe4>)
 8001552:	f009 feb5 	bl	800b2c0 <puts>
	  	  	        HAL_Delay(2000);
 8001556:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800155a:	f000 fd29 	bl	8001fb0 <HAL_Delay>

	  	  	        AI_Run(aiInData, aiOutData);
 800155e:	4919      	ldr	r1, [pc, #100]	; (80015c4 <main+0xe8>)
 8001560:	4819      	ldr	r0, [pc, #100]	; (80015c8 <main+0xec>)
 8001562:	f000 f9e5 	bl	8001930 <AI_Run>
	  	  	        HD44780_Clear();
 8001566:	f7ff fde7 	bl	8001138 <HD44780_Clear>
	  	  	        HD44780_SetCursor(0,0);
 800156a:	2100      	movs	r1, #0
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fdf9 	bl	8001164 <HD44780_SetCursor>

	  	  	        //OUTPUT PRINT ON LCD
	  	  	        char floatString[12];
	  	  	        snprintf(floatString, sizeof(floatString), "%f", aiOutData[0]);
 8001572:	4b14      	ldr	r3, [pc, #80]	; (80015c4 <main+0xe8>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	4618      	mov	r0, r3
 8001578:	f7ff f806 	bl	8000588 <__aeabi_f2d>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	1d38      	adds	r0, r7, #4
 8001582:	e9cd 2300 	strd	r2, r3, [sp]
 8001586:	4a11      	ldr	r2, [pc, #68]	; (80015cc <main+0xf0>)
 8001588:	210c      	movs	r1, #12
 800158a:	f009 fea1 	bl	800b2d0 <sniprintf>

	  	  	        HD44780_PrintStr(floatString);
 800158e:	1d3b      	adds	r3, r7, #4
 8001590:	4618      	mov	r0, r3
 8001592:	f7ff fe58 	bl	8001246 <HD44780_PrintStr>
	  	  	        HAL_Delay(2000);
 8001596:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800159a:	f000 fd09 	bl	8001fb0 <HAL_Delay>
	  	  	        counter = 0;
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <main+0xdc>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	801a      	strh	r2, [r3, #0]
	  	  if(counter ==  AI_NETWORK_IN_1_SIZE){
 80015a4:	e7c6      	b.n	8001534 <main+0x58>
 80015a6:	bf00      	nop
 80015a8:	0800e450 	.word	0x0800e450
 80015ac:	200043d4 	.word	0x200043d4
 80015b0:	20000eb4 	.word	0x20000eb4
 80015b4:	20000efc 	.word	0x20000efc
 80015b8:	200043e0 	.word	0x200043e0
 80015bc:	0800e460 	.word	0x0800e460
 80015c0:	0800e46c 	.word	0x0800e46c
 80015c4:	20001650 	.word	0x20001650
 80015c8:	20000fc0 	.word	0x20000fc0
 80015cc:	0800e480 	.word	0x0800e480

080015d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b094      	sub	sp, #80	; 0x50
 80015d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015d6:	f107 031c 	add.w	r3, r7, #28
 80015da:	2234      	movs	r2, #52	; 0x34
 80015dc:	2100      	movs	r1, #0
 80015de:	4618      	mov	r0, r3
 80015e0:	f009 ffa2 	bl	800b528 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015e4:	f107 0308 	add.w	r3, r7, #8
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]
 80015ec:	605a      	str	r2, [r3, #4]
 80015ee:	609a      	str	r2, [r3, #8]
 80015f0:	60da      	str	r2, [r3, #12]
 80015f2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
 80015f8:	4b2c      	ldr	r3, [pc, #176]	; (80016ac <SystemClock_Config+0xdc>)
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	4a2b      	ldr	r2, [pc, #172]	; (80016ac <SystemClock_Config+0xdc>)
 80015fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001602:	6413      	str	r3, [r2, #64]	; 0x40
 8001604:	4b29      	ldr	r3, [pc, #164]	; (80016ac <SystemClock_Config+0xdc>)
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800160c:	607b      	str	r3, [r7, #4]
 800160e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001610:	2300      	movs	r3, #0
 8001612:	603b      	str	r3, [r7, #0]
 8001614:	4b26      	ldr	r3, [pc, #152]	; (80016b0 <SystemClock_Config+0xe0>)
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a25      	ldr	r2, [pc, #148]	; (80016b0 <SystemClock_Config+0xe0>)
 800161a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800161e:	6013      	str	r3, [r2, #0]
 8001620:	4b23      	ldr	r3, [pc, #140]	; (80016b0 <SystemClock_Config+0xe0>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001628:	603b      	str	r3, [r7, #0]
 800162a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800162c:	2302      	movs	r3, #2
 800162e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001630:	2301      	movs	r3, #1
 8001632:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001634:	2310      	movs	r3, #16
 8001636:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001638:	2302      	movs	r3, #2
 800163a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800163c:	2300      	movs	r3, #0
 800163e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001640:	2308      	movs	r3, #8
 8001642:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8001644:	23b4      	movs	r3, #180	; 0xb4
 8001646:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = 2;
 8001648:	2302      	movs	r3, #2
 800164a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800164c:	2302      	movs	r3, #2
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001650:	2302      	movs	r3, #2
 8001652:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 031c 	add.w	r3, r7, #28
 8001658:	4618      	mov	r0, r3
 800165a:	f002 fbe3 	bl	8003e24 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001664:	f000 f99c 	bl	80019a0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001668:	f002 f842 	bl	80036f0 <HAL_PWREx_EnableOverDrive>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001672:	f000 f995 	bl	80019a0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001686:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168e:	f107 0308 	add.w	r3, r7, #8
 8001692:	2105      	movs	r1, #5
 8001694:	4618      	mov	r0, r3
 8001696:	f002 f87b 	bl	8003790 <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80016a0:	f000 f97e 	bl	80019a0 <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80016b8:	4b06      	ldr	r3, [pc, #24]	; (80016d4 <MX_CRC_Init+0x20>)
 80016ba:	4a07      	ldr	r2, [pc, #28]	; (80016d8 <MX_CRC_Init+0x24>)
 80016bc:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <MX_CRC_Init+0x20>)
 80016c0:	f000 fdab 	bl	800221a <HAL_CRC_Init>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d001      	beq.n	80016ce <MX_CRC_Init+0x1a>
  {
    Error_Handler();
 80016ca:	f000 f969 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80016ce:	bf00      	nop
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000e58 	.word	0x20000e58
 80016d8:	40023000 	.word	0x40023000

080016dc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016e0:	4b12      	ldr	r3, [pc, #72]	; (800172c <MX_I2C1_Init+0x50>)
 80016e2:	4a13      	ldr	r2, [pc, #76]	; (8001730 <MX_I2C1_Init+0x54>)
 80016e4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80016e6:	4b11      	ldr	r3, [pc, #68]	; (800172c <MX_I2C1_Init+0x50>)
 80016e8:	4a12      	ldr	r2, [pc, #72]	; (8001734 <MX_I2C1_Init+0x58>)
 80016ea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80016ec:	4b0f      	ldr	r3, [pc, #60]	; (800172c <MX_I2C1_Init+0x50>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80016f2:	4b0e      	ldr	r3, [pc, #56]	; (800172c <MX_I2C1_Init+0x50>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80016f8:	4b0c      	ldr	r3, [pc, #48]	; (800172c <MX_I2C1_Init+0x50>)
 80016fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80016fe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001700:	4b0a      	ldr	r3, [pc, #40]	; (800172c <MX_I2C1_Init+0x50>)
 8001702:	2200      	movs	r2, #0
 8001704:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001706:	4b09      	ldr	r3, [pc, #36]	; (800172c <MX_I2C1_Init+0x50>)
 8001708:	2200      	movs	r2, #0
 800170a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800170c:	4b07      	ldr	r3, [pc, #28]	; (800172c <MX_I2C1_Init+0x50>)
 800170e:	2200      	movs	r2, #0
 8001710:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <MX_I2C1_Init+0x50>)
 8001714:	2200      	movs	r2, #0
 8001716:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001718:	4804      	ldr	r0, [pc, #16]	; (800172c <MX_I2C1_Init+0x50>)
 800171a:	f001 fb4b 	bl	8002db4 <HAL_I2C_Init>
 800171e:	4603      	mov	r3, r0
 8001720:	2b00      	cmp	r3, #0
 8001722:	d001      	beq.n	8001728 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001724:	f000 f93c 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000e60 	.word	0x20000e60
 8001730:	40005400 	.word	0x40005400
 8001734:	000186a0 	.word	0x000186a0

08001738 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800173c:	4b11      	ldr	r3, [pc, #68]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800173e:	4a12      	ldr	r2, [pc, #72]	; (8001788 <MX_USART2_UART_Init+0x50>)
 8001740:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001742:	4b10      	ldr	r3, [pc, #64]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001744:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001748:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800174a:	4b0e      	ldr	r3, [pc, #56]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800174c:	2200      	movs	r2, #0
 800174e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001750:	4b0c      	ldr	r3, [pc, #48]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001752:	2200      	movs	r2, #0
 8001754:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001756:	4b0b      	ldr	r3, [pc, #44]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001758:	2200      	movs	r2, #0
 800175a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800175c:	4b09      	ldr	r3, [pc, #36]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800175e:	220c      	movs	r2, #12
 8001760:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001762:	4b08      	ldr	r3, [pc, #32]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001764:	2200      	movs	r2, #0
 8001766:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001768:	4b06      	ldr	r3, [pc, #24]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 800176a:	2200      	movs	r2, #0
 800176c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800176e:	4805      	ldr	r0, [pc, #20]	; (8001784 <MX_USART2_UART_Init+0x4c>)
 8001770:	f002 fdf6 	bl	8004360 <HAL_UART_Init>
 8001774:	4603      	mov	r3, r0
 8001776:	2b00      	cmp	r3, #0
 8001778:	d001      	beq.n	800177e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800177a:	f000 f911 	bl	80019a0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800177e:	bf00      	nop
 8001780:	bd80      	pop	{r7, pc}
 8001782:	bf00      	nop
 8001784:	20000eb4 	.word	0x20000eb4
 8001788:	40004400 	.word	0x40004400

0800178c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	607b      	str	r3, [r7, #4]
 8001796:	4b10      	ldr	r3, [pc, #64]	; (80017d8 <MX_DMA_Init+0x4c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a0f      	ldr	r2, [pc, #60]	; (80017d8 <MX_DMA_Init+0x4c>)
 800179c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b0d      	ldr	r3, [pc, #52]	; (80017d8 <MX_DMA_Init+0x4c>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017aa:	607b      	str	r3, [r7, #4]
 80017ac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80017ae:	2200      	movs	r2, #0
 80017b0:	2100      	movs	r1, #0
 80017b2:	2010      	movs	r0, #16
 80017b4:	f000 fcfb 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80017b8:	2010      	movs	r0, #16
 80017ba:	f000 fd14 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80017be:	2200      	movs	r2, #0
 80017c0:	2100      	movs	r1, #0
 80017c2:	2011      	movs	r0, #17
 80017c4:	f000 fcf3 	bl	80021ae <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80017c8:	2011      	movs	r0, #17
 80017ca:	f000 fd0c 	bl	80021e6 <HAL_NVIC_EnableIRQ>

}
 80017ce:	bf00      	nop
 80017d0:	3708      	adds	r7, #8
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023800 	.word	0x40023800

080017dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017e2:	f107 0314 	add.w	r3, r7, #20
 80017e6:	2200      	movs	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
 80017ea:	605a      	str	r2, [r3, #4]
 80017ec:	609a      	str	r2, [r3, #8]
 80017ee:	60da      	str	r2, [r3, #12]
 80017f0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f2:	2300      	movs	r3, #0
 80017f4:	613b      	str	r3, [r7, #16]
 80017f6:	4b2d      	ldr	r3, [pc, #180]	; (80018ac <MX_GPIO_Init+0xd0>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	4a2c      	ldr	r2, [pc, #176]	; (80018ac <MX_GPIO_Init+0xd0>)
 80017fc:	f043 0304 	orr.w	r3, r3, #4
 8001800:	6313      	str	r3, [r2, #48]	; 0x30
 8001802:	4b2a      	ldr	r3, [pc, #168]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	f003 0304 	and.w	r3, r3, #4
 800180a:	613b      	str	r3, [r7, #16]
 800180c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800180e:	2300      	movs	r3, #0
 8001810:	60fb      	str	r3, [r7, #12]
 8001812:	4b26      	ldr	r3, [pc, #152]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001816:	4a25      	ldr	r2, [pc, #148]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001818:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800181c:	6313      	str	r3, [r2, #48]	; 0x30
 800181e:	4b23      	ldr	r3, [pc, #140]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001826:	60fb      	str	r3, [r7, #12]
 8001828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800182a:	2300      	movs	r3, #0
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	4b1f      	ldr	r3, [pc, #124]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001832:	4a1e      	ldr	r2, [pc, #120]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001834:	f043 0301 	orr.w	r3, r3, #1
 8001838:	6313      	str	r3, [r2, #48]	; 0x30
 800183a:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <MX_GPIO_Init+0xd0>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183e:	f003 0301 	and.w	r3, r3, #1
 8001842:	60bb      	str	r3, [r7, #8]
 8001844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4b18      	ldr	r3, [pc, #96]	; (80018ac <MX_GPIO_Init+0xd0>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001850:	f043 0302 	orr.w	r3, r3, #2
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <MX_GPIO_Init+0xd0>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0302 	and.w	r3, r3, #2
 800185e:	607b      	str	r3, [r7, #4]
 8001860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001862:	2200      	movs	r2, #0
 8001864:	2120      	movs	r1, #32
 8001866:	4812      	ldr	r0, [pc, #72]	; (80018b0 <MX_GPIO_Init+0xd4>)
 8001868:	f001 fa8a 	bl	8002d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800186c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001870:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001872:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001876:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001878:	2300      	movs	r3, #0
 800187a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800187c:	f107 0314 	add.w	r3, r7, #20
 8001880:	4619      	mov	r1, r3
 8001882:	480c      	ldr	r0, [pc, #48]	; (80018b4 <MX_GPIO_Init+0xd8>)
 8001884:	f001 f8e8 	bl	8002a58 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001888:	2320      	movs	r3, #32
 800188a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800188c:	2301      	movs	r3, #1
 800188e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001890:	2300      	movs	r3, #0
 8001892:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001894:	2300      	movs	r3, #0
 8001896:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001898:	f107 0314 	add.w	r3, r7, #20
 800189c:	4619      	mov	r1, r3
 800189e:	4804      	ldr	r0, [pc, #16]	; (80018b0 <MX_GPIO_Init+0xd4>)
 80018a0:	f001 f8da 	bl	8002a58 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018a4:	bf00      	nop
 80018a6:	3728      	adds	r7, #40	; 0x28
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40023800 	.word	0x40023800
 80018b0:	40020000 	.word	0x40020000
 80018b4:	40020800 	.word	0x40020800

080018b8 <AI_Init>:

/* USER CODE BEGIN 4 */
static void AI_Init(void)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
  ai_error err;

  /* Create a local array with the addresses of the activations buffers */
  const ai_handle act_addr[] = { activations };
 80018be:	4b17      	ldr	r3, [pc, #92]	; (800191c <AI_Init+0x64>)
 80018c0:	603b      	str	r3, [r7, #0]
  /* Create an instance of the model */
  err = ai_network_create_and_init(&network, act_addr, NULL);
 80018c2:	463b      	mov	r3, r7
 80018c4:	2200      	movs	r2, #0
 80018c6:	4619      	mov	r1, r3
 80018c8:	4815      	ldr	r0, [pc, #84]	; (8001920 <AI_Init+0x68>)
 80018ca:	f004 f95d 	bl	8005b88 <ai_network_create_and_init>
 80018ce:	4603      	mov	r3, r0
 80018d0:	607b      	str	r3, [r7, #4]
  if (err.type != AI_ERROR_NONE) {
 80018d2:	793b      	ldrb	r3, [r7, #4]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d00a      	beq.n	80018ee <AI_Init+0x36>
    printf("ai_network_create error - type=%d code=%d\r\n", err.type, err.code);
 80018d8:	793b      	ldrb	r3, [r7, #4]
 80018da:	4619      	mov	r1, r3
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80018e2:	461a      	mov	r2, r3
 80018e4:	480f      	ldr	r0, [pc, #60]	; (8001924 <AI_Init+0x6c>)
 80018e6:	f009 fc85 	bl	800b1f4 <iprintf>
    Error_Handler();
 80018ea:	f000 f859 	bl	80019a0 <Error_Handler>
  }
  ai_input = ai_network_inputs_get(network, NULL);
 80018ee:	4b0c      	ldr	r3, [pc, #48]	; (8001920 <AI_Init+0x68>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f004 f9bb 	bl	8005c70 <ai_network_inputs_get>
 80018fa:	4603      	mov	r3, r0
 80018fc:	4a0a      	ldr	r2, [pc, #40]	; (8001928 <AI_Init+0x70>)
 80018fe:	6013      	str	r3, [r2, #0]
  ai_output = ai_network_outputs_get(network, NULL);
 8001900:	4b07      	ldr	r3, [pc, #28]	; (8001920 <AI_Init+0x68>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f004 f9cc 	bl	8005ca4 <ai_network_outputs_get>
 800190c:	4603      	mov	r3, r0
 800190e:	4a07      	ldr	r2, [pc, #28]	; (800192c <AI_Init+0x74>)
 8001910:	6013      	str	r3, [r2, #0]
}
 8001912:	bf00      	nop
 8001914:	3708      	adds	r7, #8
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	20001654 	.word	0x20001654
 8001920:	20000fbc 	.word	0x20000fbc
 8001924:	0800e484 	.word	0x0800e484
 8001928:	200043cc 	.word	0x200043cc
 800192c:	200043d0 	.word	0x200043d0

08001930 <AI_Run>:


static void AI_Run(float *pIn, float *pOut)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  ai_i32 batch;
  ai_error err;

  /* Update IO handlers with the data payload */
  ai_input[0].data = AI_HANDLE_PTR(pIn);
 800193a:	4b15      	ldr	r3, [pc, #84]	; (8001990 <AI_Run+0x60>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	605a      	str	r2, [r3, #4]
  ai_output[0].data = AI_HANDLE_PTR(pOut);
 8001942:	4b14      	ldr	r3, [pc, #80]	; (8001994 <AI_Run+0x64>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	683a      	ldr	r2, [r7, #0]
 8001948:	605a      	str	r2, [r3, #4]

  batch = ai_network_run(network, ai_input, ai_output);
 800194a:	4b13      	ldr	r3, [pc, #76]	; (8001998 <AI_Run+0x68>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	4a10      	ldr	r2, [pc, #64]	; (8001990 <AI_Run+0x60>)
 8001950:	6811      	ldr	r1, [r2, #0]
 8001952:	4a10      	ldr	r2, [pc, #64]	; (8001994 <AI_Run+0x64>)
 8001954:	6812      	ldr	r2, [r2, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f004 f9fa 	bl	8005d50 <ai_network_run>
 800195c:	60f8      	str	r0, [r7, #12]
  if (batch != 1) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	2b01      	cmp	r3, #1
 8001962:	d011      	beq.n	8001988 <AI_Run+0x58>
    err = ai_network_get_error(network);
 8001964:	4b0c      	ldr	r3, [pc, #48]	; (8001998 <AI_Run+0x68>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4618      	mov	r0, r3
 800196a:	f004 f8eb 	bl	8005b44 <ai_network_get_error>
 800196e:	4603      	mov	r3, r0
 8001970:	60bb      	str	r3, [r7, #8]
    printf("AI ai_network_run error - type=%d code=%d\r\n", err.type, err.code);
 8001972:	7a3b      	ldrb	r3, [r7, #8]
 8001974:	4619      	mov	r1, r3
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800197c:	461a      	mov	r2, r3
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <AI_Run+0x6c>)
 8001980:	f009 fc38 	bl	800b1f4 <iprintf>
    Error_Handler();
 8001984:	f000 f80c 	bl	80019a0 <Error_Handler>
  }
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200043cc 	.word	0x200043cc
 8001994:	200043d0 	.word	0x200043d0
 8001998:	20000fbc 	.word	0x20000fbc
 800199c:	0800e4b0 	.word	0x0800e4b0

080019a0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019a4:	b672      	cpsid	i
}
 80019a6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019a8:	e7fe      	b.n	80019a8 <Error_Handler+0x8>
	...

080019ac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b082      	sub	sp, #8
 80019b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	607b      	str	r3, [r7, #4]
 80019b6:	4b10      	ldr	r3, [pc, #64]	; (80019f8 <HAL_MspInit+0x4c>)
 80019b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ba:	4a0f      	ldr	r2, [pc, #60]	; (80019f8 <HAL_MspInit+0x4c>)
 80019bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019c0:	6453      	str	r3, [r2, #68]	; 0x44
 80019c2:	4b0d      	ldr	r3, [pc, #52]	; (80019f8 <HAL_MspInit+0x4c>)
 80019c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019ca:	607b      	str	r3, [r7, #4]
 80019cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	603b      	str	r3, [r7, #0]
 80019d2:	4b09      	ldr	r3, [pc, #36]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019d6:	4a08      	ldr	r2, [pc, #32]	; (80019f8 <HAL_MspInit+0x4c>)
 80019d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019dc:	6413      	str	r3, [r2, #64]	; 0x40
 80019de:	4b06      	ldr	r3, [pc, #24]	; (80019f8 <HAL_MspInit+0x4c>)
 80019e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e6:	603b      	str	r3, [r7, #0]
 80019e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019ea:	2007      	movs	r0, #7
 80019ec:	f000 fbd4 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019f0:	bf00      	nop
 80019f2:	3708      	adds	r7, #8
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	40023800 	.word	0x40023800

080019fc <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 80019fc:	b480      	push	{r7}
 80019fe:	b085      	sub	sp, #20
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0b      	ldr	r2, [pc, #44]	; (8001a38 <HAL_CRC_MspInit+0x3c>)
 8001a0a:	4293      	cmp	r3, r2
 8001a0c:	d10d      	bne.n	8001a2a <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001a0e:	2300      	movs	r3, #0
 8001a10:	60fb      	str	r3, [r7, #12]
 8001a12:	4b0a      	ldr	r3, [pc, #40]	; (8001a3c <HAL_CRC_MspInit+0x40>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a16:	4a09      	ldr	r2, [pc, #36]	; (8001a3c <HAL_CRC_MspInit+0x40>)
 8001a18:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a1e:	4b07      	ldr	r3, [pc, #28]	; (8001a3c <HAL_CRC_MspInit+0x40>)
 8001a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8001a2a:	bf00      	nop
 8001a2c:	3714      	adds	r7, #20
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a34:	4770      	bx	lr
 8001a36:	bf00      	nop
 8001a38:	40023000 	.word	0x40023000
 8001a3c:	40023800 	.word	0x40023800

08001a40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b08a      	sub	sp, #40	; 0x28
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a48:	f107 0314 	add.w	r3, r7, #20
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	4a19      	ldr	r2, [pc, #100]	; (8001ac4 <HAL_I2C_MspInit+0x84>)
 8001a5e:	4293      	cmp	r3, r2
 8001a60:	d12c      	bne.n	8001abc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a62:	2300      	movs	r3, #0
 8001a64:	613b      	str	r3, [r7, #16]
 8001a66:	4b18      	ldr	r3, [pc, #96]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	4a17      	ldr	r2, [pc, #92]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001a6c:	f043 0302 	orr.w	r3, r3, #2
 8001a70:	6313      	str	r3, [r2, #48]	; 0x30
 8001a72:	4b15      	ldr	r3, [pc, #84]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a76:	f003 0302 	and.w	r3, r3, #2
 8001a7a:	613b      	str	r3, [r7, #16]
 8001a7c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a7e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a84:	2312      	movs	r3, #18
 8001a86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a90:	2304      	movs	r3, #4
 8001a92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a94:	f107 0314 	add.w	r3, r7, #20
 8001a98:	4619      	mov	r1, r3
 8001a9a:	480c      	ldr	r0, [pc, #48]	; (8001acc <HAL_I2C_MspInit+0x8c>)
 8001a9c:	f000 ffdc 	bl	8002a58 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	4b08      	ldr	r3, [pc, #32]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa8:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001aaa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001aae:	6413      	str	r3, [r2, #64]	; 0x40
 8001ab0:	4b05      	ldr	r3, [pc, #20]	; (8001ac8 <HAL_I2C_MspInit+0x88>)
 8001ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001ab8:	60fb      	str	r3, [r7, #12]
 8001aba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40005400 	.word	0x40005400
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40020400 	.word	0x40020400

08001ad0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b08a      	sub	sp, #40	; 0x28
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ad8:	f107 0314 	add.w	r3, r7, #20
 8001adc:	2200      	movs	r2, #0
 8001ade:	601a      	str	r2, [r3, #0]
 8001ae0:	605a      	str	r2, [r3, #4]
 8001ae2:	609a      	str	r2, [r3, #8]
 8001ae4:	60da      	str	r2, [r3, #12]
 8001ae6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	4a4b      	ldr	r2, [pc, #300]	; (8001c1c <HAL_UART_MspInit+0x14c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	f040 8090 	bne.w	8001c14 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001af4:	2300      	movs	r3, #0
 8001af6:	613b      	str	r3, [r7, #16]
 8001af8:	4b49      	ldr	r3, [pc, #292]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afc:	4a48      	ldr	r2, [pc, #288]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001afe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001b02:	6413      	str	r3, [r2, #64]	; 0x40
 8001b04:	4b46      	ldr	r3, [pc, #280]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b0c:	613b      	str	r3, [r7, #16]
 8001b0e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
 8001b14:	4b42      	ldr	r3, [pc, #264]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b18:	4a41      	ldr	r2, [pc, #260]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001b20:	4b3f      	ldr	r3, [pc, #252]	; (8001c20 <HAL_UART_MspInit+0x150>)
 8001b22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b24:	f003 0301 	and.w	r3, r3, #1
 8001b28:	60fb      	str	r3, [r7, #12]
 8001b2a:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b2c:	230c      	movs	r3, #12
 8001b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b30:	2302      	movs	r3, #2
 8001b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b34:	2300      	movs	r3, #0
 8001b36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b38:	2303      	movs	r3, #3
 8001b3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b3c:	2307      	movs	r3, #7
 8001b3e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b40:	f107 0314 	add.w	r3, r7, #20
 8001b44:	4619      	mov	r1, r3
 8001b46:	4837      	ldr	r0, [pc, #220]	; (8001c24 <HAL_UART_MspInit+0x154>)
 8001b48:	f000 ff86 	bl	8002a58 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b4c:	4b36      	ldr	r3, [pc, #216]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b4e:	4a37      	ldr	r2, [pc, #220]	; (8001c2c <HAL_UART_MspInit+0x15c>)
 8001b50:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b52:	4b35      	ldr	r3, [pc, #212]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b54:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b58:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b5a:	4b33      	ldr	r3, [pc, #204]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b60:	4b31      	ldr	r3, [pc, #196]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b66:	4b30      	ldr	r3, [pc, #192]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b6c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b6e:	4b2e      	ldr	r3, [pc, #184]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b74:	4b2c      	ldr	r3, [pc, #176]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b7a:	4b2b      	ldr	r3, [pc, #172]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b80:	4b29      	ldr	r3, [pc, #164]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b82:	2200      	movs	r2, #0
 8001b84:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b86:	4b28      	ldr	r3, [pc, #160]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b88:	2200      	movs	r2, #0
 8001b8a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b8c:	4826      	ldr	r0, [pc, #152]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001b8e:	f000 fb61 	bl	8002254 <HAL_DMA_Init>
 8001b92:	4603      	mov	r3, r0
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d001      	beq.n	8001b9c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001b98:	f7ff ff02 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a22      	ldr	r2, [pc, #136]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001ba0:	63da      	str	r2, [r3, #60]	; 0x3c
 8001ba2:	4a21      	ldr	r2, [pc, #132]	; (8001c28 <HAL_UART_MspInit+0x158>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ba8:	4b21      	ldr	r3, [pc, #132]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001baa:	4a22      	ldr	r2, [pc, #136]	; (8001c34 <HAL_UART_MspInit+0x164>)
 8001bac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001bae:	4b20      	ldr	r3, [pc, #128]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bb0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001bb4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001bb6:	4b1e      	ldr	r3, [pc, #120]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bb8:	2240      	movs	r2, #64	; 0x40
 8001bba:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001bbc:	4b1c      	ldr	r3, [pc, #112]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001bc2:	4b1b      	ldr	r3, [pc, #108]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001bc8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001bca:	4b19      	ldr	r3, [pc, #100]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001bd0:	4b17      	ldr	r3, [pc, #92]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001bd6:	4b16      	ldr	r3, [pc, #88]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001bdc:	4b14      	ldr	r3, [pc, #80]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001be2:	4b13      	ldr	r3, [pc, #76]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001be4:	2200      	movs	r2, #0
 8001be6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001be8:	4811      	ldr	r0, [pc, #68]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bea:	f000 fb33 	bl	8002254 <HAL_DMA_Init>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8001bf4:	f7ff fed4 	bl	80019a0 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	4a0d      	ldr	r2, [pc, #52]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001bfc:	639a      	str	r2, [r3, #56]	; 0x38
 8001bfe:	4a0c      	ldr	r2, [pc, #48]	; (8001c30 <HAL_UART_MspInit+0x160>)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c04:	2200      	movs	r2, #0
 8001c06:	2100      	movs	r1, #0
 8001c08:	2026      	movs	r0, #38	; 0x26
 8001c0a:	f000 fad0 	bl	80021ae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001c0e:	2026      	movs	r0, #38	; 0x26
 8001c10:	f000 fae9 	bl	80021e6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	40004400 	.word	0x40004400
 8001c20:	40023800 	.word	0x40023800
 8001c24:	40020000 	.word	0x40020000
 8001c28:	20000efc 	.word	0x20000efc
 8001c2c:	40026088 	.word	0x40026088
 8001c30:	20000f5c 	.word	0x20000f5c
 8001c34:	400260a0 	.word	0x400260a0

08001c38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c3c:	e7fe      	b.n	8001c3c <NMI_Handler+0x4>

08001c3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c3e:	b480      	push	{r7}
 8001c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c42:	e7fe      	b.n	8001c42 <HardFault_Handler+0x4>

08001c44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001c48:	e7fe      	b.n	8001c48 <MemManage_Handler+0x4>

08001c4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c4a:	b480      	push	{r7}
 8001c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001c4e:	e7fe      	b.n	8001c4e <BusFault_Handler+0x4>

08001c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c50:	b480      	push	{r7}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001c54:	e7fe      	b.n	8001c54 <UsageFault_Handler+0x4>

08001c56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001c56:	b480      	push	{r7}
 8001c58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001c5a:	bf00      	nop
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr

08001c64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c70:	4770      	bx	lr

08001c72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c72:	b480      	push	{r7}
 8001c74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c84:	f000 f974 	bl	8001f70 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001c8c:	b580      	push	{r7, lr}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001c90:	4802      	ldr	r0, [pc, #8]	; (8001c9c <DMA1_Stream5_IRQHandler+0x10>)
 8001c92:	f000 fc77 	bl	8002584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001c96:	bf00      	nop
 8001c98:	bd80      	pop	{r7, pc}
 8001c9a:	bf00      	nop
 8001c9c:	20000efc 	.word	0x20000efc

08001ca0 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001ca4:	4802      	ldr	r0, [pc, #8]	; (8001cb0 <DMA1_Stream6_IRQHandler+0x10>)
 8001ca6:	f000 fc6d 	bl	8002584 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001caa:	bf00      	nop
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20000f5c 	.word	0x20000f5c

08001cb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001cb8:	4802      	ldr	r0, [pc, #8]	; (8001cc4 <USART2_IRQHandler+0x10>)
 8001cba:	f002 fc6f 	bl	800459c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000eb4 	.word	0x20000eb4

08001cc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return 1;
 8001ccc:	2301      	movs	r3, #1
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr

08001cd8 <_kill>:

int _kill(int pid, int sig)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001ce2:	f009 fc95 	bl	800b610 <__errno>
 8001ce6:	4603      	mov	r3, r0
 8001ce8:	2216      	movs	r2, #22
 8001cea:	601a      	str	r2, [r3, #0]
  return -1;
 8001cec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <_exit>:

void _exit (int status)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d00:	f04f 31ff 	mov.w	r1, #4294967295
 8001d04:	6878      	ldr	r0, [r7, #4]
 8001d06:	f7ff ffe7 	bl	8001cd8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d0a:	e7fe      	b.n	8001d0a <_exit+0x12>

08001d0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d0c:	b580      	push	{r7, lr}
 8001d0e:	b086      	sub	sp, #24
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	60f8      	str	r0, [r7, #12]
 8001d14:	60b9      	str	r1, [r7, #8]
 8001d16:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d18:	2300      	movs	r3, #0
 8001d1a:	617b      	str	r3, [r7, #20]
 8001d1c:	e00a      	b.n	8001d34 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001d1e:	f3af 8000 	nop.w
 8001d22:	4601      	mov	r1, r0
 8001d24:	68bb      	ldr	r3, [r7, #8]
 8001d26:	1c5a      	adds	r2, r3, #1
 8001d28:	60ba      	str	r2, [r7, #8]
 8001d2a:	b2ca      	uxtb	r2, r1
 8001d2c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	3301      	adds	r3, #1
 8001d32:	617b      	str	r3, [r7, #20]
 8001d34:	697a      	ldr	r2, [r7, #20]
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	dbf0      	blt.n	8001d1e <_read+0x12>
  }

  return len;
 8001d3c:	687b      	ldr	r3, [r7, #4]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}

08001d46 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001d46:	b580      	push	{r7, lr}
 8001d48:	b086      	sub	sp, #24
 8001d4a:	af00      	add	r7, sp, #0
 8001d4c:	60f8      	str	r0, [r7, #12]
 8001d4e:	60b9      	str	r1, [r7, #8]
 8001d50:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d52:	2300      	movs	r3, #0
 8001d54:	617b      	str	r3, [r7, #20]
 8001d56:	e009      	b.n	8001d6c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001d58:	68bb      	ldr	r3, [r7, #8]
 8001d5a:	1c5a      	adds	r2, r3, #1
 8001d5c:	60ba      	str	r2, [r7, #8]
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	4618      	mov	r0, r3
 8001d62:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d66:	697b      	ldr	r3, [r7, #20]
 8001d68:	3301      	adds	r3, #1
 8001d6a:	617b      	str	r3, [r7, #20]
 8001d6c:	697a      	ldr	r2, [r7, #20]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	429a      	cmp	r2, r3
 8001d72:	dbf1      	blt.n	8001d58 <_write+0x12>
  }
  return len;
 8001d74:	687b      	ldr	r3, [r7, #4]
}
 8001d76:	4618      	mov	r0, r3
 8001d78:	3718      	adds	r7, #24
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bd80      	pop	{r7, pc}

08001d7e <_close>:

int _close(int file)
{
 8001d7e:	b480      	push	{r7}
 8001d80:	b083      	sub	sp, #12
 8001d82:	af00      	add	r7, sp, #0
 8001d84:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d86:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001da6:	605a      	str	r2, [r3, #4]
  return 0;
 8001da8:	2300      	movs	r3, #0
}
 8001daa:	4618      	mov	r0, r3
 8001dac:	370c      	adds	r7, #12
 8001dae:	46bd      	mov	sp, r7
 8001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db4:	4770      	bx	lr

08001db6 <_isatty>:

int _isatty(int file)
{
 8001db6:	b480      	push	{r7}
 8001db8:	b083      	sub	sp, #12
 8001dba:	af00      	add	r7, sp, #0
 8001dbc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001dbe:	2301      	movs	r3, #1
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr

08001dcc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	b085      	sub	sp, #20
 8001dd0:	af00      	add	r7, sp, #0
 8001dd2:	60f8      	str	r0, [r7, #12]
 8001dd4:	60b9      	str	r1, [r7, #8]
 8001dd6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001dd8:	2300      	movs	r3, #0
}
 8001dda:	4618      	mov	r0, r3
 8001ddc:	3714      	adds	r7, #20
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
	...

08001de8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b086      	sub	sp, #24
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001df0:	4a14      	ldr	r2, [pc, #80]	; (8001e44 <_sbrk+0x5c>)
 8001df2:	4b15      	ldr	r3, [pc, #84]	; (8001e48 <_sbrk+0x60>)
 8001df4:	1ad3      	subs	r3, r2, r3
 8001df6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001df8:	697b      	ldr	r3, [r7, #20]
 8001dfa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001dfc:	4b13      	ldr	r3, [pc, #76]	; (8001e4c <_sbrk+0x64>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d102      	bne.n	8001e0a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e04:	4b11      	ldr	r3, [pc, #68]	; (8001e4c <_sbrk+0x64>)
 8001e06:	4a12      	ldr	r2, [pc, #72]	; (8001e50 <_sbrk+0x68>)
 8001e08:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e0a:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <_sbrk+0x64>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	4413      	add	r3, r2
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	429a      	cmp	r2, r3
 8001e16:	d207      	bcs.n	8001e28 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e18:	f009 fbfa 	bl	800b610 <__errno>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	220c      	movs	r2, #12
 8001e20:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001e22:	f04f 33ff 	mov.w	r3, #4294967295
 8001e26:	e009      	b.n	8001e3c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001e28:	4b08      	ldr	r3, [pc, #32]	; (8001e4c <_sbrk+0x64>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <_sbrk+0x64>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4413      	add	r3, r2
 8001e36:	4a05      	ldr	r2, [pc, #20]	; (8001e4c <_sbrk+0x64>)
 8001e38:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001e3a:	68fb      	ldr	r3, [r7, #12]
}
 8001e3c:	4618      	mov	r0, r3
 8001e3e:	3718      	adds	r7, #24
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20020000 	.word	0x20020000
 8001e48:	00000800 	.word	0x00000800
 8001e4c:	200043e4 	.word	0x200043e4
 8001e50:	200045d0 	.word	0x200045d0

08001e54 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e58:	4b06      	ldr	r3, [pc, #24]	; (8001e74 <SystemInit+0x20>)
 8001e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e5e:	4a05      	ldr	r2, [pc, #20]	; (8001e74 <SystemInit+0x20>)
 8001e60:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e68:	bf00      	nop
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e70:	4770      	bx	lr
 8001e72:	bf00      	nop
 8001e74:	e000ed00 	.word	0xe000ed00

08001e78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001e78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001eb0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001e7c:	f7ff ffea 	bl	8001e54 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e80:	480c      	ldr	r0, [pc, #48]	; (8001eb4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001e82:	490d      	ldr	r1, [pc, #52]	; (8001eb8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001e84:	4a0d      	ldr	r2, [pc, #52]	; (8001ebc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001e86:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e88:	e002      	b.n	8001e90 <LoopCopyDataInit>

08001e8a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e8a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e8c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e8e:	3304      	adds	r3, #4

08001e90 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e90:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e92:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e94:	d3f9      	bcc.n	8001e8a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e96:	4a0a      	ldr	r2, [pc, #40]	; (8001ec0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e98:	4c0a      	ldr	r4, [pc, #40]	; (8001ec4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e9a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e9c:	e001      	b.n	8001ea2 <LoopFillZerobss>

08001e9e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e9e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ea0:	3204      	adds	r2, #4

08001ea2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ea2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ea4:	d3fb      	bcc.n	8001e9e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001ea6:	f009 fbb9 	bl	800b61c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eaa:	f7ff fb17 	bl	80014dc <main>
  bx  lr    
 8001eae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001eb0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001eb4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001eb8:	20000e34 	.word	0x20000e34
  ldr r2, =_sidata
 8001ebc:	08045fcc 	.word	0x08045fcc
  ldr r2, =_sbss
 8001ec0:	20000e34 	.word	0x20000e34
  ldr r4, =_ebss
 8001ec4:	200045cc 	.word	0x200045cc

08001ec8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ec8:	e7fe      	b.n	8001ec8 <ADC_IRQHandler>
	...

08001ecc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ed0:	4b0e      	ldr	r3, [pc, #56]	; (8001f0c <HAL_Init+0x40>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	4a0d      	ldr	r2, [pc, #52]	; (8001f0c <HAL_Init+0x40>)
 8001ed6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001edc:	4b0b      	ldr	r3, [pc, #44]	; (8001f0c <HAL_Init+0x40>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0a      	ldr	r2, [pc, #40]	; (8001f0c <HAL_Init+0x40>)
 8001ee2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ee6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ee8:	4b08      	ldr	r3, [pc, #32]	; (8001f0c <HAL_Init+0x40>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a07      	ldr	r2, [pc, #28]	; (8001f0c <HAL_Init+0x40>)
 8001eee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ef2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ef4:	2003      	movs	r0, #3
 8001ef6:	f000 f94f 	bl	8002198 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001efa:	2000      	movs	r0, #0
 8001efc:	f000 f808 	bl	8001f10 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f00:	f7ff fd54 	bl	80019ac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f04:	2300      	movs	r3, #0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	bd80      	pop	{r7, pc}
 8001f0a:	bf00      	nop
 8001f0c:	40023c00 	.word	0x40023c00

08001f10 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <HAL_InitTick+0x54>)
 8001f1a:	681a      	ldr	r2, [r3, #0]
 8001f1c:	4b12      	ldr	r3, [pc, #72]	; (8001f68 <HAL_InitTick+0x58>)
 8001f1e:	781b      	ldrb	r3, [r3, #0]
 8001f20:	4619      	mov	r1, r3
 8001f22:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f26:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f967 	bl	8002202 <HAL_SYSTICK_Config>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	e00e      	b.n	8001f5c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b0f      	cmp	r3, #15
 8001f42:	d80a      	bhi.n	8001f5a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f44:	2200      	movs	r2, #0
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	f04f 30ff 	mov.w	r0, #4294967295
 8001f4c:	f000 f92f 	bl	80021ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f50:	4a06      	ldr	r2, [pc, #24]	; (8001f6c <HAL_InitTick+0x5c>)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	e000      	b.n	8001f5c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
}
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	3708      	adds	r7, #8
 8001f60:	46bd      	mov	sp, r7
 8001f62:	bd80      	pop	{r7, pc}
 8001f64:	20000014 	.word	0x20000014
 8001f68:	2000001c 	.word	0x2000001c
 8001f6c:	20000018 	.word	0x20000018

08001f70 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f74:	4b06      	ldr	r3, [pc, #24]	; (8001f90 <HAL_IncTick+0x20>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <HAL_IncTick+0x24>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a04      	ldr	r2, [pc, #16]	; (8001f94 <HAL_IncTick+0x24>)
 8001f82:	6013      	str	r3, [r2, #0]
}
 8001f84:	bf00      	nop
 8001f86:	46bd      	mov	sp, r7
 8001f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8c:	4770      	bx	lr
 8001f8e:	bf00      	nop
 8001f90:	2000001c 	.word	0x2000001c
 8001f94:	200043e8 	.word	0x200043e8

08001f98 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f9c:	4b03      	ldr	r3, [pc, #12]	; (8001fac <HAL_GetTick+0x14>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	200043e8 	.word	0x200043e8

08001fb0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001fb8:	f7ff ffee 	bl	8001f98 <HAL_GetTick>
 8001fbc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d005      	beq.n	8001fd6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b0a      	ldr	r3, [pc, #40]	; (8001ff4 <HAL_Delay+0x44>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	461a      	mov	r2, r3
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	4413      	add	r3, r2
 8001fd4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001fd6:	bf00      	nop
 8001fd8:	f7ff ffde 	bl	8001f98 <HAL_GetTick>
 8001fdc:	4602      	mov	r2, r0
 8001fde:	68bb      	ldr	r3, [r7, #8]
 8001fe0:	1ad3      	subs	r3, r2, r3
 8001fe2:	68fa      	ldr	r2, [r7, #12]
 8001fe4:	429a      	cmp	r2, r3
 8001fe6:	d8f7      	bhi.n	8001fd8 <HAL_Delay+0x28>
  {
  }
}
 8001fe8:	bf00      	nop
 8001fea:	bf00      	nop
 8001fec:	3710      	adds	r7, #16
 8001fee:	46bd      	mov	sp, r7
 8001ff0:	bd80      	pop	{r7, pc}
 8001ff2:	bf00      	nop
 8001ff4:	2000001c 	.word	0x2000001c

08001ff8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	b085      	sub	sp, #20
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f003 0307 	and.w	r3, r3, #7
 8002006:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002008:	4b0c      	ldr	r3, [pc, #48]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002014:	4013      	ands	r3, r2
 8002016:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002020:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002024:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002028:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800202a:	4a04      	ldr	r2, [pc, #16]	; (800203c <__NVIC_SetPriorityGrouping+0x44>)
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	60d3      	str	r3, [r2, #12]
}
 8002030:	bf00      	nop
 8002032:	3714      	adds	r7, #20
 8002034:	46bd      	mov	sp, r7
 8002036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203a:	4770      	bx	lr
 800203c:	e000ed00 	.word	0xe000ed00

08002040 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002044:	4b04      	ldr	r3, [pc, #16]	; (8002058 <__NVIC_GetPriorityGrouping+0x18>)
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	f003 0307 	and.w	r3, r3, #7
}
 800204e:	4618      	mov	r0, r3
 8002050:	46bd      	mov	sp, r7
 8002052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002056:	4770      	bx	lr
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	4603      	mov	r3, r0
 8002064:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800206a:	2b00      	cmp	r3, #0
 800206c:	db0b      	blt.n	8002086 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800206e:	79fb      	ldrb	r3, [r7, #7]
 8002070:	f003 021f 	and.w	r2, r3, #31
 8002074:	4907      	ldr	r1, [pc, #28]	; (8002094 <__NVIC_EnableIRQ+0x38>)
 8002076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	2001      	movs	r0, #1
 800207e:	fa00 f202 	lsl.w	r2, r0, r2
 8002082:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002086:	bf00      	nop
 8002088:	370c      	adds	r7, #12
 800208a:	46bd      	mov	sp, r7
 800208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002090:	4770      	bx	lr
 8002092:	bf00      	nop
 8002094:	e000e100 	.word	0xe000e100

08002098 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002098:	b480      	push	{r7}
 800209a:	b083      	sub	sp, #12
 800209c:	af00      	add	r7, sp, #0
 800209e:	4603      	mov	r3, r0
 80020a0:	6039      	str	r1, [r7, #0]
 80020a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	db0a      	blt.n	80020c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	b2da      	uxtb	r2, r3
 80020b0:	490c      	ldr	r1, [pc, #48]	; (80020e4 <__NVIC_SetPriority+0x4c>)
 80020b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b6:	0112      	lsls	r2, r2, #4
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	440b      	add	r3, r1
 80020bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80020c0:	e00a      	b.n	80020d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	b2da      	uxtb	r2, r3
 80020c6:	4908      	ldr	r1, [pc, #32]	; (80020e8 <__NVIC_SetPriority+0x50>)
 80020c8:	79fb      	ldrb	r3, [r7, #7]
 80020ca:	f003 030f 	and.w	r3, r3, #15
 80020ce:	3b04      	subs	r3, #4
 80020d0:	0112      	lsls	r2, r2, #4
 80020d2:	b2d2      	uxtb	r2, r2
 80020d4:	440b      	add	r3, r1
 80020d6:	761a      	strb	r2, [r3, #24]
}
 80020d8:	bf00      	nop
 80020da:	370c      	adds	r7, #12
 80020dc:	46bd      	mov	sp, r7
 80020de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e2:	4770      	bx	lr
 80020e4:	e000e100 	.word	0xe000e100
 80020e8:	e000ed00 	.word	0xe000ed00

080020ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f003 0307 	and.w	r3, r3, #7
 80020fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	f1c3 0307 	rsb	r3, r3, #7
 8002106:	2b04      	cmp	r3, #4
 8002108:	bf28      	it	cs
 800210a:	2304      	movcs	r3, #4
 800210c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800210e:	69fb      	ldr	r3, [r7, #28]
 8002110:	3304      	adds	r3, #4
 8002112:	2b06      	cmp	r3, #6
 8002114:	d902      	bls.n	800211c <NVIC_EncodePriority+0x30>
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	3b03      	subs	r3, #3
 800211a:	e000      	b.n	800211e <NVIC_EncodePriority+0x32>
 800211c:	2300      	movs	r3, #0
 800211e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002120:	f04f 32ff 	mov.w	r2, #4294967295
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	fa02 f303 	lsl.w	r3, r2, r3
 800212a:	43da      	mvns	r2, r3
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	401a      	ands	r2, r3
 8002130:	697b      	ldr	r3, [r7, #20]
 8002132:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002134:	f04f 31ff 	mov.w	r1, #4294967295
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	fa01 f303 	lsl.w	r3, r1, r3
 800213e:	43d9      	mvns	r1, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002144:	4313      	orrs	r3, r2
         );
}
 8002146:	4618      	mov	r0, r3
 8002148:	3724      	adds	r7, #36	; 0x24
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
	...

08002154 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	3b01      	subs	r3, #1
 8002160:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002164:	d301      	bcc.n	800216a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002166:	2301      	movs	r3, #1
 8002168:	e00f      	b.n	800218a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800216a:	4a0a      	ldr	r2, [pc, #40]	; (8002194 <SysTick_Config+0x40>)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	3b01      	subs	r3, #1
 8002170:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002172:	210f      	movs	r1, #15
 8002174:	f04f 30ff 	mov.w	r0, #4294967295
 8002178:	f7ff ff8e 	bl	8002098 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800217c:	4b05      	ldr	r3, [pc, #20]	; (8002194 <SysTick_Config+0x40>)
 800217e:	2200      	movs	r2, #0
 8002180:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002182:	4b04      	ldr	r3, [pc, #16]	; (8002194 <SysTick_Config+0x40>)
 8002184:	2207      	movs	r2, #7
 8002186:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3708      	adds	r7, #8
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
 8002192:	bf00      	nop
 8002194:	e000e010 	.word	0xe000e010

08002198 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80021a0:	6878      	ldr	r0, [r7, #4]
 80021a2:	f7ff ff29 	bl	8001ff8 <__NVIC_SetPriorityGrouping>
}
 80021a6:	bf00      	nop
 80021a8:	3708      	adds	r7, #8
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80021ae:	b580      	push	{r7, lr}
 80021b0:	b086      	sub	sp, #24
 80021b2:	af00      	add	r7, sp, #0
 80021b4:	4603      	mov	r3, r0
 80021b6:	60b9      	str	r1, [r7, #8]
 80021b8:	607a      	str	r2, [r7, #4]
 80021ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80021bc:	2300      	movs	r3, #0
 80021be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80021c0:	f7ff ff3e 	bl	8002040 <__NVIC_GetPriorityGrouping>
 80021c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80021c6:	687a      	ldr	r2, [r7, #4]
 80021c8:	68b9      	ldr	r1, [r7, #8]
 80021ca:	6978      	ldr	r0, [r7, #20]
 80021cc:	f7ff ff8e 	bl	80020ec <NVIC_EncodePriority>
 80021d0:	4602      	mov	r2, r0
 80021d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80021d6:	4611      	mov	r1, r2
 80021d8:	4618      	mov	r0, r3
 80021da:	f7ff ff5d 	bl	8002098 <__NVIC_SetPriority>
}
 80021de:	bf00      	nop
 80021e0:	3718      	adds	r7, #24
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b082      	sub	sp, #8
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	4603      	mov	r3, r0
 80021ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80021f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021f4:	4618      	mov	r0, r3
 80021f6:	f7ff ff31 	bl	800205c <__NVIC_EnableIRQ>
}
 80021fa:	bf00      	nop
 80021fc:	3708      	adds	r7, #8
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}

08002202 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002202:	b580      	push	{r7, lr}
 8002204:	b082      	sub	sp, #8
 8002206:	af00      	add	r7, sp, #0
 8002208:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff ffa2 	bl	8002154 <SysTick_Config>
 8002210:	4603      	mov	r3, r0
}
 8002212:	4618      	mov	r0, r3
 8002214:	3708      	adds	r7, #8
 8002216:	46bd      	mov	sp, r7
 8002218:	bd80      	pop	{r7, pc}

0800221a <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800221a:	b580      	push	{r7, lr}
 800221c:	b082      	sub	sp, #8
 800221e:	af00      	add	r7, sp, #0
 8002220:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b00      	cmp	r3, #0
 8002226:	d101      	bne.n	800222c <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e00e      	b.n	800224a <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	795b      	ldrb	r3, [r3, #5]
 8002230:	b2db      	uxtb	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d105      	bne.n	8002242 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	2200      	movs	r2, #0
 800223a:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 800223c:	6878      	ldr	r0, [r7, #4]
 800223e:	f7ff fbdd 	bl	80019fc <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
	...

08002254 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b086      	sub	sp, #24
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800225c:	2300      	movs	r3, #0
 800225e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002260:	f7ff fe9a 	bl	8001f98 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d101      	bne.n	8002270 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e099      	b.n	80023a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2202      	movs	r2, #2
 8002274:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f022 0201 	bic.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002290:	e00f      	b.n	80022b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002292:	f7ff fe81 	bl	8001f98 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	2b05      	cmp	r3, #5
 800229e:	d908      	bls.n	80022b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2220      	movs	r2, #32
 80022a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	2203      	movs	r2, #3
 80022aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80022ae:	2303      	movs	r3, #3
 80022b0:	e078      	b.n	80023a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 0301 	and.w	r3, r3, #1
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1e8      	bne.n	8002292 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	4b38      	ldr	r3, [pc, #224]	; (80023ac <HAL_DMA_Init+0x158>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	685a      	ldr	r2, [r3, #4]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	691b      	ldr	r3, [r3, #16]
 80022e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80022ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80022f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6a1b      	ldr	r3, [r3, #32]
 80022fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80022fe:	697a      	ldr	r2, [r7, #20]
 8002300:	4313      	orrs	r3, r2
 8002302:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002308:	2b04      	cmp	r3, #4
 800230a:	d107      	bne.n	800231c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002314:	4313      	orrs	r3, r2
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	4313      	orrs	r3, r2
 800231a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	697a      	ldr	r2, [r7, #20]
 8002322:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800232c:	697b      	ldr	r3, [r7, #20]
 800232e:	f023 0307 	bic.w	r3, r3, #7
 8002332:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002338:	697a      	ldr	r2, [r7, #20]
 800233a:	4313      	orrs	r3, r2
 800233c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002342:	2b04      	cmp	r3, #4
 8002344:	d117      	bne.n	8002376 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800234a:	697a      	ldr	r2, [r7, #20]
 800234c:	4313      	orrs	r3, r2
 800234e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002354:	2b00      	cmp	r3, #0
 8002356:	d00e      	beq.n	8002376 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002358:	6878      	ldr	r0, [r7, #4]
 800235a:	f000 fb01 	bl	8002960 <DMA_CheckFifoParam>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d008      	beq.n	8002376 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2240      	movs	r2, #64	; 0x40
 8002368:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002372:	2301      	movs	r3, #1
 8002374:	e016      	b.n	80023a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	697a      	ldr	r2, [r7, #20]
 800237c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f000 fab8 	bl	80028f4 <DMA_CalcBaseAndBitshift>
 8002384:	4603      	mov	r3, r0
 8002386:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238c:	223f      	movs	r2, #63	; 0x3f
 800238e:	409a      	lsls	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	2200      	movs	r2, #0
 8002398:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80023a2:	2300      	movs	r3, #0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3718      	adds	r7, #24
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	f010803f 	.word	0xf010803f

080023b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b086      	sub	sp, #24
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	60b9      	str	r1, [r7, #8]
 80023ba:	607a      	str	r2, [r7, #4]
 80023bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023be:	2300      	movs	r3, #0
 80023c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d101      	bne.n	80023d6 <HAL_DMA_Start_IT+0x26>
 80023d2:	2302      	movs	r3, #2
 80023d4:	e040      	b.n	8002458 <HAL_DMA_Start_IT+0xa8>
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	2201      	movs	r2, #1
 80023da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80023e4:	b2db      	uxtb	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d12f      	bne.n	800244a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	2202      	movs	r2, #2
 80023ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	2200      	movs	r2, #0
 80023f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	687a      	ldr	r2, [r7, #4]
 80023fc:	68b9      	ldr	r1, [r7, #8]
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	f000 fa4a 	bl	8002898 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002408:	223f      	movs	r2, #63	; 0x3f
 800240a:	409a      	lsls	r2, r3
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	681a      	ldr	r2, [r3, #0]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f042 0216 	orr.w	r2, r2, #22
 800241e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	2b00      	cmp	r3, #0
 8002426:	d007      	beq.n	8002438 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	681a      	ldr	r2, [r3, #0]
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f042 0208 	orr.w	r2, r2, #8
 8002436:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f042 0201 	orr.w	r2, r2, #1
 8002446:	601a      	str	r2, [r3, #0]
 8002448:	e005      	b.n	8002456 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	2200      	movs	r2, #0
 800244e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002452:	2302      	movs	r3, #2
 8002454:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002456:	7dfb      	ldrb	r3, [r7, #23]
}
 8002458:	4618      	mov	r0, r3
 800245a:	3718      	adds	r7, #24
 800245c:	46bd      	mov	sp, r7
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800246c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800246e:	f7ff fd93 	bl	8001f98 <HAL_GetTick>
 8002472:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800247a:	b2db      	uxtb	r3, r3
 800247c:	2b02      	cmp	r3, #2
 800247e:	d008      	beq.n	8002492 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2280      	movs	r2, #128	; 0x80
 8002484:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e052      	b.n	8002538 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	681a      	ldr	r2, [r3, #0]
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f022 0216 	bic.w	r2, r2, #22
 80024a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	695a      	ldr	r2, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80024b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d103      	bne.n	80024c2 <HAL_DMA_Abort+0x62>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d007      	beq.n	80024d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	681a      	ldr	r2, [r3, #0]
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f022 0208 	bic.w	r2, r2, #8
 80024d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	681a      	ldr	r2, [r3, #0]
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f022 0201 	bic.w	r2, r2, #1
 80024e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024e2:	e013      	b.n	800250c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024e4:	f7ff fd58 	bl	8001f98 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b05      	cmp	r3, #5
 80024f0:	d90c      	bls.n	800250c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	2220      	movs	r2, #32
 80024f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2203      	movs	r2, #3
 80024fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	2200      	movs	r2, #0
 8002504:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002508:	2303      	movs	r3, #3
 800250a:	e015      	b.n	8002538 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	f003 0301 	and.w	r3, r3, #1
 8002516:	2b00      	cmp	r3, #0
 8002518:	d1e4      	bne.n	80024e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800251e:	223f      	movs	r2, #63	; 0x3f
 8002520:	409a      	lsls	r2, r3
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2201      	movs	r2, #1
 800252a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002536:	2300      	movs	r3, #0
}
 8002538:	4618      	mov	r0, r3
 800253a:	3710      	adds	r7, #16
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b02      	cmp	r3, #2
 8002552:	d004      	beq.n	800255e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800255a:	2301      	movs	r3, #1
 800255c:	e00c      	b.n	8002578 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2205      	movs	r2, #5
 8002562:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	681a      	ldr	r2, [r3, #0]
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0201 	bic.w	r2, r2, #1
 8002574:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002576:	2300      	movs	r3, #0
}
 8002578:	4618      	mov	r0, r3
 800257a:	370c      	adds	r7, #12
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b086      	sub	sp, #24
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002590:	4b8e      	ldr	r3, [pc, #568]	; (80027cc <HAL_DMA_IRQHandler+0x248>)
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	4a8e      	ldr	r2, [pc, #568]	; (80027d0 <HAL_DMA_IRQHandler+0x24c>)
 8002596:	fba2 2303 	umull	r2, r3, r2, r3
 800259a:	0a9b      	lsrs	r3, r3, #10
 800259c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025a4:	693b      	ldr	r3, [r7, #16]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ae:	2208      	movs	r2, #8
 80025b0:	409a      	lsls	r2, r3
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	4013      	ands	r3, r2
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d01a      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0304 	and.w	r3, r3, #4
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d013      	beq.n	80025f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f022 0204 	bic.w	r2, r2, #4
 80025d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025dc:	2208      	movs	r2, #8
 80025de:	409a      	lsls	r2, r3
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025e8:	f043 0201 	orr.w	r2, r3, #1
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f4:	2201      	movs	r2, #1
 80025f6:	409a      	lsls	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	4013      	ands	r3, r2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d012      	beq.n	8002626 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800260a:	2b00      	cmp	r3, #0
 800260c:	d00b      	beq.n	8002626 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002612:	2201      	movs	r2, #1
 8002614:	409a      	lsls	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	f043 0202 	orr.w	r2, r3, #2
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800262a:	2204      	movs	r2, #4
 800262c:	409a      	lsls	r2, r3
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4013      	ands	r3, r2
 8002632:	2b00      	cmp	r3, #0
 8002634:	d012      	beq.n	800265c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f003 0302 	and.w	r3, r3, #2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d00b      	beq.n	800265c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002648:	2204      	movs	r2, #4
 800264a:	409a      	lsls	r2, r3
 800264c:	693b      	ldr	r3, [r7, #16]
 800264e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002654:	f043 0204 	orr.w	r2, r3, #4
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002660:	2210      	movs	r2, #16
 8002662:	409a      	lsls	r2, r3
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d043      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0308 	and.w	r3, r3, #8
 8002676:	2b00      	cmp	r3, #0
 8002678:	d03c      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	2210      	movs	r2, #16
 8002680:	409a      	lsls	r2, r3
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d018      	beq.n	80026c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d108      	bne.n	80026b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d024      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	6878      	ldr	r0, [r7, #4]
 80026b0:	4798      	blx	r3
 80026b2:	e01f      	b.n	80026f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d01b      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	4798      	blx	r3
 80026c4:	e016      	b.n	80026f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d107      	bne.n	80026e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0208 	bic.w	r2, r2, #8
 80026e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d003      	beq.n	80026f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f0:	6878      	ldr	r0, [r7, #4]
 80026f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026f8:	2220      	movs	r2, #32
 80026fa:	409a      	lsls	r2, r3
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	4013      	ands	r3, r2
 8002700:	2b00      	cmp	r3, #0
 8002702:	f000 808f 	beq.w	8002824 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b00      	cmp	r3, #0
 8002712:	f000 8087 	beq.w	8002824 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800271a:	2220      	movs	r2, #32
 800271c:	409a      	lsls	r2, r3
 800271e:	693b      	ldr	r3, [r7, #16]
 8002720:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b05      	cmp	r3, #5
 800272c:	d136      	bne.n	800279c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	681a      	ldr	r2, [r3, #0]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f022 0216 	bic.w	r2, r2, #22
 800273c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	695a      	ldr	r2, [r3, #20]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800274c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002752:	2b00      	cmp	r3, #0
 8002754:	d103      	bne.n	800275e <HAL_DMA_IRQHandler+0x1da>
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800275a:	2b00      	cmp	r3, #0
 800275c:	d007      	beq.n	800276e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	681a      	ldr	r2, [r3, #0]
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f022 0208 	bic.w	r2, r2, #8
 800276c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002772:	223f      	movs	r2, #63	; 0x3f
 8002774:	409a      	lsls	r2, r3
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2201      	movs	r2, #1
 800277e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800278e:	2b00      	cmp	r3, #0
 8002790:	d07e      	beq.n	8002890 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002796:	6878      	ldr	r0, [r7, #4]
 8002798:	4798      	blx	r3
        }
        return;
 800279a:	e079      	b.n	8002890 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d01d      	beq.n	80027e6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d10d      	bne.n	80027d4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d031      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	4798      	blx	r3
 80027c8:	e02c      	b.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
 80027ca:	bf00      	nop
 80027cc:	20000014 	.word	0x20000014
 80027d0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d023      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e01e      	b.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10f      	bne.n	8002814 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f022 0210 	bic.w	r2, r2, #16
 8002802:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2201      	movs	r2, #1
 8002808:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002818:	2b00      	cmp	r3, #0
 800281a:	d003      	beq.n	8002824 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002828:	2b00      	cmp	r3, #0
 800282a:	d032      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b00      	cmp	r3, #0
 8002836:	d022      	beq.n	800287e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2205      	movs	r2, #5
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f022 0201 	bic.w	r2, r2, #1
 800284e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	3301      	adds	r3, #1
 8002854:	60bb      	str	r3, [r7, #8]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	429a      	cmp	r2, r3
 800285a:	d307      	bcc.n	800286c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	d1f2      	bne.n	8002850 <HAL_DMA_IRQHandler+0x2cc>
 800286a:	e000      	b.n	800286e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800286c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2201      	movs	r2, #1
 8002872:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002882:	2b00      	cmp	r3, #0
 8002884:	d005      	beq.n	8002892 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800288a:	6878      	ldr	r0, [r7, #4]
 800288c:	4798      	blx	r3
 800288e:	e000      	b.n	8002892 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002890:	bf00      	nop
    }
  }
}
 8002892:	3718      	adds	r7, #24
 8002894:	46bd      	mov	sp, r7
 8002896:	bd80      	pop	{r7, pc}

08002898 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002898:	b480      	push	{r7}
 800289a:	b085      	sub	sp, #20
 800289c:	af00      	add	r7, sp, #0
 800289e:	60f8      	str	r0, [r7, #12]
 80028a0:	60b9      	str	r1, [r7, #8]
 80028a2:	607a      	str	r2, [r7, #4]
 80028a4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	681a      	ldr	r2, [r3, #0]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80028b4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	683a      	ldr	r2, [r7, #0]
 80028bc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d108      	bne.n	80028d8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	687a      	ldr	r2, [r7, #4]
 80028cc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	68ba      	ldr	r2, [r7, #8]
 80028d4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80028d6:	e007      	b.n	80028e8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	68ba      	ldr	r2, [r7, #8]
 80028de:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	687a      	ldr	r2, [r7, #4]
 80028e6:	60da      	str	r2, [r3, #12]
}
 80028e8:	bf00      	nop
 80028ea:	3714      	adds	r7, #20
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	3b10      	subs	r3, #16
 8002904:	4a14      	ldr	r2, [pc, #80]	; (8002958 <DMA_CalcBaseAndBitshift+0x64>)
 8002906:	fba2 2303 	umull	r2, r3, r2, r3
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800290e:	4a13      	ldr	r2, [pc, #76]	; (800295c <DMA_CalcBaseAndBitshift+0x68>)
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	4413      	add	r3, r2
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	461a      	mov	r2, r3
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2b03      	cmp	r3, #3
 8002920:	d909      	bls.n	8002936 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800292a:	f023 0303 	bic.w	r3, r3, #3
 800292e:	1d1a      	adds	r2, r3, #4
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	659a      	str	r2, [r3, #88]	; 0x58
 8002934:	e007      	b.n	8002946 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800293e:	f023 0303 	bic.w	r3, r3, #3
 8002942:	687a      	ldr	r2, [r7, #4]
 8002944:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800294a:	4618      	mov	r0, r3
 800294c:	3714      	adds	r7, #20
 800294e:	46bd      	mov	sp, r7
 8002950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002954:	4770      	bx	lr
 8002956:	bf00      	nop
 8002958:	aaaaaaab 	.word	0xaaaaaaab
 800295c:	0800e524 	.word	0x0800e524

08002960 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002970:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d11f      	bne.n	80029ba <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800297a:	68bb      	ldr	r3, [r7, #8]
 800297c:	2b03      	cmp	r3, #3
 800297e:	d856      	bhi.n	8002a2e <DMA_CheckFifoParam+0xce>
 8002980:	a201      	add	r2, pc, #4	; (adr r2, 8002988 <DMA_CheckFifoParam+0x28>)
 8002982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002986:	bf00      	nop
 8002988:	08002999 	.word	0x08002999
 800298c:	080029ab 	.word	0x080029ab
 8002990:	08002999 	.word	0x08002999
 8002994:	08002a2f 	.word	0x08002a2f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d046      	beq.n	8002a32 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029a8:	e043      	b.n	8002a32 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ae:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029b2:	d140      	bne.n	8002a36 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b8:	e03d      	b.n	8002a36 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029c2:	d121      	bne.n	8002a08 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029c4:	68bb      	ldr	r3, [r7, #8]
 80029c6:	2b03      	cmp	r3, #3
 80029c8:	d837      	bhi.n	8002a3a <DMA_CheckFifoParam+0xda>
 80029ca:	a201      	add	r2, pc, #4	; (adr r2, 80029d0 <DMA_CheckFifoParam+0x70>)
 80029cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029d0:	080029e1 	.word	0x080029e1
 80029d4:	080029e7 	.word	0x080029e7
 80029d8:	080029e1 	.word	0x080029e1
 80029dc:	080029f9 	.word	0x080029f9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      break;
 80029e4:	e030      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d025      	beq.n	8002a3e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
 80029f4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029f6:	e022      	b.n	8002a3e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029fc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a00:	d11f      	bne.n	8002a42 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a06:	e01c      	b.n	8002a42 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a08:	68bb      	ldr	r3, [r7, #8]
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d903      	bls.n	8002a16 <DMA_CheckFifoParam+0xb6>
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	2b03      	cmp	r3, #3
 8002a12:	d003      	beq.n	8002a1c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a14:	e018      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	73fb      	strb	r3, [r7, #15]
      break;
 8002a1a:	e015      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a20:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d00e      	beq.n	8002a46 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a28:	2301      	movs	r3, #1
 8002a2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002a2c:	e00b      	b.n	8002a46 <DMA_CheckFifoParam+0xe6>
      break;
 8002a2e:	bf00      	nop
 8002a30:	e00a      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a32:	bf00      	nop
 8002a34:	e008      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a36:	bf00      	nop
 8002a38:	e006      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3a:	bf00      	nop
 8002a3c:	e004      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a3e:	bf00      	nop
 8002a40:	e002      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a42:	bf00      	nop
 8002a44:	e000      	b.n	8002a48 <DMA_CheckFifoParam+0xe8>
      break;
 8002a46:	bf00      	nop
    }
  } 
  
  return status; 
 8002a48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a4a:	4618      	mov	r0, r3
 8002a4c:	3714      	adds	r7, #20
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a54:	4770      	bx	lr
 8002a56:	bf00      	nop

08002a58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b089      	sub	sp, #36	; 0x24
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
 8002a60:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a62:	2300      	movs	r3, #0
 8002a64:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a66:	2300      	movs	r3, #0
 8002a68:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
 8002a72:	e165      	b.n	8002d40 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a74:	2201      	movs	r2, #1
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4013      	ands	r3, r2
 8002a86:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a88:	693a      	ldr	r2, [r7, #16]
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	f040 8154 	bne.w	8002d3a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	f003 0303 	and.w	r3, r3, #3
 8002a9a:	2b01      	cmp	r3, #1
 8002a9c:	d005      	beq.n	8002aaa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	685b      	ldr	r3, [r3, #4]
 8002aa2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	2b02      	cmp	r3, #2
 8002aa8:	d130      	bne.n	8002b0c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	689b      	ldr	r3, [r3, #8]
 8002aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	2203      	movs	r2, #3
 8002ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aba:	43db      	mvns	r3, r3
 8002abc:	69ba      	ldr	r2, [r7, #24]
 8002abe:	4013      	ands	r3, r2
 8002ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	68da      	ldr	r2, [r3, #12]
 8002ac6:	69fb      	ldr	r3, [r7, #28]
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	69ba      	ldr	r2, [r7, #24]
 8002ad0:	4313      	orrs	r3, r2
 8002ad2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	091b      	lsrs	r3, r3, #4
 8002af6:	f003 0201 	and.w	r2, r3, #1
 8002afa:	69fb      	ldr	r3, [r7, #28]
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4313      	orrs	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	69ba      	ldr	r2, [r7, #24]
 8002b0a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f003 0303 	and.w	r3, r3, #3
 8002b14:	2b03      	cmp	r3, #3
 8002b16:	d017      	beq.n	8002b48 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	005b      	lsls	r3, r3, #1
 8002b22:	2203      	movs	r2, #3
 8002b24:	fa02 f303 	lsl.w	r3, r2, r3
 8002b28:	43db      	mvns	r3, r3
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	4013      	ands	r3, r2
 8002b2e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	005b      	lsls	r3, r3, #1
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	69ba      	ldr	r2, [r7, #24]
 8002b46:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f003 0303 	and.w	r3, r3, #3
 8002b50:	2b02      	cmp	r3, #2
 8002b52:	d123      	bne.n	8002b9c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	08da      	lsrs	r2, r3, #3
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	3208      	adds	r2, #8
 8002b5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b60:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	f003 0307 	and.w	r3, r3, #7
 8002b68:	009b      	lsls	r3, r3, #2
 8002b6a:	220f      	movs	r2, #15
 8002b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b70:	43db      	mvns	r3, r3
 8002b72:	69ba      	ldr	r2, [r7, #24]
 8002b74:	4013      	ands	r3, r2
 8002b76:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b78:	683b      	ldr	r3, [r7, #0]
 8002b7a:	691a      	ldr	r2, [r3, #16]
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	f003 0307 	and.w	r3, r3, #7
 8002b82:	009b      	lsls	r3, r3, #2
 8002b84:	fa02 f303 	lsl.w	r3, r2, r3
 8002b88:	69ba      	ldr	r2, [r7, #24]
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	08da      	lsrs	r2, r3, #3
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	3208      	adds	r2, #8
 8002b96:	69b9      	ldr	r1, [r7, #24]
 8002b98:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	005b      	lsls	r3, r3, #1
 8002ba6:	2203      	movs	r2, #3
 8002ba8:	fa02 f303 	lsl.w	r3, r2, r3
 8002bac:	43db      	mvns	r3, r3
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bb4:	683b      	ldr	r3, [r7, #0]
 8002bb6:	685b      	ldr	r3, [r3, #4]
 8002bb8:	f003 0203 	and.w	r2, r3, #3
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	005b      	lsls	r3, r3, #1
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	69ba      	ldr	r2, [r7, #24]
 8002bc6:	4313      	orrs	r3, r2
 8002bc8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	69ba      	ldr	r2, [r7, #24]
 8002bce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bd0:	683b      	ldr	r3, [r7, #0]
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	f000 80ae 	beq.w	8002d3a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bde:	2300      	movs	r3, #0
 8002be0:	60fb      	str	r3, [r7, #12]
 8002be2:	4b5d      	ldr	r3, [pc, #372]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002be4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002be6:	4a5c      	ldr	r2, [pc, #368]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002be8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bec:	6453      	str	r3, [r2, #68]	; 0x44
 8002bee:	4b5a      	ldr	r3, [pc, #360]	; (8002d58 <HAL_GPIO_Init+0x300>)
 8002bf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002bf6:	60fb      	str	r3, [r7, #12]
 8002bf8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bfa:	4a58      	ldr	r2, [pc, #352]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	089b      	lsrs	r3, r3, #2
 8002c00:	3302      	adds	r3, #2
 8002c02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c06:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c08:	69fb      	ldr	r3, [r7, #28]
 8002c0a:	f003 0303 	and.w	r3, r3, #3
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	220f      	movs	r2, #15
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	43db      	mvns	r3, r3
 8002c18:	69ba      	ldr	r2, [r7, #24]
 8002c1a:	4013      	ands	r3, r2
 8002c1c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4f      	ldr	r2, [pc, #316]	; (8002d60 <HAL_GPIO_Init+0x308>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d025      	beq.n	8002c72 <HAL_GPIO_Init+0x21a>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4e      	ldr	r2, [pc, #312]	; (8002d64 <HAL_GPIO_Init+0x30c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d01f      	beq.n	8002c6e <HAL_GPIO_Init+0x216>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4d      	ldr	r2, [pc, #308]	; (8002d68 <HAL_GPIO_Init+0x310>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d019      	beq.n	8002c6a <HAL_GPIO_Init+0x212>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a4c      	ldr	r2, [pc, #304]	; (8002d6c <HAL_GPIO_Init+0x314>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d013      	beq.n	8002c66 <HAL_GPIO_Init+0x20e>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	4a4b      	ldr	r2, [pc, #300]	; (8002d70 <HAL_GPIO_Init+0x318>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d00d      	beq.n	8002c62 <HAL_GPIO_Init+0x20a>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	4a4a      	ldr	r2, [pc, #296]	; (8002d74 <HAL_GPIO_Init+0x31c>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d007      	beq.n	8002c5e <HAL_GPIO_Init+0x206>
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	4a49      	ldr	r2, [pc, #292]	; (8002d78 <HAL_GPIO_Init+0x320>)
 8002c52:	4293      	cmp	r3, r2
 8002c54:	d101      	bne.n	8002c5a <HAL_GPIO_Init+0x202>
 8002c56:	2306      	movs	r3, #6
 8002c58:	e00c      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c5a:	2307      	movs	r3, #7
 8002c5c:	e00a      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c5e:	2305      	movs	r3, #5
 8002c60:	e008      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c62:	2304      	movs	r3, #4
 8002c64:	e006      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c66:	2303      	movs	r3, #3
 8002c68:	e004      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	e002      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e000      	b.n	8002c74 <HAL_GPIO_Init+0x21c>
 8002c72:	2300      	movs	r3, #0
 8002c74:	69fa      	ldr	r2, [r7, #28]
 8002c76:	f002 0203 	and.w	r2, r2, #3
 8002c7a:	0092      	lsls	r2, r2, #2
 8002c7c:	4093      	lsls	r3, r2
 8002c7e:	69ba      	ldr	r2, [r7, #24]
 8002c80:	4313      	orrs	r3, r2
 8002c82:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c84:	4935      	ldr	r1, [pc, #212]	; (8002d5c <HAL_GPIO_Init+0x304>)
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	089b      	lsrs	r3, r3, #2
 8002c8a:	3302      	adds	r3, #2
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c92:	4b3a      	ldr	r3, [pc, #232]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c98:	693b      	ldr	r3, [r7, #16]
 8002c9a:	43db      	mvns	r3, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	4013      	ands	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	685b      	ldr	r3, [r3, #4]
 8002ca6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8002cae:	69ba      	ldr	r2, [r7, #24]
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cb6:	4a31      	ldr	r2, [pc, #196]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cbc:	4b2f      	ldr	r3, [pc, #188]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002cbe:	68db      	ldr	r3, [r3, #12]
 8002cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	43db      	mvns	r3, r3
 8002cc6:	69ba      	ldr	r2, [r7, #24]
 8002cc8:	4013      	ands	r3, r2
 8002cca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	685b      	ldr	r3, [r3, #4]
 8002cd0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d003      	beq.n	8002ce0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ce0:	4a26      	ldr	r2, [pc, #152]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ce6:	4b25      	ldr	r3, [pc, #148]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cec:	693b      	ldr	r3, [r7, #16]
 8002cee:	43db      	mvns	r3, r3
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	4013      	ands	r3, r2
 8002cf4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	4313      	orrs	r3, r2
 8002d08:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d0a:	4a1c      	ldr	r2, [pc, #112]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d10:	4b1a      	ldr	r3, [pc, #104]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d16:	693b      	ldr	r3, [r7, #16]
 8002d18:	43db      	mvns	r3, r3
 8002d1a:	69ba      	ldr	r2, [r7, #24]
 8002d1c:	4013      	ands	r3, r2
 8002d1e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	685b      	ldr	r3, [r3, #4]
 8002d24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d003      	beq.n	8002d34 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002d2c:	69ba      	ldr	r2, [r7, #24]
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	4313      	orrs	r3, r2
 8002d32:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d34:	4a11      	ldr	r2, [pc, #68]	; (8002d7c <HAL_GPIO_Init+0x324>)
 8002d36:	69bb      	ldr	r3, [r7, #24]
 8002d38:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d3a:	69fb      	ldr	r3, [r7, #28]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	61fb      	str	r3, [r7, #28]
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	2b0f      	cmp	r3, #15
 8002d44:	f67f ae96 	bls.w	8002a74 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d48:	bf00      	nop
 8002d4a:	bf00      	nop
 8002d4c:	3724      	adds	r7, #36	; 0x24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	40023800 	.word	0x40023800
 8002d5c:	40013800 	.word	0x40013800
 8002d60:	40020000 	.word	0x40020000
 8002d64:	40020400 	.word	0x40020400
 8002d68:	40020800 	.word	0x40020800
 8002d6c:	40020c00 	.word	0x40020c00
 8002d70:	40021000 	.word	0x40021000
 8002d74:	40021400 	.word	0x40021400
 8002d78:	40021800 	.word	0x40021800
 8002d7c:	40013c00 	.word	0x40013c00

08002d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b083      	sub	sp, #12
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
 8002d88:	460b      	mov	r3, r1
 8002d8a:	807b      	strh	r3, [r7, #2]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d90:	787b      	ldrb	r3, [r7, #1]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d003      	beq.n	8002d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d96:	887a      	ldrh	r2, [r7, #2]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d9c:	e003      	b.n	8002da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d9e:	887b      	ldrh	r3, [r7, #2]
 8002da0:	041a      	lsls	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	619a      	str	r2, [r3, #24]
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
	...

08002db4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d101      	bne.n	8002dc6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	e12b      	b.n	800301e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d106      	bne.n	8002de0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7fe fe30 	bl	8001a40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2224      	movs	r2, #36	; 0x24
 8002de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f022 0201 	bic.w	r2, r2, #1
 8002df6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e06:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	681a      	ldr	r2, [r3, #0]
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002e16:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002e18:	f000 fdac 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8002e1c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	4a81      	ldr	r2, [pc, #516]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d807      	bhi.n	8002e38 <HAL_I2C_Init+0x84>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	4a80      	ldr	r2, [pc, #512]	; (800302c <HAL_I2C_Init+0x278>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	bf94      	ite	ls
 8002e30:	2301      	movls	r3, #1
 8002e32:	2300      	movhi	r3, #0
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	e006      	b.n	8002e46 <HAL_I2C_Init+0x92>
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	4a7d      	ldr	r2, [pc, #500]	; (8003030 <HAL_I2C_Init+0x27c>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	bf94      	ite	ls
 8002e40:	2301      	movls	r3, #1
 8002e42:	2300      	movhi	r3, #0
 8002e44:	b2db      	uxtb	r3, r3
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e0e7      	b.n	800301e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	4a78      	ldr	r2, [pc, #480]	; (8003034 <HAL_I2C_Init+0x280>)
 8002e52:	fba2 2303 	umull	r2, r3, r2, r3
 8002e56:	0c9b      	lsrs	r3, r3, #18
 8002e58:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	685b      	ldr	r3, [r3, #4]
 8002e60:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68ba      	ldr	r2, [r7, #8]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6a1b      	ldr	r3, [r3, #32]
 8002e74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	4a6a      	ldr	r2, [pc, #424]	; (8003028 <HAL_I2C_Init+0x274>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d802      	bhi.n	8002e88 <HAL_I2C_Init+0xd4>
 8002e82:	68bb      	ldr	r3, [r7, #8]
 8002e84:	3301      	adds	r3, #1
 8002e86:	e009      	b.n	8002e9c <HAL_I2C_Init+0xe8>
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002e8e:	fb02 f303 	mul.w	r3, r2, r3
 8002e92:	4a69      	ldr	r2, [pc, #420]	; (8003038 <HAL_I2C_Init+0x284>)
 8002e94:	fba2 2303 	umull	r2, r3, r2, r3
 8002e98:	099b      	lsrs	r3, r3, #6
 8002e9a:	3301      	adds	r3, #1
 8002e9c:	687a      	ldr	r2, [r7, #4]
 8002e9e:	6812      	ldr	r2, [r2, #0]
 8002ea0:	430b      	orrs	r3, r1
 8002ea2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	69db      	ldr	r3, [r3, #28]
 8002eaa:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002eae:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	495c      	ldr	r1, [pc, #368]	; (8003028 <HAL_I2C_Init+0x274>)
 8002eb8:	428b      	cmp	r3, r1
 8002eba:	d819      	bhi.n	8002ef0 <HAL_I2C_Init+0x13c>
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	1e59      	subs	r1, r3, #1
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	005b      	lsls	r3, r3, #1
 8002ec6:	fbb1 f3f3 	udiv	r3, r1, r3
 8002eca:	1c59      	adds	r1, r3, #1
 8002ecc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002ed0:	400b      	ands	r3, r1
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00a      	beq.n	8002eec <HAL_I2C_Init+0x138>
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	1e59      	subs	r1, r3, #1
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ee4:	3301      	adds	r3, #1
 8002ee6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002eea:	e051      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002eec:	2304      	movs	r3, #4
 8002eee:	e04f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d111      	bne.n	8002f1c <HAL_I2C_Init+0x168>
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	1e58      	subs	r0, r3, #1
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6859      	ldr	r1, [r3, #4]
 8002f00:	460b      	mov	r3, r1
 8002f02:	005b      	lsls	r3, r3, #1
 8002f04:	440b      	add	r3, r1
 8002f06:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f0a:	3301      	adds	r3, #1
 8002f0c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	bf0c      	ite	eq
 8002f14:	2301      	moveq	r3, #1
 8002f16:	2300      	movne	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e012      	b.n	8002f42 <HAL_I2C_Init+0x18e>
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	1e58      	subs	r0, r3, #1
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	460b      	mov	r3, r1
 8002f26:	009b      	lsls	r3, r3, #2
 8002f28:	440b      	add	r3, r1
 8002f2a:	0099      	lsls	r1, r3, #2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f32:	3301      	adds	r3, #1
 8002f34:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d001      	beq.n	8002f4a <HAL_I2C_Init+0x196>
 8002f46:	2301      	movs	r3, #1
 8002f48:	e022      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d10e      	bne.n	8002f70 <HAL_I2C_Init+0x1bc>
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	1e58      	subs	r0, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6859      	ldr	r1, [r3, #4]
 8002f5a:	460b      	mov	r3, r1
 8002f5c:	005b      	lsls	r3, r3, #1
 8002f5e:	440b      	add	r3, r1
 8002f60:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f64:	3301      	adds	r3, #1
 8002f66:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6e:	e00f      	b.n	8002f90 <HAL_I2C_Init+0x1dc>
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	1e58      	subs	r0, r3, #1
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	460b      	mov	r3, r1
 8002f7a:	009b      	lsls	r3, r3, #2
 8002f7c:	440b      	add	r3, r1
 8002f7e:	0099      	lsls	r1, r3, #2
 8002f80:	440b      	add	r3, r1
 8002f82:	fbb0 f3f3 	udiv	r3, r0, r3
 8002f86:	3301      	adds	r3, #1
 8002f88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f8c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002f90:	6879      	ldr	r1, [r7, #4]
 8002f92:	6809      	ldr	r1, [r1, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	69da      	ldr	r2, [r3, #28]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a1b      	ldr	r3, [r3, #32]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	430a      	orrs	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002fbe:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	6911      	ldr	r1, [r2, #16]
 8002fc6:	687a      	ldr	r2, [r7, #4]
 8002fc8:	68d2      	ldr	r2, [r2, #12]
 8002fca:	4311      	orrs	r1, r2
 8002fcc:	687a      	ldr	r2, [r7, #4]
 8002fce:	6812      	ldr	r2, [r2, #0]
 8002fd0:	430b      	orrs	r3, r1
 8002fd2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	68db      	ldr	r3, [r3, #12]
 8002fda:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	695a      	ldr	r2, [r3, #20]
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	699b      	ldr	r3, [r3, #24]
 8002fe6:	431a      	orrs	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	430a      	orrs	r2, r1
 8002fee:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2200      	movs	r2, #0
 8003004:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2220      	movs	r2, #32
 800300a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	2200      	movs	r2, #0
 8003018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800301c:	2300      	movs	r3, #0
}
 800301e:	4618      	mov	r0, r3
 8003020:	3710      	adds	r7, #16
 8003022:	46bd      	mov	sp, r7
 8003024:	bd80      	pop	{r7, pc}
 8003026:	bf00      	nop
 8003028:	000186a0 	.word	0x000186a0
 800302c:	001e847f 	.word	0x001e847f
 8003030:	003d08ff 	.word	0x003d08ff
 8003034:	431bde83 	.word	0x431bde83
 8003038:	10624dd3 	.word	0x10624dd3

0800303c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b088      	sub	sp, #32
 8003040:	af02      	add	r7, sp, #8
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	607a      	str	r2, [r7, #4]
 8003046:	461a      	mov	r2, r3
 8003048:	460b      	mov	r3, r1
 800304a:	817b      	strh	r3, [r7, #10]
 800304c:	4613      	mov	r3, r2
 800304e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003050:	f7fe ffa2 	bl	8001f98 <HAL_GetTick>
 8003054:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b20      	cmp	r3, #32
 8003060:	f040 80e0 	bne.w	8003224 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003064:	697b      	ldr	r3, [r7, #20]
 8003066:	9300      	str	r3, [sp, #0]
 8003068:	2319      	movs	r3, #25
 800306a:	2201      	movs	r2, #1
 800306c:	4970      	ldr	r1, [pc, #448]	; (8003230 <HAL_I2C_Master_Transmit+0x1f4>)
 800306e:	68f8      	ldr	r0, [r7, #12]
 8003070:	f000 f964 	bl	800333c <I2C_WaitOnFlagUntilTimeout>
 8003074:	4603      	mov	r3, r0
 8003076:	2b00      	cmp	r3, #0
 8003078:	d001      	beq.n	800307e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800307a:	2302      	movs	r3, #2
 800307c:	e0d3      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003084:	2b01      	cmp	r3, #1
 8003086:	d101      	bne.n	800308c <HAL_I2C_Master_Transmit+0x50>
 8003088:	2302      	movs	r3, #2
 800308a:	e0cc      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 0301 	and.w	r3, r3, #1
 800309e:	2b01      	cmp	r3, #1
 80030a0:	d007      	beq.n	80030b2 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f042 0201 	orr.w	r2, r2, #1
 80030b0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	681a      	ldr	r2, [r3, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030c0:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	2221      	movs	r2, #33	; 0x21
 80030c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	2210      	movs	r2, #16
 80030ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2200      	movs	r2, #0
 80030d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	893a      	ldrh	r2, [r7, #8]
 80030e2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030e8:	b29a      	uxth	r2, r3
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4a50      	ldr	r2, [pc, #320]	; (8003234 <HAL_I2C_Master_Transmit+0x1f8>)
 80030f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80030f4:	8979      	ldrh	r1, [r7, #10]
 80030f6:	697b      	ldr	r3, [r7, #20]
 80030f8:	6a3a      	ldr	r2, [r7, #32]
 80030fa:	68f8      	ldr	r0, [r7, #12]
 80030fc:	f000 f89c 	bl	8003238 <I2C_MasterRequestWrite>
 8003100:	4603      	mov	r3, r0
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
 8003108:	e08d      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800310a:	2300      	movs	r3, #0
 800310c:	613b      	str	r3, [r7, #16]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	695b      	ldr	r3, [r3, #20]
 8003114:	613b      	str	r3, [r7, #16]
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	613b      	str	r3, [r7, #16]
 800311e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003120:	e066      	b.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	68f8      	ldr	r0, [r7, #12]
 8003128:	f000 fa22 	bl	8003570 <I2C_WaitOnTXEFlagUntilTimeout>
 800312c:	4603      	mov	r3, r0
 800312e:	2b00      	cmp	r3, #0
 8003130:	d00d      	beq.n	800314e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003136:	2b04      	cmp	r3, #4
 8003138:	d107      	bne.n	800314a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	681a      	ldr	r2, [r3, #0]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003148:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800314a:	2301      	movs	r3, #1
 800314c:	e06b      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003152:	781a      	ldrb	r2, [r3, #0]
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800315e:	1c5a      	adds	r2, r3, #1
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003168:	b29b      	uxth	r3, r3
 800316a:	3b01      	subs	r3, #1
 800316c:	b29a      	uxth	r2, r3
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003176:	3b01      	subs	r3, #1
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	695b      	ldr	r3, [r3, #20]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b04      	cmp	r3, #4
 800318a:	d11b      	bne.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003190:	2b00      	cmp	r3, #0
 8003192:	d017      	beq.n	80031c4 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	781a      	ldrb	r2, [r3, #0]
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031a4:	1c5a      	adds	r2, r3, #1
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031ae:	b29b      	uxth	r3, r3
 80031b0:	3b01      	subs	r3, #1
 80031b2:	b29a      	uxth	r2, r3
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031bc:	3b01      	subs	r3, #1
 80031be:	b29a      	uxth	r2, r3
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80031c4:	697a      	ldr	r2, [r7, #20]
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	68f8      	ldr	r0, [r7, #12]
 80031ca:	f000 fa19 	bl	8003600 <I2C_WaitOnBTFFlagUntilTimeout>
 80031ce:	4603      	mov	r3, r0
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d00d      	beq.n	80031f0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d8:	2b04      	cmp	r3, #4
 80031da:	d107      	bne.n	80031ec <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681a      	ldr	r2, [r3, #0]
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80031ea:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80031ec:	2301      	movs	r3, #1
 80031ee:	e01a      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d194      	bne.n	8003122 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	681a      	ldr	r2, [r3, #0]
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003206:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	2220      	movs	r2, #32
 800320c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	2200      	movs	r2, #0
 8003214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	2200      	movs	r2, #0
 800321c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003220:	2300      	movs	r3, #0
 8003222:	e000      	b.n	8003226 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003224:	2302      	movs	r3, #2
  }
}
 8003226:	4618      	mov	r0, r3
 8003228:	3718      	adds	r7, #24
 800322a:	46bd      	mov	sp, r7
 800322c:	bd80      	pop	{r7, pc}
 800322e:	bf00      	nop
 8003230:	00100002 	.word	0x00100002
 8003234:	ffff0000 	.word	0xffff0000

08003238 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	607a      	str	r2, [r7, #4]
 8003242:	603b      	str	r3, [r7, #0]
 8003244:	460b      	mov	r3, r1
 8003246:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b08      	cmp	r3, #8
 8003252:	d006      	beq.n	8003262 <I2C_MasterRequestWrite+0x2a>
 8003254:	697b      	ldr	r3, [r7, #20]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d003      	beq.n	8003262 <I2C_MasterRequestWrite+0x2a>
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003260:	d108      	bne.n	8003274 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	681a      	ldr	r2, [r3, #0]
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	e00b      	b.n	800328c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003278:	2b12      	cmp	r3, #18
 800327a:	d107      	bne.n	800328c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	681a      	ldr	r2, [r3, #0]
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800328a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f000 f84f 	bl	800333c <I2C_WaitOnFlagUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d00d      	beq.n	80032c0 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80032b2:	d103      	bne.n	80032bc <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80032ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e035      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	691b      	ldr	r3, [r3, #16]
 80032c4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80032c8:	d108      	bne.n	80032dc <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80032ca:	897b      	ldrh	r3, [r7, #10]
 80032cc:	b2db      	uxtb	r3, r3
 80032ce:	461a      	mov	r2, r3
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80032d8:	611a      	str	r2, [r3, #16]
 80032da:	e01b      	b.n	8003314 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80032dc:	897b      	ldrh	r3, [r7, #10]
 80032de:	11db      	asrs	r3, r3, #7
 80032e0:	b2db      	uxtb	r3, r3
 80032e2:	f003 0306 	and.w	r3, r3, #6
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	f063 030f 	orn	r3, r3, #15
 80032ec:	b2da      	uxtb	r2, r3
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <I2C_MasterRequestWrite+0xfc>)
 80032fa:	68f8      	ldr	r0, [r7, #12]
 80032fc:	f000 f898 	bl	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003300:	4603      	mov	r3, r0
 8003302:	2b00      	cmp	r3, #0
 8003304:	d001      	beq.n	800330a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e010      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800330a:	897b      	ldrh	r3, [r7, #10]
 800330c:	b2da      	uxtb	r2, r3
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	687a      	ldr	r2, [r7, #4]
 8003318:	4907      	ldr	r1, [pc, #28]	; (8003338 <I2C_MasterRequestWrite+0x100>)
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f888 	bl	8003430 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003320:	4603      	mov	r3, r0
 8003322:	2b00      	cmp	r3, #0
 8003324:	d001      	beq.n	800332a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e000      	b.n	800332c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800332a:	2300      	movs	r3, #0
}
 800332c:	4618      	mov	r0, r3
 800332e:	3718      	adds	r7, #24
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}
 8003334:	00010008 	.word	0x00010008
 8003338:	00010002 	.word	0x00010002

0800333c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b084      	sub	sp, #16
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	4613      	mov	r3, r2
 800334a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800334c:	e048      	b.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003354:	d044      	beq.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003356:	f7fe fe1f 	bl	8001f98 <HAL_GetTick>
 800335a:	4602      	mov	r2, r0
 800335c:	69bb      	ldr	r3, [r7, #24]
 800335e:	1ad3      	subs	r3, r2, r3
 8003360:	683a      	ldr	r2, [r7, #0]
 8003362:	429a      	cmp	r2, r3
 8003364:	d302      	bcc.n	800336c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d139      	bne.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800336c:	68bb      	ldr	r3, [r7, #8]
 800336e:	0c1b      	lsrs	r3, r3, #16
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b01      	cmp	r3, #1
 8003374:	d10d      	bne.n	8003392 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	695b      	ldr	r3, [r3, #20]
 800337c:	43da      	mvns	r2, r3
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	4013      	ands	r3, r2
 8003382:	b29b      	uxth	r3, r3
 8003384:	2b00      	cmp	r3, #0
 8003386:	bf0c      	ite	eq
 8003388:	2301      	moveq	r3, #1
 800338a:	2300      	movne	r3, #0
 800338c:	b2db      	uxtb	r3, r3
 800338e:	461a      	mov	r2, r3
 8003390:	e00c      	b.n	80033ac <I2C_WaitOnFlagUntilTimeout+0x70>
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	699b      	ldr	r3, [r3, #24]
 8003398:	43da      	mvns	r2, r3
 800339a:	68bb      	ldr	r3, [r7, #8]
 800339c:	4013      	ands	r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	bf0c      	ite	eq
 80033a4:	2301      	moveq	r3, #1
 80033a6:	2300      	movne	r3, #0
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	461a      	mov	r2, r3
 80033ac:	79fb      	ldrb	r3, [r7, #7]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d116      	bne.n	80033e0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	2220      	movs	r2, #32
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	2200      	movs	r2, #0
 80033c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033cc:	f043 0220 	orr.w	r2, r3, #32
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80033dc:	2301      	movs	r3, #1
 80033de:	e023      	b.n	8003428 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	0c1b      	lsrs	r3, r3, #16
 80033e4:	b2db      	uxtb	r3, r3
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d10d      	bne.n	8003406 <I2C_WaitOnFlagUntilTimeout+0xca>
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	695b      	ldr	r3, [r3, #20]
 80033f0:	43da      	mvns	r2, r3
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	4013      	ands	r3, r2
 80033f6:	b29b      	uxth	r3, r3
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	461a      	mov	r2, r3
 8003404:	e00c      	b.n	8003420 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	43da      	mvns	r2, r3
 800340e:	68bb      	ldr	r3, [r7, #8]
 8003410:	4013      	ands	r3, r2
 8003412:	b29b      	uxth	r3, r3
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	461a      	mov	r2, r3
 8003420:	79fb      	ldrb	r3, [r7, #7]
 8003422:	429a      	cmp	r2, r3
 8003424:	d093      	beq.n	800334e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3710      	adds	r7, #16
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	607a      	str	r2, [r7, #4]
 800343c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800343e:	e071      	b.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800344a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800344e:	d123      	bne.n	8003498 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800345e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003468:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2220      	movs	r2, #32
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003484:	f043 0204 	orr.w	r2, r3, #4
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e067      	b.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349e:	d041      	beq.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034a0:	f7fe fd7a 	bl	8001f98 <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	687a      	ldr	r2, [r7, #4]
 80034ac:	429a      	cmp	r2, r3
 80034ae:	d302      	bcc.n	80034b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d136      	bne.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80034b6:	68bb      	ldr	r3, [r7, #8]
 80034b8:	0c1b      	lsrs	r3, r3, #16
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d10c      	bne.n	80034da <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	695b      	ldr	r3, [r3, #20]
 80034c6:	43da      	mvns	r2, r3
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	4013      	ands	r3, r2
 80034cc:	b29b      	uxth	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	bf14      	ite	ne
 80034d2:	2301      	movne	r3, #1
 80034d4:	2300      	moveq	r3, #0
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	e00b      	b.n	80034f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	43da      	mvns	r2, r3
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	b29b      	uxth	r3, r3
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	bf14      	ite	ne
 80034ec:	2301      	movne	r3, #1
 80034ee:	2300      	moveq	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d016      	beq.n	8003524 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2200      	movs	r2, #0
 80034fa:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003510:	f043 0220 	orr.w	r2, r3, #32
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003520:	2301      	movs	r3, #1
 8003522:	e021      	b.n	8003568 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	0c1b      	lsrs	r3, r3, #16
 8003528:	b2db      	uxtb	r3, r3
 800352a:	2b01      	cmp	r3, #1
 800352c:	d10c      	bne.n	8003548 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	695b      	ldr	r3, [r3, #20]
 8003534:	43da      	mvns	r2, r3
 8003536:	68bb      	ldr	r3, [r7, #8]
 8003538:	4013      	ands	r3, r2
 800353a:	b29b      	uxth	r3, r3
 800353c:	2b00      	cmp	r3, #0
 800353e:	bf14      	ite	ne
 8003540:	2301      	movne	r3, #1
 8003542:	2300      	moveq	r3, #0
 8003544:	b2db      	uxtb	r3, r3
 8003546:	e00b      	b.n	8003560 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	699b      	ldr	r3, [r3, #24]
 800354e:	43da      	mvns	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	4013      	ands	r3, r2
 8003554:	b29b      	uxth	r3, r3
 8003556:	2b00      	cmp	r3, #0
 8003558:	bf14      	ite	ne
 800355a:	2301      	movne	r3, #1
 800355c:	2300      	moveq	r3, #0
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b00      	cmp	r3, #0
 8003562:	f47f af6d 	bne.w	8003440 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003566:	2300      	movs	r3, #0
}
 8003568:	4618      	mov	r0, r3
 800356a:	3710      	adds	r7, #16
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800357c:	e034      	b.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800357e:	68f8      	ldr	r0, [r7, #12]
 8003580:	f000 f886 	bl	8003690 <I2C_IsAcknowledgeFailed>
 8003584:	4603      	mov	r3, r0
 8003586:	2b00      	cmp	r3, #0
 8003588:	d001      	beq.n	800358e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800358a:	2301      	movs	r3, #1
 800358c:	e034      	b.n	80035f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800358e:	68bb      	ldr	r3, [r7, #8]
 8003590:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003594:	d028      	beq.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003596:	f7fe fcff 	bl	8001f98 <HAL_GetTick>
 800359a:	4602      	mov	r2, r0
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	1ad3      	subs	r3, r2, r3
 80035a0:	68ba      	ldr	r2, [r7, #8]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d302      	bcc.n	80035ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d11d      	bne.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b80      	cmp	r3, #128	; 0x80
 80035b8:	d016      	beq.n	80035e8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2220      	movs	r2, #32
 80035c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2200      	movs	r2, #0
 80035cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035d4:	f043 0220 	orr.w	r2, r3, #32
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	2200      	movs	r2, #0
 80035e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80035e4:	2301      	movs	r3, #1
 80035e6:	e007      	b.n	80035f8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035f2:	2b80      	cmp	r3, #128	; 0x80
 80035f4:	d1c3      	bne.n	800357e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80035f6:	2300      	movs	r3, #0
}
 80035f8:	4618      	mov	r0, r3
 80035fa:	3710      	adds	r7, #16
 80035fc:	46bd      	mov	sp, r7
 80035fe:	bd80      	pop	{r7, pc}

08003600 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003600:	b580      	push	{r7, lr}
 8003602:	b084      	sub	sp, #16
 8003604:	af00      	add	r7, sp, #0
 8003606:	60f8      	str	r0, [r7, #12]
 8003608:	60b9      	str	r1, [r7, #8]
 800360a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800360c:	e034      	b.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 f83e 	bl	8003690 <I2C_IsAcknowledgeFailed>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e034      	b.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003624:	d028      	beq.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003626:	f7fe fcb7 	bl	8001f98 <HAL_GetTick>
 800362a:	4602      	mov	r2, r0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	1ad3      	subs	r3, r2, r3
 8003630:	68ba      	ldr	r2, [r7, #8]
 8003632:	429a      	cmp	r2, r3
 8003634:	d302      	bcc.n	800363c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d11d      	bne.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	695b      	ldr	r3, [r3, #20]
 8003642:	f003 0304 	and.w	r3, r3, #4
 8003646:	2b04      	cmp	r3, #4
 8003648:	d016      	beq.n	8003678 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2220      	movs	r2, #32
 8003654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2200      	movs	r2, #0
 800365c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003664:	f043 0220 	orr.w	r2, r3, #32
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	2200      	movs	r2, #0
 8003670:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003674:	2301      	movs	r3, #1
 8003676:	e007      	b.n	8003688 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	695b      	ldr	r3, [r3, #20]
 800367e:	f003 0304 	and.w	r3, r3, #4
 8003682:	2b04      	cmp	r3, #4
 8003684:	d1c3      	bne.n	800360e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	4618      	mov	r0, r3
 800368a:	3710      	adds	r7, #16
 800368c:	46bd      	mov	sp, r7
 800368e:	bd80      	pop	{r7, pc}

08003690 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	695b      	ldr	r3, [r3, #20]
 800369e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036a2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036a6:	d11b      	bne.n	80036e0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80036b0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	2200      	movs	r2, #0
 80036b6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2220      	movs	r2, #32
 80036bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036cc:	f043 0204 	orr.w	r2, r3, #4
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ec:	4770      	bx	lr
	...

080036f0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	603b      	str	r3, [r7, #0]
 80036fe:	4b20      	ldr	r3, [pc, #128]	; (8003780 <HAL_PWREx_EnableOverDrive+0x90>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a1f      	ldr	r2, [pc, #124]	; (8003780 <HAL_PWREx_EnableOverDrive+0x90>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b1d      	ldr	r3, [pc, #116]	; (8003780 <HAL_PWREx_EnableOverDrive+0x90>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003716:	4b1b      	ldr	r3, [pc, #108]	; (8003784 <HAL_PWREx_EnableOverDrive+0x94>)
 8003718:	2201      	movs	r2, #1
 800371a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800371c:	f7fe fc3c 	bl	8001f98 <HAL_GetTick>
 8003720:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003722:	e009      	b.n	8003738 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003724:	f7fe fc38 	bl	8001f98 <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003732:	d901      	bls.n	8003738 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003734:	2303      	movs	r3, #3
 8003736:	e01f      	b.n	8003778 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003738:	4b13      	ldr	r3, [pc, #76]	; (8003788 <HAL_PWREx_EnableOverDrive+0x98>)
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003740:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003744:	d1ee      	bne.n	8003724 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003746:	4b11      	ldr	r3, [pc, #68]	; (800378c <HAL_PWREx_EnableOverDrive+0x9c>)
 8003748:	2201      	movs	r2, #1
 800374a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800374c:	f7fe fc24 	bl	8001f98 <HAL_GetTick>
 8003750:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003752:	e009      	b.n	8003768 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003754:	f7fe fc20 	bl	8001f98 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003762:	d901      	bls.n	8003768 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003764:	2303      	movs	r3, #3
 8003766:	e007      	b.n	8003778 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003768:	4b07      	ldr	r3, [pc, #28]	; (8003788 <HAL_PWREx_EnableOverDrive+0x98>)
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003770:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003774:	d1ee      	bne.n	8003754 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8003776:	2300      	movs	r3, #0
}
 8003778:	4618      	mov	r0, r3
 800377a:	3708      	adds	r7, #8
 800377c:	46bd      	mov	sp, r7
 800377e:	bd80      	pop	{r7, pc}
 8003780:	40023800 	.word	0x40023800
 8003784:	420e0040 	.word	0x420e0040
 8003788:	40007000 	.word	0x40007000
 800378c:	420e0044 	.word	0x420e0044

08003790 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2b00      	cmp	r3, #0
 800379e:	d101      	bne.n	80037a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e0cc      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037a4:	4b68      	ldr	r3, [pc, #416]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d90c      	bls.n	80037cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b65      	ldr	r3, [pc, #404]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b63      	ldr	r3, [pc, #396]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e0b8      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d020      	beq.n	800381a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f003 0304 	and.w	r3, r3, #4
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d005      	beq.n	80037f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037e4:	4b59      	ldr	r3, [pc, #356]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	689b      	ldr	r3, [r3, #8]
 80037e8:	4a58      	ldr	r2, [pc, #352]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0308 	and.w	r3, r3, #8
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a52      	ldr	r2, [pc, #328]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003806:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003808:	4b50      	ldr	r3, [pc, #320]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	494d      	ldr	r1, [pc, #308]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	4313      	orrs	r3, r2
 8003818:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 0301 	and.w	r3, r3, #1
 8003822:	2b00      	cmp	r3, #0
 8003824:	d044      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	685b      	ldr	r3, [r3, #4]
 800382a:	2b01      	cmp	r3, #1
 800382c:	d107      	bne.n	800383e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800382e:	4b47      	ldr	r3, [pc, #284]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003836:	2b00      	cmp	r3, #0
 8003838:	d119      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800383a:	2301      	movs	r3, #1
 800383c:	e07f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b02      	cmp	r3, #2
 8003844:	d003      	beq.n	800384e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800384a:	2b03      	cmp	r3, #3
 800384c:	d107      	bne.n	800385e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800384e:	4b3f      	ldr	r3, [pc, #252]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003856:	2b00      	cmp	r3, #0
 8003858:	d109      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e06f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800385e:	4b3b      	ldr	r3, [pc, #236]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f003 0302 	and.w	r3, r3, #2
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e067      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800386e:	4b37      	ldr	r3, [pc, #220]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	f023 0203 	bic.w	r2, r3, #3
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4934      	ldr	r1, [pc, #208]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800387c:	4313      	orrs	r3, r2
 800387e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003880:	f7fe fb8a 	bl	8001f98 <HAL_GetTick>
 8003884:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003886:	e00a      	b.n	800389e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003888:	f7fe fb86 	bl	8001f98 <HAL_GetTick>
 800388c:	4602      	mov	r2, r0
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	f241 3288 	movw	r2, #5000	; 0x1388
 8003896:	4293      	cmp	r3, r2
 8003898:	d901      	bls.n	800389e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800389a:	2303      	movs	r3, #3
 800389c:	e04f      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	4b2b      	ldr	r3, [pc, #172]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 020c 	and.w	r2, r3, #12
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	009b      	lsls	r3, r3, #2
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d1eb      	bne.n	8003888 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038b0:	4b25      	ldr	r3, [pc, #148]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 030f 	and.w	r3, r3, #15
 80038b8:	683a      	ldr	r2, [r7, #0]
 80038ba:	429a      	cmp	r2, r3
 80038bc:	d20c      	bcs.n	80038d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038be:	4b22      	ldr	r3, [pc, #136]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c0:	683a      	ldr	r2, [r7, #0]
 80038c2:	b2d2      	uxtb	r2, r2
 80038c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038c6:	4b20      	ldr	r3, [pc, #128]	; (8003948 <HAL_RCC_ClockConfig+0x1b8>)
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 030f 	and.w	r3, r3, #15
 80038ce:	683a      	ldr	r2, [r7, #0]
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d001      	beq.n	80038d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038d4:	2301      	movs	r3, #1
 80038d6:	e032      	b.n	800393e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f003 0304 	and.w	r3, r3, #4
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d008      	beq.n	80038f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038e4:	4b19      	ldr	r3, [pc, #100]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038e6:	689b      	ldr	r3, [r3, #8]
 80038e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	68db      	ldr	r3, [r3, #12]
 80038f0:	4916      	ldr	r1, [pc, #88]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 80038f2:	4313      	orrs	r3, r2
 80038f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f003 0308 	and.w	r3, r3, #8
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d009      	beq.n	8003916 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003902:	4b12      	ldr	r3, [pc, #72]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	691b      	ldr	r3, [r3, #16]
 800390e:	00db      	lsls	r3, r3, #3
 8003910:	490e      	ldr	r1, [pc, #56]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 8003912:	4313      	orrs	r3, r2
 8003914:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003916:	f000 f855 	bl	80039c4 <HAL_RCC_GetSysClockFreq>
 800391a:	4602      	mov	r2, r0
 800391c:	4b0b      	ldr	r3, [pc, #44]	; (800394c <HAL_RCC_ClockConfig+0x1bc>)
 800391e:	689b      	ldr	r3, [r3, #8]
 8003920:	091b      	lsrs	r3, r3, #4
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	490a      	ldr	r1, [pc, #40]	; (8003950 <HAL_RCC_ClockConfig+0x1c0>)
 8003928:	5ccb      	ldrb	r3, [r1, r3]
 800392a:	fa22 f303 	lsr.w	r3, r2, r3
 800392e:	4a09      	ldr	r2, [pc, #36]	; (8003954 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003932:	4b09      	ldr	r3, [pc, #36]	; (8003958 <HAL_RCC_ClockConfig+0x1c8>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4618      	mov	r0, r3
 8003938:	f7fe faea 	bl	8001f10 <HAL_InitTick>

  return HAL_OK;
 800393c:	2300      	movs	r3, #0
}
 800393e:	4618      	mov	r0, r3
 8003940:	3710      	adds	r7, #16
 8003942:	46bd      	mov	sp, r7
 8003944:	bd80      	pop	{r7, pc}
 8003946:	bf00      	nop
 8003948:	40023c00 	.word	0x40023c00
 800394c:	40023800 	.word	0x40023800
 8003950:	0800e50c 	.word	0x0800e50c
 8003954:	20000014 	.word	0x20000014
 8003958:	20000018 	.word	0x20000018

0800395c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800395c:	b480      	push	{r7}
 800395e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003960:	4b03      	ldr	r3, [pc, #12]	; (8003970 <HAL_RCC_GetHCLKFreq+0x14>)
 8003962:	681b      	ldr	r3, [r3, #0]
}
 8003964:	4618      	mov	r0, r3
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
 800396e:	bf00      	nop
 8003970:	20000014 	.word	0x20000014

08003974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003974:	b580      	push	{r7, lr}
 8003976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003978:	f7ff fff0 	bl	800395c <HAL_RCC_GetHCLKFreq>
 800397c:	4602      	mov	r2, r0
 800397e:	4b05      	ldr	r3, [pc, #20]	; (8003994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	0a9b      	lsrs	r3, r3, #10
 8003984:	f003 0307 	and.w	r3, r3, #7
 8003988:	4903      	ldr	r1, [pc, #12]	; (8003998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800398a:	5ccb      	ldrb	r3, [r1, r3]
 800398c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003990:	4618      	mov	r0, r3
 8003992:	bd80      	pop	{r7, pc}
 8003994:	40023800 	.word	0x40023800
 8003998:	0800e51c 	.word	0x0800e51c

0800399c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80039a0:	f7ff ffdc 	bl	800395c <HAL_RCC_GetHCLKFreq>
 80039a4:	4602      	mov	r2, r0
 80039a6:	4b05      	ldr	r3, [pc, #20]	; (80039bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a8:	689b      	ldr	r3, [r3, #8]
 80039aa:	0b5b      	lsrs	r3, r3, #13
 80039ac:	f003 0307 	and.w	r3, r3, #7
 80039b0:	4903      	ldr	r1, [pc, #12]	; (80039c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039b2:	5ccb      	ldrb	r3, [r1, r3]
 80039b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b8:	4618      	mov	r0, r3
 80039ba:	bd80      	pop	{r7, pc}
 80039bc:	40023800 	.word	0x40023800
 80039c0:	0800e51c 	.word	0x0800e51c

080039c4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039c8:	b0ae      	sub	sp, #184	; 0xb8
 80039ca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80039cc:	2300      	movs	r3, #0
 80039ce:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80039d8:	2300      	movs	r3, #0
 80039da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80039de:	2300      	movs	r3, #0
 80039e0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80039e4:	2300      	movs	r3, #0
 80039e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80039ea:	4bcb      	ldr	r3, [pc, #812]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f003 030c 	and.w	r3, r3, #12
 80039f2:	2b0c      	cmp	r3, #12
 80039f4:	f200 8206 	bhi.w	8003e04 <HAL_RCC_GetSysClockFreq+0x440>
 80039f8:	a201      	add	r2, pc, #4	; (adr r2, 8003a00 <HAL_RCC_GetSysClockFreq+0x3c>)
 80039fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039fe:	bf00      	nop
 8003a00:	08003a35 	.word	0x08003a35
 8003a04:	08003e05 	.word	0x08003e05
 8003a08:	08003e05 	.word	0x08003e05
 8003a0c:	08003e05 	.word	0x08003e05
 8003a10:	08003a3d 	.word	0x08003a3d
 8003a14:	08003e05 	.word	0x08003e05
 8003a18:	08003e05 	.word	0x08003e05
 8003a1c:	08003e05 	.word	0x08003e05
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003e05 	.word	0x08003e05
 8003a28:	08003e05 	.word	0x08003e05
 8003a2c:	08003e05 	.word	0x08003e05
 8003a30:	08003c35 	.word	0x08003c35
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a34:	4bb9      	ldr	r3, [pc, #740]	; (8003d1c <HAL_RCC_GetSysClockFreq+0x358>)
 8003a36:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8003a3a:	e1e7      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a3c:	4bb8      	ldr	r3, [pc, #736]	; (8003d20 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003a3e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003a42:	e1e3      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a44:	4bb4      	ldr	r3, [pc, #720]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a4c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003a50:	4bb1      	ldr	r3, [pc, #708]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d071      	beq.n	8003b40 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a5c:	4bae      	ldr	r3, [pc, #696]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	099b      	lsrs	r3, r3, #6
 8003a62:	2200      	movs	r2, #0
 8003a64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003a68:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8003a6c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003a70:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a74:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003a78:	2300      	movs	r3, #0
 8003a7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003a7e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003a82:	4622      	mov	r2, r4
 8003a84:	462b      	mov	r3, r5
 8003a86:	f04f 0000 	mov.w	r0, #0
 8003a8a:	f04f 0100 	mov.w	r1, #0
 8003a8e:	0159      	lsls	r1, r3, #5
 8003a90:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a94:	0150      	lsls	r0, r2, #5
 8003a96:	4602      	mov	r2, r0
 8003a98:	460b      	mov	r3, r1
 8003a9a:	4621      	mov	r1, r4
 8003a9c:	1a51      	subs	r1, r2, r1
 8003a9e:	6439      	str	r1, [r7, #64]	; 0x40
 8003aa0:	4629      	mov	r1, r5
 8003aa2:	eb63 0301 	sbc.w	r3, r3, r1
 8003aa6:	647b      	str	r3, [r7, #68]	; 0x44
 8003aa8:	f04f 0200 	mov.w	r2, #0
 8003aac:	f04f 0300 	mov.w	r3, #0
 8003ab0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003ab4:	4649      	mov	r1, r9
 8003ab6:	018b      	lsls	r3, r1, #6
 8003ab8:	4641      	mov	r1, r8
 8003aba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003abe:	4641      	mov	r1, r8
 8003ac0:	018a      	lsls	r2, r1, #6
 8003ac2:	4641      	mov	r1, r8
 8003ac4:	1a51      	subs	r1, r2, r1
 8003ac6:	63b9      	str	r1, [r7, #56]	; 0x38
 8003ac8:	4649      	mov	r1, r9
 8003aca:	eb63 0301 	sbc.w	r3, r3, r1
 8003ace:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 8003adc:	4649      	mov	r1, r9
 8003ade:	00cb      	lsls	r3, r1, #3
 8003ae0:	4641      	mov	r1, r8
 8003ae2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ae6:	4641      	mov	r1, r8
 8003ae8:	00ca      	lsls	r2, r1, #3
 8003aea:	4610      	mov	r0, r2
 8003aec:	4619      	mov	r1, r3
 8003aee:	4603      	mov	r3, r0
 8003af0:	4622      	mov	r2, r4
 8003af2:	189b      	adds	r3, r3, r2
 8003af4:	633b      	str	r3, [r7, #48]	; 0x30
 8003af6:	462b      	mov	r3, r5
 8003af8:	460a      	mov	r2, r1
 8003afa:	eb42 0303 	adc.w	r3, r2, r3
 8003afe:	637b      	str	r3, [r7, #52]	; 0x34
 8003b00:	f04f 0200 	mov.w	r2, #0
 8003b04:	f04f 0300 	mov.w	r3, #0
 8003b08:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003b0c:	4629      	mov	r1, r5
 8003b0e:	024b      	lsls	r3, r1, #9
 8003b10:	4621      	mov	r1, r4
 8003b12:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b16:	4621      	mov	r1, r4
 8003b18:	024a      	lsls	r2, r1, #9
 8003b1a:	4610      	mov	r0, r2
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003b22:	2200      	movs	r2, #0
 8003b24:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8003b28:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8003b2c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003b30:	f7fd f8ca 	bl	8000cc8 <__aeabi_uldivmod>
 8003b34:	4602      	mov	r2, r0
 8003b36:	460b      	mov	r3, r1
 8003b38:	4613      	mov	r3, r2
 8003b3a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003b3e:	e067      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b40:	4b75      	ldr	r3, [pc, #468]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b42:	685b      	ldr	r3, [r3, #4]
 8003b44:	099b      	lsrs	r3, r3, #6
 8003b46:	2200      	movs	r2, #0
 8003b48:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003b4c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003b50:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003b54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003b5e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003b62:	4622      	mov	r2, r4
 8003b64:	462b      	mov	r3, r5
 8003b66:	f04f 0000 	mov.w	r0, #0
 8003b6a:	f04f 0100 	mov.w	r1, #0
 8003b6e:	0159      	lsls	r1, r3, #5
 8003b70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b74:	0150      	lsls	r0, r2, #5
 8003b76:	4602      	mov	r2, r0
 8003b78:	460b      	mov	r3, r1
 8003b7a:	4621      	mov	r1, r4
 8003b7c:	1a51      	subs	r1, r2, r1
 8003b7e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003b80:	4629      	mov	r1, r5
 8003b82:	eb63 0301 	sbc.w	r3, r3, r1
 8003b86:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003b94:	4649      	mov	r1, r9
 8003b96:	018b      	lsls	r3, r1, #6
 8003b98:	4641      	mov	r1, r8
 8003b9a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9e:	4641      	mov	r1, r8
 8003ba0:	018a      	lsls	r2, r1, #6
 8003ba2:	4641      	mov	r1, r8
 8003ba4:	ebb2 0a01 	subs.w	sl, r2, r1
 8003ba8:	4649      	mov	r1, r9
 8003baa:	eb63 0b01 	sbc.w	fp, r3, r1
 8003bae:	f04f 0200 	mov.w	r2, #0
 8003bb2:	f04f 0300 	mov.w	r3, #0
 8003bb6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bba:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bbe:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bc2:	4692      	mov	sl, r2
 8003bc4:	469b      	mov	fp, r3
 8003bc6:	4623      	mov	r3, r4
 8003bc8:	eb1a 0303 	adds.w	r3, sl, r3
 8003bcc:	623b      	str	r3, [r7, #32]
 8003bce:	462b      	mov	r3, r5
 8003bd0:	eb4b 0303 	adc.w	r3, fp, r3
 8003bd4:	627b      	str	r3, [r7, #36]	; 0x24
 8003bd6:	f04f 0200 	mov.w	r2, #0
 8003bda:	f04f 0300 	mov.w	r3, #0
 8003bde:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003be2:	4629      	mov	r1, r5
 8003be4:	028b      	lsls	r3, r1, #10
 8003be6:	4621      	mov	r1, r4
 8003be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bec:	4621      	mov	r1, r4
 8003bee:	028a      	lsls	r2, r1, #10
 8003bf0:	4610      	mov	r0, r2
 8003bf2:	4619      	mov	r1, r3
 8003bf4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	673b      	str	r3, [r7, #112]	; 0x70
 8003bfc:	677a      	str	r2, [r7, #116]	; 0x74
 8003bfe:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003c02:	f7fd f861 	bl	8000cc8 <__aeabi_uldivmod>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003c22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003c26:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c2e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003c32:	e0eb      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c34:	4b38      	ldr	r3, [pc, #224]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c36:	685b      	ldr	r3, [r3, #4]
 8003c38:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003c3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c40:	4b35      	ldr	r3, [pc, #212]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d06b      	beq.n	8003d24 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c4c:	4b32      	ldr	r3, [pc, #200]	; (8003d18 <HAL_RCC_GetSysClockFreq+0x354>)
 8003c4e:	685b      	ldr	r3, [r3, #4]
 8003c50:	099b      	lsrs	r3, r3, #6
 8003c52:	2200      	movs	r2, #0
 8003c54:	66bb      	str	r3, [r7, #104]	; 0x68
 8003c56:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003c58:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003c5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c5e:	663b      	str	r3, [r7, #96]	; 0x60
 8003c60:	2300      	movs	r3, #0
 8003c62:	667b      	str	r3, [r7, #100]	; 0x64
 8003c64:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003c68:	4622      	mov	r2, r4
 8003c6a:	462b      	mov	r3, r5
 8003c6c:	f04f 0000 	mov.w	r0, #0
 8003c70:	f04f 0100 	mov.w	r1, #0
 8003c74:	0159      	lsls	r1, r3, #5
 8003c76:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7a:	0150      	lsls	r0, r2, #5
 8003c7c:	4602      	mov	r2, r0
 8003c7e:	460b      	mov	r3, r1
 8003c80:	4621      	mov	r1, r4
 8003c82:	1a51      	subs	r1, r2, r1
 8003c84:	61b9      	str	r1, [r7, #24]
 8003c86:	4629      	mov	r1, r5
 8003c88:	eb63 0301 	sbc.w	r3, r3, r1
 8003c8c:	61fb      	str	r3, [r7, #28]
 8003c8e:	f04f 0200 	mov.w	r2, #0
 8003c92:	f04f 0300 	mov.w	r3, #0
 8003c96:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	018b      	lsls	r3, r1, #6
 8003c9e:	4651      	mov	r1, sl
 8003ca0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003ca4:	4651      	mov	r1, sl
 8003ca6:	018a      	lsls	r2, r1, #6
 8003ca8:	4651      	mov	r1, sl
 8003caa:	ebb2 0801 	subs.w	r8, r2, r1
 8003cae:	4659      	mov	r1, fp
 8003cb0:	eb63 0901 	sbc.w	r9, r3, r1
 8003cb4:	f04f 0200 	mov.w	r2, #0
 8003cb8:	f04f 0300 	mov.w	r3, #0
 8003cbc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003cc0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003cc4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003cc8:	4690      	mov	r8, r2
 8003cca:	4699      	mov	r9, r3
 8003ccc:	4623      	mov	r3, r4
 8003cce:	eb18 0303 	adds.w	r3, r8, r3
 8003cd2:	613b      	str	r3, [r7, #16]
 8003cd4:	462b      	mov	r3, r5
 8003cd6:	eb49 0303 	adc.w	r3, r9, r3
 8003cda:	617b      	str	r3, [r7, #20]
 8003cdc:	f04f 0200 	mov.w	r2, #0
 8003ce0:	f04f 0300 	mov.w	r3, #0
 8003ce4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003ce8:	4629      	mov	r1, r5
 8003cea:	024b      	lsls	r3, r1, #9
 8003cec:	4621      	mov	r1, r4
 8003cee:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003cf2:	4621      	mov	r1, r4
 8003cf4:	024a      	lsls	r2, r1, #9
 8003cf6:	4610      	mov	r0, r2
 8003cf8:	4619      	mov	r1, r3
 8003cfa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003cfe:	2200      	movs	r2, #0
 8003d00:	65bb      	str	r3, [r7, #88]	; 0x58
 8003d02:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003d04:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003d08:	f7fc ffde 	bl	8000cc8 <__aeabi_uldivmod>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4613      	mov	r3, r2
 8003d12:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d16:	e065      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x420>
 8003d18:	40023800 	.word	0x40023800
 8003d1c:	00f42400 	.word	0x00f42400
 8003d20:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d24:	4b3d      	ldr	r3, [pc, #244]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	099b      	lsrs	r3, r3, #6
 8003d2a:	2200      	movs	r2, #0
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	4611      	mov	r1, r2
 8003d30:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d34:	653b      	str	r3, [r7, #80]	; 0x50
 8003d36:	2300      	movs	r3, #0
 8003d38:	657b      	str	r3, [r7, #84]	; 0x54
 8003d3a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003d3e:	4642      	mov	r2, r8
 8003d40:	464b      	mov	r3, r9
 8003d42:	f04f 0000 	mov.w	r0, #0
 8003d46:	f04f 0100 	mov.w	r1, #0
 8003d4a:	0159      	lsls	r1, r3, #5
 8003d4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d50:	0150      	lsls	r0, r2, #5
 8003d52:	4602      	mov	r2, r0
 8003d54:	460b      	mov	r3, r1
 8003d56:	4641      	mov	r1, r8
 8003d58:	1a51      	subs	r1, r2, r1
 8003d5a:	60b9      	str	r1, [r7, #8]
 8003d5c:	4649      	mov	r1, r9
 8003d5e:	eb63 0301 	sbc.w	r3, r3, r1
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	f04f 0200 	mov.w	r2, #0
 8003d68:	f04f 0300 	mov.w	r3, #0
 8003d6c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003d70:	4659      	mov	r1, fp
 8003d72:	018b      	lsls	r3, r1, #6
 8003d74:	4651      	mov	r1, sl
 8003d76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d7a:	4651      	mov	r1, sl
 8003d7c:	018a      	lsls	r2, r1, #6
 8003d7e:	4651      	mov	r1, sl
 8003d80:	1a54      	subs	r4, r2, r1
 8003d82:	4659      	mov	r1, fp
 8003d84:	eb63 0501 	sbc.w	r5, r3, r1
 8003d88:	f04f 0200 	mov.w	r2, #0
 8003d8c:	f04f 0300 	mov.w	r3, #0
 8003d90:	00eb      	lsls	r3, r5, #3
 8003d92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d96:	00e2      	lsls	r2, r4, #3
 8003d98:	4614      	mov	r4, r2
 8003d9a:	461d      	mov	r5, r3
 8003d9c:	4643      	mov	r3, r8
 8003d9e:	18e3      	adds	r3, r4, r3
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	464b      	mov	r3, r9
 8003da4:	eb45 0303 	adc.w	r3, r5, r3
 8003da8:	607b      	str	r3, [r7, #4]
 8003daa:	f04f 0200 	mov.w	r2, #0
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db6:	4629      	mov	r1, r5
 8003db8:	028b      	lsls	r3, r1, #10
 8003dba:	4621      	mov	r1, r4
 8003dbc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dc0:	4621      	mov	r1, r4
 8003dc2:	028a      	lsls	r2, r1, #10
 8003dc4:	4610      	mov	r0, r2
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003dcc:	2200      	movs	r2, #0
 8003dce:	64bb      	str	r3, [r7, #72]	; 0x48
 8003dd0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003dd2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003dd6:	f7fc ff77 	bl	8000cc8 <__aeabi_uldivmod>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	460b      	mov	r3, r1
 8003dde:	4613      	mov	r3, r2
 8003de0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003de4:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_RCC_GetSysClockFreq+0x458>)
 8003de6:	685b      	ldr	r3, [r3, #4]
 8003de8:	0f1b      	lsrs	r3, r3, #28
 8003dea:	f003 0307 	and.w	r3, r3, #7
 8003dee:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003df2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003df6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dfe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e02:	e003      	b.n	8003e0c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e04:	4b06      	ldr	r3, [pc, #24]	; (8003e20 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003e06:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003e0a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e0c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	37b8      	adds	r7, #184	; 0xb8
 8003e14:	46bd      	mov	sp, r7
 8003e16:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e1a:	bf00      	nop
 8003e1c:	40023800 	.word	0x40023800
 8003e20:	00f42400 	.word	0x00f42400

08003e24 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b086      	sub	sp, #24
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d101      	bne.n	8003e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003e32:	2301      	movs	r3, #1
 8003e34:	e28d      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 0301 	and.w	r3, r3, #1
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f000 8083 	beq.w	8003f4a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e44:	4b94      	ldr	r3, [pc, #592]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	f003 030c 	and.w	r3, r3, #12
 8003e4c:	2b04      	cmp	r3, #4
 8003e4e:	d019      	beq.n	8003e84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e50:	4b91      	ldr	r3, [pc, #580]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003e58:	2b08      	cmp	r3, #8
 8003e5a:	d106      	bne.n	8003e6a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e5c:	4b8e      	ldr	r3, [pc, #568]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e68:	d00c      	beq.n	8003e84 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e6a:	4b8b      	ldr	r3, [pc, #556]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003e72:	2b0c      	cmp	r3, #12
 8003e74:	d112      	bne.n	8003e9c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003e76:	4b88      	ldr	r3, [pc, #544]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e7e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e82:	d10b      	bne.n	8003e9c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e84:	4b84      	ldr	r3, [pc, #528]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d05b      	beq.n	8003f48 <HAL_RCC_OscConfig+0x124>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d157      	bne.n	8003f48 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003e98:	2301      	movs	r3, #1
 8003e9a:	e25a      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ea4:	d106      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x90>
 8003ea6:	4b7c      	ldr	r3, [pc, #496]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a7b      	ldr	r2, [pc, #492]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003eac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003eb0:	6013      	str	r3, [r2, #0]
 8003eb2:	e01d      	b.n	8003ef0 <HAL_RCC_OscConfig+0xcc>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ebc:	d10c      	bne.n	8003ed8 <HAL_RCC_OscConfig+0xb4>
 8003ebe:	4b76      	ldr	r3, [pc, #472]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a75      	ldr	r2, [pc, #468]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ec4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ec8:	6013      	str	r3, [r2, #0]
 8003eca:	4b73      	ldr	r3, [pc, #460]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a72      	ldr	r2, [pc, #456]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ed0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ed4:	6013      	str	r3, [r2, #0]
 8003ed6:	e00b      	b.n	8003ef0 <HAL_RCC_OscConfig+0xcc>
 8003ed8:	4b6f      	ldr	r3, [pc, #444]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a6e      	ldr	r2, [pc, #440]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ede:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003ee2:	6013      	str	r3, [r2, #0]
 8003ee4:	4b6c      	ldr	r3, [pc, #432]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4a6b      	ldr	r2, [pc, #428]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003eea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003eee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d013      	beq.n	8003f20 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ef8:	f7fe f84e 	bl	8001f98 <HAL_GetTick>
 8003efc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003efe:	e008      	b.n	8003f12 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f00:	f7fe f84a 	bl	8001f98 <HAL_GetTick>
 8003f04:	4602      	mov	r2, r0
 8003f06:	693b      	ldr	r3, [r7, #16]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	2b64      	cmp	r3, #100	; 0x64
 8003f0c:	d901      	bls.n	8003f12 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003f0e:	2303      	movs	r3, #3
 8003f10:	e21f      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f12:	4b61      	ldr	r3, [pc, #388]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d0f0      	beq.n	8003f00 <HAL_RCC_OscConfig+0xdc>
 8003f1e:	e014      	b.n	8003f4a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f20:	f7fe f83a 	bl	8001f98 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003f28:	f7fe f836 	bl	8001f98 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b64      	cmp	r3, #100	; 0x64
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e20b      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003f3a:	4b57      	ldr	r3, [pc, #348]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1f0      	bne.n	8003f28 <HAL_RCC_OscConfig+0x104>
 8003f46:	e000      	b.n	8003f4a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0302 	and.w	r3, r3, #2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d06f      	beq.n	8004036 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f56:	4b50      	ldr	r3, [pc, #320]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f58:	689b      	ldr	r3, [r3, #8]
 8003f5a:	f003 030c 	and.w	r3, r3, #12
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d017      	beq.n	8003f92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f62:	4b4d      	ldr	r3, [pc, #308]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d105      	bne.n	8003f7a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f6e:	4b4a      	ldr	r3, [pc, #296]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d00b      	beq.n	8003f92 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f7a:	4b47      	ldr	r3, [pc, #284]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f7c:	689b      	ldr	r3, [r3, #8]
 8003f7e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003f82:	2b0c      	cmp	r3, #12
 8003f84:	d11c      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003f86:	4b44      	ldr	r3, [pc, #272]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d116      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003f92:	4b41      	ldr	r3, [pc, #260]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d005      	beq.n	8003faa <HAL_RCC_OscConfig+0x186>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	68db      	ldr	r3, [r3, #12]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d001      	beq.n	8003faa <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e1d3      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003faa:	4b3b      	ldr	r3, [pc, #236]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	691b      	ldr	r3, [r3, #16]
 8003fb6:	00db      	lsls	r3, r3, #3
 8003fb8:	4937      	ldr	r1, [pc, #220]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003fbe:	e03a      	b.n	8004036 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	68db      	ldr	r3, [r3, #12]
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d020      	beq.n	800400a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003fc8:	4b34      	ldr	r3, [pc, #208]	; (800409c <HAL_RCC_OscConfig+0x278>)
 8003fca:	2201      	movs	r2, #1
 8003fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fce:	f7fd ffe3 	bl	8001f98 <HAL_GetTick>
 8003fd2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fd4:	e008      	b.n	8003fe8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003fd6:	f7fd ffdf 	bl	8001f98 <HAL_GetTick>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	693b      	ldr	r3, [r7, #16]
 8003fde:	1ad3      	subs	r3, r2, r3
 8003fe0:	2b02      	cmp	r3, #2
 8003fe2:	d901      	bls.n	8003fe8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003fe4:	2303      	movs	r3, #3
 8003fe6:	e1b4      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003fe8:	4b2b      	ldr	r3, [pc, #172]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f003 0302 	and.w	r3, r3, #2
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d0f0      	beq.n	8003fd6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ff4:	4b28      	ldr	r3, [pc, #160]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	00db      	lsls	r3, r3, #3
 8004002:	4925      	ldr	r1, [pc, #148]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 8004004:	4313      	orrs	r3, r2
 8004006:	600b      	str	r3, [r1, #0]
 8004008:	e015      	b.n	8004036 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800400a:	4b24      	ldr	r3, [pc, #144]	; (800409c <HAL_RCC_OscConfig+0x278>)
 800400c:	2200      	movs	r2, #0
 800400e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004010:	f7fd ffc2 	bl	8001f98 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004018:	f7fd ffbe 	bl	8001f98 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b02      	cmp	r3, #2
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e193      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800402a:	4b1b      	ldr	r3, [pc, #108]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0302 	and.w	r3, r3, #2
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d036      	beq.n	80040b0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	2b00      	cmp	r3, #0
 8004048:	d016      	beq.n	8004078 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800404a:	4b15      	ldr	r3, [pc, #84]	; (80040a0 <HAL_RCC_OscConfig+0x27c>)
 800404c:	2201      	movs	r2, #1
 800404e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004050:	f7fd ffa2 	bl	8001f98 <HAL_GetTick>
 8004054:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004056:	e008      	b.n	800406a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004058:	f7fd ff9e 	bl	8001f98 <HAL_GetTick>
 800405c:	4602      	mov	r2, r0
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	1ad3      	subs	r3, r2, r3
 8004062:	2b02      	cmp	r3, #2
 8004064:	d901      	bls.n	800406a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8004066:	2303      	movs	r3, #3
 8004068:	e173      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800406a:	4b0b      	ldr	r3, [pc, #44]	; (8004098 <HAL_RCC_OscConfig+0x274>)
 800406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d0f0      	beq.n	8004058 <HAL_RCC_OscConfig+0x234>
 8004076:	e01b      	b.n	80040b0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004078:	4b09      	ldr	r3, [pc, #36]	; (80040a0 <HAL_RCC_OscConfig+0x27c>)
 800407a:	2200      	movs	r2, #0
 800407c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800407e:	f7fd ff8b 	bl	8001f98 <HAL_GetTick>
 8004082:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004084:	e00e      	b.n	80040a4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004086:	f7fd ff87 	bl	8001f98 <HAL_GetTick>
 800408a:	4602      	mov	r2, r0
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	1ad3      	subs	r3, r2, r3
 8004090:	2b02      	cmp	r3, #2
 8004092:	d907      	bls.n	80040a4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8004094:	2303      	movs	r3, #3
 8004096:	e15c      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
 8004098:	40023800 	.word	0x40023800
 800409c:	42470000 	.word	0x42470000
 80040a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80040a4:	4b8a      	ldr	r3, [pc, #552]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80040a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d1ea      	bne.n	8004086 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f003 0304 	and.w	r3, r3, #4
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	f000 8097 	beq.w	80041ec <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80040be:	2300      	movs	r3, #0
 80040c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80040c2:	4b83      	ldr	r3, [pc, #524]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80040c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d10f      	bne.n	80040ee <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80040ce:	2300      	movs	r3, #0
 80040d0:	60bb      	str	r3, [r7, #8]
 80040d2:	4b7f      	ldr	r3, [pc, #508]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80040d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d6:	4a7e      	ldr	r2, [pc, #504]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80040d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040dc:	6413      	str	r3, [r2, #64]	; 0x40
 80040de:	4b7c      	ldr	r3, [pc, #496]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80040e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040e6:	60bb      	str	r3, [r7, #8]
 80040e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80040ea:	2301      	movs	r3, #1
 80040ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80040ee:	4b79      	ldr	r3, [pc, #484]	; (80042d4 <HAL_RCC_OscConfig+0x4b0>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d118      	bne.n	800412c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80040fa:	4b76      	ldr	r3, [pc, #472]	; (80042d4 <HAL_RCC_OscConfig+0x4b0>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	4a75      	ldr	r2, [pc, #468]	; (80042d4 <HAL_RCC_OscConfig+0x4b0>)
 8004100:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004104:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004106:	f7fd ff47 	bl	8001f98 <HAL_GetTick>
 800410a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800410c:	e008      	b.n	8004120 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800410e:	f7fd ff43 	bl	8001f98 <HAL_GetTick>
 8004112:	4602      	mov	r2, r0
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	1ad3      	subs	r3, r2, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d901      	bls.n	8004120 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e118      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004120:	4b6c      	ldr	r3, [pc, #432]	; (80042d4 <HAL_RCC_OscConfig+0x4b0>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0f0      	beq.n	800410e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	2b01      	cmp	r3, #1
 8004132:	d106      	bne.n	8004142 <HAL_RCC_OscConfig+0x31e>
 8004134:	4b66      	ldr	r3, [pc, #408]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004138:	4a65      	ldr	r2, [pc, #404]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 800413a:	f043 0301 	orr.w	r3, r3, #1
 800413e:	6713      	str	r3, [r2, #112]	; 0x70
 8004140:	e01c      	b.n	800417c <HAL_RCC_OscConfig+0x358>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	2b05      	cmp	r3, #5
 8004148:	d10c      	bne.n	8004164 <HAL_RCC_OscConfig+0x340>
 800414a:	4b61      	ldr	r3, [pc, #388]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 800414c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800414e:	4a60      	ldr	r2, [pc, #384]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004150:	f043 0304 	orr.w	r3, r3, #4
 8004154:	6713      	str	r3, [r2, #112]	; 0x70
 8004156:	4b5e      	ldr	r3, [pc, #376]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800415a:	4a5d      	ldr	r2, [pc, #372]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 800415c:	f043 0301 	orr.w	r3, r3, #1
 8004160:	6713      	str	r3, [r2, #112]	; 0x70
 8004162:	e00b      	b.n	800417c <HAL_RCC_OscConfig+0x358>
 8004164:	4b5a      	ldr	r3, [pc, #360]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004166:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004168:	4a59      	ldr	r2, [pc, #356]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 800416a:	f023 0301 	bic.w	r3, r3, #1
 800416e:	6713      	str	r3, [r2, #112]	; 0x70
 8004170:	4b57      	ldr	r3, [pc, #348]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004172:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004174:	4a56      	ldr	r2, [pc, #344]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004176:	f023 0304 	bic.w	r3, r3, #4
 800417a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d015      	beq.n	80041b0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004184:	f7fd ff08 	bl	8001f98 <HAL_GetTick>
 8004188:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800418a:	e00a      	b.n	80041a2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800418c:	f7fd ff04 	bl	8001f98 <HAL_GetTick>
 8004190:	4602      	mov	r2, r0
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	1ad3      	subs	r3, r2, r3
 8004196:	f241 3288 	movw	r2, #5000	; 0x1388
 800419a:	4293      	cmp	r3, r2
 800419c:	d901      	bls.n	80041a2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800419e:	2303      	movs	r3, #3
 80041a0:	e0d7      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80041a2:	4b4b      	ldr	r3, [pc, #300]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80041a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041a6:	f003 0302 	and.w	r3, r3, #2
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0ee      	beq.n	800418c <HAL_RCC_OscConfig+0x368>
 80041ae:	e014      	b.n	80041da <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041b0:	f7fd fef2 	bl	8001f98 <HAL_GetTick>
 80041b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041b6:	e00a      	b.n	80041ce <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80041b8:	f7fd feee 	bl	8001f98 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d901      	bls.n	80041ce <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80041ca:	2303      	movs	r3, #3
 80041cc:	e0c1      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80041ce:	4b40      	ldr	r3, [pc, #256]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80041d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041d2:	f003 0302 	and.w	r3, r3, #2
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d1ee      	bne.n	80041b8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80041da:	7dfb      	ldrb	r3, [r7, #23]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d105      	bne.n	80041ec <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80041e0:	4b3b      	ldr	r3, [pc, #236]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80041e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e4:	4a3a      	ldr	r2, [pc, #232]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80041e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80041ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	f000 80ad 	beq.w	8004350 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041f6:	4b36      	ldr	r3, [pc, #216]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80041f8:	689b      	ldr	r3, [r3, #8]
 80041fa:	f003 030c 	and.w	r3, r3, #12
 80041fe:	2b08      	cmp	r3, #8
 8004200:	d060      	beq.n	80042c4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	699b      	ldr	r3, [r3, #24]
 8004206:	2b02      	cmp	r3, #2
 8004208:	d145      	bne.n	8004296 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800420a:	4b33      	ldr	r3, [pc, #204]	; (80042d8 <HAL_RCC_OscConfig+0x4b4>)
 800420c:	2200      	movs	r2, #0
 800420e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004210:	f7fd fec2 	bl	8001f98 <HAL_GetTick>
 8004214:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004216:	e008      	b.n	800422a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004218:	f7fd febe 	bl	8001f98 <HAL_GetTick>
 800421c:	4602      	mov	r2, r0
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	1ad3      	subs	r3, r2, r3
 8004222:	2b02      	cmp	r3, #2
 8004224:	d901      	bls.n	800422a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e093      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800422a:	4b29      	ldr	r3, [pc, #164]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004232:	2b00      	cmp	r3, #0
 8004234:	d1f0      	bne.n	8004218 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	69da      	ldr	r2, [r3, #28]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	431a      	orrs	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004244:	019b      	lsls	r3, r3, #6
 8004246:	431a      	orrs	r2, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800424c:	085b      	lsrs	r3, r3, #1
 800424e:	3b01      	subs	r3, #1
 8004250:	041b      	lsls	r3, r3, #16
 8004252:	431a      	orrs	r2, r3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004258:	061b      	lsls	r3, r3, #24
 800425a:	431a      	orrs	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	071b      	lsls	r3, r3, #28
 8004262:	491b      	ldr	r1, [pc, #108]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 8004264:	4313      	orrs	r3, r2
 8004266:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004268:	4b1b      	ldr	r3, [pc, #108]	; (80042d8 <HAL_RCC_OscConfig+0x4b4>)
 800426a:	2201      	movs	r2, #1
 800426c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800426e:	f7fd fe93 	bl	8001f98 <HAL_GetTick>
 8004272:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004274:	e008      	b.n	8004288 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004276:	f7fd fe8f 	bl	8001f98 <HAL_GetTick>
 800427a:	4602      	mov	r2, r0
 800427c:	693b      	ldr	r3, [r7, #16]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	2b02      	cmp	r3, #2
 8004282:	d901      	bls.n	8004288 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004284:	2303      	movs	r3, #3
 8004286:	e064      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004288:	4b11      	ldr	r3, [pc, #68]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004290:	2b00      	cmp	r3, #0
 8004292:	d0f0      	beq.n	8004276 <HAL_RCC_OscConfig+0x452>
 8004294:	e05c      	b.n	8004350 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004296:	4b10      	ldr	r3, [pc, #64]	; (80042d8 <HAL_RCC_OscConfig+0x4b4>)
 8004298:	2200      	movs	r2, #0
 800429a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800429c:	f7fd fe7c 	bl	8001f98 <HAL_GetTick>
 80042a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042a2:	e008      	b.n	80042b6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80042a4:	f7fd fe78 	bl	8001f98 <HAL_GetTick>
 80042a8:	4602      	mov	r2, r0
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	1ad3      	subs	r3, r2, r3
 80042ae:	2b02      	cmp	r3, #2
 80042b0:	d901      	bls.n	80042b6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80042b2:	2303      	movs	r3, #3
 80042b4:	e04d      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042b6:	4b06      	ldr	r3, [pc, #24]	; (80042d0 <HAL_RCC_OscConfig+0x4ac>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1f0      	bne.n	80042a4 <HAL_RCC_OscConfig+0x480>
 80042c2:	e045      	b.n	8004350 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	699b      	ldr	r3, [r3, #24]
 80042c8:	2b01      	cmp	r3, #1
 80042ca:	d107      	bne.n	80042dc <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e040      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
 80042d0:	40023800 	.word	0x40023800
 80042d4:	40007000 	.word	0x40007000
 80042d8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80042dc:	4b1f      	ldr	r3, [pc, #124]	; (800435c <HAL_RCC_OscConfig+0x538>)
 80042de:	685b      	ldr	r3, [r3, #4]
 80042e0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	699b      	ldr	r3, [r3, #24]
 80042e6:	2b01      	cmp	r3, #1
 80042e8:	d030      	beq.n	800434c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d129      	bne.n	800434c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004302:	429a      	cmp	r2, r3
 8004304:	d122      	bne.n	800434c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004306:	68fa      	ldr	r2, [r7, #12]
 8004308:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800430c:	4013      	ands	r3, r2
 800430e:	687a      	ldr	r2, [r7, #4]
 8004310:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004312:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004314:	4293      	cmp	r3, r2
 8004316:	d119      	bne.n	800434c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004322:	085b      	lsrs	r3, r3, #1
 8004324:	3b01      	subs	r3, #1
 8004326:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004328:	429a      	cmp	r2, r3
 800432a:	d10f      	bne.n	800434c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004336:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004338:	429a      	cmp	r2, r3
 800433a:	d107      	bne.n	800434c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004346:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004348:	429a      	cmp	r2, r3
 800434a:	d001      	beq.n	8004350 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800434c:	2301      	movs	r3, #1
 800434e:	e000      	b.n	8004352 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3718      	adds	r7, #24
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	40023800 	.word	0x40023800

08004360 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2b00      	cmp	r3, #0
 800436c:	d101      	bne.n	8004372 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800436e:	2301      	movs	r3, #1
 8004370:	e042      	b.n	80043f8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004378:	b2db      	uxtb	r3, r3
 800437a:	2b00      	cmp	r3, #0
 800437c:	d106      	bne.n	800438c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2200      	movs	r2, #0
 8004382:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004386:	6878      	ldr	r0, [r7, #4]
 8004388:	f7fd fba2 	bl	8001ad0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2224      	movs	r2, #36	; 0x24
 8004390:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	68da      	ldr	r2, [r3, #12]
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043a2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f000 ff6d 	bl	8005284 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	691a      	ldr	r2, [r3, #16]
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043b8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	695a      	ldr	r2, [r3, #20]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043c8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	68da      	ldr	r2, [r3, #12]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043d8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	2200      	movs	r2, #0
 80043de:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2220      	movs	r2, #32
 80043e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	2220      	movs	r2, #32
 80043ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	2200      	movs	r2, #0
 80043f4:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80043f6:	2300      	movs	r3, #0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3708      	adds	r7, #8
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd80      	pop	{r7, pc}

08004400 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08c      	sub	sp, #48	; 0x30
 8004404:	af00      	add	r7, sp, #0
 8004406:	60f8      	str	r0, [r7, #12]
 8004408:	60b9      	str	r1, [r7, #8]
 800440a:	4613      	mov	r3, r2
 800440c:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004414:	b2db      	uxtb	r3, r3
 8004416:	2b20      	cmp	r3, #32
 8004418:	d156      	bne.n	80044c8 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <HAL_UART_Transmit_DMA+0x26>
 8004420:	88fb      	ldrh	r3, [r7, #6]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d101      	bne.n	800442a <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8004426:	2301      	movs	r3, #1
 8004428:	e04f      	b.n	80044ca <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 800442a:	68ba      	ldr	r2, [r7, #8]
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	2200      	movs	r2, #0
 8004440:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	2221      	movs	r2, #33	; 0x21
 8004446:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800444e:	4a21      	ldr	r2, [pc, #132]	; (80044d4 <HAL_UART_Transmit_DMA+0xd4>)
 8004450:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004456:	4a20      	ldr	r2, [pc, #128]	; (80044d8 <HAL_UART_Transmit_DMA+0xd8>)
 8004458:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800445e:	4a1f      	ldr	r2, [pc, #124]	; (80044dc <HAL_UART_Transmit_DMA+0xdc>)
 8004460:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004466:	2200      	movs	r2, #0
 8004468:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 800446a:	f107 0308 	add.w	r3, r7, #8
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004476:	6819      	ldr	r1, [r3, #0]
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	3304      	adds	r3, #4
 800447e:	461a      	mov	r2, r3
 8004480:	88fb      	ldrh	r3, [r7, #6]
 8004482:	f7fd ff95 	bl	80023b0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800448e:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	3314      	adds	r3, #20
 8004496:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004498:	69bb      	ldr	r3, [r7, #24]
 800449a:	e853 3f00 	ldrex	r3, [r3]
 800449e:	617b      	str	r3, [r7, #20]
   return(result);
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	3314      	adds	r3, #20
 80044ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044b0:	627a      	str	r2, [r7, #36]	; 0x24
 80044b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044b4:	6a39      	ldr	r1, [r7, #32]
 80044b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80044b8:	e841 2300 	strex	r3, r2, [r1]
 80044bc:	61fb      	str	r3, [r7, #28]
   return(result);
 80044be:	69fb      	ldr	r3, [r7, #28]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d1e5      	bne.n	8004490 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80044c4:	2300      	movs	r3, #0
 80044c6:	e000      	b.n	80044ca <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80044c8:	2302      	movs	r3, #2
  }
}
 80044ca:	4618      	mov	r0, r3
 80044cc:	3730      	adds	r7, #48	; 0x30
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}
 80044d2:	bf00      	nop
 80044d4:	08004b11 	.word	0x08004b11
 80044d8:	08004bab 	.word	0x08004bab
 80044dc:	08004d2f 	.word	0x08004d2f

080044e0 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b08c      	sub	sp, #48	; 0x30
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	60f8      	str	r0, [r7, #12]
 80044e8:	60b9      	str	r1, [r7, #8]
 80044ea:	4613      	mov	r3, r2
 80044ec:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80044f4:	b2db      	uxtb	r3, r3
 80044f6:	2b20      	cmp	r3, #32
 80044f8:	d14a      	bne.n	8004590 <HAL_UARTEx_ReceiveToIdle_DMA+0xb0>
  {
    if ((pData == NULL) || (Size == 0U))
 80044fa:	68bb      	ldr	r3, [r7, #8]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d002      	beq.n	8004506 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 8004500:	88fb      	ldrh	r3, [r7, #6]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e043      	b.n	8004592 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2201      	movs	r2, #1
 800450e:	631a      	str	r2, [r3, #48]	; 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	635a      	str	r2, [r3, #52]	; 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8004516:	88fb      	ldrh	r3, [r7, #6]
 8004518:	461a      	mov	r2, r3
 800451a:	68b9      	ldr	r1, [r7, #8]
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f000 fc51 	bl	8004dc4 <UART_Start_Receive_DMA>
 8004522:	4603      	mov	r3, r0
 8004524:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 8004528:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800452c:	2b00      	cmp	r3, #0
 800452e:	d12c      	bne.n	800458a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	2b01      	cmp	r3, #1
 8004536:	d125      	bne.n	8004584 <HAL_UARTEx_ReceiveToIdle_DMA+0xa4>
      {
        __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004538:	2300      	movs	r3, #0
 800453a:	613b      	str	r3, [r7, #16]
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	685b      	ldr	r3, [r3, #4]
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	330c      	adds	r3, #12
 8004554:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004556:	69bb      	ldr	r3, [r7, #24]
 8004558:	e853 3f00 	ldrex	r3, [r3]
 800455c:	617b      	str	r3, [r7, #20]
   return(result);
 800455e:	697b      	ldr	r3, [r7, #20]
 8004560:	f043 0310 	orr.w	r3, r3, #16
 8004564:	62bb      	str	r3, [r7, #40]	; 0x28
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	330c      	adds	r3, #12
 800456c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800456e:	627a      	str	r2, [r7, #36]	; 0x24
 8004570:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004572:	6a39      	ldr	r1, [r7, #32]
 8004574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004576:	e841 2300 	strex	r3, r2, [r1]
 800457a:	61fb      	str	r3, [r7, #28]
   return(result);
 800457c:	69fb      	ldr	r3, [r7, #28]
 800457e:	2b00      	cmp	r3, #0
 8004580:	d1e5      	bne.n	800454e <HAL_UARTEx_ReceiveToIdle_DMA+0x6e>
 8004582:	e002      	b.n	800458a <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8004584:	2301      	movs	r3, #1
 8004586:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }

    return status;
 800458a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800458e:	e000      	b.n	8004592 <HAL_UARTEx_ReceiveToIdle_DMA+0xb2>
  }
  else
  {
    return HAL_BUSY;
 8004590:	2302      	movs	r3, #2
  }
}
 8004592:	4618      	mov	r0, r3
 8004594:	3730      	adds	r7, #48	; 0x30
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800459c:	b580      	push	{r7, lr}
 800459e:	b0ba      	sub	sp, #232	; 0xe8
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80045c2:	2300      	movs	r3, #0
 80045c4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80045c8:	2300      	movs	r3, #0
 80045ca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80045ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045d2:	f003 030f 	and.w	r3, r3, #15
 80045d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80045da:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d10f      	bne.n	8004602 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80045e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80045e6:	f003 0320 	and.w	r3, r3, #32
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d009      	beq.n	8004602 <HAL_UART_IRQHandler+0x66>
 80045ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80045f2:	f003 0320 	and.w	r3, r3, #32
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d003      	beq.n	8004602 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 fd83 	bl	8005106 <UART_Receive_IT>
      return;
 8004600:	e25b      	b.n	8004aba <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004602:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004606:	2b00      	cmp	r3, #0
 8004608:	f000 80de 	beq.w	80047c8 <HAL_UART_IRQHandler+0x22c>
 800460c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004610:	f003 0301 	and.w	r3, r3, #1
 8004614:	2b00      	cmp	r3, #0
 8004616:	d106      	bne.n	8004626 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800461c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004620:	2b00      	cmp	r3, #0
 8004622:	f000 80d1 	beq.w	80047c8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004626:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800462a:	f003 0301 	and.w	r3, r3, #1
 800462e:	2b00      	cmp	r3, #0
 8004630:	d00b      	beq.n	800464a <HAL_UART_IRQHandler+0xae>
 8004632:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004636:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800463a:	2b00      	cmp	r3, #0
 800463c:	d005      	beq.n	800464a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004642:	f043 0201 	orr.w	r2, r3, #1
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800464a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800464e:	f003 0304 	and.w	r3, r3, #4
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00b      	beq.n	800466e <HAL_UART_IRQHandler+0xd2>
 8004656:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d005      	beq.n	800466e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004666:	f043 0202 	orr.w	r2, r3, #2
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800466e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d00b      	beq.n	8004692 <HAL_UART_IRQHandler+0xf6>
 800467a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800467e:	f003 0301 	and.w	r3, r3, #1
 8004682:	2b00      	cmp	r3, #0
 8004684:	d005      	beq.n	8004692 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f043 0204 	orr.w	r2, r3, #4
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004696:	f003 0308 	and.w	r3, r3, #8
 800469a:	2b00      	cmp	r3, #0
 800469c:	d011      	beq.n	80046c2 <HAL_UART_IRQHandler+0x126>
 800469e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046a2:	f003 0320 	and.w	r3, r3, #32
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d105      	bne.n	80046b6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80046aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d005      	beq.n	80046c2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ba:	f043 0208 	orr.w	r2, r3, #8
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	f000 81f2 	beq.w	8004ab0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80046cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80046d0:	f003 0320 	and.w	r3, r3, #32
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d008      	beq.n	80046ea <HAL_UART_IRQHandler+0x14e>
 80046d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80046dc:	f003 0320 	and.w	r3, r3, #32
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d002      	beq.n	80046ea <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80046e4:	6878      	ldr	r0, [r7, #4]
 80046e6:	f000 fd0e 	bl	8005106 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	695b      	ldr	r3, [r3, #20]
 80046f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80046f4:	2b40      	cmp	r3, #64	; 0x40
 80046f6:	bf0c      	ite	eq
 80046f8:	2301      	moveq	r3, #1
 80046fa:	2300      	movne	r3, #0
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b00      	cmp	r3, #0
 800470c:	d103      	bne.n	8004716 <HAL_UART_IRQHandler+0x17a>
 800470e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d04f      	beq.n	80047b6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f000 fc16 	bl	8004f48 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	695b      	ldr	r3, [r3, #20]
 8004722:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004726:	2b40      	cmp	r3, #64	; 0x40
 8004728:	d141      	bne.n	80047ae <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	3314      	adds	r3, #20
 8004730:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004734:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004738:	e853 3f00 	ldrex	r3, [r3]
 800473c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004740:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004744:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004748:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	3314      	adds	r3, #20
 8004752:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004756:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800475a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800475e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004762:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004766:	e841 2300 	strex	r3, r2, [r1]
 800476a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800476e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004772:	2b00      	cmp	r3, #0
 8004774:	d1d9      	bne.n	800472a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800477a:	2b00      	cmp	r3, #0
 800477c:	d013      	beq.n	80047a6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004782:	4a7e      	ldr	r2, [pc, #504]	; (800497c <HAL_UART_IRQHandler+0x3e0>)
 8004784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800478a:	4618      	mov	r0, r3
 800478c:	f7fd fed8 	bl	8002540 <HAL_DMA_Abort_IT>
 8004790:	4603      	mov	r3, r0
 8004792:	2b00      	cmp	r3, #0
 8004794:	d016      	beq.n	80047c4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800479a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800479c:	687a      	ldr	r2, [r7, #4]
 800479e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80047a0:	4610      	mov	r0, r2
 80047a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047a4:	e00e      	b.n	80047c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f000 f9a8 	bl	8004afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047ac:	e00a      	b.n	80047c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80047ae:	6878      	ldr	r0, [r7, #4]
 80047b0:	f000 f9a4 	bl	8004afc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	e006      	b.n	80047c4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f000 f9a0 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80047c2:	e175      	b.n	8004ab0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047c4:	bf00      	nop
    return;
 80047c6:	e173      	b.n	8004ab0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047cc:	2b01      	cmp	r3, #1
 80047ce:	f040 814f 	bne.w	8004a70 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80047d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80047d6:	f003 0310 	and.w	r3, r3, #16
 80047da:	2b00      	cmp	r3, #0
 80047dc:	f000 8148 	beq.w	8004a70 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80047e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80047e4:	f003 0310 	and.w	r3, r3, #16
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	f000 8141 	beq.w	8004a70 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80047ee:	2300      	movs	r3, #0
 80047f0:	60bb      	str	r3, [r7, #8]
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	60bb      	str	r3, [r7, #8]
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	60bb      	str	r3, [r7, #8]
 8004802:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	695b      	ldr	r3, [r3, #20]
 800480a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800480e:	2b40      	cmp	r3, #64	; 0x40
 8004810:	f040 80b6 	bne.w	8004980 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004820:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004824:	2b00      	cmp	r3, #0
 8004826:	f000 8145 	beq.w	8004ab4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800482e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004832:	429a      	cmp	r2, r3
 8004834:	f080 813e 	bcs.w	8004ab4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800483e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004844:	69db      	ldr	r3, [r3, #28]
 8004846:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800484a:	f000 8088 	beq.w	800495e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	330c      	adds	r3, #12
 8004854:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004858:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800485c:	e853 3f00 	ldrex	r3, [r3]
 8004860:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004864:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004868:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800486c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800487a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800487e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004882:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004886:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800488a:	e841 2300 	strex	r3, r2, [r1]
 800488e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004892:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004896:	2b00      	cmp	r3, #0
 8004898:	d1d9      	bne.n	800484e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	3314      	adds	r3, #20
 80048a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048a4:	e853 3f00 	ldrex	r3, [r3]
 80048a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80048aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80048ac:	f023 0301 	bic.w	r3, r3, #1
 80048b0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	3314      	adds	r3, #20
 80048ba:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80048be:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80048c2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80048c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80048ca:	e841 2300 	strex	r3, r2, [r1]
 80048ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80048d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e1      	bne.n	800489a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3314      	adds	r3, #20
 80048dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80048e0:	e853 3f00 	ldrex	r3, [r3]
 80048e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80048e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80048ec:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	3314      	adds	r3, #20
 80048f6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80048fa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80048fc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048fe:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004900:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004902:	e841 2300 	strex	r3, r2, [r1]
 8004906:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004908:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800490a:	2b00      	cmp	r3, #0
 800490c:	d1e3      	bne.n	80048d6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	2200      	movs	r2, #0
 800491a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	330c      	adds	r3, #12
 8004922:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004924:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004926:	e853 3f00 	ldrex	r3, [r3]
 800492a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800492c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800492e:	f023 0310 	bic.w	r3, r3, #16
 8004932:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	330c      	adds	r3, #12
 800493c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004940:	65ba      	str	r2, [r7, #88]	; 0x58
 8004942:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004944:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004946:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004948:	e841 2300 	strex	r3, r2, [r1]
 800494c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800494e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004950:	2b00      	cmp	r3, #0
 8004952:	d1e3      	bne.n	800491c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004958:	4618      	mov	r0, r3
 800495a:	f7fd fd81 	bl	8002460 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	2202      	movs	r2, #2
 8004962:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800496c:	b29b      	uxth	r3, r3
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	4619      	mov	r1, r3
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f7fc fd55 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800497a:	e09b      	b.n	8004ab4 <HAL_UART_IRQHandler+0x518>
 800497c:	0800500f 	.word	0x0800500f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004988:	b29b      	uxth	r3, r3
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	f000 808e 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800499c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 8089 	beq.w	8004ab8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	330c      	adds	r3, #12
 80049ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049b0:	e853 3f00 	ldrex	r3, [r3]
 80049b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80049b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80049bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	330c      	adds	r3, #12
 80049c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80049ca:	647a      	str	r2, [r7, #68]	; 0x44
 80049cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80049d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80049d2:	e841 2300 	strex	r3, r2, [r1]
 80049d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80049d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1e3      	bne.n	80049a6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	3314      	adds	r3, #20
 80049e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e8:	e853 3f00 	ldrex	r3, [r3]
 80049ec:	623b      	str	r3, [r7, #32]
   return(result);
 80049ee:	6a3b      	ldr	r3, [r7, #32]
 80049f0:	f023 0301 	bic.w	r3, r3, #1
 80049f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	3314      	adds	r3, #20
 80049fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004a02:	633a      	str	r2, [r7, #48]	; 0x30
 8004a04:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a06:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a0a:	e841 2300 	strex	r3, r2, [r1]
 8004a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d1e3      	bne.n	80049de <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2220      	movs	r2, #32
 8004a1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	330c      	adds	r3, #12
 8004a2a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	e853 3f00 	ldrex	r3, [r3]
 8004a32:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	f023 0310 	bic.w	r3, r3, #16
 8004a3a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	330c      	adds	r3, #12
 8004a44:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004a48:	61fa      	str	r2, [r7, #28]
 8004a4a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4c:	69b9      	ldr	r1, [r7, #24]
 8004a4e:	69fa      	ldr	r2, [r7, #28]
 8004a50:	e841 2300 	strex	r3, r2, [r1]
 8004a54:	617b      	str	r3, [r7, #20]
   return(result);
 8004a56:	697b      	ldr	r3, [r7, #20]
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d1e3      	bne.n	8004a24 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2202      	movs	r2, #2
 8004a60:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a62:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004a66:	4619      	mov	r1, r3
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f7fc fcdb 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a6e:	e023      	b.n	8004ab8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d009      	beq.n	8004a90 <HAL_UART_IRQHandler+0x4f4>
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d003      	beq.n	8004a90 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 fad4 	bl	8005036 <UART_Transmit_IT>
    return;
 8004a8e:	e014      	b.n	8004aba <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d00e      	beq.n	8004aba <HAL_UART_IRQHandler+0x51e>
 8004a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004aa0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d008      	beq.n	8004aba <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 fb14 	bl	80050d6 <UART_EndTransmit_IT>
    return;
 8004aae:	e004      	b.n	8004aba <HAL_UART_IRQHandler+0x51e>
    return;
 8004ab0:	bf00      	nop
 8004ab2:	e002      	b.n	8004aba <HAL_UART_IRQHandler+0x51e>
      return;
 8004ab4:	bf00      	nop
 8004ab6:	e000      	b.n	8004aba <HAL_UART_IRQHandler+0x51e>
      return;
 8004ab8:	bf00      	nop
  }
}
 8004aba:	37e8      	adds	r7, #232	; 0xe8
 8004abc:	46bd      	mov	sp, r7
 8004abe:	bd80      	pop	{r7, pc}

08004ac0 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004ac8:	bf00      	nop
 8004aca:	370c      	adds	r7, #12
 8004acc:	46bd      	mov	sp, r7
 8004ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad2:	4770      	bx	lr

08004ad4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004adc:	bf00      	nop
 8004ade:	370c      	adds	r7, #12
 8004ae0:	46bd      	mov	sp, r7
 8004ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae6:	4770      	bx	lr

08004ae8 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004af0:	bf00      	nop
 8004af2:	370c      	adds	r7, #12
 8004af4:	46bd      	mov	sp, r7
 8004af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afa:	4770      	bx	lr

08004afc <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004b04:	bf00      	nop
 8004b06:	370c      	adds	r7, #12
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0e:	4770      	bx	lr

08004b10 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004b10:	b580      	push	{r7, lr}
 8004b12:	b090      	sub	sp, #64	; 0x40
 8004b14:	af00      	add	r7, sp, #0
 8004b16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d137      	bne.n	8004b9c <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b2e:	2200      	movs	r2, #0
 8004b30:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	3314      	adds	r3, #20
 8004b38:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b3c:	e853 3f00 	ldrex	r3, [r3]
 8004b40:	623b      	str	r3, [r7, #32]
   return(result);
 8004b42:	6a3b      	ldr	r3, [r7, #32]
 8004b44:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38
 8004b4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	3314      	adds	r3, #20
 8004b50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004b52:	633a      	str	r2, [r7, #48]	; 0x30
 8004b54:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b56:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004b5a:	e841 2300 	strex	r3, r2, [r1]
 8004b5e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d1e5      	bne.n	8004b32 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004b66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	330c      	adds	r3, #12
 8004b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	e853 3f00 	ldrex	r3, [r3]
 8004b74:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8004b7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	330c      	adds	r3, #12
 8004b84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004b86:	61fa      	str	r2, [r7, #28]
 8004b88:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b8a:	69b9      	ldr	r1, [r7, #24]
 8004b8c:	69fa      	ldr	r2, [r7, #28]
 8004b8e:	e841 2300 	strex	r3, r2, [r1]
 8004b92:	617b      	str	r3, [r7, #20]
   return(result);
 8004b94:	697b      	ldr	r3, [r7, #20]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d1e5      	bne.n	8004b66 <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b9a:	e002      	b.n	8004ba2 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004b9c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004b9e:	f7fc fc81 	bl	80014a4 <HAL_UART_TxCpltCallback>
}
 8004ba2:	bf00      	nop
 8004ba4:	3740      	adds	r7, #64	; 0x40
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b084      	sub	sp, #16
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bb6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004bb8:	68f8      	ldr	r0, [r7, #12]
 8004bba:	f7ff ff81 	bl	8004ac0 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bbe:	bf00      	nop
 8004bc0:	3710      	adds	r7, #16
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}

08004bc6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004bc6:	b580      	push	{r7, lr}
 8004bc8:	b09c      	sub	sp, #112	; 0x70
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd2:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d172      	bne.n	8004cc8 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004be2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004be4:	2200      	movs	r2, #0
 8004be6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004be8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bf0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bf2:	e853 3f00 	ldrex	r3, [r3]
 8004bf6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004bf8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004bfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bfe:	66bb      	str	r3, [r7, #104]	; 0x68
 8004c00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	330c      	adds	r3, #12
 8004c06:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004c08:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c0a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c0c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004c0e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c10:	e841 2300 	strex	r3, r2, [r1]
 8004c14:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d1e5      	bne.n	8004be8 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	3314      	adds	r3, #20
 8004c22:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c26:	e853 3f00 	ldrex	r3, [r3]
 8004c2a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c2e:	f023 0301 	bic.w	r3, r3, #1
 8004c32:	667b      	str	r3, [r7, #100]	; 0x64
 8004c34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	3314      	adds	r3, #20
 8004c3a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004c3c:	647a      	str	r2, [r7, #68]	; 0x44
 8004c3e:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c40:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c42:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c44:	e841 2300 	strex	r3, r2, [r1]
 8004c48:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c4a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1e5      	bne.n	8004c1c <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	3314      	adds	r3, #20
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	e853 3f00 	ldrex	r3, [r3]
 8004c5e:	623b      	str	r3, [r7, #32]
   return(result);
 8004c60:	6a3b      	ldr	r3, [r7, #32]
 8004c62:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c66:	663b      	str	r3, [r7, #96]	; 0x60
 8004c68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	3314      	adds	r3, #20
 8004c6e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004c70:	633a      	str	r2, [r7, #48]	; 0x30
 8004c72:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c74:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004c76:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c78:	e841 2300 	strex	r3, r2, [r1]
 8004c7c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d1e5      	bne.n	8004c50 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004c84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c86:	2220      	movs	r2, #32
 8004c88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c90:	2b01      	cmp	r3, #1
 8004c92:	d119      	bne.n	8004cc8 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	330c      	adds	r3, #12
 8004c9a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9c:	693b      	ldr	r3, [r7, #16]
 8004c9e:	e853 3f00 	ldrex	r3, [r3]
 8004ca2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	f023 0310 	bic.w	r3, r3, #16
 8004caa:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	330c      	adds	r3, #12
 8004cb2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cb4:	61fa      	str	r2, [r7, #28]
 8004cb6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb8:	69b9      	ldr	r1, [r7, #24]
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	e841 2300 	strex	r3, r2, [r1]
 8004cc0:	617b      	str	r3, [r7, #20]
   return(result);
 8004cc2:	697b      	ldr	r3, [r7, #20]
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d1e5      	bne.n	8004c94 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cca:	2200      	movs	r2, #0
 8004ccc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cd2:	2b01      	cmp	r3, #1
 8004cd4:	d106      	bne.n	8004ce4 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cd8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004cda:	4619      	mov	r1, r3
 8004cdc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004cde:	f7fc fba1 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ce2:	e002      	b.n	8004cea <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8004ce4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8004ce6:	f7ff fef5 	bl	8004ad4 <HAL_UART_RxCpltCallback>
}
 8004cea:	bf00      	nop
 8004cec:	3770      	adds	r7, #112	; 0x70
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b084      	sub	sp, #16
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	2201      	movs	r2, #1
 8004d04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d0a:	2b01      	cmp	r3, #1
 8004d0c:	d108      	bne.n	8004d20 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d12:	085b      	lsrs	r3, r3, #1
 8004d14:	b29b      	uxth	r3, r3
 8004d16:	4619      	mov	r1, r3
 8004d18:	68f8      	ldr	r0, [r7, #12]
 8004d1a:	f7fc fb83 	bl	8001424 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004d1e:	e002      	b.n	8004d26 <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f7ff fee1 	bl	8004ae8 <HAL_UART_RxHalfCpltCallback>
}
 8004d26:	bf00      	nop
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8004d36:	2300      	movs	r3, #0
 8004d38:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	695b      	ldr	r3, [r3, #20]
 8004d46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d4a:	2b80      	cmp	r3, #128	; 0x80
 8004d4c:	bf0c      	ite	eq
 8004d4e:	2301      	moveq	r3, #1
 8004d50:	2300      	movne	r3, #0
 8004d52:	b2db      	uxtb	r3, r3
 8004d54:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b21      	cmp	r3, #33	; 0x21
 8004d60:	d108      	bne.n	8004d74 <UART_DMAError+0x46>
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d005      	beq.n	8004d74 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	2200      	movs	r2, #0
 8004d6c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8004d6e:	68b8      	ldr	r0, [r7, #8]
 8004d70:	f000 f8c2 	bl	8004ef8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	695b      	ldr	r3, [r3, #20]
 8004d7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7e:	2b40      	cmp	r3, #64	; 0x40
 8004d80:	bf0c      	ite	eq
 8004d82:	2301      	moveq	r3, #1
 8004d84:	2300      	movne	r3, #0
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8004d8a:	68bb      	ldr	r3, [r7, #8]
 8004d8c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b22      	cmp	r3, #34	; 0x22
 8004d94:	d108      	bne.n	8004da8 <UART_DMAError+0x7a>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d005      	beq.n	8004da8 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8004d9c:	68bb      	ldr	r3, [r7, #8]
 8004d9e:	2200      	movs	r2, #0
 8004da0:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8004da2:	68b8      	ldr	r0, [r7, #8]
 8004da4:	f000 f8d0 	bl	8004f48 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004db4:	68b8      	ldr	r0, [r7, #8]
 8004db6:	f7ff fea1 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dba:	bf00      	nop
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}
	...

08004dc4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b098      	sub	sp, #96	; 0x60
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	4613      	mov	r3, r2
 8004dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	88fa      	ldrh	r2, [r7, #6]
 8004ddc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2200      	movs	r2, #0
 8004de2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	2222      	movs	r2, #34	; 0x22
 8004de8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df0:	4a3e      	ldr	r2, [pc, #248]	; (8004eec <UART_Start_Receive_DMA+0x128>)
 8004df2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004df8:	4a3d      	ldr	r2, [pc, #244]	; (8004ef0 <UART_Start_Receive_DMA+0x12c>)
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e00:	4a3c      	ldr	r2, [pc, #240]	; (8004ef4 <UART_Start_Receive_DMA+0x130>)
 8004e02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e08:	2200      	movs	r2, #0
 8004e0a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8004e0c:	f107 0308 	add.w	r3, r7, #8
 8004e10:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	3304      	adds	r3, #4
 8004e1c:	4619      	mov	r1, r3
 8004e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	88fb      	ldrh	r3, [r7, #6]
 8004e24:	f7fd fac4 	bl	80023b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8004e28:	2300      	movs	r3, #0
 8004e2a:	613b      	str	r3, [r7, #16]
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	613b      	str	r3, [r7, #16]
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	685b      	ldr	r3, [r3, #4]
 8004e3a:	613b      	str	r3, [r7, #16]
 8004e3c:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	691b      	ldr	r3, [r3, #16]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d019      	beq.n	8004e7a <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	330c      	adds	r3, #12
 8004e4c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e50:	e853 3f00 	ldrex	r3, [r3]
 8004e54:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004e56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	330c      	adds	r3, #12
 8004e64:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e66:	64fa      	str	r2, [r7, #76]	; 0x4c
 8004e68:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e6a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e6c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e6e:	e841 2300 	strex	r3, r2, [r1]
 8004e72:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d1e5      	bne.n	8004e46 <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	3314      	adds	r3, #20
 8004e80:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e84:	e853 3f00 	ldrex	r3, [r3]
 8004e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e8c:	f043 0301 	orr.w	r3, r3, #1
 8004e90:	657b      	str	r3, [r7, #84]	; 0x54
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	3314      	adds	r3, #20
 8004e98:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004e9a:	63ba      	str	r2, [r7, #56]	; 0x38
 8004e9c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e9e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ea0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004ea2:	e841 2300 	strex	r3, r2, [r1]
 8004ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d1e5      	bne.n	8004e7a <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	3314      	adds	r3, #20
 8004eb4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	e853 3f00 	ldrex	r3, [r3]
 8004ebc:	617b      	str	r3, [r7, #20]
   return(result);
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ec4:	653b      	str	r3, [r7, #80]	; 0x50
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	3314      	adds	r3, #20
 8004ecc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004ece:	627a      	str	r2, [r7, #36]	; 0x24
 8004ed0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ed2:	6a39      	ldr	r1, [r7, #32]
 8004ed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ed6:	e841 2300 	strex	r3, r2, [r1]
 8004eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d1e5      	bne.n	8004eae <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8004ee2:	2300      	movs	r3, #0
}
 8004ee4:	4618      	mov	r0, r3
 8004ee6:	3760      	adds	r7, #96	; 0x60
 8004ee8:	46bd      	mov	sp, r7
 8004eea:	bd80      	pop	{r7, pc}
 8004eec:	08004bc7 	.word	0x08004bc7
 8004ef0:	08004cf3 	.word	0x08004cf3
 8004ef4:	08004d2f 	.word	0x08004d2f

08004ef8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b089      	sub	sp, #36	; 0x24
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	330c      	adds	r3, #12
 8004f06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	e853 3f00 	ldrex	r3, [r3]
 8004f0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004f10:	68bb      	ldr	r3, [r7, #8]
 8004f12:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004f16:	61fb      	str	r3, [r7, #28]
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	69fa      	ldr	r2, [r7, #28]
 8004f20:	61ba      	str	r2, [r7, #24]
 8004f22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f24:	6979      	ldr	r1, [r7, #20]
 8004f26:	69ba      	ldr	r2, [r7, #24]
 8004f28:	e841 2300 	strex	r3, r2, [r1]
 8004f2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f2e:	693b      	ldr	r3, [r7, #16]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1e5      	bne.n	8004f00 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8004f3c:	bf00      	nop
 8004f3e:	3724      	adds	r7, #36	; 0x24
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b095      	sub	sp, #84	; 0x54
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	330c      	adds	r3, #12
 8004f56:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	e853 3f00 	ldrex	r3, [r3]
 8004f5e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004f66:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	330c      	adds	r3, #12
 8004f6e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f70:	643a      	str	r2, [r7, #64]	; 0x40
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f74:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004f76:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004f78:	e841 2300 	strex	r3, r2, [r1]
 8004f7c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004f7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d1e5      	bne.n	8004f50 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	3314      	adds	r3, #20
 8004f8a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	e853 3f00 	ldrex	r3, [r3]
 8004f92:	61fb      	str	r3, [r7, #28]
   return(result);
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	f023 0301 	bic.w	r3, r3, #1
 8004f9a:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	3314      	adds	r3, #20
 8004fa2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004fa4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004fa6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004faa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004fac:	e841 2300 	strex	r3, r2, [r1]
 8004fb0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004fb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	d1e5      	bne.n	8004f84 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	d119      	bne.n	8004ff4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	330c      	adds	r3, #12
 8004fc6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	e853 3f00 	ldrex	r3, [r3]
 8004fce:	60bb      	str	r3, [r7, #8]
   return(result);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0310 	bic.w	r3, r3, #16
 8004fd6:	647b      	str	r3, [r7, #68]	; 0x44
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	330c      	adds	r3, #12
 8004fde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004fe0:	61ba      	str	r2, [r7, #24]
 8004fe2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fe4:	6979      	ldr	r1, [r7, #20]
 8004fe6:	69ba      	ldr	r2, [r7, #24]
 8004fe8:	e841 2300 	strex	r3, r2, [r1]
 8004fec:	613b      	str	r3, [r7, #16]
   return(result);
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d1e5      	bne.n	8004fc0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2220      	movs	r2, #32
 8004ff8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	2200      	movs	r2, #0
 8005000:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005002:	bf00      	nop
 8005004:	3754      	adds	r7, #84	; 0x54
 8005006:	46bd      	mov	sp, r7
 8005008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500c:	4770      	bx	lr

0800500e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800500e:	b580      	push	{r7, lr}
 8005010:	b084      	sub	sp, #16
 8005012:	af00      	add	r7, sp, #0
 8005014:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800501a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	2200      	movs	r2, #0
 8005020:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	2200      	movs	r2, #0
 8005026:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005028:	68f8      	ldr	r0, [r7, #12]
 800502a:	f7ff fd67 	bl	8004afc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800502e:	bf00      	nop
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}

08005036 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005036:	b480      	push	{r7}
 8005038:	b085      	sub	sp, #20
 800503a:	af00      	add	r7, sp, #0
 800503c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005044:	b2db      	uxtb	r3, r3
 8005046:	2b21      	cmp	r3, #33	; 0x21
 8005048:	d13e      	bne.n	80050c8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	689b      	ldr	r3, [r3, #8]
 800504e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005052:	d114      	bne.n	800507e <UART_Transmit_IT+0x48>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d110      	bne.n	800507e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a1b      	ldr	r3, [r3, #32]
 8005060:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	881b      	ldrh	r3, [r3, #0]
 8005066:	461a      	mov	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005070:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6a1b      	ldr	r3, [r3, #32]
 8005076:	1c9a      	adds	r2, r3, #2
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	621a      	str	r2, [r3, #32]
 800507c:	e008      	b.n	8005090 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	1c59      	adds	r1, r3, #1
 8005084:	687a      	ldr	r2, [r7, #4]
 8005086:	6211      	str	r1, [r2, #32]
 8005088:	781a      	ldrb	r2, [r3, #0]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005094:	b29b      	uxth	r3, r3
 8005096:	3b01      	subs	r3, #1
 8005098:	b29b      	uxth	r3, r3
 800509a:	687a      	ldr	r2, [r7, #4]
 800509c:	4619      	mov	r1, r3
 800509e:	84d1      	strh	r1, [r2, #38]	; 0x26
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d10f      	bne.n	80050c4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68da      	ldr	r2, [r3, #12]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80050b2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	68da      	ldr	r2, [r3, #12]
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050c2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80050c4:	2300      	movs	r3, #0
 80050c6:	e000      	b.n	80050ca <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80050c8:	2302      	movs	r3, #2
  }
}
 80050ca:	4618      	mov	r0, r3
 80050cc:	3714      	adds	r7, #20
 80050ce:	46bd      	mov	sp, r7
 80050d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d4:	4770      	bx	lr

080050d6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80050d6:	b580      	push	{r7, lr}
 80050d8:	b082      	sub	sp, #8
 80050da:	af00      	add	r7, sp, #0
 80050dc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	68da      	ldr	r2, [r3, #12]
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050ec:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2220      	movs	r2, #32
 80050f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f7fc f9d4 	bl	80014a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80050fc:	2300      	movs	r3, #0
}
 80050fe:	4618      	mov	r0, r3
 8005100:	3708      	adds	r7, #8
 8005102:	46bd      	mov	sp, r7
 8005104:	bd80      	pop	{r7, pc}

08005106 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005106:	b580      	push	{r7, lr}
 8005108:	b08c      	sub	sp, #48	; 0x30
 800510a:	af00      	add	r7, sp, #0
 800510c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005114:	b2db      	uxtb	r3, r3
 8005116:	2b22      	cmp	r3, #34	; 0x22
 8005118:	f040 80ae 	bne.w	8005278 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005124:	d117      	bne.n	8005156 <UART_Receive_IT+0x50>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	2b00      	cmp	r3, #0
 800512c:	d113      	bne.n	8005156 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800512e:	2300      	movs	r3, #0
 8005130:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005136:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	685b      	ldr	r3, [r3, #4]
 800513e:	b29b      	uxth	r3, r3
 8005140:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005144:	b29a      	uxth	r2, r3
 8005146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005148:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800514e:	1c9a      	adds	r2, r3, #2
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	629a      	str	r2, [r3, #40]	; 0x28
 8005154:	e026      	b.n	80051a4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515a:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800515c:	2300      	movs	r3, #0
 800515e:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	689b      	ldr	r3, [r3, #8]
 8005164:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005168:	d007      	beq.n	800517a <UART_Receive_IT+0x74>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	689b      	ldr	r3, [r3, #8]
 800516e:	2b00      	cmp	r3, #0
 8005170:	d10a      	bne.n	8005188 <UART_Receive_IT+0x82>
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	691b      	ldr	r3, [r3, #16]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d106      	bne.n	8005188 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	b2da      	uxtb	r2, r3
 8005182:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005184:	701a      	strb	r2, [r3, #0]
 8005186:	e008      	b.n	800519a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	b2db      	uxtb	r3, r3
 8005190:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005194:	b2da      	uxtb	r2, r3
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800519e:	1c5a      	adds	r2, r3, #1
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29b      	uxth	r3, r3
 80051ae:	687a      	ldr	r2, [r7, #4]
 80051b0:	4619      	mov	r1, r3
 80051b2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d15d      	bne.n	8005274 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68da      	ldr	r2, [r3, #12]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f022 0220 	bic.w	r2, r2, #32
 80051c6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80051d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	695a      	ldr	r2, [r3, #20]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f022 0201 	bic.w	r2, r2, #1
 80051e6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	2220      	movs	r2, #32
 80051ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	2200      	movs	r2, #0
 80051f4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051fa:	2b01      	cmp	r3, #1
 80051fc:	d135      	bne.n	800526a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	330c      	adds	r3, #12
 800520a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	e853 3f00 	ldrex	r3, [r3]
 8005212:	613b      	str	r3, [r7, #16]
   return(result);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 0310 	bic.w	r3, r3, #16
 800521a:	627b      	str	r3, [r7, #36]	; 0x24
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	330c      	adds	r3, #12
 8005222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005224:	623a      	str	r2, [r7, #32]
 8005226:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005228:	69f9      	ldr	r1, [r7, #28]
 800522a:	6a3a      	ldr	r2, [r7, #32]
 800522c:	e841 2300 	strex	r3, r2, [r1]
 8005230:	61bb      	str	r3, [r7, #24]
   return(result);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	2b00      	cmp	r3, #0
 8005236:	d1e5      	bne.n	8005204 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f003 0310 	and.w	r3, r3, #16
 8005242:	2b10      	cmp	r3, #16
 8005244:	d10a      	bne.n	800525c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005246:	2300      	movs	r3, #0
 8005248:	60fb      	str	r3, [r7, #12]
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	60fb      	str	r3, [r7, #12]
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	60fb      	str	r3, [r7, #12]
 800525a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005260:	4619      	mov	r1, r3
 8005262:	6878      	ldr	r0, [r7, #4]
 8005264:	f7fc f8de 	bl	8001424 <HAL_UARTEx_RxEventCallback>
 8005268:	e002      	b.n	8005270 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800526a:	6878      	ldr	r0, [r7, #4]
 800526c:	f7ff fc32 	bl	8004ad4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005270:	2300      	movs	r3, #0
 8005272:	e002      	b.n	800527a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005274:	2300      	movs	r3, #0
 8005276:	e000      	b.n	800527a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005278:	2302      	movs	r3, #2
  }
}
 800527a:	4618      	mov	r0, r3
 800527c:	3730      	adds	r7, #48	; 0x30
 800527e:	46bd      	mov	sp, r7
 8005280:	bd80      	pop	{r7, pc}
	...

08005284 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005288:	b0c0      	sub	sp, #256	; 0x100
 800528a:	af00      	add	r7, sp, #0
 800528c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005290:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800529c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a0:	68d9      	ldr	r1, [r3, #12]
 80052a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052a6:	681a      	ldr	r2, [r3, #0]
 80052a8:	ea40 0301 	orr.w	r3, r0, r1
 80052ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052b8:	691b      	ldr	r3, [r3, #16]
 80052ba:	431a      	orrs	r2, r3
 80052bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c0:	695b      	ldr	r3, [r3, #20]
 80052c2:	431a      	orrs	r2, r3
 80052c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052c8:	69db      	ldr	r3, [r3, #28]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80052d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	68db      	ldr	r3, [r3, #12]
 80052d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80052dc:	f021 010c 	bic.w	r1, r1, #12
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80052ea:	430b      	orrs	r3, r1
 80052ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80052ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	695b      	ldr	r3, [r3, #20]
 80052f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80052fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052fe:	6999      	ldr	r1, [r3, #24]
 8005300:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005304:	681a      	ldr	r2, [r3, #0]
 8005306:	ea40 0301 	orr.w	r3, r0, r1
 800530a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	681a      	ldr	r2, [r3, #0]
 8005312:	4b8f      	ldr	r3, [pc, #572]	; (8005550 <UART_SetConfig+0x2cc>)
 8005314:	429a      	cmp	r2, r3
 8005316:	d005      	beq.n	8005324 <UART_SetConfig+0xa0>
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	4b8d      	ldr	r3, [pc, #564]	; (8005554 <UART_SetConfig+0x2d0>)
 8005320:	429a      	cmp	r2, r3
 8005322:	d104      	bne.n	800532e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005324:	f7fe fb3a 	bl	800399c <HAL_RCC_GetPCLK2Freq>
 8005328:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800532c:	e003      	b.n	8005336 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800532e:	f7fe fb21 	bl	8003974 <HAL_RCC_GetPCLK1Freq>
 8005332:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800533a:	69db      	ldr	r3, [r3, #28]
 800533c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005340:	f040 810c 	bne.w	800555c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005344:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005348:	2200      	movs	r2, #0
 800534a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800534e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005352:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005356:	4622      	mov	r2, r4
 8005358:	462b      	mov	r3, r5
 800535a:	1891      	adds	r1, r2, r2
 800535c:	65b9      	str	r1, [r7, #88]	; 0x58
 800535e:	415b      	adcs	r3, r3
 8005360:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005362:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005366:	4621      	mov	r1, r4
 8005368:	eb12 0801 	adds.w	r8, r2, r1
 800536c:	4629      	mov	r1, r5
 800536e:	eb43 0901 	adc.w	r9, r3, r1
 8005372:	f04f 0200 	mov.w	r2, #0
 8005376:	f04f 0300 	mov.w	r3, #0
 800537a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800537e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005382:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005386:	4690      	mov	r8, r2
 8005388:	4699      	mov	r9, r3
 800538a:	4623      	mov	r3, r4
 800538c:	eb18 0303 	adds.w	r3, r8, r3
 8005390:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005394:	462b      	mov	r3, r5
 8005396:	eb49 0303 	adc.w	r3, r9, r3
 800539a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800539e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80053b2:	460b      	mov	r3, r1
 80053b4:	18db      	adds	r3, r3, r3
 80053b6:	653b      	str	r3, [r7, #80]	; 0x50
 80053b8:	4613      	mov	r3, r2
 80053ba:	eb42 0303 	adc.w	r3, r2, r3
 80053be:	657b      	str	r3, [r7, #84]	; 0x54
 80053c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80053c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80053c8:	f7fb fc7e 	bl	8000cc8 <__aeabi_uldivmod>
 80053cc:	4602      	mov	r2, r0
 80053ce:	460b      	mov	r3, r1
 80053d0:	4b61      	ldr	r3, [pc, #388]	; (8005558 <UART_SetConfig+0x2d4>)
 80053d2:	fba3 2302 	umull	r2, r3, r3, r2
 80053d6:	095b      	lsrs	r3, r3, #5
 80053d8:	011c      	lsls	r4, r3, #4
 80053da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80053de:	2200      	movs	r2, #0
 80053e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80053e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80053e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80053ec:	4642      	mov	r2, r8
 80053ee:	464b      	mov	r3, r9
 80053f0:	1891      	adds	r1, r2, r2
 80053f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80053f4:	415b      	adcs	r3, r3
 80053f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80053f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80053fc:	4641      	mov	r1, r8
 80053fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005402:	4649      	mov	r1, r9
 8005404:	eb43 0b01 	adc.w	fp, r3, r1
 8005408:	f04f 0200 	mov.w	r2, #0
 800540c:	f04f 0300 	mov.w	r3, #0
 8005410:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005414:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005418:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800541c:	4692      	mov	sl, r2
 800541e:	469b      	mov	fp, r3
 8005420:	4643      	mov	r3, r8
 8005422:	eb1a 0303 	adds.w	r3, sl, r3
 8005426:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800542a:	464b      	mov	r3, r9
 800542c:	eb4b 0303 	adc.w	r3, fp, r3
 8005430:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	2200      	movs	r2, #0
 800543c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005440:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005444:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005448:	460b      	mov	r3, r1
 800544a:	18db      	adds	r3, r3, r3
 800544c:	643b      	str	r3, [r7, #64]	; 0x40
 800544e:	4613      	mov	r3, r2
 8005450:	eb42 0303 	adc.w	r3, r2, r3
 8005454:	647b      	str	r3, [r7, #68]	; 0x44
 8005456:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800545a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800545e:	f7fb fc33 	bl	8000cc8 <__aeabi_uldivmod>
 8005462:	4602      	mov	r2, r0
 8005464:	460b      	mov	r3, r1
 8005466:	4611      	mov	r1, r2
 8005468:	4b3b      	ldr	r3, [pc, #236]	; (8005558 <UART_SetConfig+0x2d4>)
 800546a:	fba3 2301 	umull	r2, r3, r3, r1
 800546e:	095b      	lsrs	r3, r3, #5
 8005470:	2264      	movs	r2, #100	; 0x64
 8005472:	fb02 f303 	mul.w	r3, r2, r3
 8005476:	1acb      	subs	r3, r1, r3
 8005478:	00db      	lsls	r3, r3, #3
 800547a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800547e:	4b36      	ldr	r3, [pc, #216]	; (8005558 <UART_SetConfig+0x2d4>)
 8005480:	fba3 2302 	umull	r2, r3, r3, r2
 8005484:	095b      	lsrs	r3, r3, #5
 8005486:	005b      	lsls	r3, r3, #1
 8005488:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800548c:	441c      	add	r4, r3
 800548e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005492:	2200      	movs	r2, #0
 8005494:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005498:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800549c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054a0:	4642      	mov	r2, r8
 80054a2:	464b      	mov	r3, r9
 80054a4:	1891      	adds	r1, r2, r2
 80054a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054a8:	415b      	adcs	r3, r3
 80054aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80054b0:	4641      	mov	r1, r8
 80054b2:	1851      	adds	r1, r2, r1
 80054b4:	6339      	str	r1, [r7, #48]	; 0x30
 80054b6:	4649      	mov	r1, r9
 80054b8:	414b      	adcs	r3, r1
 80054ba:	637b      	str	r3, [r7, #52]	; 0x34
 80054bc:	f04f 0200 	mov.w	r2, #0
 80054c0:	f04f 0300 	mov.w	r3, #0
 80054c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80054c8:	4659      	mov	r1, fp
 80054ca:	00cb      	lsls	r3, r1, #3
 80054cc:	4651      	mov	r1, sl
 80054ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80054d2:	4651      	mov	r1, sl
 80054d4:	00ca      	lsls	r2, r1, #3
 80054d6:	4610      	mov	r0, r2
 80054d8:	4619      	mov	r1, r3
 80054da:	4603      	mov	r3, r0
 80054dc:	4642      	mov	r2, r8
 80054de:	189b      	adds	r3, r3, r2
 80054e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80054e4:	464b      	mov	r3, r9
 80054e6:	460a      	mov	r2, r1
 80054e8:	eb42 0303 	adc.w	r3, r2, r3
 80054ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80054f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80054fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005500:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005504:	460b      	mov	r3, r1
 8005506:	18db      	adds	r3, r3, r3
 8005508:	62bb      	str	r3, [r7, #40]	; 0x28
 800550a:	4613      	mov	r3, r2
 800550c:	eb42 0303 	adc.w	r3, r2, r3
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005512:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005516:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800551a:	f7fb fbd5 	bl	8000cc8 <__aeabi_uldivmod>
 800551e:	4602      	mov	r2, r0
 8005520:	460b      	mov	r3, r1
 8005522:	4b0d      	ldr	r3, [pc, #52]	; (8005558 <UART_SetConfig+0x2d4>)
 8005524:	fba3 1302 	umull	r1, r3, r3, r2
 8005528:	095b      	lsrs	r3, r3, #5
 800552a:	2164      	movs	r1, #100	; 0x64
 800552c:	fb01 f303 	mul.w	r3, r1, r3
 8005530:	1ad3      	subs	r3, r2, r3
 8005532:	00db      	lsls	r3, r3, #3
 8005534:	3332      	adds	r3, #50	; 0x32
 8005536:	4a08      	ldr	r2, [pc, #32]	; (8005558 <UART_SetConfig+0x2d4>)
 8005538:	fba2 2303 	umull	r2, r3, r2, r3
 800553c:	095b      	lsrs	r3, r3, #5
 800553e:	f003 0207 	and.w	r2, r3, #7
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4422      	add	r2, r4
 800554a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800554c:	e106      	b.n	800575c <UART_SetConfig+0x4d8>
 800554e:	bf00      	nop
 8005550:	40011000 	.word	0x40011000
 8005554:	40011400 	.word	0x40011400
 8005558:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800555c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005560:	2200      	movs	r2, #0
 8005562:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005566:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800556a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800556e:	4642      	mov	r2, r8
 8005570:	464b      	mov	r3, r9
 8005572:	1891      	adds	r1, r2, r2
 8005574:	6239      	str	r1, [r7, #32]
 8005576:	415b      	adcs	r3, r3
 8005578:	627b      	str	r3, [r7, #36]	; 0x24
 800557a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800557e:	4641      	mov	r1, r8
 8005580:	1854      	adds	r4, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0501 	adc.w	r5, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	00eb      	lsls	r3, r5, #3
 8005592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005596:	00e2      	lsls	r2, r4, #3
 8005598:	4614      	mov	r4, r2
 800559a:	461d      	mov	r5, r3
 800559c:	4643      	mov	r3, r8
 800559e:	18e3      	adds	r3, r4, r3
 80055a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055a4:	464b      	mov	r3, r9
 80055a6:	eb45 0303 	adc.w	r3, r5, r3
 80055aa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80055ba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80055be:	f04f 0200 	mov.w	r2, #0
 80055c2:	f04f 0300 	mov.w	r3, #0
 80055c6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80055ca:	4629      	mov	r1, r5
 80055cc:	008b      	lsls	r3, r1, #2
 80055ce:	4621      	mov	r1, r4
 80055d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80055d4:	4621      	mov	r1, r4
 80055d6:	008a      	lsls	r2, r1, #2
 80055d8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80055dc:	f7fb fb74 	bl	8000cc8 <__aeabi_uldivmod>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4b60      	ldr	r3, [pc, #384]	; (8005768 <UART_SetConfig+0x4e4>)
 80055e6:	fba3 2302 	umull	r2, r3, r3, r2
 80055ea:	095b      	lsrs	r3, r3, #5
 80055ec:	011c      	lsls	r4, r3, #4
 80055ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055f2:	2200      	movs	r2, #0
 80055f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80055f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80055fc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005600:	4642      	mov	r2, r8
 8005602:	464b      	mov	r3, r9
 8005604:	1891      	adds	r1, r2, r2
 8005606:	61b9      	str	r1, [r7, #24]
 8005608:	415b      	adcs	r3, r3
 800560a:	61fb      	str	r3, [r7, #28]
 800560c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005610:	4641      	mov	r1, r8
 8005612:	1851      	adds	r1, r2, r1
 8005614:	6139      	str	r1, [r7, #16]
 8005616:	4649      	mov	r1, r9
 8005618:	414b      	adcs	r3, r1
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005628:	4659      	mov	r1, fp
 800562a:	00cb      	lsls	r3, r1, #3
 800562c:	4651      	mov	r1, sl
 800562e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005632:	4651      	mov	r1, sl
 8005634:	00ca      	lsls	r2, r1, #3
 8005636:	4610      	mov	r0, r2
 8005638:	4619      	mov	r1, r3
 800563a:	4603      	mov	r3, r0
 800563c:	4642      	mov	r2, r8
 800563e:	189b      	adds	r3, r3, r2
 8005640:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005644:	464b      	mov	r3, r9
 8005646:	460a      	mov	r2, r1
 8005648:	eb42 0303 	adc.w	r3, r2, r3
 800564c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005650:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2200      	movs	r2, #0
 8005658:	67bb      	str	r3, [r7, #120]	; 0x78
 800565a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800565c:	f04f 0200 	mov.w	r2, #0
 8005660:	f04f 0300 	mov.w	r3, #0
 8005664:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005668:	4649      	mov	r1, r9
 800566a:	008b      	lsls	r3, r1, #2
 800566c:	4641      	mov	r1, r8
 800566e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005672:	4641      	mov	r1, r8
 8005674:	008a      	lsls	r2, r1, #2
 8005676:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800567a:	f7fb fb25 	bl	8000cc8 <__aeabi_uldivmod>
 800567e:	4602      	mov	r2, r0
 8005680:	460b      	mov	r3, r1
 8005682:	4611      	mov	r1, r2
 8005684:	4b38      	ldr	r3, [pc, #224]	; (8005768 <UART_SetConfig+0x4e4>)
 8005686:	fba3 2301 	umull	r2, r3, r3, r1
 800568a:	095b      	lsrs	r3, r3, #5
 800568c:	2264      	movs	r2, #100	; 0x64
 800568e:	fb02 f303 	mul.w	r3, r2, r3
 8005692:	1acb      	subs	r3, r1, r3
 8005694:	011b      	lsls	r3, r3, #4
 8005696:	3332      	adds	r3, #50	; 0x32
 8005698:	4a33      	ldr	r2, [pc, #204]	; (8005768 <UART_SetConfig+0x4e4>)
 800569a:	fba2 2303 	umull	r2, r3, r2, r3
 800569e:	095b      	lsrs	r3, r3, #5
 80056a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a4:	441c      	add	r4, r3
 80056a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056aa:	2200      	movs	r2, #0
 80056ac:	673b      	str	r3, [r7, #112]	; 0x70
 80056ae:	677a      	str	r2, [r7, #116]	; 0x74
 80056b0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80056b4:	4642      	mov	r2, r8
 80056b6:	464b      	mov	r3, r9
 80056b8:	1891      	adds	r1, r2, r2
 80056ba:	60b9      	str	r1, [r7, #8]
 80056bc:	415b      	adcs	r3, r3
 80056be:	60fb      	str	r3, [r7, #12]
 80056c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056c4:	4641      	mov	r1, r8
 80056c6:	1851      	adds	r1, r2, r1
 80056c8:	6039      	str	r1, [r7, #0]
 80056ca:	4649      	mov	r1, r9
 80056cc:	414b      	adcs	r3, r1
 80056ce:	607b      	str	r3, [r7, #4]
 80056d0:	f04f 0200 	mov.w	r2, #0
 80056d4:	f04f 0300 	mov.w	r3, #0
 80056d8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80056dc:	4659      	mov	r1, fp
 80056de:	00cb      	lsls	r3, r1, #3
 80056e0:	4651      	mov	r1, sl
 80056e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056e6:	4651      	mov	r1, sl
 80056e8:	00ca      	lsls	r2, r1, #3
 80056ea:	4610      	mov	r0, r2
 80056ec:	4619      	mov	r1, r3
 80056ee:	4603      	mov	r3, r0
 80056f0:	4642      	mov	r2, r8
 80056f2:	189b      	adds	r3, r3, r2
 80056f4:	66bb      	str	r3, [r7, #104]	; 0x68
 80056f6:	464b      	mov	r3, r9
 80056f8:	460a      	mov	r2, r1
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2200      	movs	r2, #0
 8005708:	663b      	str	r3, [r7, #96]	; 0x60
 800570a:	667a      	str	r2, [r7, #100]	; 0x64
 800570c:	f04f 0200 	mov.w	r2, #0
 8005710:	f04f 0300 	mov.w	r3, #0
 8005714:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005718:	4649      	mov	r1, r9
 800571a:	008b      	lsls	r3, r1, #2
 800571c:	4641      	mov	r1, r8
 800571e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005722:	4641      	mov	r1, r8
 8005724:	008a      	lsls	r2, r1, #2
 8005726:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800572a:	f7fb facd 	bl	8000cc8 <__aeabi_uldivmod>
 800572e:	4602      	mov	r2, r0
 8005730:	460b      	mov	r3, r1
 8005732:	4b0d      	ldr	r3, [pc, #52]	; (8005768 <UART_SetConfig+0x4e4>)
 8005734:	fba3 1302 	umull	r1, r3, r3, r2
 8005738:	095b      	lsrs	r3, r3, #5
 800573a:	2164      	movs	r1, #100	; 0x64
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	1ad3      	subs	r3, r2, r3
 8005742:	011b      	lsls	r3, r3, #4
 8005744:	3332      	adds	r3, #50	; 0x32
 8005746:	4a08      	ldr	r2, [pc, #32]	; (8005768 <UART_SetConfig+0x4e4>)
 8005748:	fba2 2303 	umull	r2, r3, r2, r3
 800574c:	095b      	lsrs	r3, r3, #5
 800574e:	f003 020f 	and.w	r2, r3, #15
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	4422      	add	r2, r4
 800575a:	609a      	str	r2, [r3, #8]
}
 800575c:	bf00      	nop
 800575e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005762:	46bd      	mov	sp, r7
 8005764:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005768:	51eb851f 	.word	0x51eb851f

0800576c <network_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b082      	sub	sp, #8
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_network_activations_map, 1, params)) {
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	2101      	movs	r1, #1
 800577a:	4842      	ldr	r0, [pc, #264]	; (8005884 <network_configure_activations+0x118>)
 800577c:	f000 fbc6 	bl	8005f0c <ai_platform_get_activations_map>
 8005780:	4603      	mov	r3, r0
 8005782:	2b00      	cmp	r3, #0
 8005784:	d073      	beq.n	800586e <network_configure_activations+0x102>
    /* Updating activations (byte) offsets */
    
    input_0_output_array.data = AI_PTR(g_network_activations_map[0] + 1080);
 8005786:	4b3f      	ldr	r3, [pc, #252]	; (8005884 <network_configure_activations+0x118>)
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800578e:	4a3e      	ldr	r2, [pc, #248]	; (8005888 <network_configure_activations+0x11c>)
 8005790:	6093      	str	r3, [r2, #8]
    input_0_output_array.data_start = AI_PTR(g_network_activations_map[0] + 1080);
 8005792:	4b3c      	ldr	r3, [pc, #240]	; (8005884 <network_configure_activations+0x118>)
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	f503 6387 	add.w	r3, r3, #1080	; 0x438
 800579a:	4a3b      	ldr	r2, [pc, #236]	; (8005888 <network_configure_activations+0x11c>)
 800579c:	60d3      	str	r3, [r2, #12]
    
    lstm_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 2760);
 800579e:	4b39      	ldr	r3, [pc, #228]	; (8005884 <network_configure_activations+0x118>)
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 80057a6:	4a39      	ldr	r2, [pc, #228]	; (800588c <network_configure_activations+0x120>)
 80057a8:	6093      	str	r3, [r2, #8]
    lstm_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 2760);
 80057aa:	4b36      	ldr	r3, [pc, #216]	; (8005884 <network_configure_activations+0x118>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f603 23c8 	addw	r3, r3, #2760	; 0xac8
 80057b2:	4a36      	ldr	r2, [pc, #216]	; (800588c <network_configure_activations+0x120>)
 80057b4:	60d3      	str	r3, [r2, #12]
    
    lstm_output0_array.data = AI_PTR(g_network_activations_map[0] + 4440);
 80057b6:	4b33      	ldr	r3, [pc, #204]	; (8005884 <network_configure_activations+0x118>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80057be:	3318      	adds	r3, #24
 80057c0:	4a33      	ldr	r2, [pc, #204]	; (8005890 <network_configure_activations+0x124>)
 80057c2:	6093      	str	r3, [r2, #8]
    lstm_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 4440);
 80057c4:	4b2f      	ldr	r3, [pc, #188]	; (8005884 <network_configure_activations+0x118>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	f503 538a 	add.w	r3, r3, #4416	; 0x1140
 80057cc:	3318      	adds	r3, #24
 80057ce:	4a30      	ldr	r2, [pc, #192]	; (8005890 <network_configure_activations+0x124>)
 80057d0:	60d3      	str	r3, [r2, #12]
    
    lstm_1_scratch0_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 80057d2:	4b2c      	ldr	r3, [pc, #176]	; (8005884 <network_configure_activations+0x118>)
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80057da:	4a2e      	ldr	r2, [pc, #184]	; (8005894 <network_configure_activations+0x128>)
 80057dc:	6093      	str	r3, [r2, #8]
    lstm_1_scratch0_array.data_start = AI_PTR(g_network_activations_map[0] + 3600);
 80057de:	4b29      	ldr	r3, [pc, #164]	; (8005884 <network_configure_activations+0x118>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 80057e6:	4a2b      	ldr	r2, [pc, #172]	; (8005894 <network_configure_activations+0x128>)
 80057e8:	60d3      	str	r3, [r2, #12]
    
    lstm_1_output0_array.data = AI_PTR(g_network_activations_map[0] + 0);
 80057ea:	4b26      	ldr	r3, [pc, #152]	; (8005884 <network_configure_activations+0x118>)
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a2a      	ldr	r2, [pc, #168]	; (8005898 <network_configure_activations+0x12c>)
 80057f0:	6093      	str	r3, [r2, #8]
    lstm_1_output0_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 80057f2:	4b24      	ldr	r3, [pc, #144]	; (8005884 <network_configure_activations+0x118>)
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4a28      	ldr	r2, [pc, #160]	; (8005898 <network_configure_activations+0x12c>)
 80057f8:	60d3      	str	r3, [r2, #12]
    
    dense_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 3600);
 80057fa:	4b22      	ldr	r3, [pc, #136]	; (8005884 <network_configure_activations+0x118>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 8005802:	4a26      	ldr	r2, [pc, #152]	; (800589c <network_configure_activations+0x130>)
 8005804:	6093      	str	r3, [r2, #8]
    dense_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 3600);
 8005806:	4b1f      	ldr	r3, [pc, #124]	; (8005884 <network_configure_activations+0x118>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f503 6361 	add.w	r3, r3, #3600	; 0xe10
 800580e:	4a23      	ldr	r2, [pc, #140]	; (800589c <network_configure_activations+0x130>)
 8005810:	60d3      	str	r3, [r2, #12]
    
    dense_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005812:	4b1c      	ldr	r3, [pc, #112]	; (8005884 <network_configure_activations+0x118>)
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a22      	ldr	r2, [pc, #136]	; (80058a0 <network_configure_activations+0x134>)
 8005818:	6093      	str	r3, [r2, #8]
    dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800581a:	4b1a      	ldr	r3, [pc, #104]	; (8005884 <network_configure_activations+0x118>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	4a20      	ldr	r2, [pc, #128]	; (80058a0 <network_configure_activations+0x134>)
 8005820:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 120);
 8005822:	4b18      	ldr	r3, [pc, #96]	; (8005884 <network_configure_activations+0x118>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	3378      	adds	r3, #120	; 0x78
 8005828:	4a1e      	ldr	r2, [pc, #120]	; (80058a4 <network_configure_activations+0x138>)
 800582a:	6093      	str	r3, [r2, #8]
    dense_1_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 120);
 800582c:	4b15      	ldr	r3, [pc, #84]	; (8005884 <network_configure_activations+0x118>)
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	3378      	adds	r3, #120	; 0x78
 8005832:	4a1c      	ldr	r2, [pc, #112]	; (80058a4 <network_configure_activations+0x138>)
 8005834:	60d3      	str	r3, [r2, #12]
    
    dense_1_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 8005836:	4b13      	ldr	r3, [pc, #76]	; (8005884 <network_configure_activations+0x118>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a1b      	ldr	r2, [pc, #108]	; (80058a8 <network_configure_activations+0x13c>)
 800583c:	6093      	str	r3, [r2, #8]
    dense_1_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 800583e:	4b11      	ldr	r3, [pc, #68]	; (8005884 <network_configure_activations+0x118>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	4a19      	ldr	r2, [pc, #100]	; (80058a8 <network_configure_activations+0x13c>)
 8005844:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_output_array.data = AI_PTR(g_network_activations_map[0] + 60);
 8005846:	4b0f      	ldr	r3, [pc, #60]	; (8005884 <network_configure_activations+0x118>)
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	333c      	adds	r3, #60	; 0x3c
 800584c:	4a17      	ldr	r2, [pc, #92]	; (80058ac <network_configure_activations+0x140>)
 800584e:	6093      	str	r3, [r2, #8]
    dense_2_dense_output_array.data_start = AI_PTR(g_network_activations_map[0] + 60);
 8005850:	4b0c      	ldr	r3, [pc, #48]	; (8005884 <network_configure_activations+0x118>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	333c      	adds	r3, #60	; 0x3c
 8005856:	4a15      	ldr	r2, [pc, #84]	; (80058ac <network_configure_activations+0x140>)
 8005858:	60d3      	str	r3, [r2, #12]
    
    dense_2_output_array.data = AI_PTR(g_network_activations_map[0] + 0);
 800585a:	4b0a      	ldr	r3, [pc, #40]	; (8005884 <network_configure_activations+0x118>)
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a14      	ldr	r2, [pc, #80]	; (80058b0 <network_configure_activations+0x144>)
 8005860:	6093      	str	r3, [r2, #8]
    dense_2_output_array.data_start = AI_PTR(g_network_activations_map[0] + 0);
 8005862:	4b08      	ldr	r3, [pc, #32]	; (8005884 <network_configure_activations+0x118>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	4a12      	ldr	r2, [pc, #72]	; (80058b0 <network_configure_activations+0x144>)
 8005868:	60d3      	str	r3, [r2, #12]
    
    return true;
 800586a:	2301      	movs	r3, #1
 800586c:	e005      	b.n	800587a <network_configure_activations+0x10e>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 800586e:	2213      	movs	r2, #19
 8005870:	2130      	movs	r1, #48	; 0x30
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f000 fc2e 	bl	80060d4 <ai_platform_network_set_error>
  return false;
 8005878:	2300      	movs	r3, #0
}
 800587a:	4618      	mov	r0, r3
 800587c:	3708      	adds	r7, #8
 800587e:	46bd      	mov	sp, r7
 8005880:	bd80      	pop	{r7, pc}
 8005882:	bf00      	nop
 8005884:	200043ec 	.word	0x200043ec
 8005888:	20000070 	.word	0x20000070
 800588c:	20000050 	.word	0x20000050
 8005890:	20000080 	.word	0x20000080
 8005894:	20000060 	.word	0x20000060
 8005898:	20000090 	.word	0x20000090
 800589c:	200000a0 	.word	0x200000a0
 80058a0:	200000b0 	.word	0x200000b0
 80058a4:	200000c0 	.word	0x200000c0
 80058a8:	200000d0 	.word	0x200000d0
 80058ac:	200000e0 	.word	0x200000e0
 80058b0:	200000f0 	.word	0x200000f0

080058b4 <network_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b082      	sub	sp, #8
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	6078      	str	r0, [r7, #4]
 80058bc:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_network_weights_map, 1, params)) {
 80058be:	683a      	ldr	r2, [r7, #0]
 80058c0:	2101      	movs	r1, #1
 80058c2:	4891      	ldr	r0, [pc, #580]	; (8005b08 <network_configure_weights+0x254>)
 80058c4:	f000 face 	bl	8005e64 <ai_platform_get_weights_map>
 80058c8:	4603      	mov	r3, r0
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	f000 8112 	beq.w	8005af4 <network_configure_weights+0x240>
    /* Updating weights (byte) offsets */
    
    dense_1_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 80058d0:	4b8e      	ldr	r3, [pc, #568]	; (8005b0c <network_configure_weights+0x258>)
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058d8:	4a8c      	ldr	r2, [pc, #560]	; (8005b0c <network_configure_weights+0x258>)
 80058da:	6013      	str	r3, [r2, #0]
    dense_1_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 0);
 80058dc:	4b8a      	ldr	r3, [pc, #552]	; (8005b08 <network_configure_weights+0x254>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	4a8a      	ldr	r2, [pc, #552]	; (8005b0c <network_configure_weights+0x258>)
 80058e2:	6093      	str	r3, [r2, #8]
    dense_1_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 0);
 80058e4:	4b88      	ldr	r3, [pc, #544]	; (8005b08 <network_configure_weights+0x254>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a88      	ldr	r2, [pc, #544]	; (8005b0c <network_configure_weights+0x258>)
 80058ea:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 80058ec:	4b88      	ldr	r3, [pc, #544]	; (8005b10 <network_configure_weights+0x25c>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80058f4:	4a86      	ldr	r2, [pc, #536]	; (8005b10 <network_configure_weights+0x25c>)
 80058f6:	6013      	str	r3, [r2, #0]
    dense_2_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 60);
 80058f8:	4b83      	ldr	r3, [pc, #524]	; (8005b08 <network_configure_weights+0x254>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	333c      	adds	r3, #60	; 0x3c
 80058fe:	4a84      	ldr	r2, [pc, #528]	; (8005b10 <network_configure_weights+0x25c>)
 8005900:	6093      	str	r3, [r2, #8]
    dense_2_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 60);
 8005902:	4b81      	ldr	r3, [pc, #516]	; (8005b08 <network_configure_weights+0x254>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	333c      	adds	r3, #60	; 0x3c
 8005908:	4a81      	ldr	r2, [pc, #516]	; (8005b10 <network_configure_weights+0x25c>)
 800590a:	60d3      	str	r3, [r2, #12]
    
    dense_2_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 800590c:	4b81      	ldr	r3, [pc, #516]	; (8005b14 <network_configure_weights+0x260>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005914:	4a7f      	ldr	r2, [pc, #508]	; (8005b14 <network_configure_weights+0x260>)
 8005916:	6013      	str	r3, [r2, #0]
    dense_2_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 120);
 8005918:	4b7b      	ldr	r3, [pc, #492]	; (8005b08 <network_configure_weights+0x254>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	3378      	adds	r3, #120	; 0x78
 800591e:	4a7d      	ldr	r2, [pc, #500]	; (8005b14 <network_configure_weights+0x260>)
 8005920:	6093      	str	r3, [r2, #8]
    dense_2_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 120);
 8005922:	4b79      	ldr	r3, [pc, #484]	; (8005b08 <network_configure_weights+0x254>)
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	3378      	adds	r3, #120	; 0x78
 8005928:	4a7a      	ldr	r2, [pc, #488]	; (8005b14 <network_configure_weights+0x260>)
 800592a:	60d3      	str	r3, [r2, #12]
    
    lstm_kernel_array.format |= AI_FMT_FLAG_CONST;
 800592c:	4b7a      	ldr	r3, [pc, #488]	; (8005b18 <network_configure_weights+0x264>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005934:	4a78      	ldr	r2, [pc, #480]	; (8005b18 <network_configure_weights+0x264>)
 8005936:	6013      	str	r3, [r2, #0]
    lstm_kernel_array.data = AI_PTR(g_network_weights_map[0] + 124);
 8005938:	4b73      	ldr	r3, [pc, #460]	; (8005b08 <network_configure_weights+0x254>)
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	337c      	adds	r3, #124	; 0x7c
 800593e:	4a76      	ldr	r2, [pc, #472]	; (8005b18 <network_configure_weights+0x264>)
 8005940:	6093      	str	r3, [r2, #8]
    lstm_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 124);
 8005942:	4b71      	ldr	r3, [pc, #452]	; (8005b08 <network_configure_weights+0x254>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	337c      	adds	r3, #124	; 0x7c
 8005948:	4a73      	ldr	r2, [pc, #460]	; (8005b18 <network_configure_weights+0x264>)
 800594a:	60d3      	str	r3, [r2, #12]
    
    lstm_recurrent_array.format |= AI_FMT_FLAG_CONST;
 800594c:	4b73      	ldr	r3, [pc, #460]	; (8005b1c <network_configure_weights+0x268>)
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005954:	4a71      	ldr	r2, [pc, #452]	; (8005b1c <network_configure_weights+0x268>)
 8005956:	6013      	str	r3, [r2, #0]
    lstm_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 13564);
 8005958:	4b6b      	ldr	r3, [pc, #428]	; (8005b08 <network_configure_weights+0x254>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 8005960:	333c      	adds	r3, #60	; 0x3c
 8005962:	4a6e      	ldr	r2, [pc, #440]	; (8005b1c <network_configure_weights+0x268>)
 8005964:	6093      	str	r3, [r2, #8]
    lstm_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 13564);
 8005966:	4b68      	ldr	r3, [pc, #416]	; (8005b08 <network_configure_weights+0x254>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f503 5353 	add.w	r3, r3, #13504	; 0x34c0
 800596e:	333c      	adds	r3, #60	; 0x3c
 8005970:	4a6a      	ldr	r2, [pc, #424]	; (8005b1c <network_configure_weights+0x268>)
 8005972:	60d3      	str	r3, [r2, #12]
    
    lstm_peephole_array.format |= AI_FMT_FLAG_CONST;
 8005974:	4b6a      	ldr	r3, [pc, #424]	; (8005b20 <network_configure_weights+0x26c>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800597c:	4a68      	ldr	r2, [pc, #416]	; (8005b20 <network_configure_weights+0x26c>)
 800597e:	6013      	str	r3, [r2, #0]
    lstm_peephole_array.data = AI_PTR(g_network_weights_map[0] + 71164);
 8005980:	4b61      	ldr	r3, [pc, #388]	; (8005b08 <network_configure_weights+0x254>)
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8005988:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800598c:	4a64      	ldr	r2, [pc, #400]	; (8005b20 <network_configure_weights+0x26c>)
 800598e:	6093      	str	r3, [r2, #8]
    lstm_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 71164);
 8005990:	4b5d      	ldr	r3, [pc, #372]	; (8005b08 <network_configure_weights+0x254>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8005998:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800599c:	4a60      	ldr	r2, [pc, #384]	; (8005b20 <network_configure_weights+0x26c>)
 800599e:	60d3      	str	r3, [r2, #12]
    
    lstm_bias_array.format |= AI_FMT_FLAG_CONST;
 80059a0:	4b60      	ldr	r3, [pc, #384]	; (8005b24 <network_configure_weights+0x270>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059a8:	4a5e      	ldr	r2, [pc, #376]	; (8005b24 <network_configure_weights+0x270>)
 80059aa:	6013      	str	r3, [r2, #0]
    lstm_bias_array.data = AI_PTR(g_network_weights_map[0] + 71884);
 80059ac:	4b56      	ldr	r3, [pc, #344]	; (8005b08 <network_configure_weights+0x254>)
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80059b4:	33cc      	adds	r3, #204	; 0xcc
 80059b6:	4a5b      	ldr	r2, [pc, #364]	; (8005b24 <network_configure_weights+0x270>)
 80059b8:	6093      	str	r3, [r2, #8]
    lstm_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 71884);
 80059ba:	4b53      	ldr	r3, [pc, #332]	; (8005b08 <network_configure_weights+0x254>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 80059c2:	33cc      	adds	r3, #204	; 0xcc
 80059c4:	4a57      	ldr	r2, [pc, #348]	; (8005b24 <network_configure_weights+0x270>)
 80059c6:	60d3      	str	r3, [r2, #12]
    
    lstm_1_kernel_array.format |= AI_FMT_FLAG_CONST;
 80059c8:	4b57      	ldr	r3, [pc, #348]	; (8005b28 <network_configure_weights+0x274>)
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059d0:	4a55      	ldr	r2, [pc, #340]	; (8005b28 <network_configure_weights+0x274>)
 80059d2:	6013      	str	r3, [r2, #0]
    lstm_1_kernel_array.data = AI_PTR(g_network_weights_map[0] + 72844);
 80059d4:	4b4c      	ldr	r3, [pc, #304]	; (8005b08 <network_configure_weights+0x254>)
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 80059dc:	338c      	adds	r3, #140	; 0x8c
 80059de:	4a52      	ldr	r2, [pc, #328]	; (8005b28 <network_configure_weights+0x274>)
 80059e0:	6093      	str	r3, [r2, #8]
    lstm_1_kernel_array.data_start = AI_PTR(g_network_weights_map[0] + 72844);
 80059e2:	4b49      	ldr	r3, [pc, #292]	; (8005b08 <network_configure_weights+0x254>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f503 338e 	add.w	r3, r3, #72704	; 0x11c00
 80059ea:	338c      	adds	r3, #140	; 0x8c
 80059ec:	4a4e      	ldr	r2, [pc, #312]	; (8005b28 <network_configure_weights+0x274>)
 80059ee:	60d3      	str	r3, [r2, #12]
    
    lstm_1_recurrent_array.format |= AI_FMT_FLAG_CONST;
 80059f0:	4b4e      	ldr	r3, [pc, #312]	; (8005b2c <network_configure_weights+0x278>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059f8:	4a4c      	ldr	r2, [pc, #304]	; (8005b2c <network_configure_weights+0x278>)
 80059fa:	6013      	str	r3, [r2, #0]
    lstm_1_recurrent_array.data = AI_PTR(g_network_weights_map[0] + 101644);
 80059fc:	4b42      	ldr	r3, [pc, #264]	; (8005b08 <network_configure_weights+0x254>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f503 33c6 	add.w	r3, r3, #101376	; 0x18c00
 8005a04:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005a08:	4a48      	ldr	r2, [pc, #288]	; (8005b2c <network_configure_weights+0x278>)
 8005a0a:	6093      	str	r3, [r2, #8]
    lstm_1_recurrent_array.data_start = AI_PTR(g_network_weights_map[0] + 101644);
 8005a0c:	4b3e      	ldr	r3, [pc, #248]	; (8005b08 <network_configure_weights+0x254>)
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f503 33c6 	add.w	r3, r3, #101376	; 0x18c00
 8005a14:	f503 7386 	add.w	r3, r3, #268	; 0x10c
 8005a18:	4a44      	ldr	r2, [pc, #272]	; (8005b2c <network_configure_weights+0x278>)
 8005a1a:	60d3      	str	r3, [r2, #12]
    
    lstm_1_peephole_array.format |= AI_FMT_FLAG_CONST;
 8005a1c:	4b44      	ldr	r3, [pc, #272]	; (8005b30 <network_configure_weights+0x27c>)
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a24:	4a42      	ldr	r2, [pc, #264]	; (8005b30 <network_configure_weights+0x27c>)
 8005a26:	6013      	str	r3, [r2, #0]
    lstm_1_peephole_array.data = AI_PTR(g_network_weights_map[0] + 116044);
 8005a28:	4b37      	ldr	r3, [pc, #220]	; (8005b08 <network_configure_weights+0x254>)
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005a30:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005a34:	4a3e      	ldr	r2, [pc, #248]	; (8005b30 <network_configure_weights+0x27c>)
 8005a36:	6093      	str	r3, [r2, #8]
    lstm_1_peephole_array.data_start = AI_PTR(g_network_weights_map[0] + 116044);
 8005a38:	4b33      	ldr	r3, [pc, #204]	; (8005b08 <network_configure_weights+0x254>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	f503 33e2 	add.w	r3, r3, #115712	; 0x1c400
 8005a40:	f503 73a6 	add.w	r3, r3, #332	; 0x14c
 8005a44:	4a3a      	ldr	r2, [pc, #232]	; (8005b30 <network_configure_weights+0x27c>)
 8005a46:	60d3      	str	r3, [r2, #12]
    
    lstm_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a48:	4b3a      	ldr	r3, [pc, #232]	; (8005b34 <network_configure_weights+0x280>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a50:	4a38      	ldr	r2, [pc, #224]	; (8005b34 <network_configure_weights+0x280>)
 8005a52:	6013      	str	r3, [r2, #0]
    lstm_1_bias_array.data = AI_PTR(g_network_weights_map[0] + 116404);
 8005a54:	4b2c      	ldr	r3, [pc, #176]	; (8005b08 <network_configure_weights+0x254>)
 8005a56:	681b      	ldr	r3, [r3, #0]
 8005a58:	f503 33e3 	add.w	r3, r3, #116224	; 0x1c600
 8005a5c:	33b4      	adds	r3, #180	; 0xb4
 8005a5e:	4a35      	ldr	r2, [pc, #212]	; (8005b34 <network_configure_weights+0x280>)
 8005a60:	6093      	str	r3, [r2, #8]
    lstm_1_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 116404);
 8005a62:	4b29      	ldr	r3, [pc, #164]	; (8005b08 <network_configure_weights+0x254>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f503 33e3 	add.w	r3, r3, #116224	; 0x1c600
 8005a6a:	33b4      	adds	r3, #180	; 0xb4
 8005a6c:	4a31      	ldr	r2, [pc, #196]	; (8005b34 <network_configure_weights+0x280>)
 8005a6e:	60d3      	str	r3, [r2, #12]
    
    dense_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005a70:	4b31      	ldr	r3, [pc, #196]	; (8005b38 <network_configure_weights+0x284>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a78:	4a2f      	ldr	r2, [pc, #188]	; (8005b38 <network_configure_weights+0x284>)
 8005a7a:	6013      	str	r3, [r2, #0]
    dense_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 116884);
 8005a7c:	4b22      	ldr	r3, [pc, #136]	; (8005b08 <network_configure_weights+0x254>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005a84:	3394      	adds	r3, #148	; 0x94
 8005a86:	4a2c      	ldr	r2, [pc, #176]	; (8005b38 <network_configure_weights+0x284>)
 8005a88:	6093      	str	r3, [r2, #8]
    dense_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 116884);
 8005a8a:	4b1f      	ldr	r3, [pc, #124]	; (8005b08 <network_configure_weights+0x254>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f503 33e4 	add.w	r3, r3, #116736	; 0x1c800
 8005a92:	3394      	adds	r3, #148	; 0x94
 8005a94:	4a28      	ldr	r2, [pc, #160]	; (8005b38 <network_configure_weights+0x284>)
 8005a96:	60d3      	str	r3, [r2, #12]
    
    dense_dense_bias_array.format |= AI_FMT_FLAG_CONST;
 8005a98:	4b28      	ldr	r3, [pc, #160]	; (8005b3c <network_configure_weights+0x288>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa0:	4a26      	ldr	r2, [pc, #152]	; (8005b3c <network_configure_weights+0x288>)
 8005aa2:	6013      	str	r3, [r2, #0]
    dense_dense_bias_array.data = AI_PTR(g_network_weights_map[0] + 224884);
 8005aa4:	4b18      	ldr	r3, [pc, #96]	; (8005b08 <network_configure_weights+0x254>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f503 335b 	add.w	r3, r3, #224256	; 0x36c00
 8005aac:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8005ab0:	4a22      	ldr	r2, [pc, #136]	; (8005b3c <network_configure_weights+0x288>)
 8005ab2:	6093      	str	r3, [r2, #8]
    dense_dense_bias_array.data_start = AI_PTR(g_network_weights_map[0] + 224884);
 8005ab4:	4b14      	ldr	r3, [pc, #80]	; (8005b08 <network_configure_weights+0x254>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f503 335b 	add.w	r3, r3, #224256	; 0x36c00
 8005abc:	f503 731d 	add.w	r3, r3, #628	; 0x274
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <network_configure_weights+0x288>)
 8005ac2:	60d3      	str	r3, [r2, #12]
    
    dense_1_dense_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ac4:	4b1e      	ldr	r3, [pc, #120]	; (8005b40 <network_configure_weights+0x28c>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005acc:	4a1c      	ldr	r2, [pc, #112]	; (8005b40 <network_configure_weights+0x28c>)
 8005ace:	6013      	str	r3, [r2, #0]
    dense_1_dense_weights_array.data = AI_PTR(g_network_weights_map[0] + 225004);
 8005ad0:	4b0d      	ldr	r3, [pc, #52]	; (8005b08 <network_configure_weights+0x254>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	f503 335b 	add.w	r3, r3, #224256	; 0x36c00
 8005ad8:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8005adc:	4a18      	ldr	r2, [pc, #96]	; (8005b40 <network_configure_weights+0x28c>)
 8005ade:	6093      	str	r3, [r2, #8]
    dense_1_dense_weights_array.data_start = AI_PTR(g_network_weights_map[0] + 225004);
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <network_configure_weights+0x254>)
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f503 335b 	add.w	r3, r3, #224256	; 0x36c00
 8005ae8:	f503 733b 	add.w	r3, r3, #748	; 0x2ec
 8005aec:	4a14      	ldr	r2, [pc, #80]	; (8005b40 <network_configure_weights+0x28c>)
 8005aee:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e005      	b.n	8005b00 <network_configure_weights+0x24c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005af4:	2212      	movs	r2, #18
 8005af6:	2130      	movs	r1, #48	; 0x30
 8005af8:	6878      	ldr	r0, [r7, #4]
 8005afa:	f000 faeb 	bl	80060d4 <ai_platform_network_set_error>
  return false;
 8005afe:	2300      	movs	r3, #0
}
 8005b00:	4618      	mov	r0, r3
 8005b02:	3708      	adds	r7, #8
 8005b04:	46bd      	mov	sp, r7
 8005b06:	bd80      	pop	{r7, pc}
 8005b08:	200043f0 	.word	0x200043f0
 8005b0c:	20000020 	.word	0x20000020
 8005b10:	20000030 	.word	0x20000030
 8005b14:	20000040 	.word	0x20000040
 8005b18:	20000100 	.word	0x20000100
 8005b1c:	20000110 	.word	0x20000110
 8005b20:	20000120 	.word	0x20000120
 8005b24:	20000130 	.word	0x20000130
 8005b28:	20000140 	.word	0x20000140
 8005b2c:	20000150 	.word	0x20000150
 8005b30:	20000160 	.word	0x20000160
 8005b34:	20000170 	.word	0x20000170
 8005b38:	20000180 	.word	0x20000180
 8005b3c:	20000190 	.word	0x20000190
 8005b40:	200001a0 	.word	0x200001a0

08005b44 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b082      	sub	sp, #8
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f000 fa53 	bl	8005ff8 <ai_platform_network_get_error>
 8005b52:	4603      	mov	r3, r0
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3708      	adds	r7, #8
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}

08005b5c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005b5c:	b580      	push	{r7, lr}
 8005b5e:	b084      	sub	sp, #16
 8005b60:	af02      	add	r7, sp, #8
 8005b62:	6078      	str	r0, [r7, #4]
 8005b64:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005b66:	2300      	movs	r3, #0
 8005b68:	9301      	str	r3, [sp, #4]
 8005b6a:	2305      	movs	r3, #5
 8005b6c:	9300      	str	r3, [sp, #0]
 8005b6e:	2301      	movs	r3, #1
 8005b70:	4a04      	ldr	r2, [pc, #16]	; (8005b84 <ai_network_create+0x28>)
 8005b72:	6839      	ldr	r1, [r7, #0]
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 fc59 	bl	800642c <ai_platform_network_create>
 8005b7a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}
 8005b84:	20000bbc 	.word	0x20000bbc

08005b88 <ai_network_create_and_init>:

AI_API_ENTRY
ai_error ai_network_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b096      	sub	sp, #88	; 0x58
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	60f8      	str	r0, [r7, #12]
 8005b90:	60b9      	str	r1, [r7, #8]
 8005b92:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_network_create(network, AI_NETWORK_DATA_CONFIG);
 8005b94:	2100      	movs	r1, #0
 8005b96:	68f8      	ldr	r0, [r7, #12]
 8005b98:	f7ff ffe0 	bl	8005b5c <ai_network_create>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005ba0:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d001      	beq.n	8005bac <ai_network_create_and_init+0x24>
        return err;
 8005ba8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005baa:	e05d      	b.n	8005c68 <ai_network_create_and_init+0xe0>
    if (ai_network_data_params_get(&params) != true) {
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f000 f8dd 	bl	8005d70 <ai_network_data_params_get>
 8005bb6:	4603      	mov	r3, r0
 8005bb8:	f083 0301 	eor.w	r3, r3, #1
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d008      	beq.n	8005bd4 <ai_network_create_and_init+0x4c>
        err = ai_network_get_error(*network);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	f7ff ffbc 	bl	8005b44 <ai_network_get_error>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005bd0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bd2:	e049      	b.n	8005c68 <ai_network_create_and_init+0xe0>
    }
#if defined(AI_NETWORK_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d016      	beq.n	8005c08 <ai_network_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005bda:	2300      	movs	r3, #0
 8005bdc:	657b      	str	r3, [r7, #84]	; 0x54
 8005bde:	e00e      	b.n	8005bfe <ai_network_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005be0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005be2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be4:	009b      	lsls	r3, r3, #2
 8005be6:	68ba      	ldr	r2, [r7, #8]
 8005be8:	4413      	add	r3, r2
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	f107 0314 	add.w	r3, r7, #20
 8005bf0:	330c      	adds	r3, #12
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	f000 f922 	bl	8005e3c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bfa:	3301      	adds	r3, #1
 8005bfc:	657b      	str	r3, [r7, #84]	; 0x54
 8005bfe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005c00:	461a      	mov	r2, r3
 8005c02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c04:	4293      	cmp	r3, r2
 8005c06:	dbeb      	blt.n	8005be0 <ai_network_create_and_init+0x58>
    }
#endif
#if defined(AI_NETWORK_DATA_WEIGHTS_COUNT)
    if (weights) {
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d016      	beq.n	8005c3c <ai_network_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005c0e:	2300      	movs	r3, #0
 8005c10:	653b      	str	r3, [r7, #80]	; 0x50
 8005c12:	e00e      	b.n	8005c32 <ai_network_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005c14:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4413      	add	r3, r2
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	f107 0314 	add.w	r3, r7, #20
 8005c24:	3304      	adds	r3, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f000 f908 	bl	8005e3c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 8005c2c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c2e:	3301      	adds	r3, #1
 8005c30:	653b      	str	r3, [r7, #80]	; 0x50
 8005c32:	8b7b      	ldrh	r3, [r7, #26]
 8005c34:	461a      	mov	r2, r3
 8005c36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005c38:	4293      	cmp	r3, r2
 8005c3a:	dbeb      	blt.n	8005c14 <ai_network_create_and_init+0x8c>
    }
#endif
    if (ai_network_init(*network, &params) != true) {
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f107 0214 	add.w	r2, r7, #20
 8005c44:	4611      	mov	r1, r2
 8005c46:	4618      	mov	r0, r3
 8005c48:	f000 f846 	bl	8005cd8 <ai_network_init>
 8005c4c:	4603      	mov	r3, r0
 8005c4e:	f083 0301 	eor.w	r3, r3, #1
 8005c52:	b2db      	uxtb	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d006      	beq.n	8005c66 <ai_network_create_and_init+0xde>
        err = ai_network_get_error(*network);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7ff ff71 	bl	8005b44 <ai_network_get_error>
 8005c62:	4603      	mov	r3, r0
 8005c64:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 8005c66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3758      	adds	r7, #88	; 0x58
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <ai_network_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b082      	sub	sp, #8
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d104      	bne.n	8005c8a <ai_network_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005c80:	4b06      	ldr	r3, [pc, #24]	; (8005c9c <ai_network_inputs_get+0x2c>)
 8005c82:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	4a06      	ldr	r2, [pc, #24]	; (8005ca0 <ai_network_inputs_get+0x30>)
 8005c88:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005c8a:	6839      	ldr	r1, [r7, #0]
 8005c8c:	6878      	ldr	r0, [r7, #4]
 8005c8e:	f000 fa27 	bl	80060e0 <ai_platform_inputs_get>
 8005c92:	4603      	mov	r3, r0
}
 8005c94:	4618      	mov	r0, r3
 8005c96:	3708      	adds	r7, #8
 8005c98:	46bd      	mov	sp, r7
 8005c9a:	bd80      	pop	{r7, pc}
 8005c9c:	20000bbc 	.word	0x20000bbc
 8005ca0:	a1c00100 	.word	0xa1c00100

08005ca4 <ai_network_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_network_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005ca4:	b580      	push	{r7, lr}
 8005ca6:	b082      	sub	sp, #8
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d104      	bne.n	8005cbe <ai_network_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005cb4:	4b06      	ldr	r3, [pc, #24]	; (8005cd0 <ai_network_outputs_get+0x2c>)
 8005cb6:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a06      	ldr	r2, [pc, #24]	; (8005cd4 <ai_network_outputs_get+0x30>)
 8005cbc:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005cbe:	6839      	ldr	r1, [r7, #0]
 8005cc0:	6878      	ldr	r0, [r7, #4]
 8005cc2:	f000 fae3 	bl	800628c <ai_platform_outputs_get>
 8005cc6:	4603      	mov	r3, r0
}
 8005cc8:	4618      	mov	r0, r3
 8005cca:	3708      	adds	r7, #8
 8005ccc:	46bd      	mov	sp, r7
 8005cce:	bd80      	pop	{r7, pc}
 8005cd0:	20000bbc 	.word	0x20000bbc
 8005cd4:	a1c00100 	.word	0xa1c00100

08005cd8 <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 8005cd8:	b580      	push	{r7, lr}
 8005cda:	b084      	sub	sp, #16
 8005cdc:	af00      	add	r7, sp, #0
 8005cde:	6078      	str	r0, [r7, #4]
 8005ce0:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f000 fc77 	bl	80065d8 <ai_platform_network_init>
 8005cea:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d101      	bne.n	8005cf6 <ai_network_init+0x1e>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e028      	b.n	8005d48 <ai_network_init+0x70>

  ai_bool ok = true;
 8005cf6:	2301      	movs	r3, #1
 8005cf8:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, params);
 8005cfa:	6839      	ldr	r1, [r7, #0]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f7ff fdd9 	bl	80058b4 <network_configure_weights>
 8005d02:	4603      	mov	r3, r0
 8005d04:	461a      	mov	r2, r3
 8005d06:	7afb      	ldrb	r3, [r7, #11]
 8005d08:	4013      	ands	r3, r2
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	bf14      	ite	ne
 8005d0e:	2301      	movne	r3, #1
 8005d10:	2300      	moveq	r3, #0
 8005d12:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, params);
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f7ff fd28 	bl	800576c <network_configure_activations>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	461a      	mov	r2, r3
 8005d20:	7afb      	ldrb	r3, [r7, #11]
 8005d22:	4013      	ands	r3, r2
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	bf14      	ite	ne
 8005d28:	2301      	movne	r3, #1
 8005d2a:	2300      	moveq	r3, #0
 8005d2c:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005d2e:	6878      	ldr	r0, [r7, #4]
 8005d30:	f000 fd40 	bl	80067b4 <ai_platform_network_post_init>
 8005d34:	4603      	mov	r3, r0
 8005d36:	461a      	mov	r2, r3
 8005d38:	7afb      	ldrb	r3, [r7, #11]
 8005d3a:	4013      	ands	r3, r2
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	bf14      	ite	ne
 8005d40:	2301      	movne	r3, #1
 8005d42:	2300      	moveq	r3, #0
 8005d44:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005d46:	7afb      	ldrb	r3, [r7, #11]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b084      	sub	sp, #16
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005d5c:	687a      	ldr	r2, [r7, #4]
 8005d5e:	68b9      	ldr	r1, [r7, #8]
 8005d60:	68f8      	ldr	r0, [r7, #12]
 8005d62:	f000 fdaf 	bl	80068c4 <ai_platform_network_process>
 8005d66:	4603      	mov	r3, r0
}
 8005d68:	4618      	mov	r0, r3
 8005d6a:	3710      	adds	r7, #16
 8005d6c:	46bd      	mov	sp, r7
 8005d6e:	bd80      	pop	{r7, pc}

08005d70 <ai_network_data_params_get>:
 * @ingroup network_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_network_data_params_get(ai_network_params* params)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b086      	sub	sp, #24
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d101      	bne.n	8005d82 <ai_network_data_params_get+0x12>
 8005d7e:	2300      	movs	r3, #0
 8005d80:	e016      	b.n	8005db0 <ai_network_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005d82:	4a0d      	ldr	r2, [pc, #52]	; (8005db8 <ai_network_data_params_get+0x48>)
 8005d84:	f107 0310 	add.w	r3, r7, #16
 8005d88:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d8c:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_ACTIVATIONS_COUNT, g_network_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005d90:	4a0a      	ldr	r2, [pc, #40]	; (8005dbc <ai_network_data_params_get+0x4c>)
 8005d92:	f107 0308 	add.w	r3, r7, #8
 8005d96:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005d9a:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_NETWORK_DATA_WEIGHTS_COUNT, g_network_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005d9e:	f107 0210 	add.w	r2, r7, #16
 8005da2:	f107 0308 	add.w	r3, r7, #8
 8005da6:	4619      	mov	r1, r3
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f000 f903 	bl	8005fb4 <ai_platform_bind_network_params>
 8005dae:	4603      	mov	r3, r0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3718      	adds	r7, #24
 8005db4:	46bd      	mov	sp, r7
 8005db6:	bd80      	pop	{r7, pc}
 8005db8:	0800e4fc 	.word	0x0800e4fc
 8005dbc:	0800e504 	.word	0x0800e504

08005dc0 <ai_buffer_get_size>:
 8005dc0:	b378      	cbz	r0, 8005e22 <ai_buffer_get_size+0x62>
 8005dc2:	b410      	push	{r4}
 8005dc4:	6803      	ldr	r3, [r0, #0]
 8005dc6:	4a17      	ldr	r2, [pc, #92]	; (8005e24 <ai_buffer_get_size+0x64>)
 8005dc8:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8005dcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005dd0:	4293      	cmp	r3, r2
 8005dd2:	d01e      	beq.n	8005e12 <ai_buffer_get_size+0x52>
 8005dd4:	6984      	ldr	r4, [r0, #24]
 8005dd6:	6862      	ldr	r2, [r4, #4]
 8005dd8:	7d03      	ldrb	r3, [r0, #20]
 8005dda:	6941      	ldr	r1, [r0, #20]
 8005ddc:	f1a3 0301 	sub.w	r3, r3, #1
 8005de0:	fab3 f383 	clz	r3, r3
 8005de4:	095b      	lsrs	r3, r3, #5
 8005de6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005dea:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005dee:	da0b      	bge.n	8005e08 <ai_buffer_get_size+0x48>
 8005df0:	2b01      	cmp	r3, #1
 8005df2:	d102      	bne.n	8005dfa <ai_buffer_get_size+0x3a>
 8005df4:	2802      	cmp	r0, #2
 8005df6:	d007      	beq.n	8005e08 <ai_buffer_get_size+0x48>
 8005df8:	2302      	movs	r3, #2
 8005dfa:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	4298      	cmp	r0, r3
 8005e02:	fb01 f202 	mul.w	r2, r1, r2
 8005e06:	d1f3      	bne.n	8005df0 <ai_buffer_get_size+0x30>
 8005e08:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005e0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	2900      	cmp	r1, #0
 8005e14:	d0de      	beq.n	8005dd4 <ai_buffer_get_size+0x14>
 8005e16:	6984      	ldr	r4, [r0, #24]
 8005e18:	6863      	ldr	r3, [r4, #4]
 8005e1a:	331f      	adds	r3, #31
 8005e1c:	f023 021f 	bic.w	r2, r3, #31
 8005e20:	e7da      	b.n	8005dd8 <ai_buffer_get_size+0x18>
 8005e22:	4770      	bx	lr
 8005e24:	000400c0 	.word	0x000400c0

08005e28 <ai_buffer_array_sane>:
 8005e28:	b138      	cbz	r0, 8005e3a <ai_buffer_array_sane+0x12>
 8005e2a:	6843      	ldr	r3, [r0, #4]
 8005e2c:	b123      	cbz	r3, 8005e38 <ai_buffer_array_sane+0x10>
 8005e2e:	8840      	ldrh	r0, [r0, #2]
 8005e30:	3800      	subs	r0, #0
 8005e32:	bf18      	it	ne
 8005e34:	2001      	movne	r0, #1
 8005e36:	4770      	bx	lr
 8005e38:	4618      	mov	r0, r3
 8005e3a:	4770      	bx	lr

08005e3c <ai_buffer_array_item_set_address>:
 8005e3c:	b150      	cbz	r0, 8005e54 <ai_buffer_array_item_set_address+0x18>
 8005e3e:	6843      	ldr	r3, [r0, #4]
 8005e40:	b14b      	cbz	r3, 8005e56 <ai_buffer_array_item_set_address+0x1a>
 8005e42:	8840      	ldrh	r0, [r0, #2]
 8005e44:	b900      	cbnz	r0, 8005e48 <ai_buffer_array_item_set_address+0xc>
 8005e46:	4770      	bx	lr
 8005e48:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005e4c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005e50:	2001      	movs	r0, #1
 8005e52:	604a      	str	r2, [r1, #4]
 8005e54:	4770      	bx	lr
 8005e56:	4618      	mov	r0, r3
 8005e58:	4770      	bx	lr
 8005e5a:	bf00      	nop

08005e5c <_ai_platform_acquire_crc>:
 8005e5c:	2001      	movs	r0, #1
 8005e5e:	4770      	bx	lr

08005e60 <_ai_platform_release_crc>:
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop

08005e64 <ai_platform_get_weights_map>:
 8005e64:	2a00      	cmp	r2, #0
 8005e66:	d037      	beq.n	8005ed8 <ai_platform_get_weights_map+0x74>
 8005e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e6a:	4604      	mov	r4, r0
 8005e6c:	b1a0      	cbz	r0, 8005e98 <ai_platform_get_weights_map+0x34>
 8005e6e:	460f      	mov	r7, r1
 8005e70:	b191      	cbz	r1, 8005e98 <ai_platform_get_weights_map+0x34>
 8005e72:	4b25      	ldr	r3, [pc, #148]	; (8005f08 <ai_platform_get_weights_map+0xa4>)
 8005e74:	6810      	ldr	r0, [r2, #0]
 8005e76:	4298      	cmp	r0, r3
 8005e78:	4615      	mov	r5, r2
 8005e7a:	d00f      	beq.n	8005e9c <ai_platform_get_weights_map+0x38>
 8005e7c:	6855      	ldr	r5, [r2, #4]
 8005e7e:	b15d      	cbz	r5, 8005e98 <ai_platform_get_weights_map+0x34>
 8005e80:	682e      	ldr	r6, [r5, #0]
 8005e82:	429e      	cmp	r6, r3
 8005e84:	d02a      	beq.n	8005edc <ai_platform_get_weights_map+0x78>
 8005e86:	f1a1 0001 	sub.w	r0, r1, #1
 8005e8a:	6025      	str	r5, [r4, #0]
 8005e8c:	fab0 f080 	clz	r0, r0
 8005e90:	0940      	lsrs	r0, r0, #5
 8005e92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e94:	42a7      	cmp	r7, r4
 8005e96:	d034      	beq.n	8005f02 <ai_platform_get_weights_map+0x9e>
 8005e98:	2000      	movs	r0, #0
 8005e9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e9c:	1d10      	adds	r0, r2, #4
 8005e9e:	f7ff ffc3 	bl	8005e28 <ai_buffer_array_sane>
 8005ea2:	2800      	cmp	r0, #0
 8005ea4:	d0f8      	beq.n	8005e98 <ai_platform_get_weights_map+0x34>
 8005ea6:	88eb      	ldrh	r3, [r5, #6]
 8005ea8:	429f      	cmp	r7, r3
 8005eaa:	d1f5      	bne.n	8005e98 <ai_platform_get_weights_map+0x34>
 8005eac:	f04f 0e00 	mov.w	lr, #0
 8005eb0:	1f23      	subs	r3, r4, #4
 8005eb2:	4670      	mov	r0, lr
 8005eb4:	68aa      	ldr	r2, [r5, #8]
 8005eb6:	eb02 0c0e 	add.w	ip, r2, lr
 8005eba:	f10e 0e1c 	add.w	lr, lr, #28
 8005ebe:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005ec2:	b124      	cbz	r4, 8005ece <ai_platform_get_weights_map+0x6a>
 8005ec4:	3001      	adds	r0, #1
 8005ec6:	4287      	cmp	r7, r0
 8005ec8:	f843 4f04 	str.w	r4, [r3, #4]!
 8005ecc:	d1f2      	bne.n	8005eb4 <ai_platform_get_weights_map+0x50>
 8005ece:	1a38      	subs	r0, r7, r0
 8005ed0:	fab0 f080 	clz	r0, r0
 8005ed4:	0940      	lsrs	r0, r0, #5
 8005ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005ed8:	2000      	movs	r0, #0
 8005eda:	4770      	bx	lr
 8005edc:	1f23      	subs	r3, r4, #4
 8005ede:	4628      	mov	r0, r5
 8005ee0:	2400      	movs	r4, #0
 8005ee2:	e000      	b.n	8005ee6 <ai_platform_get_weights_map+0x82>
 8005ee4:	4614      	mov	r4, r2
 8005ee6:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005eea:	42b2      	cmp	r2, r6
 8005eec:	d0d2      	beq.n	8005e94 <ai_platform_get_weights_map+0x30>
 8005eee:	f843 2f04 	str.w	r2, [r3, #4]!
 8005ef2:	1c62      	adds	r2, r4, #1
 8005ef4:	4297      	cmp	r7, r2
 8005ef6:	d1f5      	bne.n	8005ee4 <ai_platform_get_weights_map+0x80>
 8005ef8:	3402      	adds	r4, #2
 8005efa:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005efe:	42b3      	cmp	r3, r6
 8005f00:	d1ca      	bne.n	8005e98 <ai_platform_get_weights_map+0x34>
 8005f02:	2001      	movs	r0, #1
 8005f04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	a1facade 	.word	0xa1facade

08005f0c <ai_platform_get_activations_map>:
 8005f0c:	2a00      	cmp	r2, #0
 8005f0e:	d038      	beq.n	8005f82 <ai_platform_get_activations_map+0x76>
 8005f10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f12:	4604      	mov	r4, r0
 8005f14:	b1a0      	cbz	r0, 8005f40 <ai_platform_get_activations_map+0x34>
 8005f16:	460f      	mov	r7, r1
 8005f18:	b191      	cbz	r1, 8005f40 <ai_platform_get_activations_map+0x34>
 8005f1a:	4b25      	ldr	r3, [pc, #148]	; (8005fb0 <ai_platform_get_activations_map+0xa4>)
 8005f1c:	6810      	ldr	r0, [r2, #0]
 8005f1e:	4298      	cmp	r0, r3
 8005f20:	4615      	mov	r5, r2
 8005f22:	d00f      	beq.n	8005f44 <ai_platform_get_activations_map+0x38>
 8005f24:	6a15      	ldr	r5, [r2, #32]
 8005f26:	b15d      	cbz	r5, 8005f40 <ai_platform_get_activations_map+0x34>
 8005f28:	682e      	ldr	r6, [r5, #0]
 8005f2a:	429e      	cmp	r6, r3
 8005f2c:	d02b      	beq.n	8005f86 <ai_platform_get_activations_map+0x7a>
 8005f2e:	f1a1 0001 	sub.w	r0, r1, #1
 8005f32:	6025      	str	r5, [r4, #0]
 8005f34:	fab0 f080 	clz	r0, r0
 8005f38:	0940      	lsrs	r0, r0, #5
 8005f3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f3c:	42a7      	cmp	r7, r4
 8005f3e:	d035      	beq.n	8005fac <ai_platform_get_activations_map+0xa0>
 8005f40:	2000      	movs	r0, #0
 8005f42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f44:	f102 000c 	add.w	r0, r2, #12
 8005f48:	f7ff ff6e 	bl	8005e28 <ai_buffer_array_sane>
 8005f4c:	2800      	cmp	r0, #0
 8005f4e:	d0f7      	beq.n	8005f40 <ai_platform_get_activations_map+0x34>
 8005f50:	89eb      	ldrh	r3, [r5, #14]
 8005f52:	429f      	cmp	r7, r3
 8005f54:	d1f4      	bne.n	8005f40 <ai_platform_get_activations_map+0x34>
 8005f56:	f04f 0e00 	mov.w	lr, #0
 8005f5a:	1f23      	subs	r3, r4, #4
 8005f5c:	4670      	mov	r0, lr
 8005f5e:	692a      	ldr	r2, [r5, #16]
 8005f60:	eb02 0c0e 	add.w	ip, r2, lr
 8005f64:	f10e 0e1c 	add.w	lr, lr, #28
 8005f68:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8005f6c:	b124      	cbz	r4, 8005f78 <ai_platform_get_activations_map+0x6c>
 8005f6e:	3001      	adds	r0, #1
 8005f70:	4287      	cmp	r7, r0
 8005f72:	f843 4f04 	str.w	r4, [r3, #4]!
 8005f76:	d1f2      	bne.n	8005f5e <ai_platform_get_activations_map+0x52>
 8005f78:	1a38      	subs	r0, r7, r0
 8005f7a:	fab0 f080 	clz	r0, r0
 8005f7e:	0940      	lsrs	r0, r0, #5
 8005f80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f82:	2000      	movs	r0, #0
 8005f84:	4770      	bx	lr
 8005f86:	1f23      	subs	r3, r4, #4
 8005f88:	4628      	mov	r0, r5
 8005f8a:	2400      	movs	r4, #0
 8005f8c:	e000      	b.n	8005f90 <ai_platform_get_activations_map+0x84>
 8005f8e:	4614      	mov	r4, r2
 8005f90:	f850 2f04 	ldr.w	r2, [r0, #4]!
 8005f94:	42b2      	cmp	r2, r6
 8005f96:	d0d1      	beq.n	8005f3c <ai_platform_get_activations_map+0x30>
 8005f98:	f843 2f04 	str.w	r2, [r3, #4]!
 8005f9c:	1c62      	adds	r2, r4, #1
 8005f9e:	4297      	cmp	r7, r2
 8005fa0:	d1f5      	bne.n	8005f8e <ai_platform_get_activations_map+0x82>
 8005fa2:	3402      	adds	r4, #2
 8005fa4:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8005fa8:	42b3      	cmp	r3, r6
 8005faa:	d1c9      	bne.n	8005f40 <ai_platform_get_activations_map+0x34>
 8005fac:	2001      	movs	r0, #1
 8005fae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fb0:	a1facade 	.word	0xa1facade

08005fb4 <ai_platform_bind_network_params>:
 8005fb4:	b1a0      	cbz	r0, 8005fe0 <ai_platform_bind_network_params+0x2c>
 8005fb6:	b1b1      	cbz	r1, 8005fe6 <ai_platform_bind_network_params+0x32>
 8005fb8:	b1c2      	cbz	r2, 8005fec <ai_platform_bind_network_params+0x38>
 8005fba:	b410      	push	{r4}
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	4c0d      	ldr	r4, [pc, #52]	; (8005ff4 <ai_platform_bind_network_params+0x40>)
 8005fc0:	f843 4b04 	str.w	r4, [r3], #4
 8005fc4:	f100 0c0c 	add.w	ip, r0, #12
 8005fc8:	c903      	ldmia	r1, {r0, r1}
 8005fca:	e883 0003 	stmia.w	r3, {r0, r1}
 8005fce:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005fd2:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005fd6:	2301      	movs	r3, #1
 8005fd8:	4618      	mov	r0, r3
 8005fda:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	4603      	mov	r3, r0
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	4770      	bx	lr
 8005fe6:	460b      	mov	r3, r1
 8005fe8:	4618      	mov	r0, r3
 8005fea:	4770      	bx	lr
 8005fec:	4613      	mov	r3, r2
 8005fee:	4618      	mov	r0, r3
 8005ff0:	4770      	bx	lr
 8005ff2:	bf00      	nop
 8005ff4:	a1facade 	.word	0xa1facade

08005ff8 <ai_platform_network_get_error>:
 8005ff8:	b510      	push	{r4, lr}
 8005ffa:	b1f0      	cbz	r0, 800603a <ai_platform_network_get_error+0x42>
 8005ffc:	4b2f      	ldr	r3, [pc, #188]	; (80060bc <ai_platform_network_get_error+0xc4>)
 8005ffe:	6802      	ldr	r2, [r0, #0]
 8006000:	429a      	cmp	r2, r3
 8006002:	4604      	mov	r4, r0
 8006004:	d119      	bne.n	800603a <ai_platform_network_get_error+0x42>
 8006006:	f7ff ff29 	bl	8005e5c <_ai_platform_acquire_crc>
 800600a:	4b2d      	ldr	r3, [pc, #180]	; (80060c0 <ai_platform_network_get_error+0xc8>)
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006012:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006016:	d03c      	beq.n	8006092 <ai_platform_network_get_error+0x9a>
 8006018:	4a2a      	ldr	r2, [pc, #168]	; (80060c4 <ai_platform_network_get_error+0xcc>)
 800601a:	2301      	movs	r3, #1
 800601c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006020:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006024:	2b00      	cmp	r3, #0
 8006026:	d1fb      	bne.n	8006020 <ai_platform_network_get_error+0x28>
 8006028:	4b27      	ldr	r3, [pc, #156]	; (80060c8 <ai_platform_network_get_error+0xd0>)
 800602a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800602e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006032:	4b26      	ldr	r3, [pc, #152]	; (80060cc <ai_platform_network_get_error+0xd4>)
 8006034:	429a      	cmp	r2, r3
 8006036:	d038      	beq.n	80060aa <ai_platform_network_get_error+0xb2>
 8006038:	e7fe      	b.n	8006038 <ai_platform_network_get_error+0x40>
 800603a:	f7ff ff0f 	bl	8005e5c <_ai_platform_acquire_crc>
 800603e:	4b20      	ldr	r3, [pc, #128]	; (80060c0 <ai_platform_network_get_error+0xc8>)
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006046:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800604a:	d010      	beq.n	800606e <ai_platform_network_get_error+0x76>
 800604c:	4a1d      	ldr	r2, [pc, #116]	; (80060c4 <ai_platform_network_get_error+0xcc>)
 800604e:	2301      	movs	r3, #1
 8006050:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006054:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006058:	2b00      	cmp	r3, #0
 800605a:	d1fb      	bne.n	8006054 <ai_platform_network_get_error+0x5c>
 800605c:	4b1a      	ldr	r3, [pc, #104]	; (80060c8 <ai_platform_network_get_error+0xd0>)
 800605e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006062:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006066:	4b19      	ldr	r3, [pc, #100]	; (80060cc <ai_platform_network_get_error+0xd4>)
 8006068:	429a      	cmp	r2, r3
 800606a:	d00d      	beq.n	8006088 <ai_platform_network_get_error+0x90>
 800606c:	e7fe      	b.n	800606c <ai_platform_network_get_error+0x74>
 800606e:	4a18      	ldr	r2, [pc, #96]	; (80060d0 <ai_platform_network_get_error+0xd8>)
 8006070:	2301      	movs	r3, #1
 8006072:	6093      	str	r3, [r2, #8]
 8006074:	6893      	ldr	r3, [r2, #8]
 8006076:	2b00      	cmp	r3, #0
 8006078:	d1fc      	bne.n	8006074 <ai_platform_network_get_error+0x7c>
 800607a:	4b13      	ldr	r3, [pc, #76]	; (80060c8 <ai_platform_network_get_error+0xd0>)
 800607c:	6013      	str	r3, [r2, #0]
 800607e:	6812      	ldr	r2, [r2, #0]
 8006080:	4b12      	ldr	r3, [pc, #72]	; (80060cc <ai_platform_network_get_error+0xd4>)
 8006082:	429a      	cmp	r2, r3
 8006084:	d000      	beq.n	8006088 <ai_platform_network_get_error+0x90>
 8006086:	e7fe      	b.n	8006086 <ai_platform_network_get_error+0x8e>
 8006088:	f7ff feea 	bl	8005e60 <_ai_platform_release_crc>
 800608c:	f241 0010 	movw	r0, #4112	; 0x1010
 8006090:	bd10      	pop	{r4, pc}
 8006092:	4a0f      	ldr	r2, [pc, #60]	; (80060d0 <ai_platform_network_get_error+0xd8>)
 8006094:	2301      	movs	r3, #1
 8006096:	6093      	str	r3, [r2, #8]
 8006098:	6893      	ldr	r3, [r2, #8]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1fc      	bne.n	8006098 <ai_platform_network_get_error+0xa0>
 800609e:	4b0a      	ldr	r3, [pc, #40]	; (80060c8 <ai_platform_network_get_error+0xd0>)
 80060a0:	6013      	str	r3, [r2, #0]
 80060a2:	6812      	ldr	r2, [r2, #0]
 80060a4:	4b09      	ldr	r3, [pc, #36]	; (80060cc <ai_platform_network_get_error+0xd4>)
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d107      	bne.n	80060ba <ai_platform_network_get_error+0xc2>
 80060aa:	f7ff fed9 	bl	8005e60 <_ai_platform_release_crc>
 80060ae:	f104 0010 	add.w	r0, r4, #16
 80060b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80060b6:	f000 be8b 	b.w	8006dd0 <core_get_error>
 80060ba:	e7fe      	b.n	80060ba <ai_platform_network_get_error+0xc2>
 80060bc:	a1c00100 	.word	0xa1c00100
 80060c0:	e0042000 	.word	0xe0042000
 80060c4:	58024000 	.word	0x58024000
 80060c8:	f407a5c2 	.word	0xf407a5c2
 80060cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80060d0:	40023000 	.word	0x40023000

080060d4 <ai_platform_network_set_error>:
 80060d4:	b110      	cbz	r0, 80060dc <ai_platform_network_set_error+0x8>
 80060d6:	3010      	adds	r0, #16
 80060d8:	f000 be80 	b.w	8006ddc <core_set_error>
 80060dc:	4770      	bx	lr
 80060de:	bf00      	nop

080060e0 <ai_platform_inputs_get>:
 80060e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e4:	b085      	sub	sp, #20
 80060e6:	9102      	str	r1, [sp, #8]
 80060e8:	b1f0      	cbz	r0, 8006128 <ai_platform_inputs_get+0x48>
 80060ea:	4b62      	ldr	r3, [pc, #392]	; (8006274 <ai_platform_inputs_get+0x194>)
 80060ec:	6802      	ldr	r2, [r0, #0]
 80060ee:	429a      	cmp	r2, r3
 80060f0:	4607      	mov	r7, r0
 80060f2:	d119      	bne.n	8006128 <ai_platform_inputs_get+0x48>
 80060f4:	f7ff feb2 	bl	8005e5c <_ai_platform_acquire_crc>
 80060f8:	4b5f      	ldr	r3, [pc, #380]	; (8006278 <ai_platform_inputs_get+0x198>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006100:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006104:	d03d      	beq.n	8006182 <ai_platform_inputs_get+0xa2>
 8006106:	4a5d      	ldr	r2, [pc, #372]	; (800627c <ai_platform_inputs_get+0x19c>)
 8006108:	2301      	movs	r3, #1
 800610a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800610e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006112:	2b00      	cmp	r3, #0
 8006114:	d1fb      	bne.n	800610e <ai_platform_inputs_get+0x2e>
 8006116:	4b5a      	ldr	r3, [pc, #360]	; (8006280 <ai_platform_inputs_get+0x1a0>)
 8006118:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800611c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006120:	4b58      	ldr	r3, [pc, #352]	; (8006284 <ai_platform_inputs_get+0x1a4>)
 8006122:	429a      	cmp	r2, r3
 8006124:	d039      	beq.n	800619a <ai_platform_inputs_get+0xba>
 8006126:	e7fe      	b.n	8006126 <ai_platform_inputs_get+0x46>
 8006128:	f7ff fe98 	bl	8005e5c <_ai_platform_acquire_crc>
 800612c:	4b52      	ldr	r3, [pc, #328]	; (8006278 <ai_platform_inputs_get+0x198>)
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006138:	d010      	beq.n	800615c <ai_platform_inputs_get+0x7c>
 800613a:	4a50      	ldr	r2, [pc, #320]	; (800627c <ai_platform_inputs_get+0x19c>)
 800613c:	2301      	movs	r3, #1
 800613e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006142:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006146:	2b00      	cmp	r3, #0
 8006148:	d1fb      	bne.n	8006142 <ai_platform_inputs_get+0x62>
 800614a:	4b4d      	ldr	r3, [pc, #308]	; (8006280 <ai_platform_inputs_get+0x1a0>)
 800614c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006150:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006154:	4b4b      	ldr	r3, [pc, #300]	; (8006284 <ai_platform_inputs_get+0x1a4>)
 8006156:	429a      	cmp	r2, r3
 8006158:	d00d      	beq.n	8006176 <ai_platform_inputs_get+0x96>
 800615a:	e7fe      	b.n	800615a <ai_platform_inputs_get+0x7a>
 800615c:	4a4a      	ldr	r2, [pc, #296]	; (8006288 <ai_platform_inputs_get+0x1a8>)
 800615e:	2301      	movs	r3, #1
 8006160:	6093      	str	r3, [r2, #8]
 8006162:	6893      	ldr	r3, [r2, #8]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d1fc      	bne.n	8006162 <ai_platform_inputs_get+0x82>
 8006168:	4b45      	ldr	r3, [pc, #276]	; (8006280 <ai_platform_inputs_get+0x1a0>)
 800616a:	6013      	str	r3, [r2, #0]
 800616c:	6812      	ldr	r2, [r2, #0]
 800616e:	4b45      	ldr	r3, [pc, #276]	; (8006284 <ai_platform_inputs_get+0x1a4>)
 8006170:	429a      	cmp	r2, r3
 8006172:	d000      	beq.n	8006176 <ai_platform_inputs_get+0x96>
 8006174:	e7fe      	b.n	8006174 <ai_platform_inputs_get+0x94>
 8006176:	f7ff fe73 	bl	8005e60 <_ai_platform_release_crc>
 800617a:	2000      	movs	r0, #0
 800617c:	b005      	add	sp, #20
 800617e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006182:	4a41      	ldr	r2, [pc, #260]	; (8006288 <ai_platform_inputs_get+0x1a8>)
 8006184:	2301      	movs	r3, #1
 8006186:	6093      	str	r3, [r2, #8]
 8006188:	6893      	ldr	r3, [r2, #8]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d1fc      	bne.n	8006188 <ai_platform_inputs_get+0xa8>
 800618e:	4b3c      	ldr	r3, [pc, #240]	; (8006280 <ai_platform_inputs_get+0x1a0>)
 8006190:	6013      	str	r3, [r2, #0]
 8006192:	6812      	ldr	r2, [r2, #0]
 8006194:	4b3b      	ldr	r3, [pc, #236]	; (8006284 <ai_platform_inputs_get+0x1a4>)
 8006196:	429a      	cmp	r2, r3
 8006198:	d155      	bne.n	8006246 <ai_platform_inputs_get+0x166>
 800619a:	f7ff fe61 	bl	8005e60 <_ai_platform_release_crc>
 800619e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d051      	beq.n	8006248 <ai_platform_inputs_get+0x168>
 80061a4:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 80061a8:	f1ba 0f00 	cmp.w	sl, #0
 80061ac:	d04c      	beq.n	8006248 <ai_platform_inputs_get+0x168>
 80061ae:	f04f 0b00 	mov.w	fp, #0
 80061b2:	465d      	mov	r5, fp
 80061b4:	9703      	str	r7, [sp, #12]
 80061b6:	e016      	b.n	80061e6 <ai_platform_inputs_get+0x106>
 80061b8:	9901      	ldr	r1, [sp, #4]
 80061ba:	2301      	movs	r3, #1
 80061bc:	507b      	str	r3, [r7, r1]
 80061be:	69b1      	ldr	r1, [r6, #24]
 80061c0:	6849      	ldr	r1, [r1, #4]
 80061c2:	6121      	str	r1, [r4, #16]
 80061c4:	f04f 0301 	mov.w	r3, #1
 80061c8:	7523      	strb	r3, [r4, #20]
 80061ca:	e9c4 c200 	strd	ip, r2, [r4]
 80061ce:	6962      	ldr	r2, [r4, #20]
 80061d0:	60a0      	str	r0, [r4, #8]
 80061d2:	2300      	movs	r3, #0
 80061d4:	f369 221f 	bfi	r2, r9, #8, #24
 80061d8:	f8c4 8018 	str.w	r8, [r4, #24]
 80061dc:	60e3      	str	r3, [r4, #12]
 80061de:	3501      	adds	r5, #1
 80061e0:	f10b 0b1c 	add.w	fp, fp, #28
 80061e4:	6162      	str	r2, [r4, #20]
 80061e6:	f8ba 3000 	ldrh.w	r3, [sl]
 80061ea:	42ab      	cmp	r3, r5
 80061ec:	b2aa      	uxth	r2, r5
 80061ee:	d93a      	bls.n	8006266 <ai_platform_inputs_get+0x186>
 80061f0:	f8da 3004 	ldr.w	r3, [sl, #4]
 80061f4:	00e9      	lsls	r1, r5, #3
 80061f6:	9101      	str	r1, [sp, #4]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d034      	beq.n	8006266 <ai_platform_inputs_get+0x186>
 80061fc:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8006200:	2e00      	cmp	r6, #0
 8006202:	d030      	beq.n	8006266 <ai_platform_inputs_get+0x186>
 8006204:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006208:	69b2      	ldr	r2, [r6, #24]
 800620a:	f8d6 800c 	ldr.w	r8, [r6, #12]
 800620e:	6810      	ldr	r0, [r2, #0]
 8006210:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 8006214:	68b3      	ldr	r3, [r6, #8]
 8006216:	f3c3 2917 	ubfx	r9, r3, #8, #24
 800621a:	f003 f8e9 	bl	80093f0 <ai_array_to_buffer_fmt>
 800621e:	69b1      	ldr	r1, [r6, #24]
 8006220:	4684      	mov	ip, r0
 8006222:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 8006226:	688a      	ldr	r2, [r1, #8]
 8006228:	445c      	add	r4, fp
 800622a:	2800      	cmp	r0, #0
 800622c:	d0c8      	beq.n	80061c0 <ai_platform_inputs_get+0xe0>
 800622e:	2100      	movs	r1, #0
 8006230:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 8006234:	6831      	ldr	r1, [r6, #0]
 8006236:	6041      	str	r1, [r0, #4]
 8006238:	b111      	cbz	r1, 8006240 <ai_platform_inputs_get+0x160>
 800623a:	8849      	ldrh	r1, [r1, #2]
 800623c:	2900      	cmp	r1, #0
 800623e:	d1bb      	bne.n	80061b8 <ai_platform_inputs_get+0xd8>
 8006240:	69b1      	ldr	r1, [r6, #24]
 8006242:	2000      	movs	r0, #0
 8006244:	e7bc      	b.n	80061c0 <ai_platform_inputs_get+0xe0>
 8006246:	e7fe      	b.n	8006246 <ai_platform_inputs_get+0x166>
 8006248:	2218      	movs	r2, #24
 800624a:	2111      	movs	r1, #17
 800624c:	f107 0010 	add.w	r0, r7, #16
 8006250:	f000 fdc4 	bl	8006ddc <core_set_error>
 8006254:	2200      	movs	r2, #0
 8006256:	4610      	mov	r0, r2
 8006258:	9b02      	ldr	r3, [sp, #8]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d08e      	beq.n	800617c <ai_platform_inputs_get+0x9c>
 800625e:	801a      	strh	r2, [r3, #0]
 8006260:	b005      	add	sp, #20
 8006262:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006266:	9f03      	ldr	r7, [sp, #12]
 8006268:	2a00      	cmp	r2, #0
 800626a:	d0ed      	beq.n	8006248 <ai_platform_inputs_get+0x168>
 800626c:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006270:	6858      	ldr	r0, [r3, #4]
 8006272:	e7f1      	b.n	8006258 <ai_platform_inputs_get+0x178>
 8006274:	a1c00100 	.word	0xa1c00100
 8006278:	e0042000 	.word	0xe0042000
 800627c:	58024000 	.word	0x58024000
 8006280:	f407a5c2 	.word	0xf407a5c2
 8006284:	b5e8b5cd 	.word	0xb5e8b5cd
 8006288:	40023000 	.word	0x40023000

0800628c <ai_platform_outputs_get>:
 800628c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006290:	b085      	sub	sp, #20
 8006292:	9102      	str	r1, [sp, #8]
 8006294:	b1f0      	cbz	r0, 80062d4 <ai_platform_outputs_get+0x48>
 8006296:	4b5f      	ldr	r3, [pc, #380]	; (8006414 <ai_platform_outputs_get+0x188>)
 8006298:	6802      	ldr	r2, [r0, #0]
 800629a:	429a      	cmp	r2, r3
 800629c:	4607      	mov	r7, r0
 800629e:	d119      	bne.n	80062d4 <ai_platform_outputs_get+0x48>
 80062a0:	f7ff fddc 	bl	8005e5c <_ai_platform_acquire_crc>
 80062a4:	4b5c      	ldr	r3, [pc, #368]	; (8006418 <ai_platform_outputs_get+0x18c>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062b0:	d03d      	beq.n	800632e <ai_platform_outputs_get+0xa2>
 80062b2:	4a5a      	ldr	r2, [pc, #360]	; (800641c <ai_platform_outputs_get+0x190>)
 80062b4:	2301      	movs	r3, #1
 80062b6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062ba:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d1fb      	bne.n	80062ba <ai_platform_outputs_get+0x2e>
 80062c2:	4b57      	ldr	r3, [pc, #348]	; (8006420 <ai_platform_outputs_get+0x194>)
 80062c4:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062c8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062cc:	4b55      	ldr	r3, [pc, #340]	; (8006424 <ai_platform_outputs_get+0x198>)
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d039      	beq.n	8006346 <ai_platform_outputs_get+0xba>
 80062d2:	e7fe      	b.n	80062d2 <ai_platform_outputs_get+0x46>
 80062d4:	f7ff fdc2 	bl	8005e5c <_ai_platform_acquire_crc>
 80062d8:	4b4f      	ldr	r3, [pc, #316]	; (8006418 <ai_platform_outputs_get+0x18c>)
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80062e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062e4:	d010      	beq.n	8006308 <ai_platform_outputs_get+0x7c>
 80062e6:	4a4d      	ldr	r2, [pc, #308]	; (800641c <ai_platform_outputs_get+0x190>)
 80062e8:	2301      	movs	r3, #1
 80062ea:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062ee:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d1fb      	bne.n	80062ee <ai_platform_outputs_get+0x62>
 80062f6:	4b4a      	ldr	r3, [pc, #296]	; (8006420 <ai_platform_outputs_get+0x194>)
 80062f8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062fc:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006300:	4b48      	ldr	r3, [pc, #288]	; (8006424 <ai_platform_outputs_get+0x198>)
 8006302:	429a      	cmp	r2, r3
 8006304:	d00d      	beq.n	8006322 <ai_platform_outputs_get+0x96>
 8006306:	e7fe      	b.n	8006306 <ai_platform_outputs_get+0x7a>
 8006308:	4a47      	ldr	r2, [pc, #284]	; (8006428 <ai_platform_outputs_get+0x19c>)
 800630a:	2301      	movs	r3, #1
 800630c:	6093      	str	r3, [r2, #8]
 800630e:	6893      	ldr	r3, [r2, #8]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1fc      	bne.n	800630e <ai_platform_outputs_get+0x82>
 8006314:	4b42      	ldr	r3, [pc, #264]	; (8006420 <ai_platform_outputs_get+0x194>)
 8006316:	6013      	str	r3, [r2, #0]
 8006318:	6812      	ldr	r2, [r2, #0]
 800631a:	4b42      	ldr	r3, [pc, #264]	; (8006424 <ai_platform_outputs_get+0x198>)
 800631c:	429a      	cmp	r2, r3
 800631e:	d000      	beq.n	8006322 <ai_platform_outputs_get+0x96>
 8006320:	e7fe      	b.n	8006320 <ai_platform_outputs_get+0x94>
 8006322:	f7ff fd9d 	bl	8005e60 <_ai_platform_release_crc>
 8006326:	2000      	movs	r0, #0
 8006328:	b005      	add	sp, #20
 800632a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800632e:	4a3e      	ldr	r2, [pc, #248]	; (8006428 <ai_platform_outputs_get+0x19c>)
 8006330:	2301      	movs	r3, #1
 8006332:	6093      	str	r3, [r2, #8]
 8006334:	6893      	ldr	r3, [r2, #8]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d1fc      	bne.n	8006334 <ai_platform_outputs_get+0xa8>
 800633a:	4b39      	ldr	r3, [pc, #228]	; (8006420 <ai_platform_outputs_get+0x194>)
 800633c:	6013      	str	r3, [r2, #0]
 800633e:	6812      	ldr	r2, [r2, #0]
 8006340:	4b38      	ldr	r3, [pc, #224]	; (8006424 <ai_platform_outputs_get+0x198>)
 8006342:	429a      	cmp	r2, r3
 8006344:	d150      	bne.n	80063e8 <ai_platform_outputs_get+0x15c>
 8006346:	f7ff fd8b 	bl	8005e60 <_ai_platform_release_crc>
 800634a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800634c:	2b01      	cmp	r3, #1
 800634e:	d958      	bls.n	8006402 <ai_platform_outputs_get+0x176>
 8006350:	f04f 0b00 	mov.w	fp, #0
 8006354:	f8d7 a030 	ldr.w	sl, [r7, #48]	; 0x30
 8006358:	9703      	str	r7, [sp, #12]
 800635a:	465d      	mov	r5, fp
 800635c:	e016      	b.n	800638c <ai_platform_outputs_get+0x100>
 800635e:	9901      	ldr	r1, [sp, #4]
 8006360:	2301      	movs	r3, #1
 8006362:	507b      	str	r3, [r7, r1]
 8006364:	69b1      	ldr	r1, [r6, #24]
 8006366:	6849      	ldr	r1, [r1, #4]
 8006368:	6121      	str	r1, [r4, #16]
 800636a:	f04f 0301 	mov.w	r3, #1
 800636e:	7523      	strb	r3, [r4, #20]
 8006370:	e9c4 c200 	strd	ip, r2, [r4]
 8006374:	6962      	ldr	r2, [r4, #20]
 8006376:	60a0      	str	r0, [r4, #8]
 8006378:	2300      	movs	r3, #0
 800637a:	f369 221f 	bfi	r2, r9, #8, #24
 800637e:	f8c4 8018 	str.w	r8, [r4, #24]
 8006382:	60e3      	str	r3, [r4, #12]
 8006384:	3501      	adds	r5, #1
 8006386:	f10b 0b1c 	add.w	fp, fp, #28
 800638a:	6162      	str	r2, [r4, #20]
 800638c:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006390:	42ab      	cmp	r3, r5
 8006392:	b2aa      	uxth	r2, r5
 8006394:	d929      	bls.n	80063ea <ai_platform_outputs_get+0x15e>
 8006396:	f8da 3010 	ldr.w	r3, [sl, #16]
 800639a:	00e9      	lsls	r1, r5, #3
 800639c:	9101      	str	r1, [sp, #4]
 800639e:	b323      	cbz	r3, 80063ea <ai_platform_outputs_get+0x15e>
 80063a0:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 80063a4:	b30e      	cbz	r6, 80063ea <ai_platform_outputs_get+0x15e>
 80063a6:	f8da 3014 	ldr.w	r3, [sl, #20]
 80063aa:	69b2      	ldr	r2, [r6, #24]
 80063ac:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80063b0:	6810      	ldr	r0, [r2, #0]
 80063b2:	e9d3 4701 	ldrd	r4, r7, [r3, #4]
 80063b6:	68b3      	ldr	r3, [r6, #8]
 80063b8:	f3c3 2917 	ubfx	r9, r3, #8, #24
 80063bc:	f003 f818 	bl	80093f0 <ai_array_to_buffer_fmt>
 80063c0:	69b1      	ldr	r1, [r6, #24]
 80063c2:	4684      	mov	ip, r0
 80063c4:	eb07 00c5 	add.w	r0, r7, r5, lsl #3
 80063c8:	688a      	ldr	r2, [r1, #8]
 80063ca:	445c      	add	r4, fp
 80063cc:	2800      	cmp	r0, #0
 80063ce:	d0ca      	beq.n	8006366 <ai_platform_outputs_get+0xda>
 80063d0:	2100      	movs	r1, #0
 80063d2:	f847 1035 	str.w	r1, [r7, r5, lsl #3]
 80063d6:	6831      	ldr	r1, [r6, #0]
 80063d8:	6041      	str	r1, [r0, #4]
 80063da:	b111      	cbz	r1, 80063e2 <ai_platform_outputs_get+0x156>
 80063dc:	8849      	ldrh	r1, [r1, #2]
 80063de:	2900      	cmp	r1, #0
 80063e0:	d1bd      	bne.n	800635e <ai_platform_outputs_get+0xd2>
 80063e2:	69b1      	ldr	r1, [r6, #24]
 80063e4:	2000      	movs	r0, #0
 80063e6:	e7be      	b.n	8006366 <ai_platform_outputs_get+0xda>
 80063e8:	e7fe      	b.n	80063e8 <ai_platform_outputs_get+0x15c>
 80063ea:	9f03      	ldr	r7, [sp, #12]
 80063ec:	b14a      	cbz	r2, 8006402 <ai_platform_outputs_get+0x176>
 80063ee:	f8da 3014 	ldr.w	r3, [sl, #20]
 80063f2:	6858      	ldr	r0, [r3, #4]
 80063f4:	9b02      	ldr	r3, [sp, #8]
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d096      	beq.n	8006328 <ai_platform_outputs_get+0x9c>
 80063fa:	801a      	strh	r2, [r3, #0]
 80063fc:	b005      	add	sp, #20
 80063fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006402:	2218      	movs	r2, #24
 8006404:	2111      	movs	r1, #17
 8006406:	f107 0010 	add.w	r0, r7, #16
 800640a:	f000 fce7 	bl	8006ddc <core_set_error>
 800640e:	2200      	movs	r2, #0
 8006410:	4610      	mov	r0, r2
 8006412:	e7ef      	b.n	80063f4 <ai_platform_outputs_get+0x168>
 8006414:	a1c00100 	.word	0xa1c00100
 8006418:	e0042000 	.word	0xe0042000
 800641c:	58024000 	.word	0x58024000
 8006420:	f407a5c2 	.word	0xf407a5c2
 8006424:	b5e8b5cd 	.word	0xb5e8b5cd
 8006428:	40023000 	.word	0x40023000

0800642c <ai_platform_network_create>:
 800642c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006430:	b083      	sub	sp, #12
 8006432:	4606      	mov	r6, r0
 8006434:	f89d 8028 	ldrb.w	r8, [sp, #40]	; 0x28
 8006438:	f89d 902c 	ldrb.w	r9, [sp, #44]	; 0x2c
 800643c:	4615      	mov	r5, r2
 800643e:	461f      	mov	r7, r3
 8006440:	f7ff fd0c 	bl	8005e5c <_ai_platform_acquire_crc>
 8006444:	b188      	cbz	r0, 800646a <ai_platform_network_create+0x3e>
 8006446:	4a5d      	ldr	r2, [pc, #372]	; (80065bc <ai_platform_network_create+0x190>)
 8006448:	6812      	ldr	r2, [r2, #0]
 800644a:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 800644e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006452:	4603      	mov	r3, r0
 8006454:	d00e      	beq.n	8006474 <ai_platform_network_create+0x48>
 8006456:	4a5a      	ldr	r2, [pc, #360]	; (80065c0 <ai_platform_network_create+0x194>)
 8006458:	2118      	movs	r1, #24
 800645a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800645e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 8006462:	2918      	cmp	r1, #24
 8006464:	d018      	beq.n	8006498 <ai_platform_network_create+0x6c>
 8006466:	f7ff fcfb 	bl	8005e60 <_ai_platform_release_crc>
 800646a:	f244 1033 	movw	r0, #16691	; 0x4133
 800646e:	b003      	add	sp, #12
 8006470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006474:	4a53      	ldr	r2, [pc, #332]	; (80065c4 <ai_platform_network_create+0x198>)
 8006476:	2101      	movs	r1, #1
 8006478:	6091      	str	r1, [r2, #8]
 800647a:	2114      	movs	r1, #20
 800647c:	e001      	b.n	8006482 <ai_platform_network_create+0x56>
 800647e:	3901      	subs	r1, #1
 8006480:	d002      	beq.n	8006488 <ai_platform_network_create+0x5c>
 8006482:	6894      	ldr	r4, [r2, #8]
 8006484:	2c00      	cmp	r4, #0
 8006486:	d1fa      	bne.n	800647e <ai_platform_network_create+0x52>
 8006488:	4a4e      	ldr	r2, [pc, #312]	; (80065c4 <ai_platform_network_create+0x198>)
 800648a:	6891      	ldr	r1, [r2, #8]
 800648c:	b911      	cbnz	r1, 8006494 <ai_platform_network_create+0x68>
 800648e:	6812      	ldr	r2, [r2, #0]
 8006490:	3201      	adds	r2, #1
 8006492:	d008      	beq.n	80064a6 <ai_platform_network_create+0x7a>
 8006494:	4618      	mov	r0, r3
 8006496:	e7e6      	b.n	8006466 <ai_platform_network_create+0x3a>
 8006498:	2101      	movs	r1, #1
 800649a:	f8c2 1c08 	str.w	r1, [r2, #3080]	; 0xc08
 800649e:	f8d2 1c08 	ldr.w	r1, [r2, #3080]	; 0xc08
 80064a2:	2900      	cmp	r1, #0
 80064a4:	d1fb      	bne.n	800649e <ai_platform_network_create+0x72>
 80064a6:	4618      	mov	r0, r3
 80064a8:	f7ff fcda 	bl	8005e60 <_ai_platform_release_crc>
 80064ac:	f7ff fcd6 	bl	8005e5c <_ai_platform_acquire_crc>
 80064b0:	4b42      	ldr	r3, [pc, #264]	; (80065bc <ai_platform_network_create+0x190>)
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80064b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80064bc:	d010      	beq.n	80064e0 <ai_platform_network_create+0xb4>
 80064be:	4b40      	ldr	r3, [pc, #256]	; (80065c0 <ai_platform_network_create+0x194>)
 80064c0:	2201      	movs	r2, #1
 80064c2:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80064c6:	f8d3 1c08 	ldr.w	r1, [r3, #3080]	; 0xc08
 80064ca:	2900      	cmp	r1, #0
 80064cc:	d1fb      	bne.n	80064c6 <ai_platform_network_create+0x9a>
 80064ce:	4a3e      	ldr	r2, [pc, #248]	; (80065c8 <ai_platform_network_create+0x19c>)
 80064d0:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80064d4:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80064d8:	4b3c      	ldr	r3, [pc, #240]	; (80065cc <ai_platform_network_create+0x1a0>)
 80064da:	429a      	cmp	r2, r3
 80064dc:	d00c      	beq.n	80064f8 <ai_platform_network_create+0xcc>
 80064de:	e7fe      	b.n	80064de <ai_platform_network_create+0xb2>
 80064e0:	4a38      	ldr	r2, [pc, #224]	; (80065c4 <ai_platform_network_create+0x198>)
 80064e2:	2301      	movs	r3, #1
 80064e4:	6093      	str	r3, [r2, #8]
 80064e6:	6893      	ldr	r3, [r2, #8]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1fc      	bne.n	80064e6 <ai_platform_network_create+0xba>
 80064ec:	4b36      	ldr	r3, [pc, #216]	; (80065c8 <ai_platform_network_create+0x19c>)
 80064ee:	6013      	str	r3, [r2, #0]
 80064f0:	6812      	ldr	r2, [r2, #0]
 80064f2:	4b36      	ldr	r3, [pc, #216]	; (80065cc <ai_platform_network_create+0x1a0>)
 80064f4:	429a      	cmp	r2, r3
 80064f6:	d122      	bne.n	800653e <ai_platform_network_create+0x112>
 80064f8:	f7ff fcb2 	bl	8005e60 <_ai_platform_release_crc>
 80064fc:	b38e      	cbz	r6, 8006562 <ai_platform_network_create+0x136>
 80064fe:	4b34      	ldr	r3, [pc, #208]	; (80065d0 <ai_platform_network_create+0x1a4>)
 8006500:	602b      	str	r3, [r5, #0]
 8006502:	6035      	str	r5, [r6, #0]
 8006504:	f000 fc62 	bl	8006dcc <core_init>
 8006508:	b1d0      	cbz	r0, 8006540 <ai_platform_network_create+0x114>
 800650a:	f7ff fca7 	bl	8005e5c <_ai_platform_acquire_crc>
 800650e:	4b2b      	ldr	r3, [pc, #172]	; (80065bc <ai_platform_network_create+0x190>)
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006516:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800651a:	d025      	beq.n	8006568 <ai_platform_network_create+0x13c>
 800651c:	4a28      	ldr	r2, [pc, #160]	; (80065c0 <ai_platform_network_create+0x194>)
 800651e:	2301      	movs	r3, #1
 8006520:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006524:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006528:	2b00      	cmp	r3, #0
 800652a:	d1fb      	bne.n	8006524 <ai_platform_network_create+0xf8>
 800652c:	4b26      	ldr	r3, [pc, #152]	; (80065c8 <ai_platform_network_create+0x19c>)
 800652e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006532:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006536:	4b25      	ldr	r3, [pc, #148]	; (80065cc <ai_platform_network_create+0x1a0>)
 8006538:	429a      	cmp	r2, r3
 800653a:	d022      	beq.n	8006582 <ai_platform_network_create+0x156>
 800653c:	e7fe      	b.n	800653c <ai_platform_network_create+0x110>
 800653e:	e7fe      	b.n	800653e <ai_platform_network_create+0x112>
 8006540:	2430      	movs	r4, #48	; 0x30
 8006542:	2300      	movs	r3, #0
 8006544:	6033      	str	r3, [r6, #0]
 8006546:	2610      	movs	r6, #16
 8006548:	464a      	mov	r2, r9
 800654a:	4641      	mov	r1, r8
 800654c:	4638      	mov	r0, r7
 800654e:	f002 fff5 	bl	800953c <ai_version_get>
 8006552:	4603      	mov	r3, r0
 8006554:	2000      	movs	r0, #0
 8006556:	f364 0007 	bfi	r0, r4, #0, #8
 800655a:	64ab      	str	r3, [r5, #72]	; 0x48
 800655c:	f366 201f 	bfi	r0, r6, #8, #24
 8006560:	e785      	b.n	800646e <ai_platform_network_create+0x42>
 8006562:	f241 0010 	movw	r0, #4112	; 0x1010
 8006566:	e782      	b.n	800646e <ai_platform_network_create+0x42>
 8006568:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <ai_platform_network_create+0x198>)
 800656a:	2301      	movs	r3, #1
 800656c:	6093      	str	r3, [r2, #8]
 800656e:	6893      	ldr	r3, [r2, #8]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d1fc      	bne.n	800656e <ai_platform_network_create+0x142>
 8006574:	4b14      	ldr	r3, [pc, #80]	; (80065c8 <ai_platform_network_create+0x19c>)
 8006576:	6013      	str	r3, [r2, #0]
 8006578:	6812      	ldr	r2, [r2, #0]
 800657a:	4b14      	ldr	r3, [pc, #80]	; (80065cc <ai_platform_network_create+0x1a0>)
 800657c:	429a      	cmp	r2, r3
 800657e:	d000      	beq.n	8006582 <ai_platform_network_create+0x156>
 8006580:	e7fe      	b.n	8006580 <ai_platform_network_create+0x154>
 8006582:	f7ff fc6d 	bl	8005e60 <_ai_platform_release_crc>
 8006586:	2200      	movs	r2, #0
 8006588:	4641      	mov	r1, r8
 800658a:	4638      	mov	r0, r7
 800658c:	f002 ffd6 	bl	800953c <ai_version_get>
 8006590:	2200      	movs	r2, #0
 8006592:	4604      	mov	r4, r0
 8006594:	2105      	movs	r1, #5
 8006596:	2001      	movs	r0, #1
 8006598:	f002 ffd0 	bl	800953c <ai_version_get>
 800659c:	4284      	cmp	r4, r0
 800659e:	d001      	beq.n	80065a4 <ai_platform_network_create+0x178>
 80065a0:	2401      	movs	r4, #1
 80065a2:	e7ce      	b.n	8006542 <ai_platform_network_create+0x116>
 80065a4:	4b0b      	ldr	r3, [pc, #44]	; (80065d4 <ai_platform_network_create+0x1a8>)
 80065a6:	9301      	str	r3, [sp, #4]
 80065a8:	a801      	add	r0, sp, #4
 80065aa:	f000 fc23 	bl	8006df4 <ai_check_custom_types>
 80065ae:	b110      	cbz	r0, 80065b6 <ai_platform_network_create+0x18a>
 80065b0:	2600      	movs	r6, #0
 80065b2:	4634      	mov	r4, r6
 80065b4:	e7c8      	b.n	8006548 <ai_platform_network_create+0x11c>
 80065b6:	2402      	movs	r4, #2
 80065b8:	e7c3      	b.n	8006542 <ai_platform_network_create+0x116>
 80065ba:	bf00      	nop
 80065bc:	e0042000 	.word	0xe0042000
 80065c0:	58024000 	.word	0x58024000
 80065c4:	40023000 	.word	0x40023000
 80065c8:	f407a5c2 	.word	0xf407a5c2
 80065cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80065d0:	a1c00100 	.word	0xa1c00100
 80065d4:	84048403 	.word	0x84048403

080065d8 <ai_platform_network_init>:
 80065d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80065dc:	b1f8      	cbz	r0, 800661e <ai_platform_network_init+0x46>
 80065de:	4b6e      	ldr	r3, [pc, #440]	; (8006798 <ai_platform_network_init+0x1c0>)
 80065e0:	6802      	ldr	r2, [r0, #0]
 80065e2:	429a      	cmp	r2, r3
 80065e4:	4604      	mov	r4, r0
 80065e6:	d11a      	bne.n	800661e <ai_platform_network_init+0x46>
 80065e8:	460e      	mov	r6, r1
 80065ea:	f7ff fc37 	bl	8005e5c <_ai_platform_acquire_crc>
 80065ee:	4b6b      	ldr	r3, [pc, #428]	; (800679c <ai_platform_network_init+0x1c4>)
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80065f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065fa:	d03d      	beq.n	8006678 <ai_platform_network_init+0xa0>
 80065fc:	4a68      	ldr	r2, [pc, #416]	; (80067a0 <ai_platform_network_init+0x1c8>)
 80065fe:	2301      	movs	r3, #1
 8006600:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006604:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006608:	2b00      	cmp	r3, #0
 800660a:	d1fb      	bne.n	8006604 <ai_platform_network_init+0x2c>
 800660c:	4b65      	ldr	r3, [pc, #404]	; (80067a4 <ai_platform_network_init+0x1cc>)
 800660e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006612:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006616:	4b64      	ldr	r3, [pc, #400]	; (80067a8 <ai_platform_network_init+0x1d0>)
 8006618:	429a      	cmp	r2, r3
 800661a:	d039      	beq.n	8006690 <ai_platform_network_init+0xb8>
 800661c:	e7fe      	b.n	800661c <ai_platform_network_init+0x44>
 800661e:	f7ff fc1d 	bl	8005e5c <_ai_platform_acquire_crc>
 8006622:	4b5e      	ldr	r3, [pc, #376]	; (800679c <ai_platform_network_init+0x1c4>)
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800662a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800662e:	d010      	beq.n	8006652 <ai_platform_network_init+0x7a>
 8006630:	4a5b      	ldr	r2, [pc, #364]	; (80067a0 <ai_platform_network_init+0x1c8>)
 8006632:	2301      	movs	r3, #1
 8006634:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006638:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800663c:	2b00      	cmp	r3, #0
 800663e:	d1fb      	bne.n	8006638 <ai_platform_network_init+0x60>
 8006640:	4b58      	ldr	r3, [pc, #352]	; (80067a4 <ai_platform_network_init+0x1cc>)
 8006642:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006646:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800664a:	4b57      	ldr	r3, [pc, #348]	; (80067a8 <ai_platform_network_init+0x1d0>)
 800664c:	429a      	cmp	r2, r3
 800664e:	d00d      	beq.n	800666c <ai_platform_network_init+0x94>
 8006650:	e7fe      	b.n	8006650 <ai_platform_network_init+0x78>
 8006652:	4a56      	ldr	r2, [pc, #344]	; (80067ac <ai_platform_network_init+0x1d4>)
 8006654:	2301      	movs	r3, #1
 8006656:	6093      	str	r3, [r2, #8]
 8006658:	6893      	ldr	r3, [r2, #8]
 800665a:	2b00      	cmp	r3, #0
 800665c:	d1fc      	bne.n	8006658 <ai_platform_network_init+0x80>
 800665e:	4b51      	ldr	r3, [pc, #324]	; (80067a4 <ai_platform_network_init+0x1cc>)
 8006660:	6013      	str	r3, [r2, #0]
 8006662:	6812      	ldr	r2, [r2, #0]
 8006664:	4b50      	ldr	r3, [pc, #320]	; (80067a8 <ai_platform_network_init+0x1d0>)
 8006666:	429a      	cmp	r2, r3
 8006668:	d000      	beq.n	800666c <ai_platform_network_init+0x94>
 800666a:	e7fe      	b.n	800666a <ai_platform_network_init+0x92>
 800666c:	f7ff fbf8 	bl	8005e60 <_ai_platform_release_crc>
 8006670:	2600      	movs	r6, #0
 8006672:	4630      	mov	r0, r6
 8006674:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006678:	4a4c      	ldr	r2, [pc, #304]	; (80067ac <ai_platform_network_init+0x1d4>)
 800667a:	2301      	movs	r3, #1
 800667c:	6093      	str	r3, [r2, #8]
 800667e:	6893      	ldr	r3, [r2, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1fc      	bne.n	800667e <ai_platform_network_init+0xa6>
 8006684:	4b47      	ldr	r3, [pc, #284]	; (80067a4 <ai_platform_network_init+0x1cc>)
 8006686:	6013      	str	r3, [r2, #0]
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	4b47      	ldr	r3, [pc, #284]	; (80067a8 <ai_platform_network_init+0x1d0>)
 800668c:	429a      	cmp	r2, r3
 800668e:	d11c      	bne.n	80066ca <ai_platform_network_init+0xf2>
 8006690:	f7ff fbe6 	bl	8005e60 <_ai_platform_release_crc>
 8006694:	2e00      	cmp	r6, #0
 8006696:	d06f      	beq.n	8006778 <ai_platform_network_init+0x1a0>
 8006698:	4b45      	ldr	r3, [pc, #276]	; (80067b0 <ai_platform_network_init+0x1d8>)
 800669a:	6832      	ldr	r2, [r6, #0]
 800669c:	429a      	cmp	r2, r3
 800669e:	d115      	bne.n	80066cc <ai_platform_network_init+0xf4>
 80066a0:	e9d6 2101 	ldrd	r2, r1, [r6, #4]
 80066a4:	6933      	ldr	r3, [r6, #16]
 80066a6:	f8b6 e00c 	ldrh.w	lr, [r6, #12]
 80066aa:	89f7      	ldrh	r7, [r6, #14]
 80066ac:	62a3      	str	r3, [r4, #40]	; 0x28
 80066ae:	e9c4 2107 	strd	r2, r1, [r4, #28]
 80066b2:	2303      	movs	r3, #3
 80066b4:	84e7      	strh	r7, [r4, #38]	; 0x26
 80066b6:	f8a4 e024 	strh.w	lr, [r4, #36]	; 0x24
 80066ba:	60e3      	str	r3, [r4, #12]
 80066bc:	4620      	mov	r0, r4
 80066be:	4626      	mov	r6, r4
 80066c0:	f000 fbc2 	bl	8006e48 <ai_layers_init_all>
 80066c4:	4630      	mov	r0, r6
 80066c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80066ca:	e7fe      	b.n	80066ca <ai_platform_network_init+0xf2>
 80066cc:	2101      	movs	r1, #1
 80066ce:	4630      	mov	r0, r6
 80066d0:	4635      	mov	r5, r6
 80066d2:	6876      	ldr	r6, [r6, #4]
 80066d4:	f7ff fb74 	bl	8005dc0 <ai_buffer_get_size>
 80066d8:	f105 081c 	add.w	r8, r5, #28
 80066dc:	4681      	mov	r9, r0
 80066de:	2101      	movs	r1, #1
 80066e0:	4640      	mov	r0, r8
 80066e2:	6a2f      	ldr	r7, [r5, #32]
 80066e4:	f7ff fb6c 	bl	8005dc0 <ai_buffer_get_size>
 80066e8:	f1b9 0f00 	cmp.w	r9, #0
 80066ec:	d025      	beq.n	800673a <ai_platform_network_init+0x162>
 80066ee:	2201      	movs	r2, #1
 80066f0:	4696      	mov	lr, r2
 80066f2:	bb30      	cbnz	r0, 8006742 <ai_platform_network_init+0x16a>
 80066f4:	4680      	mov	r8, r0
 80066f6:	4607      	mov	r7, r0
 80066f8:	b376      	cbz	r6, 8006758 <ai_platform_network_init+0x180>
 80066fa:	8be3      	ldrh	r3, [r4, #30]
 80066fc:	4573      	cmp	r3, lr
 80066fe:	d323      	bcc.n	8006748 <ai_platform_network_init+0x170>
 8006700:	b142      	cbz	r2, 8006714 <ai_platform_network_init+0x13c>
 8006702:	46ac      	mov	ip, r5
 8006704:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006708:	6a25      	ldr	r5, [r4, #32]
 800670a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800670c:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006710:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006714:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006716:	f8a4 e01e 	strh.w	lr, [r4, #30]
 800671a:	2600      	movs	r6, #0
 800671c:	42bb      	cmp	r3, r7
 800671e:	83a6      	strh	r6, [r4, #28]
 8006720:	d323      	bcc.n	800676a <ai_platform_network_init+0x192>
 8006722:	b37f      	cbz	r7, 8006784 <ai_platform_network_init+0x1ac>
 8006724:	46c4      	mov	ip, r8
 8006726:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800672a:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 800672c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800672e:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006732:	46b6      	mov	lr, r6
 8006734:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8006738:	e7bb      	b.n	80066b2 <ai_platform_network_init+0xda>
 800673a:	464a      	mov	r2, r9
 800673c:	46ce      	mov	lr, r9
 800673e:	464d      	mov	r5, r9
 8006740:	e7d7      	b.n	80066f2 <ai_platform_network_init+0x11a>
 8006742:	b30f      	cbz	r7, 8006788 <ai_platform_network_init+0x1b0>
 8006744:	2701      	movs	r7, #1
 8006746:	e7d7      	b.n	80066f8 <ai_platform_network_init+0x120>
 8006748:	2212      	movs	r2, #18
 800674a:	2116      	movs	r1, #22
 800674c:	f104 0010 	add.w	r0, r4, #16
 8006750:	f000 fb44 	bl	8006ddc <core_set_error>
 8006754:	2600      	movs	r6, #0
 8006756:	e78c      	b.n	8006672 <ai_platform_network_init+0x9a>
 8006758:	f1b9 0f00 	cmp.w	r9, #0
 800675c:	d0cd      	beq.n	80066fa <ai_platform_network_init+0x122>
 800675e:	2110      	movs	r1, #16
 8006760:	2212      	movs	r2, #18
 8006762:	1860      	adds	r0, r4, r1
 8006764:	f000 fb3a 	bl	8006ddc <core_set_error>
 8006768:	e783      	b.n	8006672 <ai_platform_network_init+0x9a>
 800676a:	2213      	movs	r2, #19
 800676c:	2116      	movs	r1, #22
 800676e:	f104 0010 	add.w	r0, r4, #16
 8006772:	f000 fb33 	bl	8006ddc <core_set_error>
 8006776:	e77c      	b.n	8006672 <ai_platform_network_init+0x9a>
 8006778:	2110      	movs	r1, #16
 800677a:	2211      	movs	r2, #17
 800677c:	1860      	adds	r0, r4, r1
 800677e:	f000 fb2d 	bl	8006ddc <core_set_error>
 8006782:	e776      	b.n	8006672 <ai_platform_network_init+0x9a>
 8006784:	46be      	mov	lr, r7
 8006786:	e794      	b.n	80066b2 <ai_platform_network_init+0xda>
 8006788:	2110      	movs	r1, #16
 800678a:	2213      	movs	r2, #19
 800678c:	1860      	adds	r0, r4, r1
 800678e:	f000 fb25 	bl	8006ddc <core_set_error>
 8006792:	463e      	mov	r6, r7
 8006794:	e76d      	b.n	8006672 <ai_platform_network_init+0x9a>
 8006796:	bf00      	nop
 8006798:	a1c00100 	.word	0xa1c00100
 800679c:	e0042000 	.word	0xe0042000
 80067a0:	58024000 	.word	0x58024000
 80067a4:	f407a5c2 	.word	0xf407a5c2
 80067a8:	b5e8b5cd 	.word	0xb5e8b5cd
 80067ac:	40023000 	.word	0x40023000
 80067b0:	a1facade 	.word	0xa1facade

080067b4 <ai_platform_network_post_init>:
 80067b4:	b538      	push	{r3, r4, r5, lr}
 80067b6:	b1f0      	cbz	r0, 80067f6 <ai_platform_network_post_init+0x42>
 80067b8:	4b3c      	ldr	r3, [pc, #240]	; (80068ac <ai_platform_network_post_init+0xf8>)
 80067ba:	6802      	ldr	r2, [r0, #0]
 80067bc:	429a      	cmp	r2, r3
 80067be:	4604      	mov	r4, r0
 80067c0:	d119      	bne.n	80067f6 <ai_platform_network_post_init+0x42>
 80067c2:	f7ff fb4b 	bl	8005e5c <_ai_platform_acquire_crc>
 80067c6:	4b3a      	ldr	r3, [pc, #232]	; (80068b0 <ai_platform_network_post_init+0xfc>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80067ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d2:	d03b      	beq.n	800684c <ai_platform_network_post_init+0x98>
 80067d4:	4a37      	ldr	r2, [pc, #220]	; (80068b4 <ai_platform_network_post_init+0x100>)
 80067d6:	2301      	movs	r3, #1
 80067d8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80067dc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d1fb      	bne.n	80067dc <ai_platform_network_post_init+0x28>
 80067e4:	4b34      	ldr	r3, [pc, #208]	; (80068b8 <ai_platform_network_post_init+0x104>)
 80067e6:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80067ea:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80067ee:	4b33      	ldr	r3, [pc, #204]	; (80068bc <ai_platform_network_post_init+0x108>)
 80067f0:	429a      	cmp	r2, r3
 80067f2:	d037      	beq.n	8006864 <ai_platform_network_post_init+0xb0>
 80067f4:	e7fe      	b.n	80067f4 <ai_platform_network_post_init+0x40>
 80067f6:	f7ff fb31 	bl	8005e5c <_ai_platform_acquire_crc>
 80067fa:	4b2d      	ldr	r3, [pc, #180]	; (80068b0 <ai_platform_network_post_init+0xfc>)
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006802:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006806:	d010      	beq.n	800682a <ai_platform_network_post_init+0x76>
 8006808:	4a2a      	ldr	r2, [pc, #168]	; (80068b4 <ai_platform_network_post_init+0x100>)
 800680a:	2301      	movs	r3, #1
 800680c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006810:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1fb      	bne.n	8006810 <ai_platform_network_post_init+0x5c>
 8006818:	4b27      	ldr	r3, [pc, #156]	; (80068b8 <ai_platform_network_post_init+0x104>)
 800681a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800681e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006822:	4b26      	ldr	r3, [pc, #152]	; (80068bc <ai_platform_network_post_init+0x108>)
 8006824:	429a      	cmp	r2, r3
 8006826:	d00d      	beq.n	8006844 <ai_platform_network_post_init+0x90>
 8006828:	e7fe      	b.n	8006828 <ai_platform_network_post_init+0x74>
 800682a:	4a25      	ldr	r2, [pc, #148]	; (80068c0 <ai_platform_network_post_init+0x10c>)
 800682c:	2301      	movs	r3, #1
 800682e:	6093      	str	r3, [r2, #8]
 8006830:	6893      	ldr	r3, [r2, #8]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d1fc      	bne.n	8006830 <ai_platform_network_post_init+0x7c>
 8006836:	4b20      	ldr	r3, [pc, #128]	; (80068b8 <ai_platform_network_post_init+0x104>)
 8006838:	6013      	str	r3, [r2, #0]
 800683a:	6812      	ldr	r2, [r2, #0]
 800683c:	4b1f      	ldr	r3, [pc, #124]	; (80068bc <ai_platform_network_post_init+0x108>)
 800683e:	429a      	cmp	r2, r3
 8006840:	d000      	beq.n	8006844 <ai_platform_network_post_init+0x90>
 8006842:	e7fe      	b.n	8006842 <ai_platform_network_post_init+0x8e>
 8006844:	f7ff fb0c 	bl	8005e60 <_ai_platform_release_crc>
 8006848:	2000      	movs	r0, #0
 800684a:	bd38      	pop	{r3, r4, r5, pc}
 800684c:	4a1c      	ldr	r2, [pc, #112]	; (80068c0 <ai_platform_network_post_init+0x10c>)
 800684e:	2301      	movs	r3, #1
 8006850:	6093      	str	r3, [r2, #8]
 8006852:	6893      	ldr	r3, [r2, #8]
 8006854:	2b00      	cmp	r3, #0
 8006856:	d1fc      	bne.n	8006852 <ai_platform_network_post_init+0x9e>
 8006858:	4b17      	ldr	r3, [pc, #92]	; (80068b8 <ai_platform_network_post_init+0x104>)
 800685a:	6013      	str	r3, [r2, #0]
 800685c:	6812      	ldr	r2, [r2, #0]
 800685e:	4b17      	ldr	r3, [pc, #92]	; (80068bc <ai_platform_network_post_init+0x108>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d11a      	bne.n	800689a <ai_platform_network_post_init+0xe6>
 8006864:	f7ff fafc 	bl	8005e60 <_ai_platform_release_crc>
 8006868:	68e3      	ldr	r3, [r4, #12]
 800686a:	f013 0502 	ands.w	r5, r3, #2
 800686e:	d015      	beq.n	800689c <ai_platform_network_post_init+0xe8>
 8006870:	4620      	mov	r0, r4
 8006872:	f000 faf7 	bl	8006e64 <ai_layers_post_init_all>
 8006876:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006878:	b16b      	cbz	r3, 8006896 <ai_platform_network_post_init+0xe2>
 800687a:	6b65      	ldr	r5, [r4, #52]	; 0x34
 800687c:	e007      	b.n	800688e <ai_platform_network_post_init+0xda>
 800687e:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006882:	4798      	blx	r3
 8006884:	692b      	ldr	r3, [r5, #16]
 8006886:	42ab      	cmp	r3, r5
 8006888:	d005      	beq.n	8006896 <ai_platform_network_post_init+0xe2>
 800688a:	b123      	cbz	r3, 8006896 <ai_platform_network_post_init+0xe2>
 800688c:	461d      	mov	r5, r3
 800688e:	4629      	mov	r1, r5
 8006890:	2000      	movs	r0, #0
 8006892:	2d00      	cmp	r5, #0
 8006894:	d1f3      	bne.n	800687e <ai_platform_network_post_init+0xca>
 8006896:	2001      	movs	r0, #1
 8006898:	bd38      	pop	{r3, r4, r5, pc}
 800689a:	e7fe      	b.n	800689a <ai_platform_network_post_init+0xe6>
 800689c:	2210      	movs	r2, #16
 800689e:	2111      	movs	r1, #17
 80068a0:	18a0      	adds	r0, r4, r2
 80068a2:	f000 fa9b 	bl	8006ddc <core_set_error>
 80068a6:	4628      	mov	r0, r5
 80068a8:	bd38      	pop	{r3, r4, r5, pc}
 80068aa:	bf00      	nop
 80068ac:	a1c00100 	.word	0xa1c00100
 80068b0:	e0042000 	.word	0xe0042000
 80068b4:	58024000 	.word	0x58024000
 80068b8:	f407a5c2 	.word	0xf407a5c2
 80068bc:	b5e8b5cd 	.word	0xb5e8b5cd
 80068c0:	40023000 	.word	0x40023000

080068c4 <ai_platform_network_process>:
 80068c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068c8:	460e      	mov	r6, r1
 80068ca:	b085      	sub	sp, #20
 80068cc:	4693      	mov	fp, r2
 80068ce:	4605      	mov	r5, r0
 80068d0:	b120      	cbz	r0, 80068dc <ai_platform_network_process+0x18>
 80068d2:	4bb8      	ldr	r3, [pc, #736]	; (8006bb4 <ai_platform_network_process+0x2f0>)
 80068d4:	6802      	ldr	r2, [r0, #0]
 80068d6:	429a      	cmp	r2, r3
 80068d8:	bf18      	it	ne
 80068da:	2500      	movne	r5, #0
 80068dc:	f7ff fabe 	bl	8005e5c <_ai_platform_acquire_crc>
 80068e0:	4bb5      	ldr	r3, [pc, #724]	; (8006bb8 <ai_platform_network_process+0x2f4>)
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80068ec:	d010      	beq.n	8006910 <ai_platform_network_process+0x4c>
 80068ee:	4ab3      	ldr	r2, [pc, #716]	; (8006bbc <ai_platform_network_process+0x2f8>)
 80068f0:	2301      	movs	r3, #1
 80068f2:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80068f6:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d1fb      	bne.n	80068f6 <ai_platform_network_process+0x32>
 80068fe:	4bb0      	ldr	r3, [pc, #704]	; (8006bc0 <ai_platform_network_process+0x2fc>)
 8006900:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006904:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006908:	4bae      	ldr	r3, [pc, #696]	; (8006bc4 <ai_platform_network_process+0x300>)
 800690a:	429a      	cmp	r2, r3
 800690c:	d00d      	beq.n	800692a <ai_platform_network_process+0x66>
 800690e:	e7fe      	b.n	800690e <ai_platform_network_process+0x4a>
 8006910:	4aad      	ldr	r2, [pc, #692]	; (8006bc8 <ai_platform_network_process+0x304>)
 8006912:	2301      	movs	r3, #1
 8006914:	6093      	str	r3, [r2, #8]
 8006916:	6893      	ldr	r3, [r2, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d1fc      	bne.n	8006916 <ai_platform_network_process+0x52>
 800691c:	4ba8      	ldr	r3, [pc, #672]	; (8006bc0 <ai_platform_network_process+0x2fc>)
 800691e:	6013      	str	r3, [r2, #0]
 8006920:	6812      	ldr	r2, [r2, #0]
 8006922:	4ba8      	ldr	r3, [pc, #672]	; (8006bc4 <ai_platform_network_process+0x300>)
 8006924:	429a      	cmp	r2, r3
 8006926:	f040 812c 	bne.w	8006b82 <ai_platform_network_process+0x2be>
 800692a:	f7ff fa99 	bl	8005e60 <_ai_platform_release_crc>
 800692e:	2d00      	cmp	r5, #0
 8006930:	f000 8154 	beq.w	8006bdc <ai_platform_network_process+0x318>
 8006934:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006936:	2b00      	cmp	r3, #0
 8006938:	f000 8124 	beq.w	8006b84 <ai_platform_network_process+0x2c0>
 800693c:	68eb      	ldr	r3, [r5, #12]
 800693e:	f8d5 a030 	ldr.w	sl, [r5, #48]	; 0x30
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2700      	movs	r7, #0
 8006948:	2b03      	cmp	r3, #3
 800694a:	616f      	str	r7, [r5, #20]
 800694c:	f040 813e 	bne.w	8006bcc <ai_platform_network_process+0x308>
 8006950:	2e00      	cmp	r6, #0
 8006952:	f000 811d 	beq.w	8006b90 <ai_platform_network_process+0x2cc>
 8006956:	f1ba 0f00 	cmp.w	sl, #0
 800695a:	f000 8119 	beq.w	8006b90 <ai_platform_network_process+0x2cc>
 800695e:	f8ba 3000 	ldrh.w	r3, [sl]
 8006962:	2b00      	cmp	r3, #0
 8006964:	f000 8114 	beq.w	8006b90 <ai_platform_network_process+0x2cc>
 8006968:	69b3      	ldr	r3, [r6, #24]
 800696a:	f8cd b00c 	str.w	fp, [sp, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	e9cd 3501 	strd	r3, r5, [sp, #4]
 8006974:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006978:	2b00      	cmp	r3, #0
 800697a:	d072      	beq.n	8006a62 <ai_platform_network_process+0x19e>
 800697c:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006980:	2c00      	cmp	r4, #0
 8006982:	d06e      	beq.n	8006a62 <ai_platform_network_process+0x19e>
 8006984:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006988:	f8d3 9000 	ldr.w	r9, [r3]
 800698c:	eb19 1807 	adds.w	r8, r9, r7, lsl #4
 8006990:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006994:	f000 81de 	beq.w	8006d54 <ai_platform_network_process+0x490>
 8006998:	69a3      	ldr	r3, [r4, #24]
 800699a:	2101      	movs	r1, #1
 800699c:	4630      	mov	r0, r6
 800699e:	685d      	ldr	r5, [r3, #4]
 80069a0:	f7ff fa0e 	bl	8005dc0 <ai_buffer_get_size>
 80069a4:	4285      	cmp	r5, r0
 80069a6:	f0c0 811b 	bcc.w	8006be0 <ai_platform_network_process+0x31c>
 80069aa:	68e0      	ldr	r0, [r4, #12]
 80069ac:	69b1      	ldr	r1, [r6, #24]
 80069ae:	68c2      	ldr	r2, [r0, #12]
 80069b0:	68cb      	ldr	r3, [r1, #12]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	f040 8114 	bne.w	8006be0 <ai_platform_network_process+0x31c>
 80069b8:	6882      	ldr	r2, [r0, #8]
 80069ba:	688b      	ldr	r3, [r1, #8]
 80069bc:	429a      	cmp	r2, r3
 80069be:	f040 810f 	bne.w	8006be0 <ai_platform_network_process+0x31c>
 80069c2:	6842      	ldr	r2, [r0, #4]
 80069c4:	684b      	ldr	r3, [r1, #4]
 80069c6:	429a      	cmp	r2, r3
 80069c8:	f040 810a 	bne.w	8006be0 <ai_platform_network_process+0x31c>
 80069cc:	69a3      	ldr	r3, [r4, #24]
 80069ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80069d2:	f002 fda1 	bl	8009518 <ai_array_get_data_byte_size>
 80069d6:	4605      	mov	r5, r0
 80069d8:	4620      	mov	r0, r4
 80069da:	f002 fdb5 	bl	8009548 <get_tensor_byte_size>
 80069de:	4285      	cmp	r5, r0
 80069e0:	f0c0 80fe 	bcc.w	8006be0 <ai_platform_network_process+0x31c>
 80069e4:	69a3      	ldr	r3, [r4, #24]
 80069e6:	6818      	ldr	r0, [r3, #0]
 80069e8:	f002 fd02 	bl	80093f0 <ai_array_to_buffer_fmt>
 80069ec:	6833      	ldr	r3, [r6, #0]
 80069ee:	4058      	eors	r0, r3
 80069f0:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 80069f4:	f040 81b9 	bne.w	8006d6a <ai_platform_network_process+0x4a6>
 80069f8:	6873      	ldr	r3, [r6, #4]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	f000 81ac 	beq.w	8006d58 <ai_platform_network_process+0x494>
 8006a00:	69b3      	ldr	r3, [r6, #24]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	f000 819c 	beq.w	8006d42 <ai_platform_network_process+0x47e>
 8006a0a:	9a01      	ldr	r2, [sp, #4]
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	bf38      	it	cc
 8006a10:	461a      	movcc	r2, r3
 8006a12:	4620      	mov	r0, r4
 8006a14:	9201      	str	r2, [sp, #4]
 8006a16:	f002 fd97 	bl	8009548 <get_tensor_byte_size>
 8006a1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a1e:	69b3      	ldr	r3, [r6, #24]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	fb00 f303 	mul.w	r3, r0, r3
 8006a26:	f8c8 300c 	str.w	r3, [r8, #12]
 8006a2a:	6871      	ldr	r1, [r6, #4]
 8006a2c:	f8c8 1004 	str.w	r1, [r8, #4]
 8006a30:	440b      	add	r3, r1
 8006a32:	f849 300b 	str.w	r3, [r9, fp]
 8006a36:	69a0      	ldr	r0, [r4, #24]
 8006a38:	6803      	ldr	r3, [r0, #0]
 8006a3a:	009a      	lsls	r2, r3, #2
 8006a3c:	f107 0701 	add.w	r7, r7, #1
 8006a40:	f106 061c 	add.w	r6, r6, #28
 8006a44:	f100 80af 	bmi.w	8006ba6 <ai_platform_network_process+0x2e2>
 8006a48:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006a4c:	1a9b      	subs	r3, r3, r2
 8006a4e:	4419      	add	r1, r3
 8006a50:	6081      	str	r1, [r0, #8]
 8006a52:	69a3      	ldr	r3, [r4, #24]
 8006a54:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006a58:	60da      	str	r2, [r3, #12]
 8006a5a:	f8ba 3000 	ldrh.w	r3, [sl]
 8006a5e:	42bb      	cmp	r3, r7
 8006a60:	d888      	bhi.n	8006974 <ai_platform_network_process+0xb0>
 8006a62:	e9dd 5b02 	ldrd	r5, fp, [sp, #8]
 8006a66:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006a68:	f1bb 0f00 	cmp.w	fp, #0
 8006a6c:	f000 8186 	beq.w	8006d7c <ai_platform_network_process+0x4b8>
 8006a70:	2a01      	cmp	r2, #1
 8006a72:	f240 815e 	bls.w	8006d32 <ai_platform_network_process+0x46e>
 8006a76:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006a7a:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	f000 8157 	beq.w	8006d32 <ai_platform_network_process+0x46e>
 8006a84:	465e      	mov	r6, fp
 8006a86:	2700      	movs	r7, #0
 8006a88:	462c      	mov	r4, r5
 8006a8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	f000 80b4 	beq.w	8006bfc <ai_platform_network_process+0x338>
 8006a94:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006a98:	2d00      	cmp	r5, #0
 8006a9a:	f000 80af 	beq.w	8006bfc <ai_platform_network_process+0x338>
 8006a9e:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006aa2:	f8d3 8000 	ldr.w	r8, [r3]
 8006aa6:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006aaa:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006aae:	f000 8171 	beq.w	8006d94 <ai_platform_network_process+0x4d0>
 8006ab2:	69ab      	ldr	r3, [r5, #24]
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	685b      	ldr	r3, [r3, #4]
 8006ab8:	9302      	str	r3, [sp, #8]
 8006aba:	4630      	mov	r0, r6
 8006abc:	f7ff f980 	bl	8005dc0 <ai_buffer_get_size>
 8006ac0:	9b02      	ldr	r3, [sp, #8]
 8006ac2:	4283      	cmp	r3, r0
 8006ac4:	f0c0 8134 	bcc.w	8006d30 <ai_platform_network_process+0x46c>
 8006ac8:	68e8      	ldr	r0, [r5, #12]
 8006aca:	69b1      	ldr	r1, [r6, #24]
 8006acc:	68c2      	ldr	r2, [r0, #12]
 8006ace:	68cb      	ldr	r3, [r1, #12]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	f040 812d 	bne.w	8006d30 <ai_platform_network_process+0x46c>
 8006ad6:	6882      	ldr	r2, [r0, #8]
 8006ad8:	688b      	ldr	r3, [r1, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	f040 8128 	bne.w	8006d30 <ai_platform_network_process+0x46c>
 8006ae0:	6842      	ldr	r2, [r0, #4]
 8006ae2:	684b      	ldr	r3, [r1, #4]
 8006ae4:	429a      	cmp	r2, r3
 8006ae6:	f040 8123 	bne.w	8006d30 <ai_platform_network_process+0x46c>
 8006aea:	69ab      	ldr	r3, [r5, #24]
 8006aec:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006af0:	f002 fd12 	bl	8009518 <ai_array_get_data_byte_size>
 8006af4:	9002      	str	r0, [sp, #8]
 8006af6:	4628      	mov	r0, r5
 8006af8:	f002 fd26 	bl	8009548 <get_tensor_byte_size>
 8006afc:	9b02      	ldr	r3, [sp, #8]
 8006afe:	4283      	cmp	r3, r0
 8006b00:	f0c0 8116 	bcc.w	8006d30 <ai_platform_network_process+0x46c>
 8006b04:	69ab      	ldr	r3, [r5, #24]
 8006b06:	6818      	ldr	r0, [r3, #0]
 8006b08:	f002 fc72 	bl	80093f0 <ai_array_to_buffer_fmt>
 8006b0c:	6833      	ldr	r3, [r6, #0]
 8006b0e:	4058      	eors	r0, r3
 8006b10:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006b14:	f040 8136 	bne.w	8006d84 <ai_platform_network_process+0x4c0>
 8006b18:	6873      	ldr	r3, [r6, #4]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	f000 814d 	beq.w	8006dba <ai_platform_network_process+0x4f6>
 8006b20:	69b3      	ldr	r3, [r6, #24]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	f000 813f 	beq.w	8006da8 <ai_platform_network_process+0x4e4>
 8006b2a:	9a01      	ldr	r2, [sp, #4]
 8006b2c:	429a      	cmp	r2, r3
 8006b2e:	bf38      	it	cc
 8006b30:	461a      	movcc	r2, r3
 8006b32:	4628      	mov	r0, r5
 8006b34:	9201      	str	r2, [sp, #4]
 8006b36:	f002 fd07 	bl	8009548 <get_tensor_byte_size>
 8006b3a:	f8ca 0008 	str.w	r0, [sl, #8]
 8006b3e:	69b3      	ldr	r3, [r6, #24]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	fb00 f303 	mul.w	r3, r0, r3
 8006b46:	f8ca 300c 	str.w	r3, [sl, #12]
 8006b4a:	6871      	ldr	r1, [r6, #4]
 8006b4c:	f8ca 1004 	str.w	r1, [sl, #4]
 8006b50:	440b      	add	r3, r1
 8006b52:	f848 300b 	str.w	r3, [r8, fp]
 8006b56:	69a8      	ldr	r0, [r5, #24]
 8006b58:	6803      	ldr	r3, [r0, #0]
 8006b5a:	009b      	lsls	r3, r3, #2
 8006b5c:	f107 0701 	add.w	r7, r7, #1
 8006b60:	f106 061c 	add.w	r6, r6, #28
 8006b64:	d445      	bmi.n	8006bf2 <ai_platform_network_process+0x32e>
 8006b66:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006b6a:	1a9b      	subs	r3, r3, r2
 8006b6c:	4419      	add	r1, r3
 8006b6e:	6081      	str	r1, [r0, #8]
 8006b70:	69ab      	ldr	r3, [r5, #24]
 8006b72:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006b76:	60da      	str	r2, [r3, #12]
 8006b78:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006b7c:	429f      	cmp	r7, r3
 8006b7e:	d384      	bcc.n	8006a8a <ai_platform_network_process+0x1c6>
 8006b80:	e03c      	b.n	8006bfc <ai_platform_network_process+0x338>
 8006b82:	e7fe      	b.n	8006b82 <ai_platform_network_process+0x2be>
 8006b84:	68ea      	ldr	r2, [r5, #12]
 8006b86:	616b      	str	r3, [r5, #20]
 8006b88:	f002 0203 	and.w	r2, r2, #3
 8006b8c:	2a03      	cmp	r2, #3
 8006b8e:	d11d      	bne.n	8006bcc <ai_platform_network_process+0x308>
 8006b90:	2217      	movs	r2, #23
 8006b92:	2112      	movs	r1, #18
 8006b94:	f105 0010 	add.w	r0, r5, #16
 8006b98:	f000 f920 	bl	8006ddc <core_set_error>
 8006b9c:	2400      	movs	r4, #0
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	b005      	add	sp, #20
 8006ba2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ba6:	f8ba 3000 	ldrh.w	r3, [sl]
 8006baa:	429f      	cmp	r7, r3
 8006bac:	f4ff aee2 	bcc.w	8006974 <ai_platform_network_process+0xb0>
 8006bb0:	e757      	b.n	8006a62 <ai_platform_network_process+0x19e>
 8006bb2:	bf00      	nop
 8006bb4:	a1c00100 	.word	0xa1c00100
 8006bb8:	e0042000 	.word	0xe0042000
 8006bbc:	58024000 	.word	0x58024000
 8006bc0:	f407a5c2 	.word	0xf407a5c2
 8006bc4:	b5e8b5cd 	.word	0xb5e8b5cd
 8006bc8:	40023000 	.word	0x40023000
 8006bcc:	2230      	movs	r2, #48	; 0x30
 8006bce:	2111      	movs	r1, #17
 8006bd0:	f105 0010 	add.w	r0, r5, #16
 8006bd4:	f000 f902 	bl	8006ddc <core_set_error>
 8006bd8:	2400      	movs	r4, #0
 8006bda:	e7e0      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006bdc:	462c      	mov	r4, r5
 8006bde:	e7de      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006be0:	9d02      	ldr	r5, [sp, #8]
 8006be2:	2218      	movs	r2, #24
 8006be4:	2112      	movs	r1, #18
 8006be6:	f105 0010 	add.w	r0, r5, #16
 8006bea:	f000 f8f7 	bl	8006ddc <core_set_error>
 8006bee:	2400      	movs	r4, #0
 8006bf0:	e7d5      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006bf2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006bf6:	429f      	cmp	r7, r3
 8006bf8:	f4ff af47 	bcc.w	8006a8a <ai_platform_network_process+0x1c6>
 8006bfc:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006c00:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8006c02:	82a3      	strh	r3, [r4, #20]
 8006c04:	4625      	mov	r5, r4
 8006c06:	2a00      	cmp	r2, #0
 8006c08:	f040 808c 	bne.w	8006d24 <ai_platform_network_process+0x460>
 8006c0c:	4616      	mov	r6, r2
 8006c0e:	4617      	mov	r7, r2
 8006c10:	8aec      	ldrh	r4, [r5, #22]
 8006c12:	429c      	cmp	r4, r3
 8006c14:	bf38      	it	cc
 8006c16:	46ab      	movcc	fp, r5
 8006c18:	d2c1      	bcs.n	8006b9e <ai_platform_network_process+0x2da>
 8006c1a:	2e00      	cmp	r6, #0
 8006c1c:	d030      	beq.n	8006c80 <ai_platform_network_process+0x3bc>
 8006c1e:	f04f 0800 	mov.w	r8, #0
 8006c22:	e014      	b.n	8006c4e <ai_platform_network_process+0x38a>
 8006c24:	6882      	ldr	r2, [r0, #8]
 8006c26:	68c5      	ldr	r5, [r0, #12]
 8006c28:	6863      	ldr	r3, [r4, #4]
 8006c2a:	1b52      	subs	r2, r2, r5
 8006c2c:	4413      	add	r3, r2
 8006c2e:	6083      	str	r3, [r0, #8]
 8006c30:	698b      	ldr	r3, [r1, #24]
 8006c32:	6862      	ldr	r2, [r4, #4]
 8006c34:	60da      	str	r2, [r3, #12]
 8006c36:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 8006c3a:	f859 200a 	ldr.w	r2, [r9, sl]
 8006c3e:	440b      	add	r3, r1
 8006c40:	4293      	cmp	r3, r2
 8006c42:	bf24      	itt	cs
 8006c44:	68e3      	ldrcs	r3, [r4, #12]
 8006c46:	1ad3      	subcs	r3, r2, r3
 8006c48:	6063      	str	r3, [r4, #4]
 8006c4a:	f108 0801 	add.w	r8, r8, #1
 8006c4e:	8833      	ldrh	r3, [r6, #0]
 8006c50:	4543      	cmp	r3, r8
 8006c52:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8006c56:	d913      	bls.n	8006c80 <ai_platform_network_process+0x3bc>
 8006c58:	6873      	ldr	r3, [r6, #4]
 8006c5a:	b18b      	cbz	r3, 8006c80 <ai_platform_network_process+0x3bc>
 8006c5c:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 8006c60:	b171      	cbz	r1, 8006c80 <ai_platform_network_process+0x3bc>
 8006c62:	6988      	ldr	r0, [r1, #24]
 8006c64:	68b2      	ldr	r2, [r6, #8]
 8006c66:	6803      	ldr	r3, [r0, #0]
 8006c68:	f8d2 9000 	ldr.w	r9, [r2]
 8006c6c:	009d      	lsls	r5, r3, #2
 8006c6e:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 8006c72:	d5d7      	bpl.n	8006c24 <ai_platform_network_process+0x360>
 8006c74:	6881      	ldr	r1, [r0, #8]
 8006c76:	68a2      	ldr	r2, [r4, #8]
 8006c78:	6860      	ldr	r0, [r4, #4]
 8006c7a:	f002 fb33 	bl	80092e4 <st_int8_copy>
 8006c7e:	e7da      	b.n	8006c36 <ai_platform_network_process+0x372>
 8006c80:	4658      	mov	r0, fp
 8006c82:	f000 f903 	bl	8006e8c <ai_layers_forward_all>
 8006c86:	2f00      	cmp	r7, #0
 8006c88:	d03d      	beq.n	8006d06 <ai_platform_network_process+0x442>
 8006c8a:	2400      	movs	r4, #0
 8006c8c:	e016      	b.n	8006cbc <ai_platform_network_process+0x3f8>
 8006c8e:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8006c92:	f859 100a 	ldr.w	r1, [r9, sl]
 8006c96:	4413      	add	r3, r2
 8006c98:	428b      	cmp	r3, r1
 8006c9a:	bf24      	itt	cs
 8006c9c:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006ca0:	1acb      	subcs	r3, r1, r3
 8006ca2:	f8c8 3004 	str.w	r3, [r8, #4]
 8006ca6:	6981      	ldr	r1, [r0, #24]
 8006ca8:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 8006cac:	1b52      	subs	r2, r2, r5
 8006cae:	4413      	add	r3, r2
 8006cb0:	608b      	str	r3, [r1, #8]
 8006cb2:	6983      	ldr	r3, [r0, #24]
 8006cb4:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006cb8:	60da      	str	r2, [r3, #12]
 8006cba:	3401      	adds	r4, #1
 8006cbc:	883b      	ldrh	r3, [r7, #0]
 8006cbe:	42a3      	cmp	r3, r4
 8006cc0:	d921      	bls.n	8006d06 <ai_platform_network_process+0x442>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	b1fb      	cbz	r3, 8006d06 <ai_platform_network_process+0x442>
 8006cc6:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8006cca:	b1e0      	cbz	r0, 8006d06 <ai_platform_network_process+0x442>
 8006ccc:	68ba      	ldr	r2, [r7, #8]
 8006cce:	6983      	ldr	r3, [r0, #24]
 8006cd0:	f8d2 9000 	ldr.w	r9, [r2]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	0092      	lsls	r2, r2, #2
 8006cd8:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8006cdc:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 8006ce0:	d5d5      	bpl.n	8006c8e <ai_platform_network_process+0x3ca>
 8006ce2:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006ce6:	6898      	ldr	r0, [r3, #8]
 8006ce8:	f002 fafc 	bl	80092e4 <st_int8_copy>
 8006cec:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006cf0:	f859 200a 	ldr.w	r2, [r9, sl]
 8006cf4:	440b      	add	r3, r1
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	bf24      	itt	cs
 8006cfa:	f8d8 300c 	ldrcs.w	r3, [r8, #12]
 8006cfe:	1ad3      	subcs	r3, r2, r3
 8006d00:	f8c8 3004 	str.w	r3, [r8, #4]
 8006d04:	e7d9      	b.n	8006cba <ai_platform_network_process+0x3f6>
 8006d06:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 8006d0a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 8006d0e:	3401      	adds	r4, #1
 8006d10:	b2a4      	uxth	r4, r4
 8006d12:	42a3      	cmp	r3, r4
 8006d14:	f8ab 4016 	strh.w	r4, [fp, #22]
 8006d18:	f63f af7f 	bhi.w	8006c1a <ai_platform_network_process+0x356>
 8006d1c:	4620      	mov	r0, r4
 8006d1e:	b005      	add	sp, #20
 8006d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d24:	2a01      	cmp	r2, #1
 8006d26:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8006d28:	d03c      	beq.n	8006da4 <ai_platform_network_process+0x4e0>
 8006d2a:	f106 070c 	add.w	r7, r6, #12
 8006d2e:	e76f      	b.n	8006c10 <ai_platform_network_process+0x34c>
 8006d30:	4625      	mov	r5, r4
 8006d32:	2218      	movs	r2, #24
 8006d34:	2113      	movs	r1, #19
 8006d36:	f105 0010 	add.w	r0, r5, #16
 8006d3a:	f000 f84f 	bl	8006ddc <core_set_error>
 8006d3e:	2400      	movs	r4, #0
 8006d40:	e72d      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006d42:	9d02      	ldr	r5, [sp, #8]
 8006d44:	4604      	mov	r4, r0
 8006d46:	2221      	movs	r2, #33	; 0x21
 8006d48:	2112      	movs	r1, #18
 8006d4a:	f105 0010 	add.w	r0, r5, #16
 8006d4e:	f000 f845 	bl	8006ddc <core_set_error>
 8006d52:	e724      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006d54:	9d02      	ldr	r5, [sp, #8]
 8006d56:	e71b      	b.n	8006b90 <ai_platform_network_process+0x2cc>
 8006d58:	9d02      	ldr	r5, [sp, #8]
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	2217      	movs	r2, #23
 8006d5e:	2112      	movs	r1, #18
 8006d60:	f105 0010 	add.w	r0, r5, #16
 8006d64:	f000 f83a 	bl	8006ddc <core_set_error>
 8006d68:	e719      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006d6a:	9d02      	ldr	r5, [sp, #8]
 8006d6c:	2219      	movs	r2, #25
 8006d6e:	2112      	movs	r1, #18
 8006d70:	f105 0010 	add.w	r0, r5, #16
 8006d74:	f000 f832 	bl	8006ddc <core_set_error>
 8006d78:	2400      	movs	r4, #0
 8006d7a:	e710      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006d7c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006d80:	82ab      	strh	r3, [r5, #20]
 8006d82:	e740      	b.n	8006c06 <ai_platform_network_process+0x342>
 8006d84:	f104 0010 	add.w	r0, r4, #16
 8006d88:	2219      	movs	r2, #25
 8006d8a:	2113      	movs	r1, #19
 8006d8c:	f000 f826 	bl	8006ddc <core_set_error>
 8006d90:	2400      	movs	r4, #0
 8006d92:	e704      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006d94:	f104 0010 	add.w	r0, r4, #16
 8006d98:	2217      	movs	r2, #23
 8006d9a:	2113      	movs	r1, #19
 8006d9c:	f000 f81e 	bl	8006ddc <core_set_error>
 8006da0:	4654      	mov	r4, sl
 8006da2:	e6fc      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006da4:	2700      	movs	r7, #0
 8006da6:	e733      	b.n	8006c10 <ai_platform_network_process+0x34c>
 8006da8:	4625      	mov	r5, r4
 8006daa:	2221      	movs	r2, #33	; 0x21
 8006dac:	4604      	mov	r4, r0
 8006dae:	2113      	movs	r1, #19
 8006db0:	f105 0010 	add.w	r0, r5, #16
 8006db4:	f000 f812 	bl	8006ddc <core_set_error>
 8006db8:	e6f1      	b.n	8006b9e <ai_platform_network_process+0x2da>
 8006dba:	4625      	mov	r5, r4
 8006dbc:	2217      	movs	r2, #23
 8006dbe:	4604      	mov	r4, r0
 8006dc0:	2113      	movs	r1, #19
 8006dc2:	f105 0010 	add.w	r0, r5, #16
 8006dc6:	f000 f809 	bl	8006ddc <core_set_error>
 8006dca:	e6e8      	b.n	8006b9e <ai_platform_network_process+0x2da>

08006dcc <core_init>:
 8006dcc:	2001      	movs	r0, #1
 8006dce:	4770      	bx	lr

08006dd0 <core_get_error>:
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2200      	movs	r2, #0
 8006dd4:	6800      	ldr	r0, [r0, #0]
 8006dd6:	601a      	str	r2, [r3, #0]
 8006dd8:	4770      	bx	lr
 8006dda:	bf00      	nop

08006ddc <core_set_error>:
 8006ddc:	4603      	mov	r3, r0
 8006dde:	7800      	ldrb	r0, [r0, #0]
 8006de0:	b108      	cbz	r0, 8006de6 <core_set_error+0xa>
 8006de2:	2000      	movs	r0, #0
 8006de4:	4770      	bx	lr
 8006de6:	7019      	strb	r1, [r3, #0]
 8006de8:	6819      	ldr	r1, [r3, #0]
 8006dea:	f362 211f 	bfi	r1, r2, #8, #24
 8006dee:	2001      	movs	r0, #1
 8006df0:	6019      	str	r1, [r3, #0]
 8006df2:	4770      	bx	lr

08006df4 <ai_check_custom_types>:
 8006df4:	b082      	sub	sp, #8
 8006df6:	4b13      	ldr	r3, [pc, #76]	; (8006e44 <ai_check_custom_types+0x50>)
 8006df8:	9301      	str	r3, [sp, #4]
 8006dfa:	b118      	cbz	r0, 8006e04 <ai_check_custom_types+0x10>
 8006dfc:	7803      	ldrb	r3, [r0, #0]
 8006dfe:	2b03      	cmp	r3, #3
 8006e00:	d002      	beq.n	8006e08 <ai_check_custom_types+0x14>
 8006e02:	2000      	movs	r0, #0
 8006e04:	b002      	add	sp, #8
 8006e06:	4770      	bx	lr
 8006e08:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	d004      	beq.n	8006e1a <ai_check_custom_types+0x26>
 8006e10:	2001      	movs	r0, #1
 8006e12:	f080 0001 	eor.w	r0, r0, #1
 8006e16:	b002      	add	sp, #8
 8006e18:	4770      	bx	lr
 8006e1a:	7842      	ldrb	r2, [r0, #1]
 8006e1c:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006e20:	429a      	cmp	r2, r3
 8006e22:	f100 0001 	add.w	r0, r0, #1
 8006e26:	d1f3      	bne.n	8006e10 <ai_check_custom_types+0x1c>
 8006e28:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 8006e2c:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006e30:	429a      	cmp	r2, r3
 8006e32:	d1ed      	bne.n	8006e10 <ai_check_custom_types+0x1c>
 8006e34:	7842      	ldrb	r2, [r0, #1]
 8006e36:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8006e3a:	429a      	cmp	r2, r3
 8006e3c:	d1e8      	bne.n	8006e10 <ai_check_custom_types+0x1c>
 8006e3e:	2000      	movs	r0, #0
 8006e40:	e7e7      	b.n	8006e12 <ai_check_custom_types+0x1e>
 8006e42:	bf00      	nop
 8006e44:	84048403 	.word	0x84048403

08006e48 <ai_layers_init_all>:
 8006e48:	4601      	mov	r1, r0
 8006e4a:	2000      	movs	r0, #0
 8006e4c:	6b4b      	ldr	r3, [r1, #52]	; 0x34
 8006e4e:	b143      	cbz	r3, 8006e62 <ai_layers_init_all+0x1a>
 8006e50:	691a      	ldr	r2, [r3, #16]
 8006e52:	60d9      	str	r1, [r3, #12]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	f100 0001 	add.w	r0, r0, #1
 8006e5a:	d002      	beq.n	8006e62 <ai_layers_init_all+0x1a>
 8006e5c:	b10a      	cbz	r2, 8006e62 <ai_layers_init_all+0x1a>
 8006e5e:	4613      	mov	r3, r2
 8006e60:	e7f5      	b.n	8006e4e <ai_layers_init_all+0x6>
 8006e62:	4770      	bx	lr

08006e64 <ai_layers_post_init_all>:
 8006e64:	b538      	push	{r3, r4, r5, lr}
 8006e66:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006e68:	2500      	movs	r5, #0
 8006e6a:	b16c      	cbz	r4, 8006e88 <ai_layers_post_init_all+0x24>
 8006e6c:	6863      	ldr	r3, [r4, #4]
 8006e6e:	07db      	lsls	r3, r3, #31
 8006e70:	d504      	bpl.n	8006e7c <ai_layers_post_init_all+0x18>
 8006e72:	6a23      	ldr	r3, [r4, #32]
 8006e74:	4620      	mov	r0, r4
 8006e76:	b10b      	cbz	r3, 8006e7c <ai_layers_post_init_all+0x18>
 8006e78:	4798      	blx	r3
 8006e7a:	3501      	adds	r5, #1
 8006e7c:	6923      	ldr	r3, [r4, #16]
 8006e7e:	42a3      	cmp	r3, r4
 8006e80:	d002      	beq.n	8006e88 <ai_layers_post_init_all+0x24>
 8006e82:	b10b      	cbz	r3, 8006e88 <ai_layers_post_init_all+0x24>
 8006e84:	461c      	mov	r4, r3
 8006e86:	e7f0      	b.n	8006e6a <ai_layers_post_init_all+0x6>
 8006e88:	4628      	mov	r0, r5
 8006e8a:	bd38      	pop	{r3, r4, r5, pc}

08006e8c <ai_layers_forward_all>:
 8006e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e90:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8006e94:	4604      	mov	r4, r0
 8006e96:	f1b8 0f00 	cmp.w	r8, #0
 8006e9a:	d02b      	beq.n	8006ef4 <ai_layers_forward_all+0x68>
 8006e9c:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8006e9e:	6381      	str	r1, [r0, #56]	; 0x38
 8006ea0:	b321      	cbz	r1, 8006eec <ai_layers_forward_all+0x60>
 8006ea2:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8006ea4:	2001      	movs	r0, #1
 8006ea6:	47c0      	blx	r8
 8006ea8:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8006eaa:	b1fe      	cbz	r6, 8006eec <ai_layers_forward_all+0x60>
 8006eac:	2700      	movs	r7, #0
 8006eae:	4631      	mov	r1, r6
 8006eb0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006eb2:	2002      	movs	r0, #2
 8006eb4:	47c0      	blx	r8
 8006eb6:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8006eb8:	4628      	mov	r0, r5
 8006eba:	696b      	ldr	r3, [r5, #20]
 8006ebc:	4798      	blx	r3
 8006ebe:	692e      	ldr	r6, [r5, #16]
 8006ec0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8006ec2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006ec4:	42b5      	cmp	r5, r6
 8006ec6:	f04f 0003 	mov.w	r0, #3
 8006eca:	d007      	beq.n	8006edc <ai_layers_forward_all+0x50>
 8006ecc:	47c0      	blx	r8
 8006ece:	3701      	adds	r7, #1
 8006ed0:	63a6      	str	r6, [r4, #56]	; 0x38
 8006ed2:	2e00      	cmp	r6, #0
 8006ed4:	d1eb      	bne.n	8006eae <ai_layers_forward_all+0x22>
 8006ed6:	4638      	mov	r0, r7
 8006ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006edc:	2003      	movs	r0, #3
 8006ede:	47c0      	blx	r8
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	3701      	adds	r7, #1
 8006ee4:	63a3      	str	r3, [r4, #56]	; 0x38
 8006ee6:	4638      	mov	r0, r7
 8006ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006eec:	2700      	movs	r7, #0
 8006eee:	4638      	mov	r0, r7
 8006ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ef4:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8006ef6:	6385      	str	r5, [r0, #56]	; 0x38
 8006ef8:	2d00      	cmp	r5, #0
 8006efa:	d0f7      	beq.n	8006eec <ai_layers_forward_all+0x60>
 8006efc:	4647      	mov	r7, r8
 8006efe:	696b      	ldr	r3, [r5, #20]
 8006f00:	4628      	mov	r0, r5
 8006f02:	4798      	blx	r3
 8006f04:	462b      	mov	r3, r5
 8006f06:	692d      	ldr	r5, [r5, #16]
 8006f08:	429d      	cmp	r5, r3
 8006f0a:	d004      	beq.n	8006f16 <ai_layers_forward_all+0x8a>
 8006f0c:	63a5      	str	r5, [r4, #56]	; 0x38
 8006f0e:	3701      	adds	r7, #1
 8006f10:	2d00      	cmp	r5, #0
 8006f12:	d1f4      	bne.n	8006efe <ai_layers_forward_all+0x72>
 8006f14:	e7df      	b.n	8006ed6 <ai_layers_forward_all+0x4a>
 8006f16:	2300      	movs	r3, #0
 8006f18:	63a3      	str	r3, [r4, #56]	; 0x38
 8006f1a:	3701      	adds	r7, #1
 8006f1c:	e7db      	b.n	8006ed6 <ai_layers_forward_all+0x4a>
 8006f1e:	bf00      	nop

08006f20 <forward_dense>:
 8006f20:	6983      	ldr	r3, [r0, #24]
 8006f22:	881a      	ldrh	r2, [r3, #0]
 8006f24:	2a00      	cmp	r2, #0
 8006f26:	f000 8181 	beq.w	800722c <forward_dense+0x30c>
 8006f2a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f2e:	ed2d 8b02 	vpush	{d8}
 8006f32:	f8d3 c004 	ldr.w	ip, [r3, #4]
 8006f36:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8006f3a:	b095      	sub	sp, #84	; 0x54
 8006f3c:	b105      	cbz	r5, 8006f40 <forward_dense+0x20>
 8006f3e:	682d      	ldr	r5, [r5, #0]
 8006f40:	2a01      	cmp	r2, #1
 8006f42:	f000 828f 	beq.w	8007464 <forward_dense+0x544>
 8006f46:	f8dc 6010 	ldr.w	r6, [ip, #16]
 8006f4a:	b106      	cbz	r6, 8006f4e <forward_dense+0x2e>
 8006f4c:	6836      	ldr	r6, [r6, #0]
 8006f4e:	2a02      	cmp	r2, #2
 8006f50:	f000 816e 	beq.w	8007230 <forward_dense+0x310>
 8006f54:	f8dc 301c 	ldr.w	r3, [ip, #28]
 8006f58:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8274 	beq.w	8007448 <forward_dense+0x528>
 8006f60:	4619      	mov	r1, r3
 8006f62:	f8bc 3018 	ldrh.w	r3, [ip, #24]
 8006f66:	6809      	ldr	r1, [r1, #0]
 8006f68:	910d      	str	r1, [sp, #52]	; 0x34
 8006f6a:	2b01      	cmp	r3, #1
 8006f6c:	f240 826e 	bls.w	800744c <forward_dense+0x52c>
 8006f70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006f72:	685b      	ldr	r3, [r3, #4]
 8006f74:	930b      	str	r3, [sp, #44]	; 0x2c
 8006f76:	460b      	mov	r3, r1
 8006f78:	68e8      	ldr	r0, [r5, #12]
 8006f7a:	68f7      	ldr	r7, [r6, #12]
 8006f7c:	6840      	ldr	r0, [r0, #4]
 8006f7e:	6999      	ldr	r1, [r3, #24]
 8006f80:	9013      	str	r0, [sp, #76]	; 0x4c
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	680b      	ldr	r3, [r1, #0]
 8006f86:	9012      	str	r0, [sp, #72]	; 0x48
 8006f88:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8006f8c:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8006f90:	fb00 f404 	mul.w	r4, r0, r4
 8006f94:	f3c3 5041 	ubfx	r0, r3, #21, #2
 8006f98:	fa4e f000 	asr.w	r0, lr, r0
 8006f9c:	2a03      	cmp	r2, #3
 8006f9e:	9010      	str	r0, [sp, #64]	; 0x40
 8006fa0:	f000 825d 	beq.w	800745e <forward_dense+0x53e>
 8006fa4:	f8dc 2028 	ldr.w	r2, [ip, #40]	; 0x28
 8006fa8:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	f000 8246 	beq.w	800743e <forward_dense+0x51e>
 8006fb2:	6812      	ldr	r2, [r2, #0]
 8006fb4:	2a00      	cmp	r2, #0
 8006fb6:	f000 8242 	beq.w	800743e <forward_dense+0x51e>
 8006fba:	2b04      	cmp	r3, #4
 8006fbc:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8006fc0:	f000 822c 	beq.w	800741c <forward_dense+0x4fc>
 8006fc4:	2b08      	cmp	r3, #8
 8006fc6:	f000 8229 	beq.w	800741c <forward_dense+0x4fc>
 8006fca:	f04f 0b00 	mov.w	fp, #0
 8006fce:	69b2      	ldr	r2, [r6, #24]
 8006fd0:	69ab      	ldr	r3, [r5, #24]
 8006fd2:	6891      	ldr	r1, [r2, #8]
 8006fd4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8006fd6:	689b      	ldr	r3, [r3, #8]
 8006fd8:	6952      	ldr	r2, [r2, #20]
 8006fda:	9106      	str	r1, [sp, #24]
 8006fdc:	fb07 f404 	mul.w	r4, r7, r4
 8006fe0:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8006fe4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8006fe6:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8006fea:	4281      	cmp	r1, r0
 8006fec:	ea4f 0482 	mov.w	r4, r2, lsl #2
 8006ff0:	900e      	str	r0, [sp, #56]	; 0x38
 8006ff2:	940c      	str	r4, [sp, #48]	; 0x30
 8006ff4:	eb01 0882 	add.w	r8, r1, r2, lsl #2
 8006ff8:	f080 8113 	bcs.w	8007222 <forward_dense+0x302>
 8006ffc:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8006ffe:	ed9f 8a93 	vldr	s16, [pc, #588]	; 800724c <forward_dense+0x32c>
 8007002:	f021 0201 	bic.w	r2, r1, #1
 8007006:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 800700a:	9204      	str	r2, [sp, #16]
 800700c:	f001 0201 	and.w	r2, r1, #1
 8007010:	08c8      	lsrs	r0, r1, #3
 8007012:	9208      	str	r2, [sp, #32]
 8007014:	008a      	lsls	r2, r1, #2
 8007016:	f001 0a07 	and.w	sl, r1, #7
 800701a:	920f      	str	r2, [sp, #60]	; 0x3c
 800701c:	eb03 1240 	add.w	r2, r3, r0, lsl #5
 8007020:	3320      	adds	r3, #32
 8007022:	465c      	mov	r4, fp
 8007024:	9007      	str	r0, [sp, #28]
 8007026:	46cb      	mov	fp, r9
 8007028:	9205      	str	r2, [sp, #20]
 800702a:	9302      	str	r3, [sp, #8]
 800702c:	46c1      	mov	r9, r8
 800702e:	f8cd a044 	str.w	sl, [sp, #68]	; 0x44
 8007032:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	689a      	ldr	r2, [r3, #8]
 8007038:	9b02      	ldr	r3, [sp, #8]
 800703a:	3b20      	subs	r3, #32
 800703c:	930a      	str	r3, [sp, #40]	; 0x28
 800703e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007040:	b10b      	cbz	r3, 8007046 <forward_dense+0x126>
 8007042:	699b      	ldr	r3, [r3, #24]
 8007044:	689b      	ldr	r3, [r3, #8]
 8007046:	2c00      	cmp	r4, #0
 8007048:	f000 81da 	beq.w	8007400 <forward_dense+0x4e0>
 800704c:	9910      	ldr	r1, [sp, #64]	; 0x40
 800704e:	2904      	cmp	r1, #4
 8007050:	9906      	ldr	r1, [sp, #24]
 8007052:	f000 80fd 	beq.w	8007250 <forward_dense+0x330>
 8007056:	4549      	cmp	r1, r9
 8007058:	f080 80d2 	bcs.w	8007200 <forward_dense+0x2e0>
 800705c:	460f      	mov	r7, r1
 800705e:	9907      	ldr	r1, [sp, #28]
 8007060:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007064:	f8dd a014 	ldr.w	sl, [sp, #20]
 8007068:	1c4e      	adds	r6, r1, #1
 800706a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800706e:	4694      	mov	ip, r2
 8007070:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8007072:	468e      	mov	lr, r1
 8007074:	2b00      	cmp	r3, #0
 8007076:	f000 80de 	beq.w	8007236 <forward_dense+0x316>
 800707a:	ecf3 2a01 	vldmia	r3!, {s5}
 800707e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800724c <forward_dense+0x32c>
 8007082:	f1be 0f00 	cmp.w	lr, #0
 8007086:	f000 80de 	beq.w	8007246 <forward_dense+0x326>
 800708a:	f10c 0108 	add.w	r1, ip, #8
 800708e:	4640      	mov	r0, r8
 8007090:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007094:	ed10 3a07 	vldr	s6, [r0, #-28]	; 0xffffffe4
 8007098:	ed50 3a08 	vldr	s7, [r0, #-32]	; 0xffffffe0
 800709c:	ed10 4a06 	vldr	s8, [r0, #-24]	; 0xffffffe8
 80070a0:	ed50 4a05 	vldr	s9, [r0, #-20]	; 0xffffffec
 80070a4:	ed10 5a04 	vldr	s10, [r0, #-16]
 80070a8:	ed50 5a03 	vldr	s11, [r0, #-12]
 80070ac:	ed10 6a02 	vldr	s12, [r0, #-8]
 80070b0:	ed50 6a01 	vldr	s13, [r0, #-4]
 80070b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070b8:	edd5 7a00 	vldr	s15, [r5]
 80070bc:	f811 5c08 	ldrb.w	r5, [r1, #-8]
 80070c0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070c4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80070c8:	ed95 3a00 	vldr	s6, [r5]
 80070cc:	f811 5c06 	ldrb.w	r5, [r1, #-6]
 80070d0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80070d4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070d8:	3108      	adds	r1, #8
 80070da:	edd5 3a00 	vldr	s7, [r5]
 80070de:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 80070e2:	eee3 7a84 	vfma.f32	s15, s7, s8
 80070e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070ea:	3020      	adds	r0, #32
 80070ec:	ed95 4a00 	vldr	s8, [r5]
 80070f0:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 80070f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80070f8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80070fc:	edd5 4a00 	vldr	s9, [r5]
 8007100:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007104:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007108:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800710c:	ed95 5a00 	vldr	s10, [r5]
 8007110:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007114:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007118:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800711c:	edd5 5a00 	vldr	s11, [r5]
 8007120:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007124:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007128:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800712c:	428e      	cmp	r6, r1
 800712e:	ed95 6a00 	vldr	s12, [r5]
 8007132:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007136:	ee37 7a27 	vadd.f32	s14, s14, s15
 800713a:	d1a9      	bne.n	8007090 <forward_dense+0x170>
 800713c:	f1a6 0108 	sub.w	r1, r6, #8
 8007140:	4650      	mov	r0, sl
 8007142:	2a00      	cmp	r2, #0
 8007144:	d04a      	beq.n	80071dc <forward_dense+0x2bc>
 8007146:	780d      	ldrb	r5, [r1, #0]
 8007148:	edd0 6a00 	vldr	s13, [r0]
 800714c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007150:	edd5 7a00 	vldr	s15, [r5]
 8007154:	2a01      	cmp	r2, #1
 8007156:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800715a:	d03f      	beq.n	80071dc <forward_dense+0x2bc>
 800715c:	784d      	ldrb	r5, [r1, #1]
 800715e:	edd0 6a01 	vldr	s13, [r0, #4]
 8007162:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007166:	edd5 7a00 	vldr	s15, [r5]
 800716a:	2a02      	cmp	r2, #2
 800716c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007170:	d034      	beq.n	80071dc <forward_dense+0x2bc>
 8007172:	788d      	ldrb	r5, [r1, #2]
 8007174:	edd0 6a02 	vldr	s13, [r0, #8]
 8007178:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800717c:	edd5 7a00 	vldr	s15, [r5]
 8007180:	2a03      	cmp	r2, #3
 8007182:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007186:	d029      	beq.n	80071dc <forward_dense+0x2bc>
 8007188:	78cd      	ldrb	r5, [r1, #3]
 800718a:	edd0 6a03 	vldr	s13, [r0, #12]
 800718e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007192:	edd5 7a00 	vldr	s15, [r5]
 8007196:	2a04      	cmp	r2, #4
 8007198:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800719c:	d01e      	beq.n	80071dc <forward_dense+0x2bc>
 800719e:	790d      	ldrb	r5, [r1, #4]
 80071a0:	edd0 6a04 	vldr	s13, [r0, #16]
 80071a4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80071a8:	edd5 7a00 	vldr	s15, [r5]
 80071ac:	2a05      	cmp	r2, #5
 80071ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80071b2:	d013      	beq.n	80071dc <forward_dense+0x2bc>
 80071b4:	794d      	ldrb	r5, [r1, #5]
 80071b6:	edd0 6a05 	vldr	s13, [r0, #20]
 80071ba:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80071be:	edd5 7a00 	vldr	s15, [r5]
 80071c2:	2a06      	cmp	r2, #6
 80071c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80071c8:	d008      	beq.n	80071dc <forward_dense+0x2bc>
 80071ca:	7989      	ldrb	r1, [r1, #6]
 80071cc:	edd0 7a06 	vldr	s15, [r0, #24]
 80071d0:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80071d4:	edd1 6a00 	vldr	s13, [r1]
 80071d8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80071dc:	44dc      	add	ip, fp
 80071de:	445e      	add	r6, fp
 80071e0:	ee32 7a87 	vadd.f32	s14, s5, s14
 80071e4:	eca7 7a01 	vstmia	r7!, {s14}
 80071e8:	454f      	cmp	r7, r9
 80071ea:	f4ff af43 	bcc.w	8007074 <forward_dense+0x154>
 80071ee:	9a06      	ldr	r2, [sp, #24]
 80071f0:	eba9 0302 	sub.w	r3, r9, r2
 80071f4:	3b01      	subs	r3, #1
 80071f6:	f023 0303 	bic.w	r3, r3, #3
 80071fa:	3304      	adds	r3, #4
 80071fc:	18d3      	adds	r3, r2, r3
 80071fe:	9306      	str	r3, [sp, #24]
 8007200:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8007202:	9a05      	ldr	r2, [sp, #20]
 8007204:	4499      	add	r9, r3
 8007206:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007208:	441a      	add	r2, r3
 800720a:	9205      	str	r2, [sp, #20]
 800720c:	9a02      	ldr	r2, [sp, #8]
 800720e:	441a      	add	r2, r3
 8007210:	9202      	str	r2, [sp, #8]
 8007212:	9a04      	ldr	r2, [sp, #16]
 8007214:	441a      	add	r2, r3
 8007216:	9204      	str	r2, [sp, #16]
 8007218:	9b06      	ldr	r3, [sp, #24]
 800721a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800721c:	4293      	cmp	r3, r2
 800721e:	f4ff af08 	bcc.w	8007032 <forward_dense+0x112>
 8007222:	b015      	add	sp, #84	; 0x54
 8007224:	ecbd 8b02 	vpop	{d8}
 8007228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800722c:	6853      	ldr	r3, [r2, #4]
 800722e:	deff      	udf	#255	; 0xff
 8007230:	2300      	movs	r3, #0
 8007232:	685b      	ldr	r3, [r3, #4]
 8007234:	deff      	udf	#255	; 0xff
 8007236:	ed9f 7a05 	vldr	s14, [pc, #20]	; 800724c <forward_dense+0x32c>
 800723a:	eef0 2a48 	vmov.f32	s5, s16
 800723e:	f1be 0f00 	cmp.w	lr, #0
 8007242:	f47f af22 	bne.w	800708a <forward_dense+0x16a>
 8007246:	980a      	ldr	r0, [sp, #40]	; 0x28
 8007248:	4661      	mov	r1, ip
 800724a:	e77a      	b.n	8007142 <forward_dense+0x222>
 800724c:	00000000 	.word	0x00000000
 8007250:	4549      	cmp	r1, r9
 8007252:	d2d5      	bcs.n	8007200 <forward_dense+0x2e0>
 8007254:	9807      	ldr	r0, [sp, #28]
 8007256:	9103      	str	r1, [sp, #12]
 8007258:	9904      	ldr	r1, [sp, #16]
 800725a:	f100 0c01 	add.w	ip, r0, #1
 800725e:	3901      	subs	r1, #1
 8007260:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 8007264:	9109      	str	r1, [sp, #36]	; 0x24
 8007266:	2b00      	cmp	r3, #0
 8007268:	f000 80b2 	beq.w	80073d0 <forward_dense+0x4b0>
 800726c:	9907      	ldr	r1, [sp, #28]
 800726e:	ecf3 2a01 	vldmia	r3!, {s5}
 8007272:	ed1f 7a0a 	vldr	s14, [pc, #-40]	; 800724c <forward_dense+0x32c>
 8007276:	2900      	cmp	r1, #0
 8007278:	f000 80b2 	beq.w	80073e0 <forward_dense+0x4c0>
 800727c:	9902      	ldr	r1, [sp, #8]
 800727e:	1d10      	adds	r0, r2, #4
 8007280:	f810 6c04 	ldrb.w	r6, [r0, #-4]
 8007284:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8007288:	f810 5c03 	ldrb.w	r5, [r0, #-3]
 800728c:	ed51 3a08 	vldr	s7, [r1, #-32]	; 0xffffffe0
 8007290:	ed11 4a06 	vldr	s8, [r1, #-24]	; 0xffffffe8
 8007294:	ed51 4a05 	vldr	s9, [r1, #-20]	; 0xffffffec
 8007298:	ed11 5a04 	vldr	s10, [r1, #-16]
 800729c:	ed51 5a03 	vldr	s11, [r1, #-12]
 80072a0:	ed11 6a02 	vldr	s12, [r1, #-8]
 80072a4:	ed51 6a01 	vldr	s13, [r1, #-4]
 80072a8:	f006 070f 	and.w	r7, r6, #15
 80072ac:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80072b0:	edd7 7a00 	vldr	s15, [r7]
 80072b4:	0936      	lsrs	r6, r6, #4
 80072b6:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80072ba:	ed96 3a00 	vldr	s6, [r6]
 80072be:	ee67 7a82 	vmul.f32	s15, s15, s4
 80072c2:	092e      	lsrs	r6, r5, #4
 80072c4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80072c8:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80072cc:	f005 050f 	and.w	r5, r5, #15
 80072d0:	edd6 3a00 	vldr	s7, [r6]
 80072d4:	f810 6c02 	ldrb.w	r6, [r0, #-2]
 80072d8:	eee3 7a84 	vfma.f32	s15, s7, s8
 80072dc:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80072e0:	0937      	lsrs	r7, r6, #4
 80072e2:	ed95 4a00 	vldr	s8, [r5]
 80072e6:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 80072ea:	eee4 7a24 	vfma.f32	s15, s8, s9
 80072ee:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 80072f2:	f006 060f 	and.w	r6, r6, #15
 80072f6:	edd7 4a00 	vldr	s9, [r7]
 80072fa:	eee4 7a85 	vfma.f32	s15, s9, s10
 80072fe:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007302:	3004      	adds	r0, #4
 8007304:	ed96 5a00 	vldr	s10, [r6]
 8007308:	092e      	lsrs	r6, r5, #4
 800730a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800730e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8007312:	f005 050f 	and.w	r5, r5, #15
 8007316:	edd6 5a00 	vldr	s11, [r6]
 800731a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800731e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007322:	4584      	cmp	ip, r0
 8007324:	ed95 6a00 	vldr	s12, [r5]
 8007328:	eee6 7a26 	vfma.f32	s15, s12, s13
 800732c:	f101 0120 	add.w	r1, r1, #32
 8007330:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007334:	d1a4      	bne.n	8007280 <forward_dense+0x360>
 8007336:	f8dd e014 	ldr.w	lr, [sp, #20]
 800733a:	f1ac 0804 	sub.w	r8, ip, #4
 800733e:	9904      	ldr	r1, [sp, #16]
 8007340:	458e      	cmp	lr, r1
 8007342:	d22a      	bcs.n	800739a <forward_dense+0x47a>
 8007344:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007346:	eba1 070e 	sub.w	r7, r1, lr
 800734a:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
 800734e:	f10e 0008 	add.w	r0, lr, #8
 8007352:	f108 36ff 	add.w	r6, r8, #4294967295
 8007356:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 800735a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800735e:	ed50 5a01 	vldr	s11, [r0, #-4]
 8007362:	ed50 6a02 	vldr	s13, [r0, #-8]
 8007366:	f001 050f 	and.w	r5, r1, #15
 800736a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 800736e:	edd5 7a00 	vldr	s15, [r5]
 8007372:	0909      	lsrs	r1, r1, #4
 8007374:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007378:	ed91 6a00 	vldr	s12, [r1]
 800737c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007380:	42b7      	cmp	r7, r6
 8007382:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007386:	f100 0008 	add.w	r0, r0, #8
 800738a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800738e:	d1e4      	bne.n	800735a <forward_dense+0x43a>
 8007390:	f10a 0a01 	add.w	sl, sl, #1
 8007394:	44d0      	add	r8, sl
 8007396:	eb0e 0eca 	add.w	lr, lr, sl, lsl #3
 800739a:	9908      	ldr	r1, [sp, #32]
 800739c:	b321      	cbz	r1, 80073e8 <forward_dense+0x4c8>
 800739e:	f898 1000 	ldrb.w	r1, [r8]
 80073a2:	edde 7a00 	vldr	s15, [lr]
 80073a6:	0909      	lsrs	r1, r1, #4
 80073a8:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 80073ac:	edd1 6a00 	vldr	s13, [r1]
 80073b0:	9903      	ldr	r1, [sp, #12]
 80073b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80073b6:	445a      	add	r2, fp
 80073b8:	44dc      	add	ip, fp
 80073ba:	ee72 2a87 	vadd.f32	s5, s5, s14
 80073be:	ece1 2a01 	vstmia	r1!, {s5}
 80073c2:	4589      	cmp	r9, r1
 80073c4:	9103      	str	r1, [sp, #12]
 80073c6:	f67f af12 	bls.w	80071ee <forward_dense+0x2ce>
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	f47f af4e 	bne.w	800726c <forward_dense+0x34c>
 80073d0:	9907      	ldr	r1, [sp, #28]
 80073d2:	ed1f 7a62 	vldr	s14, [pc, #-392]	; 800724c <forward_dense+0x32c>
 80073d6:	eef0 2a48 	vmov.f32	s5, s16
 80073da:	2900      	cmp	r1, #0
 80073dc:	f47f af4e 	bne.w	800727c <forward_dense+0x35c>
 80073e0:	f8dd e028 	ldr.w	lr, [sp, #40]	; 0x28
 80073e4:	4690      	mov	r8, r2
 80073e6:	e7aa      	b.n	800733e <forward_dense+0x41e>
 80073e8:	9903      	ldr	r1, [sp, #12]
 80073ea:	ee32 7a87 	vadd.f32	s14, s5, s14
 80073ee:	445a      	add	r2, fp
 80073f0:	eca1 7a01 	vstmia	r1!, {s14}
 80073f4:	4549      	cmp	r1, r9
 80073f6:	9103      	str	r1, [sp, #12]
 80073f8:	44dc      	add	ip, fp
 80073fa:	f4ff af34 	bcc.w	8007266 <forward_dense+0x346>
 80073fe:	e6f6      	b.n	80071ee <forward_dense+0x2ce>
 8007400:	9912      	ldr	r1, [sp, #72]	; 0x48
 8007402:	9d06      	ldr	r5, [sp, #24]
 8007404:	9101      	str	r1, [sp, #4]
 8007406:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007408:	9100      	str	r1, [sp, #0]
 800740a:	4628      	mov	r0, r5
 800740c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800740e:	f001 fde9 	bl	8008fe4 <forward_lite_dense_if32of32wf32>
 8007412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007414:	462b      	mov	r3, r5
 8007416:	4413      	add	r3, r2
 8007418:	9306      	str	r3, [sp, #24]
 800741a:	e6f1      	b.n	8007200 <forward_dense+0x2e0>
 800741c:	f8d1 800c 	ldr.w	r8, [r1, #12]
 8007420:	f1b9 0f00 	cmp.w	r9, #0
 8007424:	d016      	beq.n	8007454 <forward_dense+0x534>
 8007426:	e9d9 0100 	ldrd	r0, r1, [r9]
 800742a:	f002 f84d 	bl	80094c8 <ai_array_get_byte_size>
 800742e:	f8d9 b00c 	ldr.w	fp, [r9, #12]
 8007432:	4602      	mov	r2, r0
 8007434:	4659      	mov	r1, fp
 8007436:	4640      	mov	r0, r8
 8007438:	f001 ff54 	bl	80092e4 <st_int8_copy>
 800743c:	e5c7      	b.n	8006fce <forward_dense+0xae>
 800743e:	2b04      	cmp	r3, #4
 8007440:	d00a      	beq.n	8007458 <forward_dense+0x538>
 8007442:	f04f 0900 	mov.w	r9, #0
 8007446:	e5bd      	b.n	8006fc4 <forward_dense+0xa4>
 8007448:	930d      	str	r3, [sp, #52]	; 0x34
 800744a:	e595      	b.n	8006f78 <forward_dense+0x58>
 800744c:	2300      	movs	r3, #0
 800744e:	930b      	str	r3, [sp, #44]	; 0x2c
 8007450:	460b      	mov	r3, r1
 8007452:	e591      	b.n	8006f78 <forward_dense+0x58>
 8007454:	46c3      	mov	fp, r8
 8007456:	e5ba      	b.n	8006fce <forward_dense+0xae>
 8007458:	f8d1 b00c 	ldr.w	fp, [r1, #12]
 800745c:	e5b7      	b.n	8006fce <forward_dense+0xae>
 800745e:	2300      	movs	r3, #0
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	deff      	udf	#255	; 0xff
 8007464:	2300      	movs	r3, #0
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	deff      	udf	#255	; 0xff
 800746a:	bf00      	nop

0800746c <nl_func_sigmoid_array_f32>:
 800746c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800746e:	ed2d 8b02 	vpush	{d8}
 8007472:	698f      	ldr	r7, [r1, #24]
 8007474:	6980      	ldr	r0, [r0, #24]
 8007476:	68b9      	ldr	r1, [r7, #8]
 8007478:	6886      	ldr	r6, [r0, #8]
 800747a:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800747e:	3a01      	subs	r2, #1
 8007480:	0093      	lsls	r3, r2, #2
 8007482:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8007486:	4291      	cmp	r1, r2
 8007488:	d815      	bhi.n	80074b6 <nl_func_sigmoid_array_f32+0x4a>
 800748a:	3304      	adds	r3, #4
 800748c:	1d14      	adds	r4, r2, #4
 800748e:	441e      	add	r6, r3
 8007490:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8007494:	4625      	mov	r5, r4
 8007496:	ed34 0a01 	vldmdb	r4!, {s0}
 800749a:	eeb1 0a40 	vneg.f32	s0, s0
 800749e:	f006 fcf5 	bl	800de8c <expf>
 80074a2:	ee30 0a08 	vadd.f32	s0, s0, s16
 80074a6:	3d08      	subs	r5, #8
 80074a8:	eec8 7a00 	vdiv.f32	s15, s16, s0
 80074ac:	ed66 7a01 	vstmdb	r6!, {s15}
 80074b0:	68bb      	ldr	r3, [r7, #8]
 80074b2:	42ab      	cmp	r3, r5
 80074b4:	d9ee      	bls.n	8007494 <nl_func_sigmoid_array_f32+0x28>
 80074b6:	ecbd 8b02 	vpop	{d8}
 80074ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074bc <nl_func_tanh_array_f32>:
 80074bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80074be:	698f      	ldr	r7, [r1, #24]
 80074c0:	6980      	ldr	r0, [r0, #24]
 80074c2:	68b9      	ldr	r1, [r7, #8]
 80074c4:	6886      	ldr	r6, [r0, #8]
 80074c6:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 80074ca:	3a01      	subs	r2, #1
 80074cc:	0093      	lsls	r3, r2, #2
 80074ce:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 80074d2:	4291      	cmp	r1, r2
 80074d4:	d80d      	bhi.n	80074f2 <nl_func_tanh_array_f32+0x36>
 80074d6:	3304      	adds	r3, #4
 80074d8:	1d14      	adds	r4, r2, #4
 80074da:	441e      	add	r6, r3
 80074dc:	4625      	mov	r5, r4
 80074de:	ed34 0a01 	vldmdb	r4!, {s0}
 80074e2:	f006 fd11 	bl	800df08 <tanhf>
 80074e6:	ed26 0a01 	vstmdb	r6!, {s0}
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	3d08      	subs	r5, #8
 80074ee:	42ab      	cmp	r3, r5
 80074f0:	d9f4      	bls.n	80074dc <nl_func_tanh_array_f32+0x20>
 80074f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080074f4 <forward_relu>:
 80074f4:	6982      	ldr	r2, [r0, #24]
 80074f6:	8813      	ldrh	r3, [r2, #0]
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d05b      	beq.n	80075b4 <forward_relu+0xc0>
 80074fc:	6851      	ldr	r1, [r2, #4]
 80074fe:	684a      	ldr	r2, [r1, #4]
 8007500:	b102      	cbz	r2, 8007504 <forward_relu+0x10>
 8007502:	6812      	ldr	r2, [r2, #0]
 8007504:	2b01      	cmp	r3, #1
 8007506:	f000 8123 	beq.w	8007750 <forward_relu+0x25c>
 800750a:	b470      	push	{r4, r5, r6}
 800750c:	6909      	ldr	r1, [r1, #16]
 800750e:	b101      	cbz	r1, 8007512 <forward_relu+0x1e>
 8007510:	6809      	ldr	r1, [r1, #0]
 8007512:	69c6      	ldr	r6, [r0, #28]
 8007514:	2e00      	cmp	r6, #0
 8007516:	f000 8097 	beq.w	8007648 <forward_relu+0x154>
 800751a:	6873      	ldr	r3, [r6, #4]
 800751c:	6988      	ldr	r0, [r1, #24]
 800751e:	6991      	ldr	r1, [r2, #24]
 8007520:	2b01      	cmp	r3, #1
 8007522:	f000 80c1 	beq.w	80076a8 <forward_relu+0x1b4>
 8007526:	6893      	ldr	r3, [r2, #8]
 8007528:	6880      	ldr	r0, [r0, #8]
 800752a:	688c      	ldr	r4, [r1, #8]
 800752c:	0a1b      	lsrs	r3, r3, #8
 800752e:	f000 80f2 	beq.w	8007716 <forward_relu+0x222>
 8007532:	68d5      	ldr	r5, [r2, #12]
 8007534:	2201      	movs	r2, #1
 8007536:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800753a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800753e:	42ab      	cmp	r3, r5
 8007540:	fb01 f202 	mul.w	r2, r1, r2
 8007544:	d1f9      	bne.n	800753a <forward_relu+0x46>
 8007546:	68b3      	ldr	r3, [r6, #8]
 8007548:	ed93 7a02 	vldr	s14, [r3, #8]
 800754c:	edd3 6a00 	vldr	s13, [r3]
 8007550:	ed93 6a01 	vldr	s12, [r3, #4]
 8007554:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007558:	f102 4280 	add.w	r2, r2, #1073741824	; 0x40000000
 800755c:	3a01      	subs	r2, #1
 800755e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007562:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007566:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 800756a:	d425      	bmi.n	80075b8 <forward_relu+0xc4>
 800756c:	429c      	cmp	r4, r3
 800756e:	d81f      	bhi.n	80075b0 <forward_relu+0xbc>
 8007570:	1d1a      	adds	r2, r3, #4
 8007572:	1d01      	adds	r1, r0, #4
 8007574:	e00d      	b.n	8007592 <forward_relu+0x9e>
 8007576:	eef4 6ae7 	vcmpe.f32	s13, s15
 800757a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800757e:	db03      	blt.n	8007588 <forward_relu+0x94>
 8007580:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007584:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007588:	3b08      	subs	r3, #8
 800758a:	429c      	cmp	r4, r3
 800758c:	ed61 7a01 	vstmdb	r1!, {s15}
 8007590:	d80e      	bhi.n	80075b0 <forward_relu+0xbc>
 8007592:	4613      	mov	r3, r2
 8007594:	ed72 7a01 	vldmdb	r2!, {s15}
 8007598:	eef4 7ac7 	vcmpe.f32	s15, s14
 800759c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075a0:	d9e9      	bls.n	8007576 <forward_relu+0x82>
 80075a2:	3b08      	subs	r3, #8
 80075a4:	eef0 7a47 	vmov.f32	s15, s14
 80075a8:	429c      	cmp	r4, r3
 80075aa:	ed61 7a01 	vstmdb	r1!, {s15}
 80075ae:	d9f0      	bls.n	8007592 <forward_relu+0x9e>
 80075b0:	bc70      	pop	{r4, r5, r6}
 80075b2:	4770      	bx	lr
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	deff      	udf	#255	; 0xff
 80075b8:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80075bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075c0:	d11f      	bne.n	8007602 <forward_relu+0x10e>
 80075c2:	429c      	cmp	r4, r3
 80075c4:	d8f4      	bhi.n	80075b0 <forward_relu+0xbc>
 80075c6:	1b1c      	subs	r4, r3, r4
 80075c8:	f024 0403 	bic.w	r4, r4, #3
 80075cc:	1d1a      	adds	r2, r3, #4
 80075ce:	2500      	movs	r5, #0
 80075d0:	1b1b      	subs	r3, r3, r4
 80075d2:	1d01      	adds	r1, r0, #4
 80075d4:	ed72 7a01 	vldmdb	r2!, {s15}
 80075d8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80075dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075e0:	dc0a      	bgt.n	80075f8 <forward_relu+0x104>
 80075e2:	429a      	cmp	r2, r3
 80075e4:	f841 5d04 	str.w	r5, [r1, #-4]!
 80075e8:	d0e2      	beq.n	80075b0 <forward_relu+0xbc>
 80075ea:	ed72 7a01 	vldmdb	r2!, {s15}
 80075ee:	eef4 7ae6 	vcmpe.f32	s15, s13
 80075f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80075f6:	ddf4      	ble.n	80075e2 <forward_relu+0xee>
 80075f8:	429a      	cmp	r2, r3
 80075fa:	ed61 7a01 	vstmdb	r1!, {s15}
 80075fe:	d1e9      	bne.n	80075d4 <forward_relu+0xe0>
 8007600:	e7d6      	b.n	80075b0 <forward_relu+0xbc>
 8007602:	429c      	cmp	r4, r3
 8007604:	d8d4      	bhi.n	80075b0 <forward_relu+0xbc>
 8007606:	1b1c      	subs	r4, r3, r4
 8007608:	f024 0403 	bic.w	r4, r4, #3
 800760c:	1d1a      	adds	r2, r3, #4
 800760e:	1d01      	adds	r1, r0, #4
 8007610:	1b1b      	subs	r3, r3, r4
 8007612:	ed72 7a01 	vldmdb	r2!, {s15}
 8007616:	eef4 6ae7 	vcmpe.f32	s13, s15
 800761a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800761e:	db0e      	blt.n	800763e <forward_relu+0x14a>
 8007620:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8007624:	4293      	cmp	r3, r2
 8007626:	ee67 7a86 	vmul.f32	s15, s15, s12
 800762a:	ed61 7a01 	vstmdb	r1!, {s15}
 800762e:	d0bf      	beq.n	80075b0 <forward_relu+0xbc>
 8007630:	ed72 7a01 	vldmdb	r2!, {s15}
 8007634:	eef4 6ae7 	vcmpe.f32	s13, s15
 8007638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800763c:	daf0      	bge.n	8007620 <forward_relu+0x12c>
 800763e:	4293      	cmp	r3, r2
 8007640:	ed61 7a01 	vstmdb	r1!, {s15}
 8007644:	d1e5      	bne.n	8007612 <forward_relu+0x11e>
 8007646:	e7b3      	b.n	80075b0 <forward_relu+0xbc>
 8007648:	6893      	ldr	r3, [r2, #8]
 800764a:	6989      	ldr	r1, [r1, #24]
 800764c:	6990      	ldr	r0, [r2, #24]
 800764e:	6889      	ldr	r1, [r1, #8]
 8007650:	6884      	ldr	r4, [r0, #8]
 8007652:	0a1b      	lsrs	r3, r3, #8
 8007654:	d075      	beq.n	8007742 <forward_relu+0x24e>
 8007656:	68d5      	ldr	r5, [r2, #12]
 8007658:	2201      	movs	r2, #1
 800765a:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800765e:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8007662:	429d      	cmp	r5, r3
 8007664:	fb00 f202 	mul.w	r2, r0, r2
 8007668:	d1f9      	bne.n	800765e <forward_relu+0x16a>
 800766a:	f102 4380 	add.w	r3, r2, #1073741824	; 0x40000000
 800766e:	3b01      	subs	r3, #1
 8007670:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8007674:	4294      	cmp	r4, r2
 8007676:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800767a:	d899      	bhi.n	80075b0 <forward_relu+0xbc>
 800767c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007758 <forward_relu+0x264>
 8007680:	3204      	adds	r2, #4
 8007682:	3104      	adds	r1, #4
 8007684:	4613      	mov	r3, r2
 8007686:	ed72 7a01 	vldmdb	r2!, {s15}
 800768a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800768e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007692:	f1a3 0308 	sub.w	r3, r3, #8
 8007696:	bfb8      	it	lt
 8007698:	eef0 7a47 	vmovlt.f32	s15, s14
 800769c:	429c      	cmp	r4, r3
 800769e:	ed61 7a01 	vstmdb	r1!, {s15}
 80076a2:	d9ef      	bls.n	8007684 <forward_relu+0x190>
 80076a4:	bc70      	pop	{r4, r5, r6}
 80076a6:	4770      	bx	lr
 80076a8:	688c      	ldr	r4, [r1, #8]
 80076aa:	6891      	ldr	r1, [r2, #8]
 80076ac:	6880      	ldr	r0, [r0, #8]
 80076ae:	0a09      	lsrs	r1, r1, #8
 80076b0:	d049      	beq.n	8007746 <forward_relu+0x252>
 80076b2:	68d5      	ldr	r5, [r2, #12]
 80076b4:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80076b8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80076bc:	42aa      	cmp	r2, r5
 80076be:	fb01 f303 	mul.w	r3, r1, r3
 80076c2:	d1f9      	bne.n	80076b8 <forward_relu+0x1c4>
 80076c4:	f103 4280 	add.w	r2, r3, #1073741824	; 0x40000000
 80076c8:	3a01      	subs	r2, #1
 80076ca:	68b1      	ldr	r1, [r6, #8]
 80076cc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80076d0:	429c      	cmp	r4, r3
 80076d2:	ed91 7a00 	vldr	s14, [r1]
 80076d6:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 80076da:	f63f af69 	bhi.w	80075b0 <forward_relu+0xbc>
 80076de:	2500      	movs	r5, #0
 80076e0:	3304      	adds	r3, #4
 80076e2:	1d02      	adds	r2, r0, #4
 80076e4:	ed53 7a01 	vldr	s15, [r3, #-4]
 80076e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80076ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80076f0:	f1a3 0104 	sub.w	r1, r3, #4
 80076f4:	f1a3 0308 	sub.w	r3, r3, #8
 80076f8:	d406      	bmi.n	8007708 <forward_relu+0x214>
 80076fa:	429c      	cmp	r4, r3
 80076fc:	f842 5d04 	str.w	r5, [r2, #-4]!
 8007700:	f63f af56 	bhi.w	80075b0 <forward_relu+0xbc>
 8007704:	460b      	mov	r3, r1
 8007706:	e7ed      	b.n	80076e4 <forward_relu+0x1f0>
 8007708:	429c      	cmp	r4, r3
 800770a:	ed62 7a01 	vstmdb	r2!, {s15}
 800770e:	f63f af4f 	bhi.w	80075b0 <forward_relu+0xbc>
 8007712:	460b      	mov	r3, r1
 8007714:	e7e6      	b.n	80076e4 <forward_relu+0x1f0>
 8007716:	68b3      	ldr	r3, [r6, #8]
 8007718:	ed93 7a02 	vldr	s14, [r3, #8]
 800771c:	edd3 6a00 	vldr	s13, [r3]
 8007720:	ed93 6a01 	vldr	s12, [r3, #4]
 8007724:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8007728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800772c:	d401      	bmi.n	8007732 <forward_relu+0x23e>
 800772e:	4623      	mov	r3, r4
 8007730:	e71e      	b.n	8007570 <forward_relu+0x7c>
 8007732:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8007736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800773a:	4623      	mov	r3, r4
 800773c:	f47f af63 	bne.w	8007606 <forward_relu+0x112>
 8007740:	e741      	b.n	80075c6 <forward_relu+0xd2>
 8007742:	4622      	mov	r2, r4
 8007744:	e79a      	b.n	800767c <forward_relu+0x188>
 8007746:	68b2      	ldr	r2, [r6, #8]
 8007748:	4623      	mov	r3, r4
 800774a:	ed92 7a00 	vldr	s14, [r2]
 800774e:	e7c6      	b.n	80076de <forward_relu+0x1ea>
 8007750:	2300      	movs	r3, #0
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	deff      	udf	#255	; 0xff
 8007756:	bf00      	nop
 8007758:	00000000 	.word	0x00000000

0800775c <array_f32_identity>:
 800775c:	6980      	ldr	r0, [r0, #24]
 800775e:	698b      	ldr	r3, [r1, #24]
 8007760:	4298      	cmp	r0, r3
 8007762:	d004      	beq.n	800776e <array_f32_identity+0x12>
 8007764:	68c1      	ldr	r1, [r0, #12]
 8007766:	68d8      	ldr	r0, [r3, #12]
 8007768:	0092      	lsls	r2, r2, #2
 800776a:	f001 bdbb 	b.w	80092e4 <st_int8_copy>
 800776e:	4770      	bx	lr

08007770 <forward_lstm>:
 8007770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007774:	ed2d 8b06 	vpush	{d8-d10}
 8007778:	f5ad 7d03 	sub.w	sp, sp, #524	; 0x20c
 800777c:	6983      	ldr	r3, [r0, #24]
 800777e:	af00      	add	r7, sp, #0
 8007780:	881a      	ldrh	r2, [r3, #0]
 8007782:	60b8      	str	r0, [r7, #8]
 8007784:	2a00      	cmp	r2, #0
 8007786:	f001 842a 	beq.w	8008fde <forward_lstm+0x186e>
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007790:	2a01      	cmp	r2, #1
 8007792:	f001 8424 	beq.w	8008fde <forward_lstm+0x186e>
 8007796:	2a02      	cmp	r2, #2
 8007798:	f001 8421 	beq.w	8008fde <forward_lstm+0x186e>
 800779c:	69d8      	ldr	r0, [r3, #28]
 800779e:	2800      	cmp	r0, #0
 80077a0:	f001 8414 	beq.w	8008fcc <forward_lstm+0x185c>
 80077a4:	8b1b      	ldrh	r3, [r3, #24]
 80077a6:	6801      	ldr	r1, [r0, #0]
 80077a8:	f8c7 10f4 	str.w	r1, [r7, #244]	; 0xf4
 80077ac:	2b01      	cmp	r3, #1
 80077ae:	6883      	ldr	r3, [r0, #8]
 80077b0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80077b4:	bf88      	it	hi
 80077b6:	f8d0 b004 	ldrhi.w	fp, [r0, #4]
 80077ba:	68c3      	ldr	r3, [r0, #12]
 80077bc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80077c0:	bf98      	it	ls
 80077c2:	f04f 0b00 	movls.w	fp, #0
 80077c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077ca:	685b      	ldr	r3, [r3, #4]
 80077cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077ce:	b10b      	cbz	r3, 80077d4 <forward_lstm+0x64>
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80077d4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80077d8:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 80077da:	899b      	ldrh	r3, [r3, #12]
 80077dc:	68cd      	ldr	r5, [r1, #12]
 80077de:	0099      	lsls	r1, r3, #2
 80077e0:	3107      	adds	r1, #7
 80077e2:	08c9      	lsrs	r1, r1, #3
 80077e4:	466c      	mov	r4, sp
 80077e6:	eba4 04c1 	sub.w	r4, r4, r1, lsl #3
 80077ea:	46a5      	mov	sp, r4
 80077ec:	1ddc      	adds	r4, r3, #7
 80077ee:	466e      	mov	r6, sp
 80077f0:	08e4      	lsrs	r4, r4, #3
 80077f2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 80077f6:	46a5      	mov	sp, r4
 80077f8:	68bc      	ldr	r4, [r7, #8]
 80077fa:	f8d4 802c 	ldr.w	r8, [r4, #44]	; 0x2c
 80077fe:	466c      	mov	r4, sp
 8007800:	eba4 0cc1 	sub.w	ip, r4, r1, lsl #3
 8007804:	46e5      	mov	sp, ip
 8007806:	ebac 01c1 	sub.w	r1, ip, r1, lsl #3
 800780a:	f8c7 d010 	str.w	sp, [r7, #16]
 800780e:	468d      	mov	sp, r1
 8007810:	68e9      	ldr	r1, [r5, #12]
 8007812:	65b9      	str	r1, [r7, #88]	; 0x58
 8007814:	6869      	ldr	r1, [r5, #4]
 8007816:	6779      	str	r1, [r7, #116]	; 0x74
 8007818:	ea4f 0188 	mov.w	r1, r8, lsl #2
 800781c:	ee09 1a10 	vmov	s18, r1
 8007820:	46ee      	mov	lr, sp
 8007822:	2800      	cmp	r0, #0
 8007824:	f001 83c9 	beq.w	8008fba <forward_lstm+0x184a>
 8007828:	6945      	ldr	r5, [r0, #20]
 800782a:	6901      	ldr	r1, [r0, #16]
 800782c:	ee09 5a90 	vmov	s19, r5
 8007830:	6985      	ldr	r5, [r0, #24]
 8007832:	ee0a 1a90 	vmov	s21, r1
 8007836:	e9d0 9007 	ldrd	r9, r0, [r0, #28]
 800783a:	ee0a 5a10 	vmov	s20, r5
 800783e:	b119      	cbz	r1, 8007848 <forward_lstm+0xd8>
 8007840:	6989      	ldr	r1, [r1, #24]
 8007842:	6889      	ldr	r1, [r1, #8]
 8007844:	ee0a 1a90 	vmov	s21, r1
 8007848:	ee19 1a90 	vmov	r1, s19
 800784c:	b119      	cbz	r1, 8007856 <forward_lstm+0xe6>
 800784e:	6989      	ldr	r1, [r1, #24]
 8007850:	6889      	ldr	r1, [r1, #8]
 8007852:	ee09 1a90 	vmov	s19, r1
 8007856:	ee1a 1a10 	vmov	r1, s20
 800785a:	b119      	cbz	r1, 8007864 <forward_lstm+0xf4>
 800785c:	6989      	ldr	r1, [r1, #24]
 800785e:	6889      	ldr	r1, [r1, #8]
 8007860:	ee0a 1a10 	vmov	s20, r1
 8007864:	f1b9 0f00 	cmp.w	r9, #0
 8007868:	d003      	beq.n	8007872 <forward_lstm+0x102>
 800786a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 800786e:	f8d1 9008 	ldr.w	r9, [r1, #8]
 8007872:	b108      	cbz	r0, 8007878 <forward_lstm+0x108>
 8007874:	6981      	ldr	r1, [r0, #24]
 8007876:	6888      	ldr	r0, [r1, #8]
 8007878:	2a03      	cmp	r2, #3
 800787a:	f001 83b0 	beq.w	8008fde <forward_lstm+0x186e>
 800787e:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8007882:	f8d2 a028 	ldr.w	sl, [r2, #40]	; 0x28
 8007886:	f1ba 0f00 	cmp.w	sl, #0
 800788a:	d001      	beq.n	8007890 <forward_lstm+0x120>
 800788c:	f8da a000 	ldr.w	sl, [sl]
 8007890:	693a      	ldr	r2, [r7, #16]
 8007892:	f8c7 90fc 	str.w	r9, [r7, #252]	; 0xfc
 8007896:	4423      	add	r3, r4
 8007898:	4621      	mov	r1, r4
 800789a:	f1ae 0404 	sub.w	r4, lr, #4
 800789e:	f8d7 c090 	ldr.w	ip, [r7, #144]	; 0x90
 80078a2:	60fc      	str	r4, [r7, #12]
 80078a4:	3e04      	subs	r6, #4
 80078a6:	f1ce 0e04 	rsb	lr, lr, #4
 80078aa:	1f15      	subs	r5, r2, #4
 80078ac:	4699      	mov	r9, r3
 80078ae:	e016      	b.n	80078de <forward_lstm+0x16e>
 80078b0:	4423      	add	r3, r4
 80078b2:	f853 200e 	ldr.w	r2, [r3, lr]
 80078b6:	b1c2      	cbz	r2, 80078ea <forward_lstm+0x17a>
 80078b8:	68d3      	ldr	r3, [r2, #12]
 80078ba:	f846 2f04 	str.w	r2, [r6, #4]!
 80078be:	68db      	ldr	r3, [r3, #12]
 80078c0:	6992      	ldr	r2, [r2, #24]
 80078c2:	2b01      	cmp	r3, #1
 80078c4:	6893      	ldr	r3, [r2, #8]
 80078c6:	f845 3f04 	str.w	r3, [r5, #4]!
 80078ca:	bf8c      	ite	hi
 80078cc:	2301      	movhi	r3, #1
 80078ce:	2300      	movls	r3, #0
 80078d0:	f801 3b01 	strb.w	r3, [r1], #1
 80078d4:	bf8c      	ite	hi
 80078d6:	4643      	movhi	r3, r8
 80078d8:	2300      	movls	r3, #0
 80078da:	f844 3f04 	str.w	r3, [r4, #4]!
 80078de:	4549      	cmp	r1, r9
 80078e0:	d003      	beq.n	80078ea <forward_lstm+0x17a>
 80078e2:	f8dc 3010 	ldr.w	r3, [ip, #16]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d1e2      	bne.n	80078b0 <forward_lstm+0x140>
 80078ea:	f8da 3018 	ldr.w	r3, [sl, #24]
 80078ee:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 80078f2:	689d      	ldr	r5, [r3, #8]
 80078f4:	f8d7 40f8 	ldr.w	r4, [r7, #248]	; 0xf8
 80078f8:	f8db 3018 	ldr.w	r3, [fp, #24]
 80078fc:	6989      	ldr	r1, [r1, #24]
 80078fe:	69a4      	ldr	r4, [r4, #24]
 8007900:	689b      	ldr	r3, [r3, #8]
 8007902:	667b      	str	r3, [r7, #100]	; 0x64
 8007904:	688b      	ldr	r3, [r1, #8]
 8007906:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800790a:	64bb      	str	r3, [r7, #72]	; 0x48
 800790c:	68a3      	ldr	r3, [r4, #8]
 800790e:	663b      	str	r3, [r7, #96]	; 0x60
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	6992      	ldr	r2, [r2, #24]
 8007914:	685b      	ldr	r3, [r3, #4]
 8007916:	6892      	ldr	r2, [r2, #8]
 8007918:	66ba      	str	r2, [r7, #104]	; 0x68
 800791a:	ee19 1a10 	vmov	r1, s18
 800791e:	eb05 0441 	add.w	r4, r5, r1, lsl #1
 8007922:	186a      	adds	r2, r5, r1
 8007924:	f013 7380 	ands.w	r3, r3, #16777216	; 0x1000000
 8007928:	4421      	add	r1, r4
 800792a:	f8d7 90fc 	ldr.w	r9, [r7, #252]	; 0xfc
 800792e:	673d      	str	r5, [r7, #112]	; 0x70
 8007930:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8007934:	f8c7 4094 	str.w	r4, [r7, #148]	; 0x94
 8007938:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800793c:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8007940:	607b      	str	r3, [r7, #4]
 8007942:	f041 8264 	bne.w	8008e0e <forward_lstm+0x169e>
 8007946:	4629      	mov	r1, r5
 8007948:	2800      	cmp	r0, #0
 800794a:	f001 826e 	beq.w	8008e2a <forward_lstm+0x16ba>
 800794e:	ee19 2a10 	vmov	r2, s18
 8007952:	f001 fcc7 	bl	80092e4 <st_int8_copy>
 8007956:	ee19 2a10 	vmov	r2, s18
 800795a:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 800795e:	4648      	mov	r0, r9
 8007960:	f1b9 0f00 	cmp.w	r9, #0
 8007964:	f001 826f 	beq.w	8008e46 <forward_lstm+0x16d6>
 8007968:	f001 fcbc 	bl	80092e4 <st_int8_copy>
 800796c:	ee19 2a10 	vmov	r2, s18
 8007970:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8007974:	2000      	movs	r0, #0
 8007976:	f001 fc59 	bl	800922c <st_int8_fill>
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	4bab      	ldr	r3, [pc, #684]	; (8007c2c <forward_lstm+0x4bc>)
 800797e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8007980:	edd2 8a10 	vldr	s17, [r2, #64]	; 0x40
 8007984:	2900      	cmp	r1, #0
 8007986:	bf08      	it	eq
 8007988:	4619      	moveq	r1, r3
 800798a:	6479      	str	r1, [r7, #68]	; 0x44
 800798c:	6b51      	ldr	r1, [r2, #52]	; 0x34
 800798e:	2900      	cmp	r1, #0
 8007990:	bf08      	it	eq
 8007992:	4619      	moveq	r1, r3
 8007994:	67f9      	str	r1, [r7, #124]	; 0x7c
 8007996:	6b91      	ldr	r1, [r2, #56]	; 0x38
 8007998:	2900      	cmp	r1, #0
 800799a:	bf08      	it	eq
 800799c:	4619      	moveq	r1, r3
 800799e:	f892 303c 	ldrb.w	r3, [r2, #60]	; 0x3c
 80079a2:	6439      	str	r1, [r7, #64]	; 0x40
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	f001 8301 	beq.w	8008fac <forward_lstm+0x183c>
 80079aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ac:	3b01      	subs	r3, #1
 80079ae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80079b2:	f04f 33ff 	mov.w	r3, #4294967295
 80079b6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079b8:	4613      	mov	r3, r2
 80079ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079be:	b1b3      	cbz	r3, 80079ee <forward_lstm+0x27e>
 80079c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80079c4:	899d      	ldrh	r5, [r3, #12]
 80079c6:	b195      	cbz	r5, 80079ee <forward_lstm+0x27e>
 80079c8:	693a      	ldr	r2, [r7, #16]
 80079ca:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079cc:	68f8      	ldr	r0, [r7, #12]
 80079ce:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80079d2:	1e5e      	subs	r6, r3, #1
 80079d4:	f850 3f04 	ldr.w	r3, [r0, #4]!
 80079d8:	6811      	ldr	r1, [r2, #0]
 80079da:	fb03 f406 	mul.w	r4, r3, r6
 80079de:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80079e2:	f842 1b04 	str.w	r1, [r2], #4
 80079e6:	425b      	negs	r3, r3
 80079e8:	4295      	cmp	r5, r2
 80079ea:	6003      	str	r3, [r0, #0]
 80079ec:	d1f2      	bne.n	80079d4 <forward_lstm+0x264>
 80079ee:	6f7d      	ldr	r5, [r7, #116]	; 0x74
 80079f0:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80079f2:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 80079f6:	ed9f 8a8f 	vldr	s16, [pc, #572]	; 8007c34 <forward_lstm+0x4c4>
 80079fa:	b2a9      	uxth	r1, r5
 80079fc:	fa1f f288 	uxth.w	r2, r8
 8007a00:	f1a1 0310 	sub.w	r3, r1, #16
 8007a04:	0096      	lsls	r6, r2, #2
 8007a06:	091b      	lsrs	r3, r3, #4
 8007a08:	f8c7 10dc 	str.w	r1, [r7, #220]	; 0xdc
 8007a0c:	3301      	adds	r3, #1
 8007a0e:	fb06 f101 	mul.w	r1, r6, r1
 8007a12:	eb04 0c41 	add.w	ip, r4, r1, lsl #1
 8007a16:	019b      	lsls	r3, r3, #6
 8007a18:	6e7c      	ldr	r4, [r7, #100]	; 0x64
 8007a1a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007a1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007a22:	f1a2 0310 	sub.w	r3, r2, #16
 8007a26:	fb02 f202 	mul.w	r2, r2, r2
 8007a2a:	f8c7 c054 	str.w	ip, [r7, #84]	; 0x54
 8007a2e:	eb04 0cc2 	add.w	ip, r4, r2, lsl #3
 8007a32:	6e3c      	ldr	r4, [r7, #96]	; 0x60
 8007a34:	f8c7 c050 	str.w	ip, [r7, #80]	; 0x50
 8007a38:	091b      	lsrs	r3, r3, #4
 8007a3a:	eb04 0c46 	add.w	ip, r4, r6, lsl #1
 8007a3e:	1c5c      	adds	r4, r3, #1
 8007a40:	019b      	lsls	r3, r3, #6
 8007a42:	623b      	str	r3, [r7, #32]
 8007a44:	01a3      	lsls	r3, r4, #6
 8007a46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8007a4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007a4c:	f8c7 60b0 	str.w	r6, [r7, #176]	; 0xb0
 8007a50:	440b      	add	r3, r1
 8007a52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a56:	f8d7 4080 	ldr.w	r4, [r7, #128]	; 0x80
 8007a5a:	f8c7 c04c 	str.w	ip, [r7, #76]	; 0x4c
 8007a5e:	440b      	add	r3, r1
 8007a60:	63bb      	str	r3, [r7, #56]	; 0x38
 8007a62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a64:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007a68:	637b      	str	r3, [r7, #52]	; 0x34
 8007a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a6c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8007a70:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007a72:	633b      	str	r3, [r7, #48]	; 0x30
 8007a74:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8007a78:	4633      	mov	r3, r6
 8007a7a:	1996      	adds	r6, r2, r6
 8007a7c:	62fe      	str	r6, [r7, #44]	; 0x2c
 8007a7e:	6e3e      	ldr	r6, [r7, #96]	; 0x60
 8007a80:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
 8007a84:	441e      	add	r6, r3
 8007a86:	62be      	str	r6, [r7, #40]	; 0x28
 8007a88:	18e6      	adds	r6, r4, r3
 8007a8a:	6f7c      	ldr	r4, [r7, #116]	; 0x74
 8007a8c:	f8c7 60a4 	str.w	r6, [r7, #164]	; 0xa4
 8007a90:	f64f 70f0 	movw	r0, #65520	; 0xfff0
 8007a94:	ea04 0600 	and.w	r6, r4, r0
 8007a98:	f8c7 60f4 	str.w	r6, [r7, #244]	; 0xf4
 8007a9c:	ea08 0600 	and.w	r6, r8, r0
 8007aa0:	f8c7 60f8 	str.w	r6, [r7, #248]	; 0xf8
 8007aa4:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007aa8:	0089      	lsls	r1, r1, #2
 8007aaa:	f8c7 10b4 	str.w	r1, [r7, #180]	; 0xb4
 8007aae:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8007ab0:	00ad      	lsls	r5, r5, #2
 8007ab2:	fb05 f101 	mul.w	r1, r5, r1
 8007ab6:	61b9      	str	r1, [r7, #24]
 8007ab8:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8007abc:	fb05 f501 	mul.w	r5, r5, r1
 8007ac0:	f8c7 5088 	str.w	r5, [r7, #136]	; 0x88
 8007ac4:	4661      	mov	r1, ip
 8007ac6:	eb02 0543 	add.w	r5, r2, r3, lsl #1
 8007aca:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8007ace:	61fd      	str	r5, [r7, #28]
 8007ad0:	4419      	add	r1, r3
 8007ad2:	6279      	str	r1, [r7, #36]	; 0x24
 8007ad4:	18d1      	adds	r1, r2, r3
 8007ad6:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8007ada:	f008 060f 	and.w	r6, r8, #15
 8007ade:	f8c7 1084 	str.w	r1, [r7, #132]	; 0x84
 8007ae2:	617b      	str	r3, [r7, #20]
 8007ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ae8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007aea:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8007aee:	f8d7 40a4 	ldr.w	r4, [r7, #164]	; 0xa4
 8007af2:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8007af6:	4413      	add	r3, r2
 8007af8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8007afc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007b00:	4b4b      	ldr	r3, [pc, #300]	; (8007c30 <forward_lstm+0x4c0>)
 8007b02:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8007b06:	e9c7 3244 	strd	r3, r2, [r7, #272]	; 0x110
 8007b0a:	e9c7 3248 	strd	r3, r2, [r7, #288]	; 0x120
 8007b0e:	e9c7 324c 	strd	r3, r2, [r7, #304]	; 0x130
 8007b12:	e9c7 3250 	strd	r3, r2, [r7, #320]	; 0x140
 8007b16:	e9c7 3254 	strd	r3, r2, [r7, #336]	; 0x150
 8007b1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b1c:	f8c7 2104 	str.w	r2, [r7, #260]	; 0x104
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
 8007b28:	4403      	add	r3, r0
 8007b2a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007b2e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8007b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007b36:	f8c7 110c 	str.w	r1, [r7, #268]	; 0x10c
 8007b3a:	e9c7 4446 	strd	r4, r4, [r7, #280]	; 0x118
 8007b3e:	e9c7 334a 	strd	r3, r3, [r7, #296]	; 0x128
 8007b42:	e9c7 004e 	strd	r0, r0, [r7, #312]	; 0x138
 8007b46:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8007b4a:	6f3d      	ldr	r5, [r7, #112]	; 0x70
 8007b4c:	e9c7 0052 	strd	r0, r0, [r7, #328]	; 0x148
 8007b50:	f507 7080 	add.w	r0, r7, #256	; 0x100
 8007b54:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
 8007b58:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8007b5c:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194
 8007b60:	f507 7090 	add.w	r0, r7, #288	; 0x120
 8007b64:	f8c7 01b0 	str.w	r0, [r7, #432]	; 0x1b0
 8007b68:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8007b6c:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
 8007b70:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 8007b74:	f8c7 01e8 	str.w	r0, [r7, #488]	; 0x1e8
 8007b78:	f507 70a8 	add.w	r0, r7, #336	; 0x150
 8007b7c:	e9c7 5556 	strd	r5, r5, [r7, #344]	; 0x158
 8007b80:	f8c7 0204 	str.w	r0, [r7, #516]	; 0x204
 8007b84:	2a00      	cmp	r2, #0
 8007b86:	f001 81a2 	beq.w	8008ece <forward_lstm+0x175e>
 8007b8a:	6a38      	ldr	r0, [r7, #32]
 8007b8c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007b90:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007b94:	46a9      	mov	r9, r5
 8007b96:	6abd      	ldr	r5, [r7, #40]	; 0x28
 8007b98:	f8c7 50c0 	str.w	r5, [r7, #192]	; 0xc0
 8007b9c:	3080      	adds	r0, #128	; 0x80
 8007b9e:	6cbd      	ldr	r5, [r7, #72]	; 0x48
 8007ba0:	f8c7 50c4 	str.w	r5, [r7, #196]	; 0xc4
 8007ba4:	4410      	add	r0, r2
 8007ba6:	6e3d      	ldr	r5, [r7, #96]	; 0x60
 8007ba8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007baa:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8007bae:	f8c7 50c8 	str.w	r5, [r7, #200]	; 0xc8
 8007bb2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007bb6:	f8d7 50d8 	ldr.w	r5, [r7, #216]	; 0xd8
 8007bba:	f8c7 9078 	str.w	r9, [r7, #120]	; 0x78
 8007bbe:	1955      	adds	r5, r2, r5
 8007bc0:	469e      	mov	lr, r3
 8007bc2:	e9d7 b314 	ldrd	fp, r3, [r7, #80]	; 0x50
 8007bc6:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8007bca:	f8c7 509c 	str.w	r5, [r7, #156]	; 0x9c
 8007bce:	f8d7 50d4 	ldr.w	r5, [r7, #212]	; 0xd4
 8007bd2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007bd6:	442a      	add	r2, r5
 8007bd8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bda:	f8c7 20d0 	str.w	r2, [r7, #208]	; 0xd0
 8007bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007be2:	69fa      	ldr	r2, [r7, #28]
 8007be4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007be6:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007bea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8007bee:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007bf0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007bf2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8007bf6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007bf8:	f002 020f 	and.w	r2, r2, #15
 8007bfc:	46a0      	mov	r8, r4
 8007bfe:	468c      	mov	ip, r1
 8007c00:	f8c7 2098 	str.w	r2, [r7, #152]	; 0x98
 8007c04:	469a      	mov	sl, r3
 8007c06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c0a:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8007c34 <forward_lstm+0x4c4>
 8007c0e:	ecac 8a01 	vstmia	ip!, {s16}
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	f001 8154 	beq.w	8008ec0 <forward_lstm+0x1750>
 8007c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c1c:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 8007c20:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8007c24:	f10a 0340 	add.w	r3, sl, #64	; 0x40
 8007c28:	e006      	b.n	8007c38 <forward_lstm+0x4c8>
 8007c2a:	bf00      	nop
 8007c2c:	0800775d 	.word	0x0800775d
 8007c30:	01821040 	.word	0x01821040
 8007c34:	00000000 	.word	0x00000000
 8007c38:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8007c3c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8007c40:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007c44:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8007c48:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8007c4c:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8007c50:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007c54:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8007c58:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8007c5c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007c60:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8007c64:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007c68:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8007c6c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8007c70:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8007c74:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007c78:	3910      	subs	r1, #16
 8007c7a:	290f      	cmp	r1, #15
 8007c7c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8007c80:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8007c84:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007c88:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8007c8c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8007c90:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 8007c94:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007c98:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8007c9c:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 8007ca0:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 8007ca4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007ca8:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007cac:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 8007cb0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007cb4:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007cb8:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 8007cbc:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007cc0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007cc4:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 8007cc8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007ccc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007cd0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8007cd4:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007cd8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007cdc:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 8007ce0:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ce4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007ce8:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8007cec:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007cf0:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007cf4:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007cf8:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007cfc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007d00:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007d04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007d08:	d896      	bhi.n	8007c38 <forward_lstm+0x4c8>
 8007d0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007d0e:	e9d7 5426 	ldrd	r5, r4, [r7, #152]	; 0x98
 8007d12:	4453      	add	r3, sl
 8007d14:	2d00      	cmp	r5, #0
 8007d16:	d076      	beq.n	8007e06 <forward_lstm+0x696>
 8007d18:	edd4 6a00 	vldr	s13, [r4]
 8007d1c:	edd3 7a00 	vldr	s15, [r3]
 8007d20:	2d01      	cmp	r5, #1
 8007d22:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d26:	d06e      	beq.n	8007e06 <forward_lstm+0x696>
 8007d28:	edd3 6a01 	vldr	s13, [r3, #4]
 8007d2c:	edd4 7a01 	vldr	s15, [r4, #4]
 8007d30:	2d02      	cmp	r5, #2
 8007d32:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d36:	d066      	beq.n	8007e06 <forward_lstm+0x696>
 8007d38:	edd3 6a02 	vldr	s13, [r3, #8]
 8007d3c:	edd4 7a02 	vldr	s15, [r4, #8]
 8007d40:	2d03      	cmp	r5, #3
 8007d42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d46:	d05e      	beq.n	8007e06 <forward_lstm+0x696>
 8007d48:	edd3 6a03 	vldr	s13, [r3, #12]
 8007d4c:	edd4 7a03 	vldr	s15, [r4, #12]
 8007d50:	2d04      	cmp	r5, #4
 8007d52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d56:	d056      	beq.n	8007e06 <forward_lstm+0x696>
 8007d58:	edd3 6a04 	vldr	s13, [r3, #16]
 8007d5c:	edd4 7a04 	vldr	s15, [r4, #16]
 8007d60:	2d05      	cmp	r5, #5
 8007d62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d66:	d04e      	beq.n	8007e06 <forward_lstm+0x696>
 8007d68:	edd3 6a05 	vldr	s13, [r3, #20]
 8007d6c:	edd4 7a05 	vldr	s15, [r4, #20]
 8007d70:	2d06      	cmp	r5, #6
 8007d72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d76:	d046      	beq.n	8007e06 <forward_lstm+0x696>
 8007d78:	edd3 6a06 	vldr	s13, [r3, #24]
 8007d7c:	edd4 7a06 	vldr	s15, [r4, #24]
 8007d80:	2d07      	cmp	r5, #7
 8007d82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d86:	d03e      	beq.n	8007e06 <forward_lstm+0x696>
 8007d88:	edd3 6a07 	vldr	s13, [r3, #28]
 8007d8c:	edd4 7a07 	vldr	s15, [r4, #28]
 8007d90:	2d08      	cmp	r5, #8
 8007d92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d96:	d036      	beq.n	8007e06 <forward_lstm+0x696>
 8007d98:	edd3 6a08 	vldr	s13, [r3, #32]
 8007d9c:	edd4 7a08 	vldr	s15, [r4, #32]
 8007da0:	2d09      	cmp	r5, #9
 8007da2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007da6:	d02e      	beq.n	8007e06 <forward_lstm+0x696>
 8007da8:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8007dac:	edd4 7a09 	vldr	s15, [r4, #36]	; 0x24
 8007db0:	2d0a      	cmp	r5, #10
 8007db2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007db6:	d026      	beq.n	8007e06 <forward_lstm+0x696>
 8007db8:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8007dbc:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
 8007dc0:	2d0b      	cmp	r5, #11
 8007dc2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dc6:	d01e      	beq.n	8007e06 <forward_lstm+0x696>
 8007dc8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8007dcc:	edd4 7a0b 	vldr	s15, [r4, #44]	; 0x2c
 8007dd0:	2d0c      	cmp	r5, #12
 8007dd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dd6:	d016      	beq.n	8007e06 <forward_lstm+0x696>
 8007dd8:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 8007ddc:	edd4 7a0c 	vldr	s15, [r4, #48]	; 0x30
 8007de0:	f1b5 020d 	subs.w	r2, r5, #13
 8007de4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007de8:	d00d      	beq.n	8007e06 <forward_lstm+0x696>
 8007dea:	edd3 6a0d 	vldr	s13, [r3, #52]	; 0x34
 8007dee:	edd4 7a0d 	vldr	s15, [r4, #52]	; 0x34
 8007df2:	2a01      	cmp	r2, #1
 8007df4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007df8:	d005      	beq.n	8007e06 <forward_lstm+0x696>
 8007dfa:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8007dfe:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8007e02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007e06:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007e0a:	ed5f 6a76 	vldr	s13, [pc, #-472]	; 8007c34 <forward_lstm+0x4c4>
 8007e0e:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	f001 804c 	beq.w	8008eb0 <forward_lstm+0x1740>
 8007e18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e1c:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8007e20:	3340      	adds	r3, #64	; 0x40
 8007e22:	3240      	adds	r2, #64	; 0x40
 8007e24:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8007e28:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8007e2c:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8007e30:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8007e34:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8007e38:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8007e3c:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8007e40:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8007e44:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8007e48:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8007e4c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8007e50:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8007e54:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8007e58:	ee67 7a85 	vmul.f32	s15, s15, s10
 8007e5c:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8007e60:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e64:	3340      	adds	r3, #64	; 0x40
 8007e66:	3240      	adds	r2, #64	; 0x40
 8007e68:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8007e6c:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8007e70:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007e74:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8007e78:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 8007e7c:	eee4 7a06 	vfma.f32	s15, s8, s12
 8007e80:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8007e84:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8007e88:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007e8c:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 8007e90:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 8007e94:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007e98:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 8007e9c:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 8007ea0:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007ea4:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 8007ea8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8007eac:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007eb0:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 8007eb4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8007eb8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ebc:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 8007ec0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8007ec4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007ec8:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 8007ecc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8007ed0:	eee0 7a81 	vfma.f32	s15, s1, s2
 8007ed4:	4298      	cmp	r0, r3
 8007ed6:	eee1 7a82 	vfma.f32	s15, s3, s4
 8007eda:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007ede:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007ee2:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007ee6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007eea:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8007eee:	d199      	bne.n	8007e24 <forward_lstm+0x6b4>
 8007ef0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8007ef4:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8007ef8:	189a      	adds	r2, r3, r2
 8007efa:	2e00      	cmp	r6, #0
 8007efc:	d078      	beq.n	8007ff0 <forward_lstm+0x880>
 8007efe:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8007f02:	4633      	mov	r3, r6
 8007f04:	ed91 6a00 	vldr	s12, [r1]
 8007f08:	edd2 7a00 	vldr	s15, [r2]
 8007f0c:	2b01      	cmp	r3, #1
 8007f0e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f12:	d06d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f14:	ed91 6a01 	vldr	s12, [r1, #4]
 8007f18:	edd2 7a01 	vldr	s15, [r2, #4]
 8007f1c:	2b02      	cmp	r3, #2
 8007f1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f22:	d065      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f24:	ed91 6a02 	vldr	s12, [r1, #8]
 8007f28:	edd2 7a02 	vldr	s15, [r2, #8]
 8007f2c:	2b03      	cmp	r3, #3
 8007f2e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f32:	d05d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f34:	ed91 6a03 	vldr	s12, [r1, #12]
 8007f38:	edd2 7a03 	vldr	s15, [r2, #12]
 8007f3c:	2b04      	cmp	r3, #4
 8007f3e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f42:	d055      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f44:	ed91 6a04 	vldr	s12, [r1, #16]
 8007f48:	edd2 7a04 	vldr	s15, [r2, #16]
 8007f4c:	2b05      	cmp	r3, #5
 8007f4e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f52:	d04d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f54:	ed91 6a05 	vldr	s12, [r1, #20]
 8007f58:	edd2 7a05 	vldr	s15, [r2, #20]
 8007f5c:	2b06      	cmp	r3, #6
 8007f5e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f62:	d045      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f64:	ed91 6a06 	vldr	s12, [r1, #24]
 8007f68:	edd2 7a06 	vldr	s15, [r2, #24]
 8007f6c:	2b07      	cmp	r3, #7
 8007f6e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f72:	d03d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f74:	ed91 6a07 	vldr	s12, [r1, #28]
 8007f78:	edd2 7a07 	vldr	s15, [r2, #28]
 8007f7c:	2b08      	cmp	r3, #8
 8007f7e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f82:	d035      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f84:	ed91 6a08 	vldr	s12, [r1, #32]
 8007f88:	edd2 7a08 	vldr	s15, [r2, #32]
 8007f8c:	2b09      	cmp	r3, #9
 8007f8e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007f92:	d02d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007f94:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 8007f98:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8007f9c:	2b0a      	cmp	r3, #10
 8007f9e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fa2:	d025      	beq.n	8007ff0 <forward_lstm+0x880>
 8007fa4:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 8007fa8:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8007fac:	2b0b      	cmp	r3, #11
 8007fae:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fb2:	d01d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007fb4:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 8007fb8:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8007fbc:	2b0c      	cmp	r3, #12
 8007fbe:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fc2:	d015      	beq.n	8007ff0 <forward_lstm+0x880>
 8007fc4:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 8007fc8:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8007fcc:	3b0d      	subs	r3, #13
 8007fce:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fd2:	d00d      	beq.n	8007ff0 <forward_lstm+0x880>
 8007fd4:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8007fd8:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8007fdc:	2b01      	cmp	r3, #1
 8007fde:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007fe2:	d005      	beq.n	8007ff0 <forward_lstm+0x880>
 8007fe4:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8007fe8:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8007fec:	eee6 6a27 	vfma.f32	s13, s12, s15
 8007ff0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007ff4:	f8c7 90ac 	str.w	r9, [r7, #172]	; 0xac
 8007ff8:	ee37 7a26 	vadd.f32	s14, s14, s13
 8007ffc:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8008000:	ecb3 6a01 	vldmia	r3!, {s12}
 8008004:	edd9 6a00 	vldr	s13, [r9]
 8008008:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800800c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8008010:	ecf3 7a01 	vldmia	r3!, {s15}
 8008014:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008018:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800801c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008020:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008024:	ed0c 7a01 	vstr	s14, [ip, #-4]
 8008028:	ed9f 7abb 	vldr	s14, [pc, #748]	; 8008318 <forward_lstm+0xba8>
 800802c:	ed88 8a00 	vstr	s16, [r8]
 8008030:	2b00      	cmp	r3, #0
 8008032:	f000 8739 	beq.w	8008ea8 <forward_lstm+0x1738>
 8008036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800803a:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800803e:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008042:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008046:	3340      	adds	r3, #64	; 0x40
 8008048:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 800804c:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008050:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008054:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8008058:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 800805c:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8008060:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008064:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008068:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 800806c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008070:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008074:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008078:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 800807c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008080:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008084:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008088:	3910      	subs	r1, #16
 800808a:	290f      	cmp	r1, #15
 800808c:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8008090:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 8008094:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008098:	f102 0240 	add.w	r2, r2, #64	; 0x40
 800809c:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80080a0:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80080a4:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80080a8:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80080ac:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80080b0:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80080b4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80080b8:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80080bc:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80080c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080c4:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80080c8:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80080cc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80080d0:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80080d4:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80080d8:	eee4 7a24 	vfma.f32	s15, s8, s9
 80080dc:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80080e0:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80080e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80080e8:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80080ec:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80080f0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080f4:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80080f8:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 80080fc:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008100:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008104:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008108:	eee4 7a24 	vfma.f32	s15, s8, s9
 800810c:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008110:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008114:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008118:	d896      	bhi.n	8008048 <forward_lstm+0x8d8>
 800811a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800811e:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8008122:	4413      	add	r3, r2
 8008124:	2d00      	cmp	r5, #0
 8008126:	d076      	beq.n	8008216 <forward_lstm+0xaa6>
 8008128:	edd4 6a00 	vldr	s13, [r4]
 800812c:	edd3 7a00 	vldr	s15, [r3]
 8008130:	2d01      	cmp	r5, #1
 8008132:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008136:	d06e      	beq.n	8008216 <forward_lstm+0xaa6>
 8008138:	edd4 6a01 	vldr	s13, [r4, #4]
 800813c:	edd3 7a01 	vldr	s15, [r3, #4]
 8008140:	2d02      	cmp	r5, #2
 8008142:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008146:	d066      	beq.n	8008216 <forward_lstm+0xaa6>
 8008148:	edd4 6a02 	vldr	s13, [r4, #8]
 800814c:	edd3 7a02 	vldr	s15, [r3, #8]
 8008150:	2d03      	cmp	r5, #3
 8008152:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008156:	d05e      	beq.n	8008216 <forward_lstm+0xaa6>
 8008158:	edd4 6a03 	vldr	s13, [r4, #12]
 800815c:	edd3 7a03 	vldr	s15, [r3, #12]
 8008160:	2d04      	cmp	r5, #4
 8008162:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008166:	d056      	beq.n	8008216 <forward_lstm+0xaa6>
 8008168:	edd4 6a04 	vldr	s13, [r4, #16]
 800816c:	edd3 7a04 	vldr	s15, [r3, #16]
 8008170:	2d05      	cmp	r5, #5
 8008172:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008176:	d04e      	beq.n	8008216 <forward_lstm+0xaa6>
 8008178:	edd4 6a05 	vldr	s13, [r4, #20]
 800817c:	edd3 7a05 	vldr	s15, [r3, #20]
 8008180:	2d06      	cmp	r5, #6
 8008182:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008186:	d046      	beq.n	8008216 <forward_lstm+0xaa6>
 8008188:	edd4 6a06 	vldr	s13, [r4, #24]
 800818c:	edd3 7a06 	vldr	s15, [r3, #24]
 8008190:	2d07      	cmp	r5, #7
 8008192:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008196:	d03e      	beq.n	8008216 <forward_lstm+0xaa6>
 8008198:	edd4 6a07 	vldr	s13, [r4, #28]
 800819c:	edd3 7a07 	vldr	s15, [r3, #28]
 80081a0:	2d08      	cmp	r5, #8
 80081a2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081a6:	d036      	beq.n	8008216 <forward_lstm+0xaa6>
 80081a8:	edd4 6a08 	vldr	s13, [r4, #32]
 80081ac:	edd3 7a08 	vldr	s15, [r3, #32]
 80081b0:	2d09      	cmp	r5, #9
 80081b2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081b6:	d02e      	beq.n	8008216 <forward_lstm+0xaa6>
 80081b8:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80081bc:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80081c0:	2d0a      	cmp	r5, #10
 80081c2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081c6:	d026      	beq.n	8008216 <forward_lstm+0xaa6>
 80081c8:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80081cc:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80081d0:	2d0b      	cmp	r5, #11
 80081d2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081d6:	d01e      	beq.n	8008216 <forward_lstm+0xaa6>
 80081d8:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80081dc:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80081e0:	2d0c      	cmp	r5, #12
 80081e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081e6:	d016      	beq.n	8008216 <forward_lstm+0xaa6>
 80081e8:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 80081ec:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 80081f0:	f1b5 020d 	subs.w	r2, r5, #13
 80081f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80081f8:	d00d      	beq.n	8008216 <forward_lstm+0xaa6>
 80081fa:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 80081fe:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008202:	2a01      	cmp	r2, #1
 8008204:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008208:	d005      	beq.n	8008216 <forward_lstm+0xaa6>
 800820a:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800820e:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8008212:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008216:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800821a:	eddf 6a3f 	vldr	s13, [pc, #252]	; 8008318 <forward_lstm+0xba8>
 800821e:	ed88 7a00 	vstr	s14, [r8]
 8008222:	2b00      	cmp	r3, #0
 8008224:	f000 8638 	beq.w	8008e98 <forward_lstm+0x1728>
 8008228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800822c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008230:	3340      	adds	r3, #64	; 0x40
 8008232:	3240      	adds	r2, #64	; 0x40
 8008234:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8008238:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 800823c:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 8008240:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008244:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8008248:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 800824c:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 8008250:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008254:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8008258:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 800825c:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008260:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 8008264:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008268:	ee67 7a85 	vmul.f32	s15, s15, s10
 800826c:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 8008270:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008274:	3340      	adds	r3, #64	; 0x40
 8008276:	3240      	adds	r2, #64	; 0x40
 8008278:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 800827c:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 8008280:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008284:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 8008288:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 800828c:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008290:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 8008294:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 8008298:	eee4 7a85 	vfma.f32	s15, s9, s10
 800829c:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 80082a0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80082a4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80082a8:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 80082ac:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80082b0:	eee2 7a83 	vfma.f32	s15, s5, s6
 80082b4:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80082b8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80082bc:	eee3 7a84 	vfma.f32	s15, s7, s8
 80082c0:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80082c4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80082c8:	eee4 7a85 	vfma.f32	s15, s9, s10
 80082cc:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80082d0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80082d4:	eee5 7a86 	vfma.f32	s15, s11, s12
 80082d8:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80082dc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80082e0:	eee0 7a81 	vfma.f32	s15, s1, s2
 80082e4:	4283      	cmp	r3, r0
 80082e6:	eee1 7a82 	vfma.f32	s15, s3, s4
 80082ea:	eee2 7a83 	vfma.f32	s15, s5, s6
 80082ee:	eee3 7a84 	vfma.f32	s15, s7, s8
 80082f2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80082f6:	eee5 7a86 	vfma.f32	s15, s11, s12
 80082fa:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80082fe:	d199      	bne.n	8008234 <forward_lstm+0xac4>
 8008300:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8008304:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8008308:	189a      	adds	r2, r3, r2
 800830a:	2e00      	cmp	r6, #0
 800830c:	d07c      	beq.n	8008408 <forward_lstm+0xc98>
 800830e:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8008312:	4633      	mov	r3, r6
 8008314:	e002      	b.n	800831c <forward_lstm+0xbac>
 8008316:	bf00      	nop
 8008318:	00000000 	.word	0x00000000
 800831c:	ed91 6a00 	vldr	s12, [r1]
 8008320:	edd2 7a00 	vldr	s15, [r2]
 8008324:	2b01      	cmp	r3, #1
 8008326:	eee6 6a27 	vfma.f32	s13, s12, s15
 800832a:	d06d      	beq.n	8008408 <forward_lstm+0xc98>
 800832c:	ed91 6a01 	vldr	s12, [r1, #4]
 8008330:	edd2 7a01 	vldr	s15, [r2, #4]
 8008334:	2b02      	cmp	r3, #2
 8008336:	eee6 6a27 	vfma.f32	s13, s12, s15
 800833a:	d065      	beq.n	8008408 <forward_lstm+0xc98>
 800833c:	ed91 6a02 	vldr	s12, [r1, #8]
 8008340:	edd2 7a02 	vldr	s15, [r2, #8]
 8008344:	2b03      	cmp	r3, #3
 8008346:	eee6 6a27 	vfma.f32	s13, s12, s15
 800834a:	d05d      	beq.n	8008408 <forward_lstm+0xc98>
 800834c:	ed91 6a03 	vldr	s12, [r1, #12]
 8008350:	edd2 7a03 	vldr	s15, [r2, #12]
 8008354:	2b04      	cmp	r3, #4
 8008356:	eee6 6a27 	vfma.f32	s13, s12, s15
 800835a:	d055      	beq.n	8008408 <forward_lstm+0xc98>
 800835c:	ed91 6a04 	vldr	s12, [r1, #16]
 8008360:	edd2 7a04 	vldr	s15, [r2, #16]
 8008364:	2b05      	cmp	r3, #5
 8008366:	eee6 6a27 	vfma.f32	s13, s12, s15
 800836a:	d04d      	beq.n	8008408 <forward_lstm+0xc98>
 800836c:	ed91 6a05 	vldr	s12, [r1, #20]
 8008370:	edd2 7a05 	vldr	s15, [r2, #20]
 8008374:	2b06      	cmp	r3, #6
 8008376:	eee6 6a27 	vfma.f32	s13, s12, s15
 800837a:	d045      	beq.n	8008408 <forward_lstm+0xc98>
 800837c:	ed91 6a06 	vldr	s12, [r1, #24]
 8008380:	edd2 7a06 	vldr	s15, [r2, #24]
 8008384:	2b07      	cmp	r3, #7
 8008386:	eee6 6a27 	vfma.f32	s13, s12, s15
 800838a:	d03d      	beq.n	8008408 <forward_lstm+0xc98>
 800838c:	ed91 6a07 	vldr	s12, [r1, #28]
 8008390:	edd2 7a07 	vldr	s15, [r2, #28]
 8008394:	2b08      	cmp	r3, #8
 8008396:	eee6 6a27 	vfma.f32	s13, s12, s15
 800839a:	d035      	beq.n	8008408 <forward_lstm+0xc98>
 800839c:	ed91 6a08 	vldr	s12, [r1, #32]
 80083a0:	edd2 7a08 	vldr	s15, [r2, #32]
 80083a4:	2b09      	cmp	r3, #9
 80083a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083aa:	d02d      	beq.n	8008408 <forward_lstm+0xc98>
 80083ac:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80083b0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80083b4:	2b0a      	cmp	r3, #10
 80083b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083ba:	d025      	beq.n	8008408 <forward_lstm+0xc98>
 80083bc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80083c0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80083c4:	2b0b      	cmp	r3, #11
 80083c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083ca:	d01d      	beq.n	8008408 <forward_lstm+0xc98>
 80083cc:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80083d0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80083d4:	2b0c      	cmp	r3, #12
 80083d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083da:	d015      	beq.n	8008408 <forward_lstm+0xc98>
 80083dc:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80083e0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80083e4:	3b0d      	subs	r3, #13
 80083e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083ea:	d00d      	beq.n	8008408 <forward_lstm+0xc98>
 80083ec:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 80083f0:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 80083f4:	2b01      	cmp	r3, #1
 80083f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80083fa:	d005      	beq.n	8008408 <forward_lstm+0xc98>
 80083fc:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8008400:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008404:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008408:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800840c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008410:	f109 0904 	add.w	r9, r9, #4
 8008414:	ed88 7a00 	vstr	s14, [r8]
 8008418:	edd3 7a00 	vldr	s15, [r3]
 800841c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8008420:	ecb3 6a01 	vldmia	r3!, {s12}
 8008424:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8008428:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800842c:	ecf3 6a01 	vldmia	r3!, {s13}
 8008430:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008434:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800843c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8008440:	eca8 7a01 	vstmia	r8!, {s14}
 8008444:	ed1f 7a4c 	vldr	s14, [pc, #-304]	; 8008318 <forward_lstm+0xba8>
 8008448:	ed8e 8a00 	vstr	s16, [lr]
 800844c:	2b00      	cmp	r3, #0
 800844e:	f000 851f 	beq.w	8008e90 <forward_lstm+0x1720>
 8008452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008456:	f8d7 10dc 	ldr.w	r1, [r7, #220]	; 0xdc
 800845a:	f103 0240 	add.w	r2, r3, #64	; 0x40
 800845e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008462:	3340      	adds	r3, #64	; 0x40
 8008464:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8008468:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 800846c:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008470:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 8008474:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8008478:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 800847c:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008480:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 8008484:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008488:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800848c:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008490:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008494:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008498:	ee67 7aa5 	vmul.f32	s15, s15, s11
 800849c:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 80084a0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084a4:	3910      	subs	r1, #16
 80084a6:	290f      	cmp	r1, #15
 80084a8:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 80084ac:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 80084b0:	eee5 7a86 	vfma.f32	s15, s11, s12
 80084b4:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80084b8:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80084bc:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80084c0:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80084c4:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80084c8:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80084cc:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80084d0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80084d4:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80084d8:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80084dc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80084e0:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80084e4:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80084e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80084ec:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80084f0:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80084f4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80084f8:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80084fc:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008500:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008504:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008508:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800850c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008510:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008514:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008518:	eee1 7a21 	vfma.f32	s15, s2, s3
 800851c:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008520:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008524:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008528:	eee5 7a25 	vfma.f32	s15, s10, s11
 800852c:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008530:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008534:	d896      	bhi.n	8008464 <forward_lstm+0xcf4>
 8008536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800853a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 800853e:	4413      	add	r3, r2
 8008540:	2d00      	cmp	r5, #0
 8008542:	d076      	beq.n	8008632 <forward_lstm+0xec2>
 8008544:	edd4 6a00 	vldr	s13, [r4]
 8008548:	edd3 7a00 	vldr	s15, [r3]
 800854c:	2d01      	cmp	r5, #1
 800854e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008552:	d06e      	beq.n	8008632 <forward_lstm+0xec2>
 8008554:	edd4 6a01 	vldr	s13, [r4, #4]
 8008558:	edd3 7a01 	vldr	s15, [r3, #4]
 800855c:	2d02      	cmp	r5, #2
 800855e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008562:	d066      	beq.n	8008632 <forward_lstm+0xec2>
 8008564:	edd4 6a02 	vldr	s13, [r4, #8]
 8008568:	edd3 7a02 	vldr	s15, [r3, #8]
 800856c:	2d03      	cmp	r5, #3
 800856e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008572:	d05e      	beq.n	8008632 <forward_lstm+0xec2>
 8008574:	edd4 6a03 	vldr	s13, [r4, #12]
 8008578:	edd3 7a03 	vldr	s15, [r3, #12]
 800857c:	2d04      	cmp	r5, #4
 800857e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008582:	d056      	beq.n	8008632 <forward_lstm+0xec2>
 8008584:	edd4 6a04 	vldr	s13, [r4, #16]
 8008588:	edd3 7a04 	vldr	s15, [r3, #16]
 800858c:	2d05      	cmp	r5, #5
 800858e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008592:	d04e      	beq.n	8008632 <forward_lstm+0xec2>
 8008594:	edd4 6a05 	vldr	s13, [r4, #20]
 8008598:	edd3 7a05 	vldr	s15, [r3, #20]
 800859c:	2d06      	cmp	r5, #6
 800859e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085a2:	d046      	beq.n	8008632 <forward_lstm+0xec2>
 80085a4:	edd4 6a06 	vldr	s13, [r4, #24]
 80085a8:	edd3 7a06 	vldr	s15, [r3, #24]
 80085ac:	2d07      	cmp	r5, #7
 80085ae:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085b2:	d03e      	beq.n	8008632 <forward_lstm+0xec2>
 80085b4:	edd4 6a07 	vldr	s13, [r4, #28]
 80085b8:	edd3 7a07 	vldr	s15, [r3, #28]
 80085bc:	2d08      	cmp	r5, #8
 80085be:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085c2:	d036      	beq.n	8008632 <forward_lstm+0xec2>
 80085c4:	edd4 6a08 	vldr	s13, [r4, #32]
 80085c8:	edd3 7a08 	vldr	s15, [r3, #32]
 80085cc:	2d09      	cmp	r5, #9
 80085ce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085d2:	d02e      	beq.n	8008632 <forward_lstm+0xec2>
 80085d4:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 80085d8:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80085dc:	2d0a      	cmp	r5, #10
 80085de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085e2:	d026      	beq.n	8008632 <forward_lstm+0xec2>
 80085e4:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 80085e8:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80085ec:	2d0b      	cmp	r5, #11
 80085ee:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80085f2:	d01e      	beq.n	8008632 <forward_lstm+0xec2>
 80085f4:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 80085f8:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 80085fc:	2d0c      	cmp	r5, #12
 80085fe:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008602:	d016      	beq.n	8008632 <forward_lstm+0xec2>
 8008604:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8008608:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 800860c:	f1b5 020d 	subs.w	r2, r5, #13
 8008610:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008614:	d00d      	beq.n	8008632 <forward_lstm+0xec2>
 8008616:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 800861a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800861e:	2a01      	cmp	r2, #1
 8008620:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008624:	d005      	beq.n	8008632 <forward_lstm+0xec2>
 8008626:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 800862a:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 800862e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008632:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008636:	ed5f 6ac8 	vldr	s13, [pc, #-800]	; 8008318 <forward_lstm+0xba8>
 800863a:	ed8e 7a00 	vstr	s14, [lr]
 800863e:	2b00      	cmp	r3, #0
 8008640:	f000 8420 	beq.w	8008e84 <forward_lstm+0x1714>
 8008644:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008648:	f10b 0240 	add.w	r2, fp, #64	; 0x40
 800864c:	3340      	adds	r3, #64	; 0x40
 800864e:	ed53 7a0f 	vldr	s15, [r3, #-60]	; 0xffffffc4
 8008652:	ed12 5a0f 	vldr	s10, [r2, #-60]	; 0xffffffc4
 8008656:	ed53 5a10 	vldr	s11, [r3, #-64]	; 0xffffffc0
 800865a:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 800865e:	ed13 4a0d 	vldr	s8, [r3, #-52]	; 0xffffffcc
 8008662:	ed53 4a0c 	vldr	s9, [r3, #-48]	; 0xffffffd0
 8008666:	ed53 2a0a 	vldr	s5, [r3, #-40]	; 0xffffffd8
 800866a:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 800866e:	ed53 3a09 	vldr	s7, [r3, #-36]	; 0xffffffdc
 8008672:	ed53 0a06 	vldr	s1, [r3, #-24]	; 0xffffffe8
 8008676:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 800867a:	ed53 1a05 	vldr	s3, [r3, #-20]	; 0xffffffec
 800867e:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 8008682:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008686:	ed13 5a0e 	vldr	s10, [r3, #-56]	; 0xffffffc8
 800868a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800868e:	3340      	adds	r3, #64	; 0x40
 8008690:	3240      	adds	r2, #64	; 0x40
 8008692:	ed52 5a1e 	vldr	s11, [r2, #-120]	; 0xffffff88
 8008696:	ed12 6a1d 	vldr	s12, [r2, #-116]	; 0xffffff8c
 800869a:	eee5 7a25 	vfma.f32	s15, s10, s11
 800869e:	ed12 5a1c 	vldr	s10, [r2, #-112]	; 0xffffff90
 80086a2:	ed53 5a1b 	vldr	s11, [r3, #-108]	; 0xffffff94
 80086a6:	eee4 7a06 	vfma.f32	s15, s8, s12
 80086aa:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80086ae:	ed12 4a19 	vldr	s8, [r2, #-100]	; 0xffffff9c
 80086b2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80086b6:	ed53 4a18 	vldr	s9, [r3, #-96]	; 0xffffffa0
 80086ba:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80086be:	eee5 7a86 	vfma.f32	s15, s11, s12
 80086c2:	ed53 5a17 	vldr	s11, [r3, #-92]	; 0xffffffa4
 80086c6:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80086ca:	eee2 7a83 	vfma.f32	s15, s5, s6
 80086ce:	ed53 2a14 	vldr	s5, [r3, #-80]	; 0xffffffb0
 80086d2:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80086d6:	eee3 7a84 	vfma.f32	s15, s7, s8
 80086da:	ed53 3a13 	vldr	s7, [r3, #-76]	; 0xffffffb4
 80086de:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80086e2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80086e6:	ed53 4a12 	vldr	s9, [r3, #-72]	; 0xffffffb8
 80086ea:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80086ee:	eee5 7a86 	vfma.f32	s15, s11, s12
 80086f2:	ed53 5a11 	vldr	s11, [r3, #-68]	; 0xffffffbc
 80086f6:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 80086fa:	eee0 7a81 	vfma.f32	s15, s1, s2
 80086fe:	4283      	cmp	r3, r0
 8008700:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008704:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008708:	eee3 7a84 	vfma.f32	s15, s7, s8
 800870c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008710:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008714:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008718:	d199      	bne.n	800864e <forward_lstm+0xede>
 800871a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800871e:	eb0b 0203 	add.w	r2, fp, r3
 8008722:	2e00      	cmp	r6, #0
 8008724:	d078      	beq.n	8008818 <forward_lstm+0x10a8>
 8008726:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 800872a:	4633      	mov	r3, r6
 800872c:	ed91 6a00 	vldr	s12, [r1]
 8008730:	edd2 7a00 	vldr	s15, [r2]
 8008734:	2b01      	cmp	r3, #1
 8008736:	eee6 6a27 	vfma.f32	s13, s12, s15
 800873a:	d06d      	beq.n	8008818 <forward_lstm+0x10a8>
 800873c:	ed91 6a01 	vldr	s12, [r1, #4]
 8008740:	edd2 7a01 	vldr	s15, [r2, #4]
 8008744:	2b02      	cmp	r3, #2
 8008746:	eee6 6a27 	vfma.f32	s13, s12, s15
 800874a:	d065      	beq.n	8008818 <forward_lstm+0x10a8>
 800874c:	ed91 6a02 	vldr	s12, [r1, #8]
 8008750:	edd2 7a02 	vldr	s15, [r2, #8]
 8008754:	2b03      	cmp	r3, #3
 8008756:	eee6 6a27 	vfma.f32	s13, s12, s15
 800875a:	d05d      	beq.n	8008818 <forward_lstm+0x10a8>
 800875c:	ed91 6a03 	vldr	s12, [r1, #12]
 8008760:	edd2 7a03 	vldr	s15, [r2, #12]
 8008764:	2b04      	cmp	r3, #4
 8008766:	eee6 6a27 	vfma.f32	s13, s12, s15
 800876a:	d055      	beq.n	8008818 <forward_lstm+0x10a8>
 800876c:	ed91 6a04 	vldr	s12, [r1, #16]
 8008770:	edd2 7a04 	vldr	s15, [r2, #16]
 8008774:	2b05      	cmp	r3, #5
 8008776:	eee6 6a27 	vfma.f32	s13, s12, s15
 800877a:	d04d      	beq.n	8008818 <forward_lstm+0x10a8>
 800877c:	ed91 6a05 	vldr	s12, [r1, #20]
 8008780:	edd2 7a05 	vldr	s15, [r2, #20]
 8008784:	2b06      	cmp	r3, #6
 8008786:	eee6 6a27 	vfma.f32	s13, s12, s15
 800878a:	d045      	beq.n	8008818 <forward_lstm+0x10a8>
 800878c:	ed91 6a06 	vldr	s12, [r1, #24]
 8008790:	edd2 7a06 	vldr	s15, [r2, #24]
 8008794:	2b07      	cmp	r3, #7
 8008796:	eee6 6a27 	vfma.f32	s13, s12, s15
 800879a:	d03d      	beq.n	8008818 <forward_lstm+0x10a8>
 800879c:	ed91 6a07 	vldr	s12, [r1, #28]
 80087a0:	edd2 7a07 	vldr	s15, [r2, #28]
 80087a4:	2b08      	cmp	r3, #8
 80087a6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087aa:	d035      	beq.n	8008818 <forward_lstm+0x10a8>
 80087ac:	ed91 6a08 	vldr	s12, [r1, #32]
 80087b0:	edd2 7a08 	vldr	s15, [r2, #32]
 80087b4:	2b09      	cmp	r3, #9
 80087b6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087ba:	d02d      	beq.n	8008818 <forward_lstm+0x10a8>
 80087bc:	ed91 6a09 	vldr	s12, [r1, #36]	; 0x24
 80087c0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 80087c4:	2b0a      	cmp	r3, #10
 80087c6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087ca:	d025      	beq.n	8008818 <forward_lstm+0x10a8>
 80087cc:	ed91 6a0a 	vldr	s12, [r1, #40]	; 0x28
 80087d0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 80087d4:	2b0b      	cmp	r3, #11
 80087d6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087da:	d01d      	beq.n	8008818 <forward_lstm+0x10a8>
 80087dc:	ed91 6a0b 	vldr	s12, [r1, #44]	; 0x2c
 80087e0:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 80087e4:	2b0c      	cmp	r3, #12
 80087e6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087ea:	d015      	beq.n	8008818 <forward_lstm+0x10a8>
 80087ec:	ed91 6a0c 	vldr	s12, [r1, #48]	; 0x30
 80087f0:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 80087f4:	3b0d      	subs	r3, #13
 80087f6:	eee6 6a27 	vfma.f32	s13, s12, s15
 80087fa:	d00d      	beq.n	8008818 <forward_lstm+0x10a8>
 80087fc:	ed91 6a0d 	vldr	s12, [r1, #52]	; 0x34
 8008800:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008804:	2b01      	cmp	r3, #1
 8008806:	eee6 6a27 	vfma.f32	s13, s12, s15
 800880a:	d005      	beq.n	8008818 <forward_lstm+0x10a8>
 800880c:	ed91 6a0e 	vldr	s12, [r1, #56]	; 0x38
 8008810:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008814:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008818:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800881c:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8008820:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008824:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008828:	449a      	add	sl, r3
 800882a:	ed8e 7a00 	vstr	s14, [lr]
 800882e:	ecf2 7a01 	vldmia	r2!, {s15}
 8008832:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008836:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800883a:	4411      	add	r1, r2
 800883c:	f8c7 10f0 	str.w	r1, [r7, #240]	; 0xf0
 8008840:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 8008844:	4419      	add	r1, r3
 8008846:	f8c7 10ec 	str.w	r1, [r7, #236]	; 0xec
 800884a:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 800884e:	4411      	add	r1, r2
 8008850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008854:	f8c7 10e8 	str.w	r1, [r7, #232]	; 0xe8
 8008858:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 800885c:	eeb4 7ae8 	vcmpe.f32	s14, s17
 8008860:	4419      	add	r1, r3
 8008862:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8008866:	f8c7 10e4 	str.w	r1, [r7, #228]	; 0xe4
 800886a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800886e:	bf88      	it	hi
 8008870:	eeb0 7a68 	vmovhi.f32	s14, s17
 8008874:	4563      	cmp	r3, ip
 8008876:	ecae 7a01 	vstmia	lr!, {s14}
 800887a:	4493      	add	fp, r2
 800887c:	f47f a9c3 	bne.w	8007c06 <forward_lstm+0x496>
 8008880:	f8d7 80a8 	ldr.w	r8, [r7, #168]	; 0xa8
 8008884:	f8d7 a078 	ldr.w	sl, [r7, #120]	; 0x78
 8008888:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 800888c:	4642      	mov	r2, r8
 800888e:	4608      	mov	r0, r1
 8008890:	ee19 3a90 	vmov	r3, s19
 8008894:	46a3      	mov	fp, r4
 8008896:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8008898:	47a0      	blx	r4
 800889a:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 800889e:	4642      	mov	r2, r8
 80088a0:	4608      	mov	r0, r1
 80088a2:	ee19 3a90 	vmov	r3, s19
 80088a6:	47a0      	blx	r4
 80088a8:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 80088ac:	4642      	mov	r2, r8
 80088ae:	4608      	mov	r0, r1
 80088b0:	ee1a 3a90 	vmov	r3, s21
 80088b4:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 80088b6:	47a0      	blx	r4
 80088b8:	1e6a      	subs	r2, r5, #1
 80088ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80088be:	1eaa      	subs	r2, r5, #2
 80088c0:	f8c7 20e8 	str.w	r2, [r7, #232]	; 0xe8
 80088c4:	1eea      	subs	r2, r5, #3
 80088c6:	f8c7 20e4 	str.w	r2, [r7, #228]	; 0xe4
 80088ca:	1f2a      	subs	r2, r5, #4
 80088cc:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 80088d0:	1f6a      	subs	r2, r5, #5
 80088d2:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80088d6:	1faa      	subs	r2, r5, #6
 80088d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088da:	f8c7 20c0 	str.w	r2, [r7, #192]	; 0xc0
 80088de:	e9d7 8120 	ldrd	r8, r1, [r7, #128]	; 0x80
 80088e2:	1fea      	subs	r2, r5, #7
 80088e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80088e8:	f8d7 9024 	ldr.w	r9, [r7, #36]	; 0x24
 80088ec:	f8d7 e0a4 	ldr.w	lr, [r7, #164]	; 0xa4
 80088f0:	f8d7 c030 	ldr.w	ip, [r7, #48]	; 0x30
 80088f4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80088f6:	f8c7 60f0 	str.w	r6, [r7, #240]	; 0xf0
 80088fa:	f1a5 0208 	sub.w	r2, r5, #8
 80088fe:	f8c7 20b8 	str.w	r2, [r7, #184]	; 0xb8
 8008902:	465c      	mov	r4, fp
 8008904:	461e      	mov	r6, r3
 8008906:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800890a:	ecf8 7a01 	vldmia	r8!, {s15}
 800890e:	ecb3 6a01 	vldmia	r3!, {s12}
 8008912:	ed9a 7a00 	vldr	s14, [sl]
 8008916:	ecfe 6a01 	vldmia	lr!, {s13}
 800891a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800891e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008926:	eee6 7a87 	vfma.f32	s15, s13, s14
 800892a:	ed9f 7ac7 	vldr	s14, [pc, #796]	; 8008c48 <forward_lstm+0x14d8>
 800892e:	ecea 7a01 	vstmia	sl!, {s15}
 8008932:	eca1 8a01 	vstmia	r1!, {s16}
 8008936:	2b00      	cmp	r3, #0
 8008938:	f000 82a2 	beq.w	8008e80 <forward_lstm+0x1710>
 800893c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008940:	f8d7 b0dc 	ldr.w	fp, [r7, #220]	; 0xdc
 8008944:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008948:	f100 0340 	add.w	r3, r0, #64	; 0x40
 800894c:	ed53 5a0f 	vldr	s11, [r3, #-60]	; 0xffffffc4
 8008950:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008954:	ed12 6a10 	vldr	s12, [r2, #-64]	; 0xffffffc0
 8008958:	ed53 6a10 	vldr	s13, [r3, #-64]	; 0xffffffc0
 800895c:	ed52 4a0d 	vldr	s9, [r2, #-52]	; 0xffffffcc
 8008960:	ed12 5a0c 	vldr	s10, [r2, #-48]	; 0xffffffd0
 8008964:	ed12 3a0a 	vldr	s6, [r2, #-40]	; 0xffffffd8
 8008968:	ed53 3a0a 	vldr	s7, [r3, #-40]	; 0xffffffd8
 800896c:	ed12 4a09 	vldr	s8, [r2, #-36]	; 0xffffffdc
 8008970:	ed12 1a06 	vldr	s2, [r2, #-24]	; 0xffffffe8
 8008974:	ed53 1a06 	vldr	s3, [r3, #-24]	; 0xffffffe8
 8008978:	ed12 2a05 	vldr	s4, [r2, #-20]	; 0xffffffec
 800897c:	ed53 2a05 	vldr	s5, [r3, #-20]	; 0xffffffec
 8008980:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008984:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008988:	eee6 7a26 	vfma.f32	s15, s12, s13
 800898c:	f1ab 0b10 	sub.w	fp, fp, #16
 8008990:	f1bb 0f0f 	cmp.w	fp, #15
 8008994:	ed13 6a0e 	vldr	s12, [r3, #-56]	; 0xffffffc8
 8008998:	ed53 6a0d 	vldr	s13, [r3, #-52]	; 0xffffffcc
 800899c:	eee5 7a86 	vfma.f32	s15, s11, s12
 80089a0:	f102 0240 	add.w	r2, r2, #64	; 0x40
 80089a4:	f103 0340 	add.w	r3, r3, #64	; 0x40
 80089a8:	ed53 5a1c 	vldr	s11, [r3, #-112]	; 0xffffff90
 80089ac:	ed12 6a1b 	vldr	s12, [r2, #-108]	; 0xffffff94
 80089b0:	eee4 7aa6 	vfma.f32	s15, s9, s13
 80089b4:	ed53 6a1b 	vldr	s13, [r3, #-108]	; 0xffffff94
 80089b8:	ed53 4a19 	vldr	s9, [r3, #-100]	; 0xffffff9c
 80089bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089c0:	ed12 5a18 	vldr	s10, [r2, #-96]	; 0xffffffa0
 80089c4:	ed53 5a18 	vldr	s11, [r3, #-96]	; 0xffffffa0
 80089c8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089cc:	ed12 6a17 	vldr	s12, [r2, #-92]	; 0xffffffa4
 80089d0:	ed53 6a17 	vldr	s13, [r3, #-92]	; 0xffffffa4
 80089d4:	eee3 7a23 	vfma.f32	s15, s6, s7
 80089d8:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 80089dc:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 80089e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089e4:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 80089e8:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 80089ec:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089f0:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 80089f4:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 80089f8:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089fc:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008a00:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008a04:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008a08:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008a0c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008a10:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008a14:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a18:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a1c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a20:	d894      	bhi.n	800894c <forward_lstm+0x11dc>
 8008a22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008a26:	18c3      	adds	r3, r0, r3
 8008a28:	2d00      	cmp	r5, #0
 8008a2a:	f000 8085 	beq.w	8008b38 <forward_lstm+0x13c8>
 8008a2e:	edd4 6a00 	vldr	s13, [r4]
 8008a32:	edd3 7a00 	vldr	s15, [r3]
 8008a36:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8008a3a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a3e:	2a00      	cmp	r2, #0
 8008a40:	d07a      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008a42:	edd4 6a01 	vldr	s13, [r4, #4]
 8008a46:	edd3 7a01 	vldr	s15, [r3, #4]
 8008a4a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008a4e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a52:	2a00      	cmp	r2, #0
 8008a54:	d070      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008a56:	edd4 6a02 	vldr	s13, [r4, #8]
 8008a5a:	edd3 7a02 	vldr	s15, [r3, #8]
 8008a5e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8008a62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a66:	2a00      	cmp	r2, #0
 8008a68:	d066      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008a6a:	edd4 6a03 	vldr	s13, [r4, #12]
 8008a6e:	edd3 7a03 	vldr	s15, [r3, #12]
 8008a72:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008a76:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a7a:	2a00      	cmp	r2, #0
 8008a7c:	d05c      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008a7e:	edd4 6a04 	vldr	s13, [r4, #16]
 8008a82:	edd3 7a04 	vldr	s15, [r3, #16]
 8008a86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008a8a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a8e:	2a00      	cmp	r2, #0
 8008a90:	d052      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008a92:	edd4 6a05 	vldr	s13, [r4, #20]
 8008a96:	edd3 7a05 	vldr	s15, [r3, #20]
 8008a9a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008a9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008aa2:	2a00      	cmp	r2, #0
 8008aa4:	d048      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008aa6:	edd4 6a06 	vldr	s13, [r4, #24]
 8008aaa:	edd3 7a06 	vldr	s15, [r3, #24]
 8008aae:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8008ab2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ab6:	b3fa      	cbz	r2, 8008b38 <forward_lstm+0x13c8>
 8008ab8:	edd4 6a07 	vldr	s13, [r4, #28]
 8008abc:	edd3 7a07 	vldr	s15, [r3, #28]
 8008ac0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008ac4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ac8:	b3b2      	cbz	r2, 8008b38 <forward_lstm+0x13c8>
 8008aca:	edd4 6a08 	vldr	s13, [r4, #32]
 8008ace:	edd3 7a08 	vldr	s15, [r3, #32]
 8008ad2:	2d09      	cmp	r5, #9
 8008ad4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ad8:	d02e      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008ada:	edd4 6a09 	vldr	s13, [r4, #36]	; 0x24
 8008ade:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8008ae2:	2d0a      	cmp	r5, #10
 8008ae4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ae8:	d026      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008aea:	edd4 6a0a 	vldr	s13, [r4, #40]	; 0x28
 8008aee:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8008af2:	2d0b      	cmp	r5, #11
 8008af4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008af8:	d01e      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008afa:	edd4 6a0b 	vldr	s13, [r4, #44]	; 0x2c
 8008afe:	edd3 7a0b 	vldr	s15, [r3, #44]	; 0x2c
 8008b02:	2d0c      	cmp	r5, #12
 8008b04:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b08:	d016      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008b0a:	edd4 6a0c 	vldr	s13, [r4, #48]	; 0x30
 8008b0e:	edd3 7a0c 	vldr	s15, [r3, #48]	; 0x30
 8008b12:	f1b5 020d 	subs.w	r2, r5, #13
 8008b16:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b1a:	d00d      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008b1c:	edd4 6a0d 	vldr	s13, [r4, #52]	; 0x34
 8008b20:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 8008b24:	2a01      	cmp	r2, #1
 8008b26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b2a:	d005      	beq.n	8008b38 <forward_lstm+0x13c8>
 8008b2c:	edd3 6a0e 	vldr	s13, [r3, #56]	; 0x38
 8008b30:	edd4 7a0e 	vldr	s15, [r4, #56]	; 0x38
 8008b34:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008b38:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008b3c:	eddf 6a42 	vldr	s13, [pc, #264]	; 8008c48 <forward_lstm+0x14d8>
 8008b40:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008b44:	2b00      	cmp	r3, #0
 8008b46:	f000 8195 	beq.w	8008e74 <forward_lstm+0x1704>
 8008b4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008b4e:	f8d7 b0a8 	ldr.w	fp, [r7, #168]	; 0xa8
 8008b52:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8008b56:	f10c 0340 	add.w	r3, ip, #64	; 0x40
 8008b5a:	ed13 5a0f 	vldr	s10, [r3, #-60]	; 0xffffffc4
 8008b5e:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008b62:	ed52 5a10 	vldr	s11, [r2, #-64]	; 0xffffffc0
 8008b66:	ed13 6a10 	vldr	s12, [r3, #-64]	; 0xffffffc0
 8008b6a:	ed12 4a0d 	vldr	s8, [r2, #-52]	; 0xffffffcc
 8008b6e:	ed52 4a0c 	vldr	s9, [r2, #-48]	; 0xffffffd0
 8008b72:	ed52 2a0a 	vldr	s5, [r2, #-40]	; 0xffffffd8
 8008b76:	ed13 3a0a 	vldr	s6, [r3, #-40]	; 0xffffffd8
 8008b7a:	ed52 3a09 	vldr	s7, [r2, #-36]	; 0xffffffdc
 8008b7e:	ed52 0a06 	vldr	s1, [r2, #-24]	; 0xffffffe8
 8008b82:	ed13 1a06 	vldr	s2, [r3, #-24]	; 0xffffffe8
 8008b86:	ed52 1a05 	vldr	s3, [r2, #-20]	; 0xffffffec
 8008b8a:	ed13 2a05 	vldr	s4, [r3, #-20]	; 0xffffffec
 8008b8e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8008b92:	ed12 5a0e 	vldr	s10, [r2, #-56]	; 0xffffffc8
 8008b96:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008b9a:	f1ab 0b10 	sub.w	fp, fp, #16
 8008b9e:	f1bb 0f0f 	cmp.w	fp, #15
 8008ba2:	ed53 5a0e 	vldr	s11, [r3, #-56]	; 0xffffffc8
 8008ba6:	ed13 6a0d 	vldr	s12, [r3, #-52]	; 0xffffffcc
 8008baa:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008bae:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008bb2:	f103 0340 	add.w	r3, r3, #64	; 0x40
 8008bb6:	ed13 5a1c 	vldr	s10, [r3, #-112]	; 0xffffff90
 8008bba:	ed52 5a1b 	vldr	s11, [r2, #-108]	; 0xffffff94
 8008bbe:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008bc2:	ed13 6a1b 	vldr	s12, [r3, #-108]	; 0xffffff94
 8008bc6:	ed13 4a19 	vldr	s8, [r3, #-100]	; 0xffffff9c
 8008bca:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008bce:	ed52 4a18 	vldr	s9, [r2, #-96]	; 0xffffffa0
 8008bd2:	ed13 5a18 	vldr	s10, [r3, #-96]	; 0xffffffa0
 8008bd6:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008bda:	ed52 5a17 	vldr	s11, [r2, #-92]	; 0xffffffa4
 8008bde:	ed13 6a17 	vldr	s12, [r3, #-92]	; 0xffffffa4
 8008be2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008be6:	ed52 2a14 	vldr	s5, [r2, #-80]	; 0xffffffb0
 8008bea:	ed13 3a14 	vldr	s6, [r3, #-80]	; 0xffffffb0
 8008bee:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008bf2:	ed52 3a13 	vldr	s7, [r2, #-76]	; 0xffffffb4
 8008bf6:	ed13 4a13 	vldr	s8, [r3, #-76]	; 0xffffffb4
 8008bfa:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008bfe:	ed52 4a12 	vldr	s9, [r2, #-72]	; 0xffffffb8
 8008c02:	ed13 5a12 	vldr	s10, [r3, #-72]	; 0xffffffb8
 8008c06:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008c0a:	ed52 5a11 	vldr	s11, [r2, #-68]	; 0xffffffbc
 8008c0e:	ed13 6a11 	vldr	s12, [r3, #-68]	; 0xffffffbc
 8008c12:	eee0 7a81 	vfma.f32	s15, s1, s2
 8008c16:	eee1 7a82 	vfma.f32	s15, s3, s4
 8008c1a:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008c1e:	eee3 7a84 	vfma.f32	s15, s7, s8
 8008c22:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008c26:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008c2a:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8008c2e:	d894      	bhi.n	8008b5a <forward_lstm+0x13ea>
 8008c30:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008c34:	eb0c 0203 	add.w	r2, ip, r3
 8008c38:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	d07b      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008c40:	f8d7 b0d0 	ldr.w	fp, [r7, #208]	; 0xd0
 8008c44:	e002      	b.n	8008c4c <forward_lstm+0x14dc>
 8008c46:	bf00      	nop
 8008c48:	00000000 	.word	0x00000000
 8008c4c:	ed9b 6a00 	vldr	s12, [fp]
 8008c50:	edd2 7a00 	vldr	s15, [r2]
 8008c54:	2b01      	cmp	r3, #1
 8008c56:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c5a:	d06d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008c5c:	ed9b 6a01 	vldr	s12, [fp, #4]
 8008c60:	edd2 7a01 	vldr	s15, [r2, #4]
 8008c64:	2b02      	cmp	r3, #2
 8008c66:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c6a:	d065      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008c6c:	ed9b 6a02 	vldr	s12, [fp, #8]
 8008c70:	edd2 7a02 	vldr	s15, [r2, #8]
 8008c74:	2b03      	cmp	r3, #3
 8008c76:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c7a:	d05d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008c7c:	ed9b 6a03 	vldr	s12, [fp, #12]
 8008c80:	edd2 7a03 	vldr	s15, [r2, #12]
 8008c84:	2b04      	cmp	r3, #4
 8008c86:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c8a:	d055      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008c8c:	ed9b 6a04 	vldr	s12, [fp, #16]
 8008c90:	edd2 7a04 	vldr	s15, [r2, #16]
 8008c94:	2b05      	cmp	r3, #5
 8008c96:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008c9a:	d04d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008c9c:	ed9b 6a05 	vldr	s12, [fp, #20]
 8008ca0:	edd2 7a05 	vldr	s15, [r2, #20]
 8008ca4:	2b06      	cmp	r3, #6
 8008ca6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008caa:	d045      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008cac:	ed9b 6a06 	vldr	s12, [fp, #24]
 8008cb0:	edd2 7a06 	vldr	s15, [r2, #24]
 8008cb4:	2b07      	cmp	r3, #7
 8008cb6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cba:	d03d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008cbc:	ed9b 6a07 	vldr	s12, [fp, #28]
 8008cc0:	edd2 7a07 	vldr	s15, [r2, #28]
 8008cc4:	2b08      	cmp	r3, #8
 8008cc6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cca:	d035      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008ccc:	ed9b 6a08 	vldr	s12, [fp, #32]
 8008cd0:	edd2 7a08 	vldr	s15, [r2, #32]
 8008cd4:	2b09      	cmp	r3, #9
 8008cd6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cda:	d02d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008cdc:	ed9b 6a09 	vldr	s12, [fp, #36]	; 0x24
 8008ce0:	edd2 7a09 	vldr	s15, [r2, #36]	; 0x24
 8008ce4:	2b0a      	cmp	r3, #10
 8008ce6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cea:	d025      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008cec:	ed9b 6a0a 	vldr	s12, [fp, #40]	; 0x28
 8008cf0:	edd2 7a0a 	vldr	s15, [r2, #40]	; 0x28
 8008cf4:	2b0b      	cmp	r3, #11
 8008cf6:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008cfa:	d01d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008cfc:	ed9b 6a0b 	vldr	s12, [fp, #44]	; 0x2c
 8008d00:	edd2 7a0b 	vldr	s15, [r2, #44]	; 0x2c
 8008d04:	2b0c      	cmp	r3, #12
 8008d06:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d0a:	d015      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008d0c:	ed9b 6a0c 	vldr	s12, [fp, #48]	; 0x30
 8008d10:	edd2 7a0c 	vldr	s15, [r2, #48]	; 0x30
 8008d14:	3b0d      	subs	r3, #13
 8008d16:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d1a:	d00d      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008d1c:	ed9b 6a0d 	vldr	s12, [fp, #52]	; 0x34
 8008d20:	edd2 7a0d 	vldr	s15, [r2, #52]	; 0x34
 8008d24:	2b01      	cmp	r3, #1
 8008d26:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d2a:	d005      	beq.n	8008d38 <forward_lstm+0x15c8>
 8008d2c:	ed9b 6a0e 	vldr	s12, [fp, #56]	; 0x38
 8008d30:	edd2 7a0e 	vldr	s15, [r2, #56]	; 0x38
 8008d34:	eee6 6a27 	vfma.f32	s13, s12, s15
 8008d38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8008d3c:	ee37 7a26 	vadd.f32	s14, s14, s13
 8008d40:	4418      	add	r0, r3
 8008d42:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008d46:	ecb6 6a01 	vldmia	r6!, {s12}
 8008d4a:	ecf9 7a01 	vldmia	r9!, {s15}
 8008d4e:	ed5a 6a01 	vldr	s13, [sl, #-4]
 8008d52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8008d56:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008d5a:	449c      	add	ip, r3
 8008d5c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008d60:	ee37 7a87 	vadd.f32	s14, s15, s14
 8008d64:	459e      	cmp	lr, r3
 8008d66:	ed01 7a01 	vstr	s14, [r1, #-4]
 8008d6a:	f47f adcc 	bne.w	8008906 <forward_lstm+0x1196>
 8008d6e:	f8d7 50a8 	ldr.w	r5, [r7, #168]	; 0xa8
 8008d72:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8008d74:	f8d7 60f0 	ldr.w	r6, [r7, #240]	; 0xf0
 8008d78:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8008d7c:	4608      	mov	r0, r1
 8008d7e:	ee19 3a90 	vmov	r3, s19
 8008d82:	462a      	mov	r2, r5
 8008d84:	47a0      	blx	r4
 8008d86:	ee1a 3a10 	vmov	r3, s20
 8008d8a:	462a      	mov	r2, r5
 8008d8c:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8008d90:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008d92:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8008d96:	47a0      	blx	r4
 8008d98:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008d9c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008da0:	6979      	ldr	r1, [r7, #20]
 8008da2:	ecf3 7a01 	vldmia	r3!, {s15}
 8008da6:	ed92 7a00 	vldr	s14, [r2]
 8008daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8008dae:	428b      	cmp	r3, r1
 8008db0:	ece2 7a01 	vstmia	r2!, {s15}
 8008db4:	d1f5      	bne.n	8008da2 <forward_lstm+0x1632>
 8008db6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008dba:	899b      	ldrh	r3, [r3, #12]
 8008dbc:	b163      	cbz	r3, 8008dd8 <forward_lstm+0x1668>
 8008dbe:	e9d7 9503 	ldrd	r9, r5, [r7, #12]
 8008dc2:	2400      	movs	r4, #0
 8008dc4:	46a8      	mov	r8, r5
 8008dc6:	f859 5f04 	ldr.w	r5, [r9, #4]!
 8008dca:	3401      	adds	r4, #1
 8008dcc:	2d00      	cmp	r5, #0
 8008dce:	d13e      	bne.n	8008e4e <forward_lstm+0x16de>
 8008dd0:	42a3      	cmp	r3, r4
 8008dd2:	f108 0804 	add.w	r8, r8, #4
 8008dd6:	dcf6      	bgt.n	8008dc6 <forward_lstm+0x1656>
 8008dd8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008dda:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8008dde:	428a      	cmp	r2, r1
 8008de0:	f340 809d 	ble.w	8008f1e <forward_lstm+0x17ae>
 8008de4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8008de8:	69b9      	ldr	r1, [r7, #24]
 8008dea:	440a      	add	r2, r1
 8008dec:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 8008df0:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8008df4:	2a00      	cmp	r2, #0
 8008df6:	f2c0 8092 	blt.w	8008f1e <forward_lstm+0x17ae>
 8008dfa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008dfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008e02:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8008e06:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008e0a:	f7fe be6b 	b.w	8007ae4 <forward_lstm+0x374>
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	4629      	mov	r1, r5
 8008e12:	69d8      	ldr	r0, [r3, #28]
 8008e14:	f000 fa66 	bl	80092e4 <st_int8_copy>
 8008e18:	ee19 2a10 	vmov	r2, s18
 8008e1c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8008e20:	2000      	movs	r0, #0
 8008e22:	f000 fa03 	bl	800922c <st_int8_fill>
 8008e26:	f7fe bda8 	b.w	800797a <forward_lstm+0x20a>
 8008e2a:	ee19 2a10 	vmov	r2, s18
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 f9fc 	bl	800922c <st_int8_fill>
 8008e34:	ee19 2a10 	vmov	r2, s18
 8008e38:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008e3c:	4648      	mov	r0, r9
 8008e3e:	f1b9 0f00 	cmp.w	r9, #0
 8008e42:	f47e ad91 	bne.w	8007968 <forward_lstm+0x1f8>
 8008e46:	f000 f9f1 	bl	800922c <st_int8_fill>
 8008e4a:	f7fe bd8f 	b.w	800796c <forward_lstm+0x1fc>
 8008e4e:	f8d8 a000 	ldr.w	sl, [r8]
 8008e52:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008e56:	ee19 2a10 	vmov	r2, s18
 8008e5a:	4651      	mov	r1, sl
 8008e5c:	f000 fa42 	bl	80092e4 <st_int8_copy>
 8008e60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8008e64:	899b      	ldrh	r3, [r3, #12]
 8008e66:	eb0a 0585 	add.w	r5, sl, r5, lsl #2
 8008e6a:	42a3      	cmp	r3, r4
 8008e6c:	f848 5b04 	str.w	r5, [r8], #4
 8008e70:	dca9      	bgt.n	8008dc6 <forward_lstm+0x1656>
 8008e72:	e7b1      	b.n	8008dd8 <forward_lstm+0x1668>
 8008e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e78:	f8d7 b0fc 	ldr.w	fp, [r7, #252]	; 0xfc
 8008e7c:	4662      	mov	r2, ip
 8008e7e:	e6e5      	b.n	8008c4c <forward_lstm+0x14dc>
 8008e80:	4603      	mov	r3, r0
 8008e82:	e5d1      	b.n	8008a28 <forward_lstm+0x12b8>
 8008e84:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e88:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008e8c:	465a      	mov	r2, fp
 8008e8e:	e44d      	b.n	800872c <forward_lstm+0xfbc>
 8008e90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e94:	f7ff bb54 	b.w	8008540 <forward_lstm+0xdd0>
 8008e98:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008e9c:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008ea0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8008ea4:	f7ff ba3a 	b.w	800831c <forward_lstm+0xbac>
 8008ea8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8008eac:	f7ff b93a 	b.w	8008124 <forward_lstm+0x9b4>
 8008eb0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8008eb4:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8008eb8:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8008ebc:	f7ff b822 	b.w	8007f04 <forward_lstm+0x794>
 8008ec0:	f8d7 50dc 	ldr.w	r5, [r7, #220]	; 0xdc
 8008ec4:	f8d7 40e0 	ldr.w	r4, [r7, #224]	; 0xe0
 8008ec8:	4653      	mov	r3, sl
 8008eca:	f7fe bf23 	b.w	8007d14 <forward_lstm+0x5a4>
 8008ece:	f507 71b0 	add.w	r1, r7, #352	; 0x160
 8008ed2:	6ffc      	ldr	r4, [r7, #124]	; 0x7c
 8008ed4:	ee19 3a90 	vmov	r3, s19
 8008ed8:	4608      	mov	r0, r1
 8008eda:	4690      	mov	r8, r2
 8008edc:	47a0      	blx	r4
 8008ede:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8008ee2:	ee19 3a90 	vmov	r3, s19
 8008ee6:	4642      	mov	r2, r8
 8008ee8:	4608      	mov	r0, r1
 8008eea:	47a0      	blx	r4
 8008eec:	f507 71cc 	add.w	r1, r7, #408	; 0x198
 8008ef0:	ee1a 3a90 	vmov	r3, s21
 8008ef4:	4642      	mov	r2, r8
 8008ef6:	4608      	mov	r0, r1
 8008ef8:	6c7d      	ldr	r5, [r7, #68]	; 0x44
 8008efa:	47a8      	blx	r5
 8008efc:	f507 71da 	add.w	r1, r7, #436	; 0x1b4
 8008f00:	ee19 3a90 	vmov	r3, s19
 8008f04:	4642      	mov	r2, r8
 8008f06:	4608      	mov	r0, r1
 8008f08:	47a0      	blx	r4
 8008f0a:	ee1a 3a10 	vmov	r3, s20
 8008f0e:	6c3c      	ldr	r4, [r7, #64]	; 0x40
 8008f10:	4642      	mov	r2, r8
 8008f12:	f507 71f6 	add.w	r1, r7, #492	; 0x1ec
 8008f16:	f507 70e8 	add.w	r0, r7, #464	; 0x1d0
 8008f1a:	47a0      	blx	r4
 8008f1c:	e74b      	b.n	8008db6 <forward_lstm+0x1646>
 8008f1e:	b353      	cbz	r3, 8008f76 <forward_lstm+0x1806>
 8008f20:	e9d7 5403 	ldrd	r5, r4, [r7, #12]
 8008f24:	f8d7 8090 	ldr.w	r8, [r7, #144]	; 0x90
 8008f28:	f8d7 9094 	ldr.w	r9, [r7, #148]	; 0x94
 8008f2c:	f8d7 a008 	ldr.w	sl, [r7, #8]
 8008f30:	ee19 ba10 	vmov	fp, s18
 8008f34:	2600      	movs	r6, #0
 8008f36:	e00b      	b.n	8008f50 <forward_lstm+0x17e0>
 8008f38:	6821      	ldr	r1, [r4, #0]
 8008f3a:	465a      	mov	r2, fp
 8008f3c:	4648      	mov	r0, r9
 8008f3e:	f000 f9d1 	bl	80092e4 <st_int8_copy>
 8008f42:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008f46:	3601      	adds	r6, #1
 8008f48:	42b3      	cmp	r3, r6
 8008f4a:	f104 0404 	add.w	r4, r4, #4
 8008f4e:	dd12      	ble.n	8008f76 <forward_lstm+0x1806>
 8008f50:	f855 2f04 	ldr.w	r2, [r5, #4]!
 8008f54:	2a00      	cmp	r2, #0
 8008f56:	d1f6      	bne.n	8008f46 <forward_lstm+0x17d6>
 8008f58:	3b01      	subs	r3, #1
 8008f5a:	42b3      	cmp	r3, r6
 8008f5c:	d1ec      	bne.n	8008f38 <forward_lstm+0x17c8>
 8008f5e:	f89a 303d 	ldrb.w	r3, [sl, #61]	; 0x3d
 8008f62:	2b00      	cmp	r3, #0
 8008f64:	d0e8      	beq.n	8008f38 <forward_lstm+0x17c8>
 8008f66:	6821      	ldr	r1, [r4, #0]
 8008f68:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008f6a:	465a      	mov	r2, fp
 8008f6c:	f000 f9ba 	bl	80092e4 <st_int8_copy>
 8008f70:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8008f74:	e7e7      	b.n	8008f46 <forward_lstm+0x17d6>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	b18b      	cbz	r3, 8008f9e <forward_lstm+0x182e>
 8008f7a:	68bb      	ldr	r3, [r7, #8]
 8008f7c:	69dc      	ldr	r4, [r3, #28]
 8008f7e:	b174      	cbz	r4, 8008f9e <forward_lstm+0x182e>
 8008f80:	ee19 5a10 	vmov	r5, s18
 8008f84:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8008f86:	ee19 2a10 	vmov	r2, s18
 8008f8a:	4621      	mov	r1, r4
 8008f8c:	f000 f9aa 	bl	80092e4 <st_int8_copy>
 8008f90:	ee19 2a10 	vmov	r2, s18
 8008f94:	f8d7 0094 	ldr.w	r0, [r7, #148]	; 0x94
 8008f98:	1961      	adds	r1, r4, r5
 8008f9a:	f000 f9a3 	bl	80092e4 <st_int8_copy>
 8008f9e:	f507 7703 	add.w	r7, r7, #524	; 0x20c
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	ecbd 8b06 	vpop	{d8-d10}
 8008fa8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008fb4:	4613      	mov	r3, r2
 8008fb6:	f7fe bd00 	b.w	80079ba <forward_lstm+0x24a>
 8008fba:	ee0a 0a10 	vmov	s20, r0
 8008fbe:	ee09 0a90 	vmov	s19, r0
 8008fc2:	ee0a 0a90 	vmov	s21, r0
 8008fc6:	4681      	mov	r9, r0
 8008fc8:	f7fe bc56 	b.w	8007878 <forward_lstm+0x108>
 8008fcc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
 8008fd0:	4683      	mov	fp, r0
 8008fd2:	f8c7 00f0 	str.w	r0, [r7, #240]	; 0xf0
 8008fd6:	f8c7 00f8 	str.w	r0, [r7, #248]	; 0xf8
 8008fda:	f7fe bbf4 	b.w	80077c6 <forward_lstm+0x56>
 8008fde:	2300      	movs	r3, #0
 8008fe0:	685b      	ldr	r3, [r3, #4]
 8008fe2:	deff      	udf	#255	; 0xff

08008fe4 <forward_lite_dense_if32of32wf32>:
 8008fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fe8:	e9dd 6409 	ldrd	r6, r4, [sp, #36]	; 0x24
 8008fec:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008ff0:	4287      	cmp	r7, r0
 8008ff2:	f240 8106 	bls.w	8009202 <forward_lite_dense_if32of32wf32+0x21e>
 8008ff6:	f1a6 0810 	sub.w	r8, r6, #16
 8008ffa:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008ffe:	f108 0801 	add.w	r8, r8, #1
 8009002:	ea4f 1b88 	mov.w	fp, r8, lsl #6
 8009006:	ea4f 0986 	mov.w	r9, r6, lsl #2
 800900a:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 800900e:	4605      	mov	r5, r0
 8009010:	f006 0a0f 	and.w	sl, r6, #15
 8009014:	2e0f      	cmp	r6, #15
 8009016:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8009228 <forward_lite_dense_if32of32wf32+0x244>
 800901a:	f240 8101 	bls.w	8009220 <forward_lite_dense_if32of32wf32+0x23c>
 800901e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8009022:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8009026:	46b6      	mov	lr, r6
 8009028:	ed54 5a0f 	vldr	s11, [r4, #-60]	; 0xffffffc4
 800902c:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8009030:	ed1c 6a10 	vldr	s12, [ip, #-64]	; 0xffffffc0
 8009034:	ed54 6a10 	vldr	s13, [r4, #-64]	; 0xffffffc0
 8009038:	ed5c 4a0d 	vldr	s9, [ip, #-52]	; 0xffffffcc
 800903c:	ed1c 5a0c 	vldr	s10, [ip, #-48]	; 0xffffffd0
 8009040:	ed1c 3a0a 	vldr	s6, [ip, #-40]	; 0xffffffd8
 8009044:	ed54 3a0a 	vldr	s7, [r4, #-40]	; 0xffffffd8
 8009048:	ed1c 4a09 	vldr	s8, [ip, #-36]	; 0xffffffdc
 800904c:	ed1c 1a06 	vldr	s2, [ip, #-24]	; 0xffffffe8
 8009050:	ed54 1a06 	vldr	s3, [r4, #-24]	; 0xffffffe8
 8009054:	ed1c 2a05 	vldr	s4, [ip, #-20]	; 0xffffffec
 8009058:	ed54 2a05 	vldr	s5, [r4, #-20]	; 0xffffffec
 800905c:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8009060:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8009064:	eee6 7a26 	vfma.f32	s15, s12, s13
 8009068:	f1ae 0e10 	sub.w	lr, lr, #16
 800906c:	f1be 0f0f 	cmp.w	lr, #15
 8009070:	ed14 6a0e 	vldr	s12, [r4, #-56]	; 0xffffffc8
 8009074:	ed54 6a0d 	vldr	s13, [r4, #-52]	; 0xffffffcc
 8009078:	eee5 7a86 	vfma.f32	s15, s11, s12
 800907c:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8009080:	f104 0440 	add.w	r4, r4, #64	; 0x40
 8009084:	ed54 5a1c 	vldr	s11, [r4, #-112]	; 0xffffff90
 8009088:	ed1c 6a1b 	vldr	s12, [ip, #-108]	; 0xffffff94
 800908c:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8009090:	ed54 6a1b 	vldr	s13, [r4, #-108]	; 0xffffff94
 8009094:	ed54 4a19 	vldr	s9, [r4, #-100]	; 0xffffff9c
 8009098:	eee5 7a25 	vfma.f32	s15, s10, s11
 800909c:	ed1c 5a18 	vldr	s10, [ip, #-96]	; 0xffffffa0
 80090a0:	ed54 5a18 	vldr	s11, [r4, #-96]	; 0xffffffa0
 80090a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80090a8:	ed1c 6a17 	vldr	s12, [ip, #-92]	; 0xffffffa4
 80090ac:	ed54 6a17 	vldr	s13, [r4, #-92]	; 0xffffffa4
 80090b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80090b4:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 80090b8:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 80090bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80090c0:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 80090c4:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 80090c8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80090cc:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 80090d0:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 80090d4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80090d8:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 80090dc:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 80090e0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80090e4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80090e8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80090ec:	eee4 7a24 	vfma.f32	s15, s8, s9
 80090f0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80090f4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80090f8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80090fc:	d894      	bhi.n	8009028 <forward_lite_dense_if32of32wf32+0x44>
 80090fe:	eb02 0e0b 	add.w	lr, r2, fp
 8009102:	4654      	mov	r4, sl
 8009104:	46c4      	mov	ip, r8
 8009106:	2c00      	cmp	r4, #0
 8009108:	d075      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800910a:	eddc 6a00 	vldr	s13, [ip]
 800910e:	edde 7a00 	vldr	s15, [lr]
 8009112:	2c01      	cmp	r4, #1
 8009114:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009118:	d06d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800911a:	eddc 6a01 	vldr	s13, [ip, #4]
 800911e:	edde 7a01 	vldr	s15, [lr, #4]
 8009122:	2c02      	cmp	r4, #2
 8009124:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009128:	d065      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800912a:	eddc 6a02 	vldr	s13, [ip, #8]
 800912e:	edde 7a02 	vldr	s15, [lr, #8]
 8009132:	2c03      	cmp	r4, #3
 8009134:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009138:	d05d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800913a:	eddc 6a03 	vldr	s13, [ip, #12]
 800913e:	edde 7a03 	vldr	s15, [lr, #12]
 8009142:	2c04      	cmp	r4, #4
 8009144:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009148:	d055      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800914a:	eddc 6a04 	vldr	s13, [ip, #16]
 800914e:	edde 7a04 	vldr	s15, [lr, #16]
 8009152:	2c05      	cmp	r4, #5
 8009154:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009158:	d04d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800915a:	eddc 6a05 	vldr	s13, [ip, #20]
 800915e:	edde 7a05 	vldr	s15, [lr, #20]
 8009162:	2c06      	cmp	r4, #6
 8009164:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009168:	d045      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800916a:	eddc 6a06 	vldr	s13, [ip, #24]
 800916e:	edde 7a06 	vldr	s15, [lr, #24]
 8009172:	2c07      	cmp	r4, #7
 8009174:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009178:	d03d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800917a:	eddc 6a07 	vldr	s13, [ip, #28]
 800917e:	edde 7a07 	vldr	s15, [lr, #28]
 8009182:	2c08      	cmp	r4, #8
 8009184:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009188:	d035      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800918a:	eddc 6a08 	vldr	s13, [ip, #32]
 800918e:	edde 7a08 	vldr	s15, [lr, #32]
 8009192:	2c09      	cmp	r4, #9
 8009194:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009198:	d02d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 800919a:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 800919e:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 80091a2:	2c0a      	cmp	r4, #10
 80091a4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091a8:	d025      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 80091aa:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 80091ae:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 80091b2:	2c0b      	cmp	r4, #11
 80091b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091b8:	d01d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 80091ba:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 80091be:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 80091c2:	2c0c      	cmp	r4, #12
 80091c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091c8:	d015      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 80091ca:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 80091ce:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 80091d2:	3c0d      	subs	r4, #13
 80091d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091d8:	d00d      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 80091da:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 80091de:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 80091e2:	2c01      	cmp	r4, #1
 80091e4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091e8:	d005      	beq.n	80091f6 <forward_lite_dense_if32of32wf32+0x212>
 80091ea:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 80091ee:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 80091f2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80091f6:	444a      	add	r2, r9
 80091f8:	eca5 7a01 	vstmia	r5!, {s14}
 80091fc:	42af      	cmp	r7, r5
 80091fe:	f63f af09 	bhi.w	8009014 <forward_lite_dense_if32of32wf32+0x30>
 8009202:	b15b      	cbz	r3, 800921c <forward_lite_dense_if32of32wf32+0x238>
 8009204:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009206:	b14a      	cbz	r2, 800921c <forward_lite_dense_if32of32wf32+0x238>
 8009208:	edd0 7a00 	vldr	s15, [r0]
 800920c:	ecb3 7a01 	vldmia	r3!, {s14}
 8009210:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009214:	ece0 7a01 	vstmia	r0!, {s15}
 8009218:	4287      	cmp	r7, r0
 800921a:	d1f5      	bne.n	8009208 <forward_lite_dense_if32of32wf32+0x224>
 800921c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009220:	4634      	mov	r4, r6
 8009222:	4696      	mov	lr, r2
 8009224:	468c      	mov	ip, r1
 8009226:	e76e      	b.n	8009106 <forward_lite_dense_if32of32wf32+0x122>
 8009228:	00000000 	.word	0x00000000

0800922c <st_int8_fill>:
 800922c:	b510      	push	{r4, lr}
 800922e:	b2c3      	uxtb	r3, r0
 8009230:	0204      	lsls	r4, r0, #8
 8009232:	b2a4      	uxth	r4, r4
 8009234:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
 8009238:	4323      	orrs	r3, r4
 800923a:	0404      	lsls	r4, r0, #16
 800923c:	f404 047f 	and.w	r4, r4, #16711680	; 0xff0000
 8009240:	431c      	orrs	r4, r3
 8009242:	078b      	lsls	r3, r1, #30
 8009244:	468c      	mov	ip, r1
 8009246:	d007      	beq.n	8009258 <st_int8_fill+0x2c>
 8009248:	b3a2      	cbz	r2, 80092b4 <st_int8_fill+0x88>
 800924a:	f80c 0b01 	strb.w	r0, [ip], #1
 800924e:	f01c 0f03 	tst.w	ip, #3
 8009252:	f102 32ff 	add.w	r2, r2, #4294967295
 8009256:	d1f7      	bne.n	8009248 <st_int8_fill+0x1c>
 8009258:	0911      	lsrs	r1, r2, #4
 800925a:	d03e      	beq.n	80092da <st_int8_fill+0xae>
 800925c:	1e4b      	subs	r3, r1, #1
 800925e:	2b04      	cmp	r3, #4
 8009260:	d929      	bls.n	80092b6 <st_int8_fill+0x8a>
 8009262:	f01c 0f07 	tst.w	ip, #7
 8009266:	d126      	bne.n	80092b6 <st_int8_fill+0x8a>
 8009268:	f10c 0310 	add.w	r3, ip, #16
 800926c:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 8009270:	eb03 1101 	add.w	r1, r3, r1, lsl #4
 8009274:	e943 4404 	strd	r4, r4, [r3, #-16]
 8009278:	e943 4402 	strd	r4, r4, [r3, #-8]
 800927c:	3310      	adds	r3, #16
 800927e:	428b      	cmp	r3, r1
 8009280:	d1f8      	bne.n	8009274 <st_int8_fill+0x48>
 8009282:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009286:	44f4      	add	ip, lr
 8009288:	f002 0203 	and.w	r2, r2, #3
 800928c:	b15b      	cbz	r3, 80092a6 <st_int8_fill+0x7a>
 800928e:	1e59      	subs	r1, r3, #1
 8009290:	f8cc 4000 	str.w	r4, [ip]
 8009294:	d005      	beq.n	80092a2 <st_int8_fill+0x76>
 8009296:	2901      	cmp	r1, #1
 8009298:	f8cc 4004 	str.w	r4, [ip, #4]
 800929c:	bf18      	it	ne
 800929e:	f8cc 4008 	strne.w	r4, [ip, #8]
 80092a2:	eb0c 0c83 	add.w	ip, ip, r3, lsl #2
 80092a6:	b12a      	cbz	r2, 80092b4 <st_int8_fill+0x88>
 80092a8:	4601      	mov	r1, r0
 80092aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80092ae:	4660      	mov	r0, ip
 80092b0:	f002 b93a 	b.w	800b528 <memset>
 80092b4:	bd10      	pop	{r4, pc}
 80092b6:	ea4f 1e01 	mov.w	lr, r1, lsl #4
 80092ba:	4663      	mov	r3, ip
 80092bc:	eb0c 1101 	add.w	r1, ip, r1, lsl #4
 80092c0:	601c      	str	r4, [r3, #0]
 80092c2:	605c      	str	r4, [r3, #4]
 80092c4:	609c      	str	r4, [r3, #8]
 80092c6:	60dc      	str	r4, [r3, #12]
 80092c8:	3310      	adds	r3, #16
 80092ca:	4299      	cmp	r1, r3
 80092cc:	d1f8      	bne.n	80092c0 <st_int8_fill+0x94>
 80092ce:	f3c2 0381 	ubfx	r3, r2, #2, #2
 80092d2:	44f4      	add	ip, lr
 80092d4:	f002 0203 	and.w	r2, r2, #3
 80092d8:	e7d8      	b.n	800928c <st_int8_fill+0x60>
 80092da:	0893      	lsrs	r3, r2, #2
 80092dc:	f002 0203 	and.w	r2, r2, #3
 80092e0:	e7d4      	b.n	800928c <st_int8_fill+0x60>
 80092e2:	bf00      	nop

080092e4 <st_int8_copy>:
 80092e4:	4288      	cmp	r0, r1
 80092e6:	d057      	beq.n	8009398 <st_int8_copy+0xb4>
 80092e8:	2a00      	cmp	r2, #0
 80092ea:	d055      	beq.n	8009398 <st_int8_copy+0xb4>
 80092ec:	4288      	cmp	r0, r1
 80092ee:	d354      	bcc.n	800939a <st_int8_copy+0xb6>
 80092f0:	078b      	lsls	r3, r1, #30
 80092f2:	d102      	bne.n	80092fa <st_int8_copy+0x16>
 80092f4:	e009      	b.n	800930a <st_int8_copy+0x26>
 80092f6:	2a00      	cmp	r2, #0
 80092f8:	d05c      	beq.n	80093b4 <st_int8_copy+0xd0>
 80092fa:	f910 3b01 	ldrsb.w	r3, [r0], #1
 80092fe:	f801 3b01 	strb.w	r3, [r1], #1
 8009302:	078b      	lsls	r3, r1, #30
 8009304:	f102 32ff 	add.w	r2, r2, #4294967295
 8009308:	d1f5      	bne.n	80092f6 <st_int8_copy+0x12>
 800930a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800930e:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8009312:	d069      	beq.n	80093e8 <st_int8_copy+0x104>
 8009314:	ea41 0300 	orr.w	r3, r1, r0
 8009318:	075b      	lsls	r3, r3, #29
 800931a:	d14c      	bne.n	80093b6 <st_int8_copy+0xd2>
 800931c:	f10e 33ff 	add.w	r3, lr, #4294967295
 8009320:	2b01      	cmp	r3, #1
 8009322:	d948      	bls.n	80093b6 <st_int8_copy+0xd2>
 8009324:	f100 0310 	add.w	r3, r0, #16
 8009328:	ea4f 140e 	mov.w	r4, lr, lsl #4
 800932c:	f101 0c10 	add.w	ip, r1, #16
 8009330:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8009334:	ed13 6b04 	vldr	d6, [r3, #-16]
 8009338:	ed13 7b02 	vldr	d7, [r3, #-8]
 800933c:	3310      	adds	r3, #16
 800933e:	4573      	cmp	r3, lr
 8009340:	ed0c 6b04 	vstr	d6, [ip, #-16]
 8009344:	ed0c 7b02 	vstr	d7, [ip, #-8]
 8009348:	f10c 0c10 	add.w	ip, ip, #16
 800934c:	d1f2      	bne.n	8009334 <st_int8_copy+0x50>
 800934e:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8009352:	4421      	add	r1, r4
 8009354:	4420      	add	r0, r4
 8009356:	f002 0203 	and.w	r2, r2, #3
 800935a:	b16b      	cbz	r3, 8009378 <st_int8_copy+0x94>
 800935c:	6804      	ldr	r4, [r0, #0]
 800935e:	600c      	str	r4, [r1, #0]
 8009360:	1e5c      	subs	r4, r3, #1
 8009362:	d005      	beq.n	8009370 <st_int8_copy+0x8c>
 8009364:	6845      	ldr	r5, [r0, #4]
 8009366:	604d      	str	r5, [r1, #4]
 8009368:	2c01      	cmp	r4, #1
 800936a:	bf1c      	itt	ne
 800936c:	6884      	ldrne	r4, [r0, #8]
 800936e:	608c      	strne	r4, [r1, #8]
 8009370:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8009374:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8009378:	b162      	cbz	r2, 8009394 <st_int8_copy+0xb0>
 800937a:	f990 3000 	ldrsb.w	r3, [r0]
 800937e:	700b      	strb	r3, [r1, #0]
 8009380:	3a01      	subs	r2, #1
 8009382:	d007      	beq.n	8009394 <st_int8_copy+0xb0>
 8009384:	f990 3001 	ldrsb.w	r3, [r0, #1]
 8009388:	704b      	strb	r3, [r1, #1]
 800938a:	2a01      	cmp	r2, #1
 800938c:	bf1c      	itt	ne
 800938e:	f990 3002 	ldrsbne.w	r3, [r0, #2]
 8009392:	708b      	strbne	r3, [r1, #2]
 8009394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009398:	4770      	bx	lr
 800939a:	1883      	adds	r3, r0, r2
 800939c:	428b      	cmp	r3, r1
 800939e:	d9a7      	bls.n	80092f0 <st_int8_copy+0xc>
 80093a0:	4283      	cmp	r3, r0
 80093a2:	440a      	add	r2, r1
 80093a4:	d9f8      	bls.n	8009398 <st_int8_copy+0xb4>
 80093a6:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 80093aa:	f802 1d01 	strb.w	r1, [r2, #-1]!
 80093ae:	4283      	cmp	r3, r0
 80093b0:	d1f9      	bne.n	80093a6 <st_int8_copy+0xc2>
 80093b2:	4770      	bx	lr
 80093b4:	4770      	bx	lr
 80093b6:	ea4f 140e 	mov.w	r4, lr, lsl #4
 80093ba:	460b      	mov	r3, r1
 80093bc:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 80093c0:	4684      	mov	ip, r0
 80093c2:	f8dc 7000 	ldr.w	r7, [ip]
 80093c6:	f8dc 6004 	ldr.w	r6, [ip, #4]
 80093ca:	f8dc 5008 	ldr.w	r5, [ip, #8]
 80093ce:	f8dc 800c 	ldr.w	r8, [ip, #12]
 80093d2:	f8c3 800c 	str.w	r8, [r3, #12]
 80093d6:	601f      	str	r7, [r3, #0]
 80093d8:	605e      	str	r6, [r3, #4]
 80093da:	609d      	str	r5, [r3, #8]
 80093dc:	3310      	adds	r3, #16
 80093de:	459e      	cmp	lr, r3
 80093e0:	f10c 0c10 	add.w	ip, ip, #16
 80093e4:	d1ed      	bne.n	80093c2 <st_int8_copy+0xde>
 80093e6:	e7b2      	b.n	800934e <st_int8_copy+0x6a>
 80093e8:	0893      	lsrs	r3, r2, #2
 80093ea:	f002 0203 	and.w	r2, r2, #3
 80093ee:	e7b4      	b.n	800935a <st_int8_copy+0x76>

080093f0 <ai_array_to_buffer_fmt>:
 80093f0:	f3c0 4343 	ubfx	r3, r0, #17, #4
 80093f4:	2b02      	cmp	r3, #2
 80093f6:	d050      	beq.n	800949a <ai_array_to_buffer_fmt+0xaa>
 80093f8:	4b2a      	ldr	r3, [pc, #168]	; (80094a4 <ai_array_to_buffer_fmt+0xb4>)
 80093fa:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 80093fe:	429a      	cmp	r2, r3
 8009400:	d00b      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 8009402:	dc1c      	bgt.n	800943e <ai_array_to_buffer_fmt+0x4e>
 8009404:	4b28      	ldr	r3, [pc, #160]	; (80094a8 <ai_array_to_buffer_fmt+0xb8>)
 8009406:	429a      	cmp	r2, r3
 8009408:	d007      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 800940a:	dd0b      	ble.n	8009424 <ai_array_to_buffer_fmt+0x34>
 800940c:	4b27      	ldr	r3, [pc, #156]	; (80094ac <ai_array_to_buffer_fmt+0xbc>)
 800940e:	429a      	cmp	r2, r3
 8009410:	d003      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 8009412:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8009416:	429a      	cmp	r2, r3
 8009418:	d131      	bne.n	800947e <ai_array_to_buffer_fmt+0x8e>
 800941a:	4613      	mov	r3, r2
 800941c:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009420:	4318      	orrs	r0, r3
 8009422:	4770      	bx	lr
 8009424:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009428:	429a      	cmp	r2, r3
 800942a:	d0f6      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 800942c:	dd2c      	ble.n	8009488 <ai_array_to_buffer_fmt+0x98>
 800942e:	4b20      	ldr	r3, [pc, #128]	; (80094b0 <ai_array_to_buffer_fmt+0xc0>)
 8009430:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8009434:	429a      	cmp	r2, r3
 8009436:	bf18      	it	ne
 8009438:	2340      	movne	r3, #64	; 0x40
 800943a:	4318      	orrs	r0, r3
 800943c:	4770      	bx	lr
 800943e:	4b1d      	ldr	r3, [pc, #116]	; (80094b4 <ai_array_to_buffer_fmt+0xc4>)
 8009440:	429a      	cmp	r2, r3
 8009442:	d0ea      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 8009444:	dd0e      	ble.n	8009464 <ai_array_to_buffer_fmt+0x74>
 8009446:	4b1c      	ldr	r3, [pc, #112]	; (80094b8 <ai_array_to_buffer_fmt+0xc8>)
 8009448:	429a      	cmp	r2, r3
 800944a:	d0e6      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 800944c:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 8009450:	429a      	cmp	r2, r3
 8009452:	d0e2      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 8009454:	4b19      	ldr	r3, [pc, #100]	; (80094bc <ai_array_to_buffer_fmt+0xcc>)
 8009456:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800945a:	429a      	cmp	r2, r3
 800945c:	bf18      	it	ne
 800945e:	2340      	movne	r3, #64	; 0x40
 8009460:	4318      	orrs	r0, r3
 8009462:	4770      	bx	lr
 8009464:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8009468:	429a      	cmp	r2, r3
 800946a:	d0d6      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 800946c:	3307      	adds	r3, #7
 800946e:	429a      	cmp	r2, r3
 8009470:	d0d3      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 8009472:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 8009476:	429a      	cmp	r2, r3
 8009478:	bf18      	it	ne
 800947a:	2340      	movne	r3, #64	; 0x40
 800947c:	e7ce      	b.n	800941c <ai_array_to_buffer_fmt+0x2c>
 800947e:	4b10      	ldr	r3, [pc, #64]	; (80094c0 <ai_array_to_buffer_fmt+0xd0>)
 8009480:	429a      	cmp	r2, r3
 8009482:	bf18      	it	ne
 8009484:	2340      	movne	r3, #64	; 0x40
 8009486:	e7c9      	b.n	800941c <ai_array_to_buffer_fmt+0x2c>
 8009488:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 800948c:	429a      	cmp	r2, r3
 800948e:	d0c4      	beq.n	800941a <ai_array_to_buffer_fmt+0x2a>
 8009490:	3380      	adds	r3, #128	; 0x80
 8009492:	429a      	cmp	r2, r3
 8009494:	bf18      	it	ne
 8009496:	2340      	movne	r3, #64	; 0x40
 8009498:	e7c0      	b.n	800941c <ai_array_to_buffer_fmt+0x2c>
 800949a:	4b0a      	ldr	r3, [pc, #40]	; (80094c4 <ai_array_to_buffer_fmt+0xd4>)
 800949c:	4003      	ands	r3, r0
 800949e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80094a2:	e7bb      	b.n	800941c <ai_array_to_buffer_fmt+0x2c>
 80094a4:	00840040 	.word	0x00840040
 80094a8:	00040840 	.word	0x00040840
 80094ac:	00041040 	.word	0x00041040
 80094b0:	00040447 	.word	0x00040447
 80094b4:	00840840 	.word	0x00840840
 80094b8:	00841040 	.word	0x00841040
 80094bc:	0084084f 	.word	0x0084084f
 80094c0:	0004084f 	.word	0x0004084f
 80094c4:	00803fff 	.word	0x00803fff

080094c8 <ai_array_get_byte_size>:
 80094c8:	b319      	cbz	r1, 8009512 <ai_array_get_byte_size+0x4a>
 80094ca:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80094ce:	fb03 f101 	mul.w	r1, r3, r1
 80094d2:	3107      	adds	r1, #7
 80094d4:	f3c0 4243 	ubfx	r2, r0, #17, #4
 80094d8:	f021 0307 	bic.w	r3, r1, #7
 80094dc:	2a04      	cmp	r2, #4
 80094de:	f3c0 5141 	ubfx	r1, r0, #21, #2
 80094e2:	fa23 f101 	lsr.w	r1, r3, r1
 80094e6:	ea4f 10e0 	mov.w	r0, r0, asr #7
 80094ea:	d00b      	beq.n	8009504 <ai_array_get_byte_size+0x3c>
 80094ec:	2a08      	cmp	r2, #8
 80094ee:	d002      	beq.n	80094f6 <ai_array_get_byte_size+0x2e>
 80094f0:	3107      	adds	r1, #7
 80094f2:	08c8      	lsrs	r0, r1, #3
 80094f4:	4770      	bx	lr
 80094f6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 80094fa:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 80094fe:	3107      	adds	r1, #7
 8009500:	08c8      	lsrs	r0, r1, #3
 8009502:	4770      	bx	lr
 8009504:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8009508:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 800950c:	3107      	adds	r1, #7
 800950e:	08c8      	lsrs	r0, r1, #3
 8009510:	4770      	bx	lr
 8009512:	4608      	mov	r0, r1
 8009514:	4770      	bx	lr
 8009516:	bf00      	nop

08009518 <ai_array_get_data_byte_size>:
 8009518:	b169      	cbz	r1, 8009536 <ai_array_get_data_byte_size+0x1e>
 800951a:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 800951e:	fb02 f101 	mul.w	r1, r2, r1
 8009522:	1dcb      	adds	r3, r1, #7
 8009524:	f023 0307 	bic.w	r3, r3, #7
 8009528:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800952c:	fa23 f000 	lsr.w	r0, r3, r0
 8009530:	3007      	adds	r0, #7
 8009532:	08c0      	lsrs	r0, r0, #3
 8009534:	4770      	bx	lr
 8009536:	4608      	mov	r0, r1
 8009538:	4770      	bx	lr
 800953a:	bf00      	nop

0800953c <ai_version_get>:
 800953c:	0212      	lsls	r2, r2, #8
 800953e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009542:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 8009546:	4770      	bx	lr

08009548 <get_tensor_byte_size>:
 8009548:	b410      	push	{r4}
 800954a:	6983      	ldr	r3, [r0, #24]
 800954c:	68c4      	ldr	r4, [r0, #12]
 800954e:	6941      	ldr	r1, [r0, #20]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	68e0      	ldr	r0, [r4, #12]
 8009554:	4a07      	ldr	r2, [pc, #28]	; (8009574 <get_tensor_byte_size+0x2c>)
 8009556:	68c9      	ldr	r1, [r1, #12]
 8009558:	f85d 4b04 	ldr.w	r4, [sp], #4
 800955c:	f023 437e 	bic.w	r3, r3, #4261412864	; 0xfe000000
 8009560:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009564:	fb01 f000 	mul.w	r0, r1, r0
 8009568:	4293      	cmp	r3, r2
 800956a:	bf04      	itt	eq
 800956c:	3007      	addeq	r0, #7
 800956e:	08c0      	lsreq	r0, r0, #3
 8009570:	4770      	bx	lr
 8009572:	bf00      	nop
 8009574:	000400c0 	.word	0x000400c0

08009578 <atof>:
 8009578:	2100      	movs	r1, #0
 800957a:	f000 bef7 	b.w	800a36c <strtod>
	...

08009580 <malloc>:
 8009580:	4b02      	ldr	r3, [pc, #8]	; (800958c <malloc+0xc>)
 8009582:	4601      	mov	r1, r0
 8009584:	6818      	ldr	r0, [r3, #0]
 8009586:	f000 b823 	b.w	80095d0 <_malloc_r>
 800958a:	bf00      	nop
 800958c:	20000e24 	.word	0x20000e24

08009590 <sbrk_aligned>:
 8009590:	b570      	push	{r4, r5, r6, lr}
 8009592:	4e0e      	ldr	r6, [pc, #56]	; (80095cc <sbrk_aligned+0x3c>)
 8009594:	460c      	mov	r4, r1
 8009596:	6831      	ldr	r1, [r6, #0]
 8009598:	4605      	mov	r5, r0
 800959a:	b911      	cbnz	r1, 80095a2 <sbrk_aligned+0x12>
 800959c:	f002 f816 	bl	800b5cc <_sbrk_r>
 80095a0:	6030      	str	r0, [r6, #0]
 80095a2:	4621      	mov	r1, r4
 80095a4:	4628      	mov	r0, r5
 80095a6:	f002 f811 	bl	800b5cc <_sbrk_r>
 80095aa:	1c43      	adds	r3, r0, #1
 80095ac:	d00a      	beq.n	80095c4 <sbrk_aligned+0x34>
 80095ae:	1cc4      	adds	r4, r0, #3
 80095b0:	f024 0403 	bic.w	r4, r4, #3
 80095b4:	42a0      	cmp	r0, r4
 80095b6:	d007      	beq.n	80095c8 <sbrk_aligned+0x38>
 80095b8:	1a21      	subs	r1, r4, r0
 80095ba:	4628      	mov	r0, r5
 80095bc:	f002 f806 	bl	800b5cc <_sbrk_r>
 80095c0:	3001      	adds	r0, #1
 80095c2:	d101      	bne.n	80095c8 <sbrk_aligned+0x38>
 80095c4:	f04f 34ff 	mov.w	r4, #4294967295
 80095c8:	4620      	mov	r0, r4
 80095ca:	bd70      	pop	{r4, r5, r6, pc}
 80095cc:	20004484 	.word	0x20004484

080095d0 <_malloc_r>:
 80095d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80095d4:	1ccd      	adds	r5, r1, #3
 80095d6:	f025 0503 	bic.w	r5, r5, #3
 80095da:	3508      	adds	r5, #8
 80095dc:	2d0c      	cmp	r5, #12
 80095de:	bf38      	it	cc
 80095e0:	250c      	movcc	r5, #12
 80095e2:	2d00      	cmp	r5, #0
 80095e4:	4607      	mov	r7, r0
 80095e6:	db01      	blt.n	80095ec <_malloc_r+0x1c>
 80095e8:	42a9      	cmp	r1, r5
 80095ea:	d905      	bls.n	80095f8 <_malloc_r+0x28>
 80095ec:	230c      	movs	r3, #12
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	2600      	movs	r6, #0
 80095f2:	4630      	mov	r0, r6
 80095f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80095f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80096cc <_malloc_r+0xfc>
 80095fc:	f000 f868 	bl	80096d0 <__malloc_lock>
 8009600:	f8d8 3000 	ldr.w	r3, [r8]
 8009604:	461c      	mov	r4, r3
 8009606:	bb5c      	cbnz	r4, 8009660 <_malloc_r+0x90>
 8009608:	4629      	mov	r1, r5
 800960a:	4638      	mov	r0, r7
 800960c:	f7ff ffc0 	bl	8009590 <sbrk_aligned>
 8009610:	1c43      	adds	r3, r0, #1
 8009612:	4604      	mov	r4, r0
 8009614:	d155      	bne.n	80096c2 <_malloc_r+0xf2>
 8009616:	f8d8 4000 	ldr.w	r4, [r8]
 800961a:	4626      	mov	r6, r4
 800961c:	2e00      	cmp	r6, #0
 800961e:	d145      	bne.n	80096ac <_malloc_r+0xdc>
 8009620:	2c00      	cmp	r4, #0
 8009622:	d048      	beq.n	80096b6 <_malloc_r+0xe6>
 8009624:	6823      	ldr	r3, [r4, #0]
 8009626:	4631      	mov	r1, r6
 8009628:	4638      	mov	r0, r7
 800962a:	eb04 0903 	add.w	r9, r4, r3
 800962e:	f001 ffcd 	bl	800b5cc <_sbrk_r>
 8009632:	4581      	cmp	r9, r0
 8009634:	d13f      	bne.n	80096b6 <_malloc_r+0xe6>
 8009636:	6821      	ldr	r1, [r4, #0]
 8009638:	1a6d      	subs	r5, r5, r1
 800963a:	4629      	mov	r1, r5
 800963c:	4638      	mov	r0, r7
 800963e:	f7ff ffa7 	bl	8009590 <sbrk_aligned>
 8009642:	3001      	adds	r0, #1
 8009644:	d037      	beq.n	80096b6 <_malloc_r+0xe6>
 8009646:	6823      	ldr	r3, [r4, #0]
 8009648:	442b      	add	r3, r5
 800964a:	6023      	str	r3, [r4, #0]
 800964c:	f8d8 3000 	ldr.w	r3, [r8]
 8009650:	2b00      	cmp	r3, #0
 8009652:	d038      	beq.n	80096c6 <_malloc_r+0xf6>
 8009654:	685a      	ldr	r2, [r3, #4]
 8009656:	42a2      	cmp	r2, r4
 8009658:	d12b      	bne.n	80096b2 <_malloc_r+0xe2>
 800965a:	2200      	movs	r2, #0
 800965c:	605a      	str	r2, [r3, #4]
 800965e:	e00f      	b.n	8009680 <_malloc_r+0xb0>
 8009660:	6822      	ldr	r2, [r4, #0]
 8009662:	1b52      	subs	r2, r2, r5
 8009664:	d41f      	bmi.n	80096a6 <_malloc_r+0xd6>
 8009666:	2a0b      	cmp	r2, #11
 8009668:	d917      	bls.n	800969a <_malloc_r+0xca>
 800966a:	1961      	adds	r1, r4, r5
 800966c:	42a3      	cmp	r3, r4
 800966e:	6025      	str	r5, [r4, #0]
 8009670:	bf18      	it	ne
 8009672:	6059      	strne	r1, [r3, #4]
 8009674:	6863      	ldr	r3, [r4, #4]
 8009676:	bf08      	it	eq
 8009678:	f8c8 1000 	streq.w	r1, [r8]
 800967c:	5162      	str	r2, [r4, r5]
 800967e:	604b      	str	r3, [r1, #4]
 8009680:	4638      	mov	r0, r7
 8009682:	f104 060b 	add.w	r6, r4, #11
 8009686:	f000 f829 	bl	80096dc <__malloc_unlock>
 800968a:	f026 0607 	bic.w	r6, r6, #7
 800968e:	1d23      	adds	r3, r4, #4
 8009690:	1af2      	subs	r2, r6, r3
 8009692:	d0ae      	beq.n	80095f2 <_malloc_r+0x22>
 8009694:	1b9b      	subs	r3, r3, r6
 8009696:	50a3      	str	r3, [r4, r2]
 8009698:	e7ab      	b.n	80095f2 <_malloc_r+0x22>
 800969a:	42a3      	cmp	r3, r4
 800969c:	6862      	ldr	r2, [r4, #4]
 800969e:	d1dd      	bne.n	800965c <_malloc_r+0x8c>
 80096a0:	f8c8 2000 	str.w	r2, [r8]
 80096a4:	e7ec      	b.n	8009680 <_malloc_r+0xb0>
 80096a6:	4623      	mov	r3, r4
 80096a8:	6864      	ldr	r4, [r4, #4]
 80096aa:	e7ac      	b.n	8009606 <_malloc_r+0x36>
 80096ac:	4634      	mov	r4, r6
 80096ae:	6876      	ldr	r6, [r6, #4]
 80096b0:	e7b4      	b.n	800961c <_malloc_r+0x4c>
 80096b2:	4613      	mov	r3, r2
 80096b4:	e7cc      	b.n	8009650 <_malloc_r+0x80>
 80096b6:	230c      	movs	r3, #12
 80096b8:	603b      	str	r3, [r7, #0]
 80096ba:	4638      	mov	r0, r7
 80096bc:	f000 f80e 	bl	80096dc <__malloc_unlock>
 80096c0:	e797      	b.n	80095f2 <_malloc_r+0x22>
 80096c2:	6025      	str	r5, [r4, #0]
 80096c4:	e7dc      	b.n	8009680 <_malloc_r+0xb0>
 80096c6:	605b      	str	r3, [r3, #4]
 80096c8:	deff      	udf	#255	; 0xff
 80096ca:	bf00      	nop
 80096cc:	20004480 	.word	0x20004480

080096d0 <__malloc_lock>:
 80096d0:	4801      	ldr	r0, [pc, #4]	; (80096d8 <__malloc_lock+0x8>)
 80096d2:	f001 bfc8 	b.w	800b666 <__retarget_lock_acquire_recursive>
 80096d6:	bf00      	nop
 80096d8:	200045c8 	.word	0x200045c8

080096dc <__malloc_unlock>:
 80096dc:	4801      	ldr	r0, [pc, #4]	; (80096e4 <__malloc_unlock+0x8>)
 80096de:	f001 bfc3 	b.w	800b668 <__retarget_lock_release_recursive>
 80096e2:	bf00      	nop
 80096e4:	200045c8 	.word	0x200045c8

080096e8 <_realloc_r>:
 80096e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096ec:	4680      	mov	r8, r0
 80096ee:	4614      	mov	r4, r2
 80096f0:	460e      	mov	r6, r1
 80096f2:	b921      	cbnz	r1, 80096fe <_realloc_r+0x16>
 80096f4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80096f8:	4611      	mov	r1, r2
 80096fa:	f7ff bf69 	b.w	80095d0 <_malloc_r>
 80096fe:	b92a      	cbnz	r2, 800970c <_realloc_r+0x24>
 8009700:	f002 fe4c 	bl	800c39c <_free_r>
 8009704:	4625      	mov	r5, r4
 8009706:	4628      	mov	r0, r5
 8009708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970c:	f003 fea9 	bl	800d462 <_malloc_usable_size_r>
 8009710:	4284      	cmp	r4, r0
 8009712:	4607      	mov	r7, r0
 8009714:	d802      	bhi.n	800971c <_realloc_r+0x34>
 8009716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800971a:	d812      	bhi.n	8009742 <_realloc_r+0x5a>
 800971c:	4621      	mov	r1, r4
 800971e:	4640      	mov	r0, r8
 8009720:	f7ff ff56 	bl	80095d0 <_malloc_r>
 8009724:	4605      	mov	r5, r0
 8009726:	2800      	cmp	r0, #0
 8009728:	d0ed      	beq.n	8009706 <_realloc_r+0x1e>
 800972a:	42bc      	cmp	r4, r7
 800972c:	4622      	mov	r2, r4
 800972e:	4631      	mov	r1, r6
 8009730:	bf28      	it	cs
 8009732:	463a      	movcs	r2, r7
 8009734:	f001 ff99 	bl	800b66a <memcpy>
 8009738:	4631      	mov	r1, r6
 800973a:	4640      	mov	r0, r8
 800973c:	f002 fe2e 	bl	800c39c <_free_r>
 8009740:	e7e1      	b.n	8009706 <_realloc_r+0x1e>
 8009742:	4635      	mov	r5, r6
 8009744:	e7df      	b.n	8009706 <_realloc_r+0x1e>

08009746 <sulp>:
 8009746:	b570      	push	{r4, r5, r6, lr}
 8009748:	4604      	mov	r4, r0
 800974a:	460d      	mov	r5, r1
 800974c:	ec45 4b10 	vmov	d0, r4, r5
 8009750:	4616      	mov	r6, r2
 8009752:	f003 fd45 	bl	800d1e0 <__ulp>
 8009756:	ec51 0b10 	vmov	r0, r1, d0
 800975a:	b17e      	cbz	r6, 800977c <sulp+0x36>
 800975c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8009760:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8009764:	2b00      	cmp	r3, #0
 8009766:	dd09      	ble.n	800977c <sulp+0x36>
 8009768:	051b      	lsls	r3, r3, #20
 800976a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800976e:	2400      	movs	r4, #0
 8009770:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8009774:	4622      	mov	r2, r4
 8009776:	462b      	mov	r3, r5
 8009778:	f7f6 ff5e 	bl	8000638 <__aeabi_dmul>
 800977c:	bd70      	pop	{r4, r5, r6, pc}
	...

08009780 <_strtod_l>:
 8009780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009784:	ed2d 8b02 	vpush	{d8}
 8009788:	b09b      	sub	sp, #108	; 0x6c
 800978a:	4604      	mov	r4, r0
 800978c:	9213      	str	r2, [sp, #76]	; 0x4c
 800978e:	2200      	movs	r2, #0
 8009790:	9216      	str	r2, [sp, #88]	; 0x58
 8009792:	460d      	mov	r5, r1
 8009794:	f04f 0800 	mov.w	r8, #0
 8009798:	f04f 0900 	mov.w	r9, #0
 800979c:	460a      	mov	r2, r1
 800979e:	9215      	str	r2, [sp, #84]	; 0x54
 80097a0:	7811      	ldrb	r1, [r2, #0]
 80097a2:	292b      	cmp	r1, #43	; 0x2b
 80097a4:	d04c      	beq.n	8009840 <_strtod_l+0xc0>
 80097a6:	d83a      	bhi.n	800981e <_strtod_l+0x9e>
 80097a8:	290d      	cmp	r1, #13
 80097aa:	d834      	bhi.n	8009816 <_strtod_l+0x96>
 80097ac:	2908      	cmp	r1, #8
 80097ae:	d834      	bhi.n	800981a <_strtod_l+0x9a>
 80097b0:	2900      	cmp	r1, #0
 80097b2:	d03d      	beq.n	8009830 <_strtod_l+0xb0>
 80097b4:	2200      	movs	r2, #0
 80097b6:	920a      	str	r2, [sp, #40]	; 0x28
 80097b8:	9e15      	ldr	r6, [sp, #84]	; 0x54
 80097ba:	7832      	ldrb	r2, [r6, #0]
 80097bc:	2a30      	cmp	r2, #48	; 0x30
 80097be:	f040 80b4 	bne.w	800992a <_strtod_l+0x1aa>
 80097c2:	7872      	ldrb	r2, [r6, #1]
 80097c4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 80097c8:	2a58      	cmp	r2, #88	; 0x58
 80097ca:	d170      	bne.n	80098ae <_strtod_l+0x12e>
 80097cc:	9302      	str	r3, [sp, #8]
 80097ce:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80097d0:	9301      	str	r3, [sp, #4]
 80097d2:	ab16      	add	r3, sp, #88	; 0x58
 80097d4:	9300      	str	r3, [sp, #0]
 80097d6:	4a8e      	ldr	r2, [pc, #568]	; (8009a10 <_strtod_l+0x290>)
 80097d8:	ab17      	add	r3, sp, #92	; 0x5c
 80097da:	a915      	add	r1, sp, #84	; 0x54
 80097dc:	4620      	mov	r0, r4
 80097de:	f002 fe91 	bl	800c504 <__gethex>
 80097e2:	f010 070f 	ands.w	r7, r0, #15
 80097e6:	4605      	mov	r5, r0
 80097e8:	d005      	beq.n	80097f6 <_strtod_l+0x76>
 80097ea:	2f06      	cmp	r7, #6
 80097ec:	d12a      	bne.n	8009844 <_strtod_l+0xc4>
 80097ee:	3601      	adds	r6, #1
 80097f0:	2300      	movs	r3, #0
 80097f2:	9615      	str	r6, [sp, #84]	; 0x54
 80097f4:	930a      	str	r3, [sp, #40]	; 0x28
 80097f6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f040 857f 	bne.w	800a2fc <_strtod_l+0xb7c>
 80097fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009800:	b1db      	cbz	r3, 800983a <_strtod_l+0xba>
 8009802:	4642      	mov	r2, r8
 8009804:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009808:	ec43 2b10 	vmov	d0, r2, r3
 800980c:	b01b      	add	sp, #108	; 0x6c
 800980e:	ecbd 8b02 	vpop	{d8}
 8009812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009816:	2920      	cmp	r1, #32
 8009818:	d1cc      	bne.n	80097b4 <_strtod_l+0x34>
 800981a:	3201      	adds	r2, #1
 800981c:	e7bf      	b.n	800979e <_strtod_l+0x1e>
 800981e:	292d      	cmp	r1, #45	; 0x2d
 8009820:	d1c8      	bne.n	80097b4 <_strtod_l+0x34>
 8009822:	2101      	movs	r1, #1
 8009824:	910a      	str	r1, [sp, #40]	; 0x28
 8009826:	1c51      	adds	r1, r2, #1
 8009828:	9115      	str	r1, [sp, #84]	; 0x54
 800982a:	7852      	ldrb	r2, [r2, #1]
 800982c:	2a00      	cmp	r2, #0
 800982e:	d1c3      	bne.n	80097b8 <_strtod_l+0x38>
 8009830:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8009832:	9515      	str	r5, [sp, #84]	; 0x54
 8009834:	2b00      	cmp	r3, #0
 8009836:	f040 855f 	bne.w	800a2f8 <_strtod_l+0xb78>
 800983a:	4642      	mov	r2, r8
 800983c:	464b      	mov	r3, r9
 800983e:	e7e3      	b.n	8009808 <_strtod_l+0x88>
 8009840:	2100      	movs	r1, #0
 8009842:	e7ef      	b.n	8009824 <_strtod_l+0xa4>
 8009844:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009846:	b13a      	cbz	r2, 8009858 <_strtod_l+0xd8>
 8009848:	2135      	movs	r1, #53	; 0x35
 800984a:	a818      	add	r0, sp, #96	; 0x60
 800984c:	f003 fdc5 	bl	800d3da <__copybits>
 8009850:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009852:	4620      	mov	r0, r4
 8009854:	f003 f998 	bl	800cb88 <_Bfree>
 8009858:	3f01      	subs	r7, #1
 800985a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800985c:	2f04      	cmp	r7, #4
 800985e:	d806      	bhi.n	800986e <_strtod_l+0xee>
 8009860:	e8df f007 	tbb	[pc, r7]
 8009864:	201d0314 	.word	0x201d0314
 8009868:	14          	.byte	0x14
 8009869:	00          	.byte	0x00
 800986a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800986e:	05e9      	lsls	r1, r5, #23
 8009870:	bf48      	it	mi
 8009872:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8009876:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800987a:	0d1b      	lsrs	r3, r3, #20
 800987c:	051b      	lsls	r3, r3, #20
 800987e:	2b00      	cmp	r3, #0
 8009880:	d1b9      	bne.n	80097f6 <_strtod_l+0x76>
 8009882:	f001 fec5 	bl	800b610 <__errno>
 8009886:	2322      	movs	r3, #34	; 0x22
 8009888:	6003      	str	r3, [r0, #0]
 800988a:	e7b4      	b.n	80097f6 <_strtod_l+0x76>
 800988c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8009890:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8009894:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8009898:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800989c:	e7e7      	b.n	800986e <_strtod_l+0xee>
 800989e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009a18 <_strtod_l+0x298>
 80098a2:	e7e4      	b.n	800986e <_strtod_l+0xee>
 80098a4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 80098a8:	f04f 38ff 	mov.w	r8, #4294967295
 80098ac:	e7df      	b.n	800986e <_strtod_l+0xee>
 80098ae:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098b0:	1c5a      	adds	r2, r3, #1
 80098b2:	9215      	str	r2, [sp, #84]	; 0x54
 80098b4:	785b      	ldrb	r3, [r3, #1]
 80098b6:	2b30      	cmp	r3, #48	; 0x30
 80098b8:	d0f9      	beq.n	80098ae <_strtod_l+0x12e>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d09b      	beq.n	80097f6 <_strtod_l+0x76>
 80098be:	2301      	movs	r3, #1
 80098c0:	f04f 0a00 	mov.w	sl, #0
 80098c4:	9304      	str	r3, [sp, #16]
 80098c6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80098c8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098ca:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 80098ce:	46d3      	mov	fp, sl
 80098d0:	220a      	movs	r2, #10
 80098d2:	9815      	ldr	r0, [sp, #84]	; 0x54
 80098d4:	7806      	ldrb	r6, [r0, #0]
 80098d6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80098da:	b2d9      	uxtb	r1, r3
 80098dc:	2909      	cmp	r1, #9
 80098de:	d926      	bls.n	800992e <_strtod_l+0x1ae>
 80098e0:	494c      	ldr	r1, [pc, #304]	; (8009a14 <_strtod_l+0x294>)
 80098e2:	2201      	movs	r2, #1
 80098e4:	f001 fe28 	bl	800b538 <strncmp>
 80098e8:	2800      	cmp	r0, #0
 80098ea:	d030      	beq.n	800994e <_strtod_l+0x1ce>
 80098ec:	2000      	movs	r0, #0
 80098ee:	4632      	mov	r2, r6
 80098f0:	9005      	str	r0, [sp, #20]
 80098f2:	465e      	mov	r6, fp
 80098f4:	4603      	mov	r3, r0
 80098f6:	2a65      	cmp	r2, #101	; 0x65
 80098f8:	d001      	beq.n	80098fe <_strtod_l+0x17e>
 80098fa:	2a45      	cmp	r2, #69	; 0x45
 80098fc:	d113      	bne.n	8009926 <_strtod_l+0x1a6>
 80098fe:	b91e      	cbnz	r6, 8009908 <_strtod_l+0x188>
 8009900:	9a04      	ldr	r2, [sp, #16]
 8009902:	4302      	orrs	r2, r0
 8009904:	d094      	beq.n	8009830 <_strtod_l+0xb0>
 8009906:	2600      	movs	r6, #0
 8009908:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800990a:	1c6a      	adds	r2, r5, #1
 800990c:	9215      	str	r2, [sp, #84]	; 0x54
 800990e:	786a      	ldrb	r2, [r5, #1]
 8009910:	2a2b      	cmp	r2, #43	; 0x2b
 8009912:	d074      	beq.n	80099fe <_strtod_l+0x27e>
 8009914:	2a2d      	cmp	r2, #45	; 0x2d
 8009916:	d078      	beq.n	8009a0a <_strtod_l+0x28a>
 8009918:	f04f 0c00 	mov.w	ip, #0
 800991c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8009920:	2909      	cmp	r1, #9
 8009922:	d97f      	bls.n	8009a24 <_strtod_l+0x2a4>
 8009924:	9515      	str	r5, [sp, #84]	; 0x54
 8009926:	2700      	movs	r7, #0
 8009928:	e09e      	b.n	8009a68 <_strtod_l+0x2e8>
 800992a:	2300      	movs	r3, #0
 800992c:	e7c8      	b.n	80098c0 <_strtod_l+0x140>
 800992e:	f1bb 0f08 	cmp.w	fp, #8
 8009932:	bfd8      	it	le
 8009934:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8009936:	f100 0001 	add.w	r0, r0, #1
 800993a:	bfda      	itte	le
 800993c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009940:	9309      	strle	r3, [sp, #36]	; 0x24
 8009942:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 8009946:	f10b 0b01 	add.w	fp, fp, #1
 800994a:	9015      	str	r0, [sp, #84]	; 0x54
 800994c:	e7c1      	b.n	80098d2 <_strtod_l+0x152>
 800994e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009950:	1c5a      	adds	r2, r3, #1
 8009952:	9215      	str	r2, [sp, #84]	; 0x54
 8009954:	785a      	ldrb	r2, [r3, #1]
 8009956:	f1bb 0f00 	cmp.w	fp, #0
 800995a:	d037      	beq.n	80099cc <_strtod_l+0x24c>
 800995c:	9005      	str	r0, [sp, #20]
 800995e:	465e      	mov	r6, fp
 8009960:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8009964:	2b09      	cmp	r3, #9
 8009966:	d912      	bls.n	800998e <_strtod_l+0x20e>
 8009968:	2301      	movs	r3, #1
 800996a:	e7c4      	b.n	80098f6 <_strtod_l+0x176>
 800996c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800996e:	1c5a      	adds	r2, r3, #1
 8009970:	9215      	str	r2, [sp, #84]	; 0x54
 8009972:	785a      	ldrb	r2, [r3, #1]
 8009974:	3001      	adds	r0, #1
 8009976:	2a30      	cmp	r2, #48	; 0x30
 8009978:	d0f8      	beq.n	800996c <_strtod_l+0x1ec>
 800997a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800997e:	2b08      	cmp	r3, #8
 8009980:	f200 84c1 	bhi.w	800a306 <_strtod_l+0xb86>
 8009984:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009986:	9005      	str	r0, [sp, #20]
 8009988:	2000      	movs	r0, #0
 800998a:	930b      	str	r3, [sp, #44]	; 0x2c
 800998c:	4606      	mov	r6, r0
 800998e:	3a30      	subs	r2, #48	; 0x30
 8009990:	f100 0301 	add.w	r3, r0, #1
 8009994:	d014      	beq.n	80099c0 <_strtod_l+0x240>
 8009996:	9905      	ldr	r1, [sp, #20]
 8009998:	4419      	add	r1, r3
 800999a:	9105      	str	r1, [sp, #20]
 800999c:	4633      	mov	r3, r6
 800999e:	eb00 0c06 	add.w	ip, r0, r6
 80099a2:	210a      	movs	r1, #10
 80099a4:	4563      	cmp	r3, ip
 80099a6:	d113      	bne.n	80099d0 <_strtod_l+0x250>
 80099a8:	1833      	adds	r3, r6, r0
 80099aa:	2b08      	cmp	r3, #8
 80099ac:	f106 0601 	add.w	r6, r6, #1
 80099b0:	4406      	add	r6, r0
 80099b2:	dc1a      	bgt.n	80099ea <_strtod_l+0x26a>
 80099b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099b6:	230a      	movs	r3, #10
 80099b8:	fb03 2301 	mla	r3, r3, r1, r2
 80099bc:	9309      	str	r3, [sp, #36]	; 0x24
 80099be:	2300      	movs	r3, #0
 80099c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80099c2:	1c51      	adds	r1, r2, #1
 80099c4:	9115      	str	r1, [sp, #84]	; 0x54
 80099c6:	7852      	ldrb	r2, [r2, #1]
 80099c8:	4618      	mov	r0, r3
 80099ca:	e7c9      	b.n	8009960 <_strtod_l+0x1e0>
 80099cc:	4658      	mov	r0, fp
 80099ce:	e7d2      	b.n	8009976 <_strtod_l+0x1f6>
 80099d0:	2b08      	cmp	r3, #8
 80099d2:	f103 0301 	add.w	r3, r3, #1
 80099d6:	dc03      	bgt.n	80099e0 <_strtod_l+0x260>
 80099d8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80099da:	434f      	muls	r7, r1
 80099dc:	9709      	str	r7, [sp, #36]	; 0x24
 80099de:	e7e1      	b.n	80099a4 <_strtod_l+0x224>
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	bfd8      	it	le
 80099e4:	fb01 fa0a 	mulle.w	sl, r1, sl
 80099e8:	e7dc      	b.n	80099a4 <_strtod_l+0x224>
 80099ea:	2e10      	cmp	r6, #16
 80099ec:	bfdc      	itt	le
 80099ee:	230a      	movle	r3, #10
 80099f0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 80099f4:	e7e3      	b.n	80099be <_strtod_l+0x23e>
 80099f6:	2300      	movs	r3, #0
 80099f8:	9305      	str	r3, [sp, #20]
 80099fa:	2301      	movs	r3, #1
 80099fc:	e780      	b.n	8009900 <_strtod_l+0x180>
 80099fe:	f04f 0c00 	mov.w	ip, #0
 8009a02:	1caa      	adds	r2, r5, #2
 8009a04:	9215      	str	r2, [sp, #84]	; 0x54
 8009a06:	78aa      	ldrb	r2, [r5, #2]
 8009a08:	e788      	b.n	800991c <_strtod_l+0x19c>
 8009a0a:	f04f 0c01 	mov.w	ip, #1
 8009a0e:	e7f8      	b.n	8009a02 <_strtod_l+0x282>
 8009a10:	08045b7c 	.word	0x08045b7c
 8009a14:	08045b78 	.word	0x08045b78
 8009a18:	7ff00000 	.word	0x7ff00000
 8009a1c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a1e:	1c51      	adds	r1, r2, #1
 8009a20:	9115      	str	r1, [sp, #84]	; 0x54
 8009a22:	7852      	ldrb	r2, [r2, #1]
 8009a24:	2a30      	cmp	r2, #48	; 0x30
 8009a26:	d0f9      	beq.n	8009a1c <_strtod_l+0x29c>
 8009a28:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8009a2c:	2908      	cmp	r1, #8
 8009a2e:	f63f af7a 	bhi.w	8009926 <_strtod_l+0x1a6>
 8009a32:	3a30      	subs	r2, #48	; 0x30
 8009a34:	9208      	str	r2, [sp, #32]
 8009a36:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a38:	920c      	str	r2, [sp, #48]	; 0x30
 8009a3a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009a3c:	1c57      	adds	r7, r2, #1
 8009a3e:	9715      	str	r7, [sp, #84]	; 0x54
 8009a40:	7852      	ldrb	r2, [r2, #1]
 8009a42:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8009a46:	f1be 0f09 	cmp.w	lr, #9
 8009a4a:	d938      	bls.n	8009abe <_strtod_l+0x33e>
 8009a4c:	990c      	ldr	r1, [sp, #48]	; 0x30
 8009a4e:	1a7f      	subs	r7, r7, r1
 8009a50:	2f08      	cmp	r7, #8
 8009a52:	f644 671f 	movw	r7, #19999	; 0x4e1f
 8009a56:	dc03      	bgt.n	8009a60 <_strtod_l+0x2e0>
 8009a58:	9908      	ldr	r1, [sp, #32]
 8009a5a:	428f      	cmp	r7, r1
 8009a5c:	bfa8      	it	ge
 8009a5e:	460f      	movge	r7, r1
 8009a60:	f1bc 0f00 	cmp.w	ip, #0
 8009a64:	d000      	beq.n	8009a68 <_strtod_l+0x2e8>
 8009a66:	427f      	negs	r7, r7
 8009a68:	2e00      	cmp	r6, #0
 8009a6a:	d14f      	bne.n	8009b0c <_strtod_l+0x38c>
 8009a6c:	9904      	ldr	r1, [sp, #16]
 8009a6e:	4301      	orrs	r1, r0
 8009a70:	f47f aec1 	bne.w	80097f6 <_strtod_l+0x76>
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	f47f aedb 	bne.w	8009830 <_strtod_l+0xb0>
 8009a7a:	2a69      	cmp	r2, #105	; 0x69
 8009a7c:	d029      	beq.n	8009ad2 <_strtod_l+0x352>
 8009a7e:	dc26      	bgt.n	8009ace <_strtod_l+0x34e>
 8009a80:	2a49      	cmp	r2, #73	; 0x49
 8009a82:	d026      	beq.n	8009ad2 <_strtod_l+0x352>
 8009a84:	2a4e      	cmp	r2, #78	; 0x4e
 8009a86:	f47f aed3 	bne.w	8009830 <_strtod_l+0xb0>
 8009a8a:	499b      	ldr	r1, [pc, #620]	; (8009cf8 <_strtod_l+0x578>)
 8009a8c:	a815      	add	r0, sp, #84	; 0x54
 8009a8e:	f002 ff79 	bl	800c984 <__match>
 8009a92:	2800      	cmp	r0, #0
 8009a94:	f43f aecc 	beq.w	8009830 <_strtod_l+0xb0>
 8009a98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009a9a:	781b      	ldrb	r3, [r3, #0]
 8009a9c:	2b28      	cmp	r3, #40	; 0x28
 8009a9e:	d12f      	bne.n	8009b00 <_strtod_l+0x380>
 8009aa0:	4996      	ldr	r1, [pc, #600]	; (8009cfc <_strtod_l+0x57c>)
 8009aa2:	aa18      	add	r2, sp, #96	; 0x60
 8009aa4:	a815      	add	r0, sp, #84	; 0x54
 8009aa6:	f002 ff81 	bl	800c9ac <__hexnan>
 8009aaa:	2805      	cmp	r0, #5
 8009aac:	d128      	bne.n	8009b00 <_strtod_l+0x380>
 8009aae:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8009ab0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ab4:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8009ab8:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 8009abc:	e69b      	b.n	80097f6 <_strtod_l+0x76>
 8009abe:	9f08      	ldr	r7, [sp, #32]
 8009ac0:	210a      	movs	r1, #10
 8009ac2:	fb01 2107 	mla	r1, r1, r7, r2
 8009ac6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 8009aca:	9208      	str	r2, [sp, #32]
 8009acc:	e7b5      	b.n	8009a3a <_strtod_l+0x2ba>
 8009ace:	2a6e      	cmp	r2, #110	; 0x6e
 8009ad0:	e7d9      	b.n	8009a86 <_strtod_l+0x306>
 8009ad2:	498b      	ldr	r1, [pc, #556]	; (8009d00 <_strtod_l+0x580>)
 8009ad4:	a815      	add	r0, sp, #84	; 0x54
 8009ad6:	f002 ff55 	bl	800c984 <__match>
 8009ada:	2800      	cmp	r0, #0
 8009adc:	f43f aea8 	beq.w	8009830 <_strtod_l+0xb0>
 8009ae0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009ae2:	4988      	ldr	r1, [pc, #544]	; (8009d04 <_strtod_l+0x584>)
 8009ae4:	3b01      	subs	r3, #1
 8009ae6:	a815      	add	r0, sp, #84	; 0x54
 8009ae8:	9315      	str	r3, [sp, #84]	; 0x54
 8009aea:	f002 ff4b 	bl	800c984 <__match>
 8009aee:	b910      	cbnz	r0, 8009af6 <_strtod_l+0x376>
 8009af0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009af2:	3301      	adds	r3, #1
 8009af4:	9315      	str	r3, [sp, #84]	; 0x54
 8009af6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8009d14 <_strtod_l+0x594>
 8009afa:	f04f 0800 	mov.w	r8, #0
 8009afe:	e67a      	b.n	80097f6 <_strtod_l+0x76>
 8009b00:	4881      	ldr	r0, [pc, #516]	; (8009d08 <_strtod_l+0x588>)
 8009b02:	f001 fdc1 	bl	800b688 <nan>
 8009b06:	ec59 8b10 	vmov	r8, r9, d0
 8009b0a:	e674      	b.n	80097f6 <_strtod_l+0x76>
 8009b0c:	9b05      	ldr	r3, [sp, #20]
 8009b0e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b10:	1afb      	subs	r3, r7, r3
 8009b12:	f1bb 0f00 	cmp.w	fp, #0
 8009b16:	bf08      	it	eq
 8009b18:	46b3      	moveq	fp, r6
 8009b1a:	2e10      	cmp	r6, #16
 8009b1c:	9308      	str	r3, [sp, #32]
 8009b1e:	4635      	mov	r5, r6
 8009b20:	bfa8      	it	ge
 8009b22:	2510      	movge	r5, #16
 8009b24:	f7f6 fd0e 	bl	8000544 <__aeabi_ui2d>
 8009b28:	2e09      	cmp	r6, #9
 8009b2a:	4680      	mov	r8, r0
 8009b2c:	4689      	mov	r9, r1
 8009b2e:	dd13      	ble.n	8009b58 <_strtod_l+0x3d8>
 8009b30:	4b76      	ldr	r3, [pc, #472]	; (8009d0c <_strtod_l+0x58c>)
 8009b32:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009b36:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8009b3a:	f7f6 fd7d 	bl	8000638 <__aeabi_dmul>
 8009b3e:	4680      	mov	r8, r0
 8009b40:	4650      	mov	r0, sl
 8009b42:	4689      	mov	r9, r1
 8009b44:	f7f6 fcfe 	bl	8000544 <__aeabi_ui2d>
 8009b48:	4602      	mov	r2, r0
 8009b4a:	460b      	mov	r3, r1
 8009b4c:	4640      	mov	r0, r8
 8009b4e:	4649      	mov	r1, r9
 8009b50:	f7f6 fbbc 	bl	80002cc <__adddf3>
 8009b54:	4680      	mov	r8, r0
 8009b56:	4689      	mov	r9, r1
 8009b58:	2e0f      	cmp	r6, #15
 8009b5a:	dc38      	bgt.n	8009bce <_strtod_l+0x44e>
 8009b5c:	9b08      	ldr	r3, [sp, #32]
 8009b5e:	2b00      	cmp	r3, #0
 8009b60:	f43f ae49 	beq.w	80097f6 <_strtod_l+0x76>
 8009b64:	dd24      	ble.n	8009bb0 <_strtod_l+0x430>
 8009b66:	2b16      	cmp	r3, #22
 8009b68:	dc0b      	bgt.n	8009b82 <_strtod_l+0x402>
 8009b6a:	4968      	ldr	r1, [pc, #416]	; (8009d0c <_strtod_l+0x58c>)
 8009b6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009b70:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b74:	4642      	mov	r2, r8
 8009b76:	464b      	mov	r3, r9
 8009b78:	f7f6 fd5e 	bl	8000638 <__aeabi_dmul>
 8009b7c:	4680      	mov	r8, r0
 8009b7e:	4689      	mov	r9, r1
 8009b80:	e639      	b.n	80097f6 <_strtod_l+0x76>
 8009b82:	9a08      	ldr	r2, [sp, #32]
 8009b84:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	db20      	blt.n	8009bce <_strtod_l+0x44e>
 8009b8c:	4c5f      	ldr	r4, [pc, #380]	; (8009d0c <_strtod_l+0x58c>)
 8009b8e:	f1c6 060f 	rsb	r6, r6, #15
 8009b92:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 8009b96:	4642      	mov	r2, r8
 8009b98:	464b      	mov	r3, r9
 8009b9a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009b9e:	f7f6 fd4b 	bl	8000638 <__aeabi_dmul>
 8009ba2:	9b08      	ldr	r3, [sp, #32]
 8009ba4:	1b9e      	subs	r6, r3, r6
 8009ba6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8009baa:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009bae:	e7e3      	b.n	8009b78 <_strtod_l+0x3f8>
 8009bb0:	9b08      	ldr	r3, [sp, #32]
 8009bb2:	3316      	adds	r3, #22
 8009bb4:	db0b      	blt.n	8009bce <_strtod_l+0x44e>
 8009bb6:	9b05      	ldr	r3, [sp, #20]
 8009bb8:	1bdf      	subs	r7, r3, r7
 8009bba:	4b54      	ldr	r3, [pc, #336]	; (8009d0c <_strtod_l+0x58c>)
 8009bbc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8009bc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009bc4:	4640      	mov	r0, r8
 8009bc6:	4649      	mov	r1, r9
 8009bc8:	f7f6 fe60 	bl	800088c <__aeabi_ddiv>
 8009bcc:	e7d6      	b.n	8009b7c <_strtod_l+0x3fc>
 8009bce:	9b08      	ldr	r3, [sp, #32]
 8009bd0:	1b75      	subs	r5, r6, r5
 8009bd2:	441d      	add	r5, r3
 8009bd4:	2d00      	cmp	r5, #0
 8009bd6:	dd70      	ble.n	8009cba <_strtod_l+0x53a>
 8009bd8:	f015 030f 	ands.w	r3, r5, #15
 8009bdc:	d00a      	beq.n	8009bf4 <_strtod_l+0x474>
 8009bde:	494b      	ldr	r1, [pc, #300]	; (8009d0c <_strtod_l+0x58c>)
 8009be0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009be4:	4642      	mov	r2, r8
 8009be6:	464b      	mov	r3, r9
 8009be8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009bec:	f7f6 fd24 	bl	8000638 <__aeabi_dmul>
 8009bf0:	4680      	mov	r8, r0
 8009bf2:	4689      	mov	r9, r1
 8009bf4:	f035 050f 	bics.w	r5, r5, #15
 8009bf8:	d04d      	beq.n	8009c96 <_strtod_l+0x516>
 8009bfa:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 8009bfe:	dd22      	ble.n	8009c46 <_strtod_l+0x4c6>
 8009c00:	2500      	movs	r5, #0
 8009c02:	46ab      	mov	fp, r5
 8009c04:	9509      	str	r5, [sp, #36]	; 0x24
 8009c06:	9505      	str	r5, [sp, #20]
 8009c08:	2322      	movs	r3, #34	; 0x22
 8009c0a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 8009d14 <_strtod_l+0x594>
 8009c0e:	6023      	str	r3, [r4, #0]
 8009c10:	f04f 0800 	mov.w	r8, #0
 8009c14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f43f aded 	beq.w	80097f6 <_strtod_l+0x76>
 8009c1c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009c1e:	4620      	mov	r0, r4
 8009c20:	f002 ffb2 	bl	800cb88 <_Bfree>
 8009c24:	9905      	ldr	r1, [sp, #20]
 8009c26:	4620      	mov	r0, r4
 8009c28:	f002 ffae 	bl	800cb88 <_Bfree>
 8009c2c:	4659      	mov	r1, fp
 8009c2e:	4620      	mov	r0, r4
 8009c30:	f002 ffaa 	bl	800cb88 <_Bfree>
 8009c34:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009c36:	4620      	mov	r0, r4
 8009c38:	f002 ffa6 	bl	800cb88 <_Bfree>
 8009c3c:	4629      	mov	r1, r5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f002 ffa2 	bl	800cb88 <_Bfree>
 8009c44:	e5d7      	b.n	80097f6 <_strtod_l+0x76>
 8009c46:	4b32      	ldr	r3, [pc, #200]	; (8009d10 <_strtod_l+0x590>)
 8009c48:	9304      	str	r3, [sp, #16]
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	112d      	asrs	r5, r5, #4
 8009c4e:	4640      	mov	r0, r8
 8009c50:	4649      	mov	r1, r9
 8009c52:	469a      	mov	sl, r3
 8009c54:	2d01      	cmp	r5, #1
 8009c56:	dc21      	bgt.n	8009c9c <_strtod_l+0x51c>
 8009c58:	b10b      	cbz	r3, 8009c5e <_strtod_l+0x4de>
 8009c5a:	4680      	mov	r8, r0
 8009c5c:	4689      	mov	r9, r1
 8009c5e:	492c      	ldr	r1, [pc, #176]	; (8009d10 <_strtod_l+0x590>)
 8009c60:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 8009c64:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8009c68:	4642      	mov	r2, r8
 8009c6a:	464b      	mov	r3, r9
 8009c6c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009c70:	f7f6 fce2 	bl	8000638 <__aeabi_dmul>
 8009c74:	4b27      	ldr	r3, [pc, #156]	; (8009d14 <_strtod_l+0x594>)
 8009c76:	460a      	mov	r2, r1
 8009c78:	400b      	ands	r3, r1
 8009c7a:	4927      	ldr	r1, [pc, #156]	; (8009d18 <_strtod_l+0x598>)
 8009c7c:	428b      	cmp	r3, r1
 8009c7e:	4680      	mov	r8, r0
 8009c80:	d8be      	bhi.n	8009c00 <_strtod_l+0x480>
 8009c82:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8009c86:	428b      	cmp	r3, r1
 8009c88:	bf86      	itte	hi
 8009c8a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8009d1c <_strtod_l+0x59c>
 8009c8e:	f04f 38ff 	movhi.w	r8, #4294967295
 8009c92:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8009c96:	2300      	movs	r3, #0
 8009c98:	9304      	str	r3, [sp, #16]
 8009c9a:	e07b      	b.n	8009d94 <_strtod_l+0x614>
 8009c9c:	07ea      	lsls	r2, r5, #31
 8009c9e:	d505      	bpl.n	8009cac <_strtod_l+0x52c>
 8009ca0:	9b04      	ldr	r3, [sp, #16]
 8009ca2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ca6:	f7f6 fcc7 	bl	8000638 <__aeabi_dmul>
 8009caa:	2301      	movs	r3, #1
 8009cac:	9a04      	ldr	r2, [sp, #16]
 8009cae:	3208      	adds	r2, #8
 8009cb0:	f10a 0a01 	add.w	sl, sl, #1
 8009cb4:	106d      	asrs	r5, r5, #1
 8009cb6:	9204      	str	r2, [sp, #16]
 8009cb8:	e7cc      	b.n	8009c54 <_strtod_l+0x4d4>
 8009cba:	d0ec      	beq.n	8009c96 <_strtod_l+0x516>
 8009cbc:	426d      	negs	r5, r5
 8009cbe:	f015 020f 	ands.w	r2, r5, #15
 8009cc2:	d00a      	beq.n	8009cda <_strtod_l+0x55a>
 8009cc4:	4b11      	ldr	r3, [pc, #68]	; (8009d0c <_strtod_l+0x58c>)
 8009cc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009cca:	4640      	mov	r0, r8
 8009ccc:	4649      	mov	r1, r9
 8009cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cd2:	f7f6 fddb 	bl	800088c <__aeabi_ddiv>
 8009cd6:	4680      	mov	r8, r0
 8009cd8:	4689      	mov	r9, r1
 8009cda:	112d      	asrs	r5, r5, #4
 8009cdc:	d0db      	beq.n	8009c96 <_strtod_l+0x516>
 8009cde:	2d1f      	cmp	r5, #31
 8009ce0:	dd1e      	ble.n	8009d20 <_strtod_l+0x5a0>
 8009ce2:	2500      	movs	r5, #0
 8009ce4:	46ab      	mov	fp, r5
 8009ce6:	9509      	str	r5, [sp, #36]	; 0x24
 8009ce8:	9505      	str	r5, [sp, #20]
 8009cea:	2322      	movs	r3, #34	; 0x22
 8009cec:	f04f 0800 	mov.w	r8, #0
 8009cf0:	f04f 0900 	mov.w	r9, #0
 8009cf4:	6023      	str	r3, [r4, #0]
 8009cf6:	e78d      	b.n	8009c14 <_strtod_l+0x494>
 8009cf8:	08045bdd 	.word	0x08045bdd
 8009cfc:	08045b90 	.word	0x08045b90
 8009d00:	08045bd5 	.word	0x08045bd5
 8009d04:	08045c14 	.word	0x08045c14
 8009d08:	08045fa1 	.word	0x08045fa1
 8009d0c:	08045d80 	.word	0x08045d80
 8009d10:	08045d58 	.word	0x08045d58
 8009d14:	7ff00000 	.word	0x7ff00000
 8009d18:	7ca00000 	.word	0x7ca00000
 8009d1c:	7fefffff 	.word	0x7fefffff
 8009d20:	f015 0310 	ands.w	r3, r5, #16
 8009d24:	bf18      	it	ne
 8009d26:	236a      	movne	r3, #106	; 0x6a
 8009d28:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800a0cc <_strtod_l+0x94c>
 8009d2c:	9304      	str	r3, [sp, #16]
 8009d2e:	4640      	mov	r0, r8
 8009d30:	4649      	mov	r1, r9
 8009d32:	2300      	movs	r3, #0
 8009d34:	07ea      	lsls	r2, r5, #31
 8009d36:	d504      	bpl.n	8009d42 <_strtod_l+0x5c2>
 8009d38:	e9da 2300 	ldrd	r2, r3, [sl]
 8009d3c:	f7f6 fc7c 	bl	8000638 <__aeabi_dmul>
 8009d40:	2301      	movs	r3, #1
 8009d42:	106d      	asrs	r5, r5, #1
 8009d44:	f10a 0a08 	add.w	sl, sl, #8
 8009d48:	d1f4      	bne.n	8009d34 <_strtod_l+0x5b4>
 8009d4a:	b10b      	cbz	r3, 8009d50 <_strtod_l+0x5d0>
 8009d4c:	4680      	mov	r8, r0
 8009d4e:	4689      	mov	r9, r1
 8009d50:	9b04      	ldr	r3, [sp, #16]
 8009d52:	b1bb      	cbz	r3, 8009d84 <_strtod_l+0x604>
 8009d54:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8009d58:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009d5c:	2b00      	cmp	r3, #0
 8009d5e:	4649      	mov	r1, r9
 8009d60:	dd10      	ble.n	8009d84 <_strtod_l+0x604>
 8009d62:	2b1f      	cmp	r3, #31
 8009d64:	f340 811e 	ble.w	8009fa4 <_strtod_l+0x824>
 8009d68:	2b34      	cmp	r3, #52	; 0x34
 8009d6a:	bfde      	ittt	le
 8009d6c:	f04f 33ff 	movle.w	r3, #4294967295
 8009d70:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8009d74:	4093      	lslle	r3, r2
 8009d76:	f04f 0800 	mov.w	r8, #0
 8009d7a:	bfcc      	ite	gt
 8009d7c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8009d80:	ea03 0901 	andle.w	r9, r3, r1
 8009d84:	2200      	movs	r2, #0
 8009d86:	2300      	movs	r3, #0
 8009d88:	4640      	mov	r0, r8
 8009d8a:	4649      	mov	r1, r9
 8009d8c:	f7f6 febc 	bl	8000b08 <__aeabi_dcmpeq>
 8009d90:	2800      	cmp	r0, #0
 8009d92:	d1a6      	bne.n	8009ce2 <_strtod_l+0x562>
 8009d94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d9a:	4633      	mov	r3, r6
 8009d9c:	465a      	mov	r2, fp
 8009d9e:	4620      	mov	r0, r4
 8009da0:	f002 ff5a 	bl	800cc58 <__s2b>
 8009da4:	9009      	str	r0, [sp, #36]	; 0x24
 8009da6:	2800      	cmp	r0, #0
 8009da8:	f43f af2a 	beq.w	8009c00 <_strtod_l+0x480>
 8009dac:	9a08      	ldr	r2, [sp, #32]
 8009dae:	9b05      	ldr	r3, [sp, #20]
 8009db0:	2a00      	cmp	r2, #0
 8009db2:	eba3 0307 	sub.w	r3, r3, r7
 8009db6:	bfa8      	it	ge
 8009db8:	2300      	movge	r3, #0
 8009dba:	930c      	str	r3, [sp, #48]	; 0x30
 8009dbc:	2500      	movs	r5, #0
 8009dbe:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009dc2:	9312      	str	r3, [sp, #72]	; 0x48
 8009dc4:	46ab      	mov	fp, r5
 8009dc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dc8:	4620      	mov	r0, r4
 8009dca:	6859      	ldr	r1, [r3, #4]
 8009dcc:	f002 fe9c 	bl	800cb08 <_Balloc>
 8009dd0:	9005      	str	r0, [sp, #20]
 8009dd2:	2800      	cmp	r0, #0
 8009dd4:	f43f af18 	beq.w	8009c08 <_strtod_l+0x488>
 8009dd8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009dda:	691a      	ldr	r2, [r3, #16]
 8009ddc:	3202      	adds	r2, #2
 8009dde:	f103 010c 	add.w	r1, r3, #12
 8009de2:	0092      	lsls	r2, r2, #2
 8009de4:	300c      	adds	r0, #12
 8009de6:	f001 fc40 	bl	800b66a <memcpy>
 8009dea:	ec49 8b10 	vmov	d0, r8, r9
 8009dee:	aa18      	add	r2, sp, #96	; 0x60
 8009df0:	a917      	add	r1, sp, #92	; 0x5c
 8009df2:	4620      	mov	r0, r4
 8009df4:	f003 fa64 	bl	800d2c0 <__d2b>
 8009df8:	ec49 8b18 	vmov	d8, r8, r9
 8009dfc:	9016      	str	r0, [sp, #88]	; 0x58
 8009dfe:	2800      	cmp	r0, #0
 8009e00:	f43f af02 	beq.w	8009c08 <_strtod_l+0x488>
 8009e04:	2101      	movs	r1, #1
 8009e06:	4620      	mov	r0, r4
 8009e08:	f002 ffbe 	bl	800cd88 <__i2b>
 8009e0c:	4683      	mov	fp, r0
 8009e0e:	2800      	cmp	r0, #0
 8009e10:	f43f aefa 	beq.w	8009c08 <_strtod_l+0x488>
 8009e14:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8009e16:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8009e18:	2e00      	cmp	r6, #0
 8009e1a:	bfab      	itete	ge
 8009e1c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8009e1e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8009e20:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8009e22:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 8009e26:	bfac      	ite	ge
 8009e28:	eb06 0a03 	addge.w	sl, r6, r3
 8009e2c:	1b9f      	sublt	r7, r3, r6
 8009e2e:	9b04      	ldr	r3, [sp, #16]
 8009e30:	1af6      	subs	r6, r6, r3
 8009e32:	4416      	add	r6, r2
 8009e34:	4ba0      	ldr	r3, [pc, #640]	; (800a0b8 <_strtod_l+0x938>)
 8009e36:	3e01      	subs	r6, #1
 8009e38:	429e      	cmp	r6, r3
 8009e3a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8009e3e:	f280 80c4 	bge.w	8009fca <_strtod_l+0x84a>
 8009e42:	1b9b      	subs	r3, r3, r6
 8009e44:	2b1f      	cmp	r3, #31
 8009e46:	eba2 0203 	sub.w	r2, r2, r3
 8009e4a:	f04f 0101 	mov.w	r1, #1
 8009e4e:	f300 80b0 	bgt.w	8009fb2 <_strtod_l+0x832>
 8009e52:	fa01 f303 	lsl.w	r3, r1, r3
 8009e56:	930e      	str	r3, [sp, #56]	; 0x38
 8009e58:	2300      	movs	r3, #0
 8009e5a:	930d      	str	r3, [sp, #52]	; 0x34
 8009e5c:	eb0a 0602 	add.w	r6, sl, r2
 8009e60:	9b04      	ldr	r3, [sp, #16]
 8009e62:	45b2      	cmp	sl, r6
 8009e64:	4417      	add	r7, r2
 8009e66:	441f      	add	r7, r3
 8009e68:	4653      	mov	r3, sl
 8009e6a:	bfa8      	it	ge
 8009e6c:	4633      	movge	r3, r6
 8009e6e:	42bb      	cmp	r3, r7
 8009e70:	bfa8      	it	ge
 8009e72:	463b      	movge	r3, r7
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	bfc2      	ittt	gt
 8009e78:	1af6      	subgt	r6, r6, r3
 8009e7a:	1aff      	subgt	r7, r7, r3
 8009e7c:	ebaa 0a03 	subgt.w	sl, sl, r3
 8009e80:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	dd17      	ble.n	8009eb6 <_strtod_l+0x736>
 8009e86:	4659      	mov	r1, fp
 8009e88:	461a      	mov	r2, r3
 8009e8a:	4620      	mov	r0, r4
 8009e8c:	f003 f83c 	bl	800cf08 <__pow5mult>
 8009e90:	4683      	mov	fp, r0
 8009e92:	2800      	cmp	r0, #0
 8009e94:	f43f aeb8 	beq.w	8009c08 <_strtod_l+0x488>
 8009e98:	4601      	mov	r1, r0
 8009e9a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8009e9c:	4620      	mov	r0, r4
 8009e9e:	f002 ff89 	bl	800cdb4 <__multiply>
 8009ea2:	900b      	str	r0, [sp, #44]	; 0x2c
 8009ea4:	2800      	cmp	r0, #0
 8009ea6:	f43f aeaf 	beq.w	8009c08 <_strtod_l+0x488>
 8009eaa:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009eac:	4620      	mov	r0, r4
 8009eae:	f002 fe6b 	bl	800cb88 <_Bfree>
 8009eb2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009eb4:	9316      	str	r3, [sp, #88]	; 0x58
 8009eb6:	2e00      	cmp	r6, #0
 8009eb8:	f300 808c 	bgt.w	8009fd4 <_strtod_l+0x854>
 8009ebc:	9b08      	ldr	r3, [sp, #32]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	dd08      	ble.n	8009ed4 <_strtod_l+0x754>
 8009ec2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8009ec4:	9905      	ldr	r1, [sp, #20]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	f003 f81e 	bl	800cf08 <__pow5mult>
 8009ecc:	9005      	str	r0, [sp, #20]
 8009ece:	2800      	cmp	r0, #0
 8009ed0:	f43f ae9a 	beq.w	8009c08 <_strtod_l+0x488>
 8009ed4:	2f00      	cmp	r7, #0
 8009ed6:	dd08      	ble.n	8009eea <_strtod_l+0x76a>
 8009ed8:	9905      	ldr	r1, [sp, #20]
 8009eda:	463a      	mov	r2, r7
 8009edc:	4620      	mov	r0, r4
 8009ede:	f003 f86d 	bl	800cfbc <__lshift>
 8009ee2:	9005      	str	r0, [sp, #20]
 8009ee4:	2800      	cmp	r0, #0
 8009ee6:	f43f ae8f 	beq.w	8009c08 <_strtod_l+0x488>
 8009eea:	f1ba 0f00 	cmp.w	sl, #0
 8009eee:	dd08      	ble.n	8009f02 <_strtod_l+0x782>
 8009ef0:	4659      	mov	r1, fp
 8009ef2:	4652      	mov	r2, sl
 8009ef4:	4620      	mov	r0, r4
 8009ef6:	f003 f861 	bl	800cfbc <__lshift>
 8009efa:	4683      	mov	fp, r0
 8009efc:	2800      	cmp	r0, #0
 8009efe:	f43f ae83 	beq.w	8009c08 <_strtod_l+0x488>
 8009f02:	9a05      	ldr	r2, [sp, #20]
 8009f04:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009f06:	4620      	mov	r0, r4
 8009f08:	f003 f8e0 	bl	800d0cc <__mdiff>
 8009f0c:	4605      	mov	r5, r0
 8009f0e:	2800      	cmp	r0, #0
 8009f10:	f43f ae7a 	beq.w	8009c08 <_strtod_l+0x488>
 8009f14:	68c3      	ldr	r3, [r0, #12]
 8009f16:	930b      	str	r3, [sp, #44]	; 0x2c
 8009f18:	2300      	movs	r3, #0
 8009f1a:	60c3      	str	r3, [r0, #12]
 8009f1c:	4659      	mov	r1, fp
 8009f1e:	f003 f8b9 	bl	800d094 <__mcmp>
 8009f22:	2800      	cmp	r0, #0
 8009f24:	da60      	bge.n	8009fe8 <_strtod_l+0x868>
 8009f26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009f28:	ea53 0308 	orrs.w	r3, r3, r8
 8009f2c:	f040 8084 	bne.w	800a038 <_strtod_l+0x8b8>
 8009f30:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d17f      	bne.n	800a038 <_strtod_l+0x8b8>
 8009f38:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009f3c:	0d1b      	lsrs	r3, r3, #20
 8009f3e:	051b      	lsls	r3, r3, #20
 8009f40:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8009f44:	d978      	bls.n	800a038 <_strtod_l+0x8b8>
 8009f46:	696b      	ldr	r3, [r5, #20]
 8009f48:	b913      	cbnz	r3, 8009f50 <_strtod_l+0x7d0>
 8009f4a:	692b      	ldr	r3, [r5, #16]
 8009f4c:	2b01      	cmp	r3, #1
 8009f4e:	dd73      	ble.n	800a038 <_strtod_l+0x8b8>
 8009f50:	4629      	mov	r1, r5
 8009f52:	2201      	movs	r2, #1
 8009f54:	4620      	mov	r0, r4
 8009f56:	f003 f831 	bl	800cfbc <__lshift>
 8009f5a:	4659      	mov	r1, fp
 8009f5c:	4605      	mov	r5, r0
 8009f5e:	f003 f899 	bl	800d094 <__mcmp>
 8009f62:	2800      	cmp	r0, #0
 8009f64:	dd68      	ble.n	800a038 <_strtod_l+0x8b8>
 8009f66:	9904      	ldr	r1, [sp, #16]
 8009f68:	4a54      	ldr	r2, [pc, #336]	; (800a0bc <_strtod_l+0x93c>)
 8009f6a:	464b      	mov	r3, r9
 8009f6c:	2900      	cmp	r1, #0
 8009f6e:	f000 8084 	beq.w	800a07a <_strtod_l+0x8fa>
 8009f72:	ea02 0109 	and.w	r1, r2, r9
 8009f76:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8009f7a:	dc7e      	bgt.n	800a07a <_strtod_l+0x8fa>
 8009f7c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8009f80:	f77f aeb3 	ble.w	8009cea <_strtod_l+0x56a>
 8009f84:	4b4e      	ldr	r3, [pc, #312]	; (800a0c0 <_strtod_l+0x940>)
 8009f86:	4640      	mov	r0, r8
 8009f88:	4649      	mov	r1, r9
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	f7f6 fb54 	bl	8000638 <__aeabi_dmul>
 8009f90:	4b4a      	ldr	r3, [pc, #296]	; (800a0bc <_strtod_l+0x93c>)
 8009f92:	400b      	ands	r3, r1
 8009f94:	4680      	mov	r8, r0
 8009f96:	4689      	mov	r9, r1
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	f47f ae3f 	bne.w	8009c1c <_strtod_l+0x49c>
 8009f9e:	2322      	movs	r3, #34	; 0x22
 8009fa0:	6023      	str	r3, [r4, #0]
 8009fa2:	e63b      	b.n	8009c1c <_strtod_l+0x49c>
 8009fa4:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8009fac:	ea03 0808 	and.w	r8, r3, r8
 8009fb0:	e6e8      	b.n	8009d84 <_strtod_l+0x604>
 8009fb2:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8009fb6:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 8009fba:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8009fbe:	36e2      	adds	r6, #226	; 0xe2
 8009fc0:	fa01 f306 	lsl.w	r3, r1, r6
 8009fc4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 8009fc8:	e748      	b.n	8009e5c <_strtod_l+0x6dc>
 8009fca:	2100      	movs	r1, #0
 8009fcc:	2301      	movs	r3, #1
 8009fce:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 8009fd2:	e743      	b.n	8009e5c <_strtod_l+0x6dc>
 8009fd4:	9916      	ldr	r1, [sp, #88]	; 0x58
 8009fd6:	4632      	mov	r2, r6
 8009fd8:	4620      	mov	r0, r4
 8009fda:	f002 ffef 	bl	800cfbc <__lshift>
 8009fde:	9016      	str	r0, [sp, #88]	; 0x58
 8009fe0:	2800      	cmp	r0, #0
 8009fe2:	f47f af6b 	bne.w	8009ebc <_strtod_l+0x73c>
 8009fe6:	e60f      	b.n	8009c08 <_strtod_l+0x488>
 8009fe8:	46ca      	mov	sl, r9
 8009fea:	d171      	bne.n	800a0d0 <_strtod_l+0x950>
 8009fec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009fee:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009ff2:	b352      	cbz	r2, 800a04a <_strtod_l+0x8ca>
 8009ff4:	4a33      	ldr	r2, [pc, #204]	; (800a0c4 <_strtod_l+0x944>)
 8009ff6:	4293      	cmp	r3, r2
 8009ff8:	d12a      	bne.n	800a050 <_strtod_l+0x8d0>
 8009ffa:	9b04      	ldr	r3, [sp, #16]
 8009ffc:	4641      	mov	r1, r8
 8009ffe:	b1fb      	cbz	r3, 800a040 <_strtod_l+0x8c0>
 800a000:	4b2e      	ldr	r3, [pc, #184]	; (800a0bc <_strtod_l+0x93c>)
 800a002:	ea09 0303 	and.w	r3, r9, r3
 800a006:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a00a:	f04f 32ff 	mov.w	r2, #4294967295
 800a00e:	d81a      	bhi.n	800a046 <_strtod_l+0x8c6>
 800a010:	0d1b      	lsrs	r3, r3, #20
 800a012:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a016:	fa02 f303 	lsl.w	r3, r2, r3
 800a01a:	4299      	cmp	r1, r3
 800a01c:	d118      	bne.n	800a050 <_strtod_l+0x8d0>
 800a01e:	4b2a      	ldr	r3, [pc, #168]	; (800a0c8 <_strtod_l+0x948>)
 800a020:	459a      	cmp	sl, r3
 800a022:	d102      	bne.n	800a02a <_strtod_l+0x8aa>
 800a024:	3101      	adds	r1, #1
 800a026:	f43f adef 	beq.w	8009c08 <_strtod_l+0x488>
 800a02a:	4b24      	ldr	r3, [pc, #144]	; (800a0bc <_strtod_l+0x93c>)
 800a02c:	ea0a 0303 	and.w	r3, sl, r3
 800a030:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800a034:	f04f 0800 	mov.w	r8, #0
 800a038:	9b04      	ldr	r3, [sp, #16]
 800a03a:	2b00      	cmp	r3, #0
 800a03c:	d1a2      	bne.n	8009f84 <_strtod_l+0x804>
 800a03e:	e5ed      	b.n	8009c1c <_strtod_l+0x49c>
 800a040:	f04f 33ff 	mov.w	r3, #4294967295
 800a044:	e7e9      	b.n	800a01a <_strtod_l+0x89a>
 800a046:	4613      	mov	r3, r2
 800a048:	e7e7      	b.n	800a01a <_strtod_l+0x89a>
 800a04a:	ea53 0308 	orrs.w	r3, r3, r8
 800a04e:	d08a      	beq.n	8009f66 <_strtod_l+0x7e6>
 800a050:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a052:	b1e3      	cbz	r3, 800a08e <_strtod_l+0x90e>
 800a054:	ea13 0f0a 	tst.w	r3, sl
 800a058:	d0ee      	beq.n	800a038 <_strtod_l+0x8b8>
 800a05a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a05c:	9a04      	ldr	r2, [sp, #16]
 800a05e:	4640      	mov	r0, r8
 800a060:	4649      	mov	r1, r9
 800a062:	b1c3      	cbz	r3, 800a096 <_strtod_l+0x916>
 800a064:	f7ff fb6f 	bl	8009746 <sulp>
 800a068:	4602      	mov	r2, r0
 800a06a:	460b      	mov	r3, r1
 800a06c:	ec51 0b18 	vmov	r0, r1, d8
 800a070:	f7f6 f92c 	bl	80002cc <__adddf3>
 800a074:	4680      	mov	r8, r0
 800a076:	4689      	mov	r9, r1
 800a078:	e7de      	b.n	800a038 <_strtod_l+0x8b8>
 800a07a:	4013      	ands	r3, r2
 800a07c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a080:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800a084:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800a088:	f04f 38ff 	mov.w	r8, #4294967295
 800a08c:	e7d4      	b.n	800a038 <_strtod_l+0x8b8>
 800a08e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a090:	ea13 0f08 	tst.w	r3, r8
 800a094:	e7e0      	b.n	800a058 <_strtod_l+0x8d8>
 800a096:	f7ff fb56 	bl	8009746 <sulp>
 800a09a:	4602      	mov	r2, r0
 800a09c:	460b      	mov	r3, r1
 800a09e:	ec51 0b18 	vmov	r0, r1, d8
 800a0a2:	f7f6 f911 	bl	80002c8 <__aeabi_dsub>
 800a0a6:	2200      	movs	r2, #0
 800a0a8:	2300      	movs	r3, #0
 800a0aa:	4680      	mov	r8, r0
 800a0ac:	4689      	mov	r9, r1
 800a0ae:	f7f6 fd2b 	bl	8000b08 <__aeabi_dcmpeq>
 800a0b2:	2800      	cmp	r0, #0
 800a0b4:	d0c0      	beq.n	800a038 <_strtod_l+0x8b8>
 800a0b6:	e618      	b.n	8009cea <_strtod_l+0x56a>
 800a0b8:	fffffc02 	.word	0xfffffc02
 800a0bc:	7ff00000 	.word	0x7ff00000
 800a0c0:	39500000 	.word	0x39500000
 800a0c4:	000fffff 	.word	0x000fffff
 800a0c8:	7fefffff 	.word	0x7fefffff
 800a0cc:	08045ba8 	.word	0x08045ba8
 800a0d0:	4659      	mov	r1, fp
 800a0d2:	4628      	mov	r0, r5
 800a0d4:	f003 f94e 	bl	800d374 <__ratio>
 800a0d8:	ec57 6b10 	vmov	r6, r7, d0
 800a0dc:	ee10 0a10 	vmov	r0, s0
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800a0e6:	4639      	mov	r1, r7
 800a0e8:	f7f6 fd22 	bl	8000b30 <__aeabi_dcmple>
 800a0ec:	2800      	cmp	r0, #0
 800a0ee:	d071      	beq.n	800a1d4 <_strtod_l+0xa54>
 800a0f0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d17c      	bne.n	800a1f0 <_strtod_l+0xa70>
 800a0f6:	f1b8 0f00 	cmp.w	r8, #0
 800a0fa:	d15a      	bne.n	800a1b2 <_strtod_l+0xa32>
 800a0fc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a100:	2b00      	cmp	r3, #0
 800a102:	d15d      	bne.n	800a1c0 <_strtod_l+0xa40>
 800a104:	4b90      	ldr	r3, [pc, #576]	; (800a348 <_strtod_l+0xbc8>)
 800a106:	2200      	movs	r2, #0
 800a108:	4630      	mov	r0, r6
 800a10a:	4639      	mov	r1, r7
 800a10c:	f7f6 fd06 	bl	8000b1c <__aeabi_dcmplt>
 800a110:	2800      	cmp	r0, #0
 800a112:	d15c      	bne.n	800a1ce <_strtod_l+0xa4e>
 800a114:	4630      	mov	r0, r6
 800a116:	4639      	mov	r1, r7
 800a118:	4b8c      	ldr	r3, [pc, #560]	; (800a34c <_strtod_l+0xbcc>)
 800a11a:	2200      	movs	r2, #0
 800a11c:	f7f6 fa8c 	bl	8000638 <__aeabi_dmul>
 800a120:	4606      	mov	r6, r0
 800a122:	460f      	mov	r7, r1
 800a124:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800a128:	9606      	str	r6, [sp, #24]
 800a12a:	9307      	str	r3, [sp, #28]
 800a12c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a130:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a134:	4b86      	ldr	r3, [pc, #536]	; (800a350 <_strtod_l+0xbd0>)
 800a136:	ea0a 0303 	and.w	r3, sl, r3
 800a13a:	930d      	str	r3, [sp, #52]	; 0x34
 800a13c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a13e:	4b85      	ldr	r3, [pc, #532]	; (800a354 <_strtod_l+0xbd4>)
 800a140:	429a      	cmp	r2, r3
 800a142:	f040 8090 	bne.w	800a266 <_strtod_l+0xae6>
 800a146:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800a14a:	ec49 8b10 	vmov	d0, r8, r9
 800a14e:	f003 f847 	bl	800d1e0 <__ulp>
 800a152:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a156:	ec51 0b10 	vmov	r0, r1, d0
 800a15a:	f7f6 fa6d 	bl	8000638 <__aeabi_dmul>
 800a15e:	4642      	mov	r2, r8
 800a160:	464b      	mov	r3, r9
 800a162:	f7f6 f8b3 	bl	80002cc <__adddf3>
 800a166:	460b      	mov	r3, r1
 800a168:	4979      	ldr	r1, [pc, #484]	; (800a350 <_strtod_l+0xbd0>)
 800a16a:	4a7b      	ldr	r2, [pc, #492]	; (800a358 <_strtod_l+0xbd8>)
 800a16c:	4019      	ands	r1, r3
 800a16e:	4291      	cmp	r1, r2
 800a170:	4680      	mov	r8, r0
 800a172:	d944      	bls.n	800a1fe <_strtod_l+0xa7e>
 800a174:	ee18 2a90 	vmov	r2, s17
 800a178:	4b78      	ldr	r3, [pc, #480]	; (800a35c <_strtod_l+0xbdc>)
 800a17a:	429a      	cmp	r2, r3
 800a17c:	d104      	bne.n	800a188 <_strtod_l+0xa08>
 800a17e:	ee18 3a10 	vmov	r3, s16
 800a182:	3301      	adds	r3, #1
 800a184:	f43f ad40 	beq.w	8009c08 <_strtod_l+0x488>
 800a188:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800a35c <_strtod_l+0xbdc>
 800a18c:	f04f 38ff 	mov.w	r8, #4294967295
 800a190:	9916      	ldr	r1, [sp, #88]	; 0x58
 800a192:	4620      	mov	r0, r4
 800a194:	f002 fcf8 	bl	800cb88 <_Bfree>
 800a198:	9905      	ldr	r1, [sp, #20]
 800a19a:	4620      	mov	r0, r4
 800a19c:	f002 fcf4 	bl	800cb88 <_Bfree>
 800a1a0:	4659      	mov	r1, fp
 800a1a2:	4620      	mov	r0, r4
 800a1a4:	f002 fcf0 	bl	800cb88 <_Bfree>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f002 fcec 	bl	800cb88 <_Bfree>
 800a1b0:	e609      	b.n	8009dc6 <_strtod_l+0x646>
 800a1b2:	f1b8 0f01 	cmp.w	r8, #1
 800a1b6:	d103      	bne.n	800a1c0 <_strtod_l+0xa40>
 800a1b8:	f1b9 0f00 	cmp.w	r9, #0
 800a1bc:	f43f ad95 	beq.w	8009cea <_strtod_l+0x56a>
 800a1c0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800a318 <_strtod_l+0xb98>
 800a1c4:	4f60      	ldr	r7, [pc, #384]	; (800a348 <_strtod_l+0xbc8>)
 800a1c6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1ca:	2600      	movs	r6, #0
 800a1cc:	e7ae      	b.n	800a12c <_strtod_l+0x9ac>
 800a1ce:	4f5f      	ldr	r7, [pc, #380]	; (800a34c <_strtod_l+0xbcc>)
 800a1d0:	2600      	movs	r6, #0
 800a1d2:	e7a7      	b.n	800a124 <_strtod_l+0x9a4>
 800a1d4:	4b5d      	ldr	r3, [pc, #372]	; (800a34c <_strtod_l+0xbcc>)
 800a1d6:	4630      	mov	r0, r6
 800a1d8:	4639      	mov	r1, r7
 800a1da:	2200      	movs	r2, #0
 800a1dc:	f7f6 fa2c 	bl	8000638 <__aeabi_dmul>
 800a1e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a1e2:	4606      	mov	r6, r0
 800a1e4:	460f      	mov	r7, r1
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d09c      	beq.n	800a124 <_strtod_l+0x9a4>
 800a1ea:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a1ee:	e79d      	b.n	800a12c <_strtod_l+0x9ac>
 800a1f0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800a320 <_strtod_l+0xba0>
 800a1f4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a1f8:	ec57 6b17 	vmov	r6, r7, d7
 800a1fc:	e796      	b.n	800a12c <_strtod_l+0x9ac>
 800a1fe:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800a202:	9b04      	ldr	r3, [sp, #16]
 800a204:	46ca      	mov	sl, r9
 800a206:	2b00      	cmp	r3, #0
 800a208:	d1c2      	bne.n	800a190 <_strtod_l+0xa10>
 800a20a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a20e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a210:	0d1b      	lsrs	r3, r3, #20
 800a212:	051b      	lsls	r3, r3, #20
 800a214:	429a      	cmp	r2, r3
 800a216:	d1bb      	bne.n	800a190 <_strtod_l+0xa10>
 800a218:	4630      	mov	r0, r6
 800a21a:	4639      	mov	r1, r7
 800a21c:	f7f6 fd6c 	bl	8000cf8 <__aeabi_d2lz>
 800a220:	f7f6 f9dc 	bl	80005dc <__aeabi_l2d>
 800a224:	4602      	mov	r2, r0
 800a226:	460b      	mov	r3, r1
 800a228:	4630      	mov	r0, r6
 800a22a:	4639      	mov	r1, r7
 800a22c:	f7f6 f84c 	bl	80002c8 <__aeabi_dsub>
 800a230:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a232:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a236:	ea43 0308 	orr.w	r3, r3, r8
 800a23a:	4313      	orrs	r3, r2
 800a23c:	4606      	mov	r6, r0
 800a23e:	460f      	mov	r7, r1
 800a240:	d054      	beq.n	800a2ec <_strtod_l+0xb6c>
 800a242:	a339      	add	r3, pc, #228	; (adr r3, 800a328 <_strtod_l+0xba8>)
 800a244:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a248:	f7f6 fc68 	bl	8000b1c <__aeabi_dcmplt>
 800a24c:	2800      	cmp	r0, #0
 800a24e:	f47f ace5 	bne.w	8009c1c <_strtod_l+0x49c>
 800a252:	a337      	add	r3, pc, #220	; (adr r3, 800a330 <_strtod_l+0xbb0>)
 800a254:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a258:	4630      	mov	r0, r6
 800a25a:	4639      	mov	r1, r7
 800a25c:	f7f6 fc7c 	bl	8000b58 <__aeabi_dcmpgt>
 800a260:	2800      	cmp	r0, #0
 800a262:	d095      	beq.n	800a190 <_strtod_l+0xa10>
 800a264:	e4da      	b.n	8009c1c <_strtod_l+0x49c>
 800a266:	9b04      	ldr	r3, [sp, #16]
 800a268:	b333      	cbz	r3, 800a2b8 <_strtod_l+0xb38>
 800a26a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a26c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a270:	d822      	bhi.n	800a2b8 <_strtod_l+0xb38>
 800a272:	a331      	add	r3, pc, #196	; (adr r3, 800a338 <_strtod_l+0xbb8>)
 800a274:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a278:	4630      	mov	r0, r6
 800a27a:	4639      	mov	r1, r7
 800a27c:	f7f6 fc58 	bl	8000b30 <__aeabi_dcmple>
 800a280:	b1a0      	cbz	r0, 800a2ac <_strtod_l+0xb2c>
 800a282:	4639      	mov	r1, r7
 800a284:	4630      	mov	r0, r6
 800a286:	f7f6 fcaf 	bl	8000be8 <__aeabi_d2uiz>
 800a28a:	2801      	cmp	r0, #1
 800a28c:	bf38      	it	cc
 800a28e:	2001      	movcc	r0, #1
 800a290:	f7f6 f958 	bl	8000544 <__aeabi_ui2d>
 800a294:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a296:	4606      	mov	r6, r0
 800a298:	460f      	mov	r7, r1
 800a29a:	bb23      	cbnz	r3, 800a2e6 <_strtod_l+0xb66>
 800a29c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a2a0:	9010      	str	r0, [sp, #64]	; 0x40
 800a2a2:	9311      	str	r3, [sp, #68]	; 0x44
 800a2a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800a2a8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800a2ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a2ae:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a2b0:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800a2b4:	1a9b      	subs	r3, r3, r2
 800a2b6:	930f      	str	r3, [sp, #60]	; 0x3c
 800a2b8:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a2bc:	eeb0 0a48 	vmov.f32	s0, s16
 800a2c0:	eef0 0a68 	vmov.f32	s1, s17
 800a2c4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800a2c8:	f002 ff8a 	bl	800d1e0 <__ulp>
 800a2cc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800a2d0:	ec53 2b10 	vmov	r2, r3, d0
 800a2d4:	f7f6 f9b0 	bl	8000638 <__aeabi_dmul>
 800a2d8:	ec53 2b18 	vmov	r2, r3, d8
 800a2dc:	f7f5 fff6 	bl	80002cc <__adddf3>
 800a2e0:	4680      	mov	r8, r0
 800a2e2:	4689      	mov	r9, r1
 800a2e4:	e78d      	b.n	800a202 <_strtod_l+0xa82>
 800a2e6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800a2ea:	e7db      	b.n	800a2a4 <_strtod_l+0xb24>
 800a2ec:	a314      	add	r3, pc, #80	; (adr r3, 800a340 <_strtod_l+0xbc0>)
 800a2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2f2:	f7f6 fc13 	bl	8000b1c <__aeabi_dcmplt>
 800a2f6:	e7b3      	b.n	800a260 <_strtod_l+0xae0>
 800a2f8:	2300      	movs	r3, #0
 800a2fa:	930a      	str	r3, [sp, #40]	; 0x28
 800a2fc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800a2fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a300:	6013      	str	r3, [r2, #0]
 800a302:	f7ff ba7c 	b.w	80097fe <_strtod_l+0x7e>
 800a306:	2a65      	cmp	r2, #101	; 0x65
 800a308:	f43f ab75 	beq.w	80099f6 <_strtod_l+0x276>
 800a30c:	2a45      	cmp	r2, #69	; 0x45
 800a30e:	f43f ab72 	beq.w	80099f6 <_strtod_l+0x276>
 800a312:	2301      	movs	r3, #1
 800a314:	f7ff bbaa 	b.w	8009a6c <_strtod_l+0x2ec>
 800a318:	00000000 	.word	0x00000000
 800a31c:	bff00000 	.word	0xbff00000
 800a320:	00000000 	.word	0x00000000
 800a324:	3ff00000 	.word	0x3ff00000
 800a328:	94a03595 	.word	0x94a03595
 800a32c:	3fdfffff 	.word	0x3fdfffff
 800a330:	35afe535 	.word	0x35afe535
 800a334:	3fe00000 	.word	0x3fe00000
 800a338:	ffc00000 	.word	0xffc00000
 800a33c:	41dfffff 	.word	0x41dfffff
 800a340:	94a03595 	.word	0x94a03595
 800a344:	3fcfffff 	.word	0x3fcfffff
 800a348:	3ff00000 	.word	0x3ff00000
 800a34c:	3fe00000 	.word	0x3fe00000
 800a350:	7ff00000 	.word	0x7ff00000
 800a354:	7fe00000 	.word	0x7fe00000
 800a358:	7c9fffff 	.word	0x7c9fffff
 800a35c:	7fefffff 	.word	0x7fefffff

0800a360 <_strtod_r>:
 800a360:	4b01      	ldr	r3, [pc, #4]	; (800a368 <_strtod_r+0x8>)
 800a362:	f7ff ba0d 	b.w	8009780 <_strtod_l>
 800a366:	bf00      	nop
 800a368:	20000c6c 	.word	0x20000c6c

0800a36c <strtod>:
 800a36c:	460a      	mov	r2, r1
 800a36e:	4601      	mov	r1, r0
 800a370:	4802      	ldr	r0, [pc, #8]	; (800a37c <strtod+0x10>)
 800a372:	4b03      	ldr	r3, [pc, #12]	; (800a380 <strtod+0x14>)
 800a374:	6800      	ldr	r0, [r0, #0]
 800a376:	f7ff ba03 	b.w	8009780 <_strtod_l>
 800a37a:	bf00      	nop
 800a37c:	20000e24 	.word	0x20000e24
 800a380:	20000c6c 	.word	0x20000c6c

0800a384 <__cvt>:
 800a384:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a388:	ec55 4b10 	vmov	r4, r5, d0
 800a38c:	2d00      	cmp	r5, #0
 800a38e:	460e      	mov	r6, r1
 800a390:	4619      	mov	r1, r3
 800a392:	462b      	mov	r3, r5
 800a394:	bfbb      	ittet	lt
 800a396:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800a39a:	461d      	movlt	r5, r3
 800a39c:	2300      	movge	r3, #0
 800a39e:	232d      	movlt	r3, #45	; 0x2d
 800a3a0:	700b      	strb	r3, [r1, #0]
 800a3a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a3a4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800a3a8:	4691      	mov	r9, r2
 800a3aa:	f023 0820 	bic.w	r8, r3, #32
 800a3ae:	bfbc      	itt	lt
 800a3b0:	4622      	movlt	r2, r4
 800a3b2:	4614      	movlt	r4, r2
 800a3b4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3b8:	d005      	beq.n	800a3c6 <__cvt+0x42>
 800a3ba:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800a3be:	d100      	bne.n	800a3c2 <__cvt+0x3e>
 800a3c0:	3601      	adds	r6, #1
 800a3c2:	2102      	movs	r1, #2
 800a3c4:	e000      	b.n	800a3c8 <__cvt+0x44>
 800a3c6:	2103      	movs	r1, #3
 800a3c8:	ab03      	add	r3, sp, #12
 800a3ca:	9301      	str	r3, [sp, #4]
 800a3cc:	ab02      	add	r3, sp, #8
 800a3ce:	9300      	str	r3, [sp, #0]
 800a3d0:	ec45 4b10 	vmov	d0, r4, r5
 800a3d4:	4653      	mov	r3, sl
 800a3d6:	4632      	mov	r2, r6
 800a3d8:	f001 f9ee 	bl	800b7b8 <_dtoa_r>
 800a3dc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800a3e0:	4607      	mov	r7, r0
 800a3e2:	d102      	bne.n	800a3ea <__cvt+0x66>
 800a3e4:	f019 0f01 	tst.w	r9, #1
 800a3e8:	d022      	beq.n	800a430 <__cvt+0xac>
 800a3ea:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800a3ee:	eb07 0906 	add.w	r9, r7, r6
 800a3f2:	d110      	bne.n	800a416 <__cvt+0x92>
 800a3f4:	783b      	ldrb	r3, [r7, #0]
 800a3f6:	2b30      	cmp	r3, #48	; 0x30
 800a3f8:	d10a      	bne.n	800a410 <__cvt+0x8c>
 800a3fa:	2200      	movs	r2, #0
 800a3fc:	2300      	movs	r3, #0
 800a3fe:	4620      	mov	r0, r4
 800a400:	4629      	mov	r1, r5
 800a402:	f7f6 fb81 	bl	8000b08 <__aeabi_dcmpeq>
 800a406:	b918      	cbnz	r0, 800a410 <__cvt+0x8c>
 800a408:	f1c6 0601 	rsb	r6, r6, #1
 800a40c:	f8ca 6000 	str.w	r6, [sl]
 800a410:	f8da 3000 	ldr.w	r3, [sl]
 800a414:	4499      	add	r9, r3
 800a416:	2200      	movs	r2, #0
 800a418:	2300      	movs	r3, #0
 800a41a:	4620      	mov	r0, r4
 800a41c:	4629      	mov	r1, r5
 800a41e:	f7f6 fb73 	bl	8000b08 <__aeabi_dcmpeq>
 800a422:	b108      	cbz	r0, 800a428 <__cvt+0xa4>
 800a424:	f8cd 900c 	str.w	r9, [sp, #12]
 800a428:	2230      	movs	r2, #48	; 0x30
 800a42a:	9b03      	ldr	r3, [sp, #12]
 800a42c:	454b      	cmp	r3, r9
 800a42e:	d307      	bcc.n	800a440 <__cvt+0xbc>
 800a430:	9b03      	ldr	r3, [sp, #12]
 800a432:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a434:	1bdb      	subs	r3, r3, r7
 800a436:	4638      	mov	r0, r7
 800a438:	6013      	str	r3, [r2, #0]
 800a43a:	b004      	add	sp, #16
 800a43c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a440:	1c59      	adds	r1, r3, #1
 800a442:	9103      	str	r1, [sp, #12]
 800a444:	701a      	strb	r2, [r3, #0]
 800a446:	e7f0      	b.n	800a42a <__cvt+0xa6>

0800a448 <__exponent>:
 800a448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a44a:	4603      	mov	r3, r0
 800a44c:	2900      	cmp	r1, #0
 800a44e:	bfb8      	it	lt
 800a450:	4249      	neglt	r1, r1
 800a452:	f803 2b02 	strb.w	r2, [r3], #2
 800a456:	bfb4      	ite	lt
 800a458:	222d      	movlt	r2, #45	; 0x2d
 800a45a:	222b      	movge	r2, #43	; 0x2b
 800a45c:	2909      	cmp	r1, #9
 800a45e:	7042      	strb	r2, [r0, #1]
 800a460:	dd2a      	ble.n	800a4b8 <__exponent+0x70>
 800a462:	f10d 0207 	add.w	r2, sp, #7
 800a466:	4617      	mov	r7, r2
 800a468:	260a      	movs	r6, #10
 800a46a:	4694      	mov	ip, r2
 800a46c:	fb91 f5f6 	sdiv	r5, r1, r6
 800a470:	fb06 1415 	mls	r4, r6, r5, r1
 800a474:	3430      	adds	r4, #48	; 0x30
 800a476:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800a47a:	460c      	mov	r4, r1
 800a47c:	2c63      	cmp	r4, #99	; 0x63
 800a47e:	f102 32ff 	add.w	r2, r2, #4294967295
 800a482:	4629      	mov	r1, r5
 800a484:	dcf1      	bgt.n	800a46a <__exponent+0x22>
 800a486:	3130      	adds	r1, #48	; 0x30
 800a488:	f1ac 0402 	sub.w	r4, ip, #2
 800a48c:	f802 1c01 	strb.w	r1, [r2, #-1]
 800a490:	1c41      	adds	r1, r0, #1
 800a492:	4622      	mov	r2, r4
 800a494:	42ba      	cmp	r2, r7
 800a496:	d30a      	bcc.n	800a4ae <__exponent+0x66>
 800a498:	f10d 0209 	add.w	r2, sp, #9
 800a49c:	eba2 020c 	sub.w	r2, r2, ip
 800a4a0:	42bc      	cmp	r4, r7
 800a4a2:	bf88      	it	hi
 800a4a4:	2200      	movhi	r2, #0
 800a4a6:	4413      	add	r3, r2
 800a4a8:	1a18      	subs	r0, r3, r0
 800a4aa:	b003      	add	sp, #12
 800a4ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a4ae:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a4b2:	f801 5f01 	strb.w	r5, [r1, #1]!
 800a4b6:	e7ed      	b.n	800a494 <__exponent+0x4c>
 800a4b8:	2330      	movs	r3, #48	; 0x30
 800a4ba:	3130      	adds	r1, #48	; 0x30
 800a4bc:	7083      	strb	r3, [r0, #2]
 800a4be:	70c1      	strb	r1, [r0, #3]
 800a4c0:	1d03      	adds	r3, r0, #4
 800a4c2:	e7f1      	b.n	800a4a8 <__exponent+0x60>

0800a4c4 <_printf_float>:
 800a4c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c8:	ed2d 8b02 	vpush	{d8}
 800a4cc:	b08d      	sub	sp, #52	; 0x34
 800a4ce:	460c      	mov	r4, r1
 800a4d0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a4d4:	4616      	mov	r6, r2
 800a4d6:	461f      	mov	r7, r3
 800a4d8:	4605      	mov	r5, r0
 800a4da:	f001 f83f 	bl	800b55c <_localeconv_r>
 800a4de:	f8d0 a000 	ldr.w	sl, [r0]
 800a4e2:	4650      	mov	r0, sl
 800a4e4:	f7f5 fee4 	bl	80002b0 <strlen>
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	930a      	str	r3, [sp, #40]	; 0x28
 800a4ec:	6823      	ldr	r3, [r4, #0]
 800a4ee:	9305      	str	r3, [sp, #20]
 800a4f0:	f8d8 3000 	ldr.w	r3, [r8]
 800a4f4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a4f8:	3307      	adds	r3, #7
 800a4fa:	f023 0307 	bic.w	r3, r3, #7
 800a4fe:	f103 0208 	add.w	r2, r3, #8
 800a502:	f8c8 2000 	str.w	r2, [r8]
 800a506:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a50a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a50e:	9307      	str	r3, [sp, #28]
 800a510:	f8cd 8018 	str.w	r8, [sp, #24]
 800a514:	ee08 0a10 	vmov	s16, r0
 800a518:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a51c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a520:	4b9e      	ldr	r3, [pc, #632]	; (800a79c <_printf_float+0x2d8>)
 800a522:	f04f 32ff 	mov.w	r2, #4294967295
 800a526:	f7f6 fb21 	bl	8000b6c <__aeabi_dcmpun>
 800a52a:	bb88      	cbnz	r0, 800a590 <_printf_float+0xcc>
 800a52c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a530:	4b9a      	ldr	r3, [pc, #616]	; (800a79c <_printf_float+0x2d8>)
 800a532:	f04f 32ff 	mov.w	r2, #4294967295
 800a536:	f7f6 fafb 	bl	8000b30 <__aeabi_dcmple>
 800a53a:	bb48      	cbnz	r0, 800a590 <_printf_float+0xcc>
 800a53c:	2200      	movs	r2, #0
 800a53e:	2300      	movs	r3, #0
 800a540:	4640      	mov	r0, r8
 800a542:	4649      	mov	r1, r9
 800a544:	f7f6 faea 	bl	8000b1c <__aeabi_dcmplt>
 800a548:	b110      	cbz	r0, 800a550 <_printf_float+0x8c>
 800a54a:	232d      	movs	r3, #45	; 0x2d
 800a54c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a550:	4a93      	ldr	r2, [pc, #588]	; (800a7a0 <_printf_float+0x2dc>)
 800a552:	4b94      	ldr	r3, [pc, #592]	; (800a7a4 <_printf_float+0x2e0>)
 800a554:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a558:	bf94      	ite	ls
 800a55a:	4690      	movls	r8, r2
 800a55c:	4698      	movhi	r8, r3
 800a55e:	2303      	movs	r3, #3
 800a560:	6123      	str	r3, [r4, #16]
 800a562:	9b05      	ldr	r3, [sp, #20]
 800a564:	f023 0304 	bic.w	r3, r3, #4
 800a568:	6023      	str	r3, [r4, #0]
 800a56a:	f04f 0900 	mov.w	r9, #0
 800a56e:	9700      	str	r7, [sp, #0]
 800a570:	4633      	mov	r3, r6
 800a572:	aa0b      	add	r2, sp, #44	; 0x2c
 800a574:	4621      	mov	r1, r4
 800a576:	4628      	mov	r0, r5
 800a578:	f000 f9da 	bl	800a930 <_printf_common>
 800a57c:	3001      	adds	r0, #1
 800a57e:	f040 8090 	bne.w	800a6a2 <_printf_float+0x1de>
 800a582:	f04f 30ff 	mov.w	r0, #4294967295
 800a586:	b00d      	add	sp, #52	; 0x34
 800a588:	ecbd 8b02 	vpop	{d8}
 800a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a590:	4642      	mov	r2, r8
 800a592:	464b      	mov	r3, r9
 800a594:	4640      	mov	r0, r8
 800a596:	4649      	mov	r1, r9
 800a598:	f7f6 fae8 	bl	8000b6c <__aeabi_dcmpun>
 800a59c:	b140      	cbz	r0, 800a5b0 <_printf_float+0xec>
 800a59e:	464b      	mov	r3, r9
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	bfbc      	itt	lt
 800a5a4:	232d      	movlt	r3, #45	; 0x2d
 800a5a6:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a5aa:	4a7f      	ldr	r2, [pc, #508]	; (800a7a8 <_printf_float+0x2e4>)
 800a5ac:	4b7f      	ldr	r3, [pc, #508]	; (800a7ac <_printf_float+0x2e8>)
 800a5ae:	e7d1      	b.n	800a554 <_printf_float+0x90>
 800a5b0:	6863      	ldr	r3, [r4, #4]
 800a5b2:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a5b6:	9206      	str	r2, [sp, #24]
 800a5b8:	1c5a      	adds	r2, r3, #1
 800a5ba:	d13f      	bne.n	800a63c <_printf_float+0x178>
 800a5bc:	2306      	movs	r3, #6
 800a5be:	6063      	str	r3, [r4, #4]
 800a5c0:	9b05      	ldr	r3, [sp, #20]
 800a5c2:	6861      	ldr	r1, [r4, #4]
 800a5c4:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a5c8:	2300      	movs	r3, #0
 800a5ca:	9303      	str	r3, [sp, #12]
 800a5cc:	ab0a      	add	r3, sp, #40	; 0x28
 800a5ce:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a5d2:	ab09      	add	r3, sp, #36	; 0x24
 800a5d4:	ec49 8b10 	vmov	d0, r8, r9
 800a5d8:	9300      	str	r3, [sp, #0]
 800a5da:	6022      	str	r2, [r4, #0]
 800a5dc:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a5e0:	4628      	mov	r0, r5
 800a5e2:	f7ff fecf 	bl	800a384 <__cvt>
 800a5e6:	9b06      	ldr	r3, [sp, #24]
 800a5e8:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5ea:	2b47      	cmp	r3, #71	; 0x47
 800a5ec:	4680      	mov	r8, r0
 800a5ee:	d108      	bne.n	800a602 <_printf_float+0x13e>
 800a5f0:	1cc8      	adds	r0, r1, #3
 800a5f2:	db02      	blt.n	800a5fa <_printf_float+0x136>
 800a5f4:	6863      	ldr	r3, [r4, #4]
 800a5f6:	4299      	cmp	r1, r3
 800a5f8:	dd41      	ble.n	800a67e <_printf_float+0x1ba>
 800a5fa:	f1ab 0302 	sub.w	r3, fp, #2
 800a5fe:	fa5f fb83 	uxtb.w	fp, r3
 800a602:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a606:	d820      	bhi.n	800a64a <_printf_float+0x186>
 800a608:	3901      	subs	r1, #1
 800a60a:	465a      	mov	r2, fp
 800a60c:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a610:	9109      	str	r1, [sp, #36]	; 0x24
 800a612:	f7ff ff19 	bl	800a448 <__exponent>
 800a616:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a618:	1813      	adds	r3, r2, r0
 800a61a:	2a01      	cmp	r2, #1
 800a61c:	4681      	mov	r9, r0
 800a61e:	6123      	str	r3, [r4, #16]
 800a620:	dc02      	bgt.n	800a628 <_printf_float+0x164>
 800a622:	6822      	ldr	r2, [r4, #0]
 800a624:	07d2      	lsls	r2, r2, #31
 800a626:	d501      	bpl.n	800a62c <_printf_float+0x168>
 800a628:	3301      	adds	r3, #1
 800a62a:	6123      	str	r3, [r4, #16]
 800a62c:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a630:	2b00      	cmp	r3, #0
 800a632:	d09c      	beq.n	800a56e <_printf_float+0xaa>
 800a634:	232d      	movs	r3, #45	; 0x2d
 800a636:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63a:	e798      	b.n	800a56e <_printf_float+0xaa>
 800a63c:	9a06      	ldr	r2, [sp, #24]
 800a63e:	2a47      	cmp	r2, #71	; 0x47
 800a640:	d1be      	bne.n	800a5c0 <_printf_float+0xfc>
 800a642:	2b00      	cmp	r3, #0
 800a644:	d1bc      	bne.n	800a5c0 <_printf_float+0xfc>
 800a646:	2301      	movs	r3, #1
 800a648:	e7b9      	b.n	800a5be <_printf_float+0xfa>
 800a64a:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a64e:	d118      	bne.n	800a682 <_printf_float+0x1be>
 800a650:	2900      	cmp	r1, #0
 800a652:	6863      	ldr	r3, [r4, #4]
 800a654:	dd0b      	ble.n	800a66e <_printf_float+0x1aa>
 800a656:	6121      	str	r1, [r4, #16]
 800a658:	b913      	cbnz	r3, 800a660 <_printf_float+0x19c>
 800a65a:	6822      	ldr	r2, [r4, #0]
 800a65c:	07d0      	lsls	r0, r2, #31
 800a65e:	d502      	bpl.n	800a666 <_printf_float+0x1a2>
 800a660:	3301      	adds	r3, #1
 800a662:	440b      	add	r3, r1
 800a664:	6123      	str	r3, [r4, #16]
 800a666:	65a1      	str	r1, [r4, #88]	; 0x58
 800a668:	f04f 0900 	mov.w	r9, #0
 800a66c:	e7de      	b.n	800a62c <_printf_float+0x168>
 800a66e:	b913      	cbnz	r3, 800a676 <_printf_float+0x1b2>
 800a670:	6822      	ldr	r2, [r4, #0]
 800a672:	07d2      	lsls	r2, r2, #31
 800a674:	d501      	bpl.n	800a67a <_printf_float+0x1b6>
 800a676:	3302      	adds	r3, #2
 800a678:	e7f4      	b.n	800a664 <_printf_float+0x1a0>
 800a67a:	2301      	movs	r3, #1
 800a67c:	e7f2      	b.n	800a664 <_printf_float+0x1a0>
 800a67e:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a682:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a684:	4299      	cmp	r1, r3
 800a686:	db05      	blt.n	800a694 <_printf_float+0x1d0>
 800a688:	6823      	ldr	r3, [r4, #0]
 800a68a:	6121      	str	r1, [r4, #16]
 800a68c:	07d8      	lsls	r0, r3, #31
 800a68e:	d5ea      	bpl.n	800a666 <_printf_float+0x1a2>
 800a690:	1c4b      	adds	r3, r1, #1
 800a692:	e7e7      	b.n	800a664 <_printf_float+0x1a0>
 800a694:	2900      	cmp	r1, #0
 800a696:	bfd4      	ite	le
 800a698:	f1c1 0202 	rsble	r2, r1, #2
 800a69c:	2201      	movgt	r2, #1
 800a69e:	4413      	add	r3, r2
 800a6a0:	e7e0      	b.n	800a664 <_printf_float+0x1a0>
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	055a      	lsls	r2, r3, #21
 800a6a6:	d407      	bmi.n	800a6b8 <_printf_float+0x1f4>
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	4642      	mov	r2, r8
 800a6ac:	4631      	mov	r1, r6
 800a6ae:	4628      	mov	r0, r5
 800a6b0:	47b8      	blx	r7
 800a6b2:	3001      	adds	r0, #1
 800a6b4:	d12c      	bne.n	800a710 <_printf_float+0x24c>
 800a6b6:	e764      	b.n	800a582 <_printf_float+0xbe>
 800a6b8:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a6bc:	f240 80e0 	bls.w	800a880 <_printf_float+0x3bc>
 800a6c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a6c4:	2200      	movs	r2, #0
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	f7f6 fa1e 	bl	8000b08 <__aeabi_dcmpeq>
 800a6cc:	2800      	cmp	r0, #0
 800a6ce:	d034      	beq.n	800a73a <_printf_float+0x276>
 800a6d0:	4a37      	ldr	r2, [pc, #220]	; (800a7b0 <_printf_float+0x2ec>)
 800a6d2:	2301      	movs	r3, #1
 800a6d4:	4631      	mov	r1, r6
 800a6d6:	4628      	mov	r0, r5
 800a6d8:	47b8      	blx	r7
 800a6da:	3001      	adds	r0, #1
 800a6dc:	f43f af51 	beq.w	800a582 <_printf_float+0xbe>
 800a6e0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a6e4:	429a      	cmp	r2, r3
 800a6e6:	db02      	blt.n	800a6ee <_printf_float+0x22a>
 800a6e8:	6823      	ldr	r3, [r4, #0]
 800a6ea:	07d8      	lsls	r0, r3, #31
 800a6ec:	d510      	bpl.n	800a710 <_printf_float+0x24c>
 800a6ee:	ee18 3a10 	vmov	r3, s16
 800a6f2:	4652      	mov	r2, sl
 800a6f4:	4631      	mov	r1, r6
 800a6f6:	4628      	mov	r0, r5
 800a6f8:	47b8      	blx	r7
 800a6fa:	3001      	adds	r0, #1
 800a6fc:	f43f af41 	beq.w	800a582 <_printf_float+0xbe>
 800a700:	f04f 0800 	mov.w	r8, #0
 800a704:	f104 091a 	add.w	r9, r4, #26
 800a708:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a70a:	3b01      	subs	r3, #1
 800a70c:	4543      	cmp	r3, r8
 800a70e:	dc09      	bgt.n	800a724 <_printf_float+0x260>
 800a710:	6823      	ldr	r3, [r4, #0]
 800a712:	079b      	lsls	r3, r3, #30
 800a714:	f100 8107 	bmi.w	800a926 <_printf_float+0x462>
 800a718:	68e0      	ldr	r0, [r4, #12]
 800a71a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a71c:	4298      	cmp	r0, r3
 800a71e:	bfb8      	it	lt
 800a720:	4618      	movlt	r0, r3
 800a722:	e730      	b.n	800a586 <_printf_float+0xc2>
 800a724:	2301      	movs	r3, #1
 800a726:	464a      	mov	r2, r9
 800a728:	4631      	mov	r1, r6
 800a72a:	4628      	mov	r0, r5
 800a72c:	47b8      	blx	r7
 800a72e:	3001      	adds	r0, #1
 800a730:	f43f af27 	beq.w	800a582 <_printf_float+0xbe>
 800a734:	f108 0801 	add.w	r8, r8, #1
 800a738:	e7e6      	b.n	800a708 <_printf_float+0x244>
 800a73a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	dc39      	bgt.n	800a7b4 <_printf_float+0x2f0>
 800a740:	4a1b      	ldr	r2, [pc, #108]	; (800a7b0 <_printf_float+0x2ec>)
 800a742:	2301      	movs	r3, #1
 800a744:	4631      	mov	r1, r6
 800a746:	4628      	mov	r0, r5
 800a748:	47b8      	blx	r7
 800a74a:	3001      	adds	r0, #1
 800a74c:	f43f af19 	beq.w	800a582 <_printf_float+0xbe>
 800a750:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a754:	4313      	orrs	r3, r2
 800a756:	d102      	bne.n	800a75e <_printf_float+0x29a>
 800a758:	6823      	ldr	r3, [r4, #0]
 800a75a:	07d9      	lsls	r1, r3, #31
 800a75c:	d5d8      	bpl.n	800a710 <_printf_float+0x24c>
 800a75e:	ee18 3a10 	vmov	r3, s16
 800a762:	4652      	mov	r2, sl
 800a764:	4631      	mov	r1, r6
 800a766:	4628      	mov	r0, r5
 800a768:	47b8      	blx	r7
 800a76a:	3001      	adds	r0, #1
 800a76c:	f43f af09 	beq.w	800a582 <_printf_float+0xbe>
 800a770:	f04f 0900 	mov.w	r9, #0
 800a774:	f104 0a1a 	add.w	sl, r4, #26
 800a778:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a77a:	425b      	negs	r3, r3
 800a77c:	454b      	cmp	r3, r9
 800a77e:	dc01      	bgt.n	800a784 <_printf_float+0x2c0>
 800a780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a782:	e792      	b.n	800a6aa <_printf_float+0x1e6>
 800a784:	2301      	movs	r3, #1
 800a786:	4652      	mov	r2, sl
 800a788:	4631      	mov	r1, r6
 800a78a:	4628      	mov	r0, r5
 800a78c:	47b8      	blx	r7
 800a78e:	3001      	adds	r0, #1
 800a790:	f43f aef7 	beq.w	800a582 <_printf_float+0xbe>
 800a794:	f109 0901 	add.w	r9, r9, #1
 800a798:	e7ee      	b.n	800a778 <_printf_float+0x2b4>
 800a79a:	bf00      	nop
 800a79c:	7fefffff 	.word	0x7fefffff
 800a7a0:	08045bd0 	.word	0x08045bd0
 800a7a4:	08045bd4 	.word	0x08045bd4
 800a7a8:	08045bd8 	.word	0x08045bd8
 800a7ac:	08045bdc 	.word	0x08045bdc
 800a7b0:	08045be0 	.word	0x08045be0
 800a7b4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a7b6:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	bfa8      	it	ge
 800a7bc:	461a      	movge	r2, r3
 800a7be:	2a00      	cmp	r2, #0
 800a7c0:	4691      	mov	r9, r2
 800a7c2:	dc37      	bgt.n	800a834 <_printf_float+0x370>
 800a7c4:	f04f 0b00 	mov.w	fp, #0
 800a7c8:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a7cc:	f104 021a 	add.w	r2, r4, #26
 800a7d0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a7d2:	9305      	str	r3, [sp, #20]
 800a7d4:	eba3 0309 	sub.w	r3, r3, r9
 800a7d8:	455b      	cmp	r3, fp
 800a7da:	dc33      	bgt.n	800a844 <_printf_float+0x380>
 800a7dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a7e0:	429a      	cmp	r2, r3
 800a7e2:	db3b      	blt.n	800a85c <_printf_float+0x398>
 800a7e4:	6823      	ldr	r3, [r4, #0]
 800a7e6:	07da      	lsls	r2, r3, #31
 800a7e8:	d438      	bmi.n	800a85c <_printf_float+0x398>
 800a7ea:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a7ee:	eba2 0903 	sub.w	r9, r2, r3
 800a7f2:	9b05      	ldr	r3, [sp, #20]
 800a7f4:	1ad2      	subs	r2, r2, r3
 800a7f6:	4591      	cmp	r9, r2
 800a7f8:	bfa8      	it	ge
 800a7fa:	4691      	movge	r9, r2
 800a7fc:	f1b9 0f00 	cmp.w	r9, #0
 800a800:	dc35      	bgt.n	800a86e <_printf_float+0x3aa>
 800a802:	f04f 0800 	mov.w	r8, #0
 800a806:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a80a:	f104 0a1a 	add.w	sl, r4, #26
 800a80e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a812:	1a9b      	subs	r3, r3, r2
 800a814:	eba3 0309 	sub.w	r3, r3, r9
 800a818:	4543      	cmp	r3, r8
 800a81a:	f77f af79 	ble.w	800a710 <_printf_float+0x24c>
 800a81e:	2301      	movs	r3, #1
 800a820:	4652      	mov	r2, sl
 800a822:	4631      	mov	r1, r6
 800a824:	4628      	mov	r0, r5
 800a826:	47b8      	blx	r7
 800a828:	3001      	adds	r0, #1
 800a82a:	f43f aeaa 	beq.w	800a582 <_printf_float+0xbe>
 800a82e:	f108 0801 	add.w	r8, r8, #1
 800a832:	e7ec      	b.n	800a80e <_printf_float+0x34a>
 800a834:	4613      	mov	r3, r2
 800a836:	4631      	mov	r1, r6
 800a838:	4642      	mov	r2, r8
 800a83a:	4628      	mov	r0, r5
 800a83c:	47b8      	blx	r7
 800a83e:	3001      	adds	r0, #1
 800a840:	d1c0      	bne.n	800a7c4 <_printf_float+0x300>
 800a842:	e69e      	b.n	800a582 <_printf_float+0xbe>
 800a844:	2301      	movs	r3, #1
 800a846:	4631      	mov	r1, r6
 800a848:	4628      	mov	r0, r5
 800a84a:	9205      	str	r2, [sp, #20]
 800a84c:	47b8      	blx	r7
 800a84e:	3001      	adds	r0, #1
 800a850:	f43f ae97 	beq.w	800a582 <_printf_float+0xbe>
 800a854:	9a05      	ldr	r2, [sp, #20]
 800a856:	f10b 0b01 	add.w	fp, fp, #1
 800a85a:	e7b9      	b.n	800a7d0 <_printf_float+0x30c>
 800a85c:	ee18 3a10 	vmov	r3, s16
 800a860:	4652      	mov	r2, sl
 800a862:	4631      	mov	r1, r6
 800a864:	4628      	mov	r0, r5
 800a866:	47b8      	blx	r7
 800a868:	3001      	adds	r0, #1
 800a86a:	d1be      	bne.n	800a7ea <_printf_float+0x326>
 800a86c:	e689      	b.n	800a582 <_printf_float+0xbe>
 800a86e:	9a05      	ldr	r2, [sp, #20]
 800a870:	464b      	mov	r3, r9
 800a872:	4442      	add	r2, r8
 800a874:	4631      	mov	r1, r6
 800a876:	4628      	mov	r0, r5
 800a878:	47b8      	blx	r7
 800a87a:	3001      	adds	r0, #1
 800a87c:	d1c1      	bne.n	800a802 <_printf_float+0x33e>
 800a87e:	e680      	b.n	800a582 <_printf_float+0xbe>
 800a880:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a882:	2a01      	cmp	r2, #1
 800a884:	dc01      	bgt.n	800a88a <_printf_float+0x3c6>
 800a886:	07db      	lsls	r3, r3, #31
 800a888:	d53a      	bpl.n	800a900 <_printf_float+0x43c>
 800a88a:	2301      	movs	r3, #1
 800a88c:	4642      	mov	r2, r8
 800a88e:	4631      	mov	r1, r6
 800a890:	4628      	mov	r0, r5
 800a892:	47b8      	blx	r7
 800a894:	3001      	adds	r0, #1
 800a896:	f43f ae74 	beq.w	800a582 <_printf_float+0xbe>
 800a89a:	ee18 3a10 	vmov	r3, s16
 800a89e:	4652      	mov	r2, sl
 800a8a0:	4631      	mov	r1, r6
 800a8a2:	4628      	mov	r0, r5
 800a8a4:	47b8      	blx	r7
 800a8a6:	3001      	adds	r0, #1
 800a8a8:	f43f ae6b 	beq.w	800a582 <_printf_float+0xbe>
 800a8ac:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a8b0:	2200      	movs	r2, #0
 800a8b2:	2300      	movs	r3, #0
 800a8b4:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a8b8:	f7f6 f926 	bl	8000b08 <__aeabi_dcmpeq>
 800a8bc:	b9d8      	cbnz	r0, 800a8f6 <_printf_float+0x432>
 800a8be:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a8c2:	f108 0201 	add.w	r2, r8, #1
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	4628      	mov	r0, r5
 800a8ca:	47b8      	blx	r7
 800a8cc:	3001      	adds	r0, #1
 800a8ce:	d10e      	bne.n	800a8ee <_printf_float+0x42a>
 800a8d0:	e657      	b.n	800a582 <_printf_float+0xbe>
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	4652      	mov	r2, sl
 800a8d6:	4631      	mov	r1, r6
 800a8d8:	4628      	mov	r0, r5
 800a8da:	47b8      	blx	r7
 800a8dc:	3001      	adds	r0, #1
 800a8de:	f43f ae50 	beq.w	800a582 <_printf_float+0xbe>
 800a8e2:	f108 0801 	add.w	r8, r8, #1
 800a8e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a8e8:	3b01      	subs	r3, #1
 800a8ea:	4543      	cmp	r3, r8
 800a8ec:	dcf1      	bgt.n	800a8d2 <_printf_float+0x40e>
 800a8ee:	464b      	mov	r3, r9
 800a8f0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a8f4:	e6da      	b.n	800a6ac <_printf_float+0x1e8>
 800a8f6:	f04f 0800 	mov.w	r8, #0
 800a8fa:	f104 0a1a 	add.w	sl, r4, #26
 800a8fe:	e7f2      	b.n	800a8e6 <_printf_float+0x422>
 800a900:	2301      	movs	r3, #1
 800a902:	4642      	mov	r2, r8
 800a904:	e7df      	b.n	800a8c6 <_printf_float+0x402>
 800a906:	2301      	movs	r3, #1
 800a908:	464a      	mov	r2, r9
 800a90a:	4631      	mov	r1, r6
 800a90c:	4628      	mov	r0, r5
 800a90e:	47b8      	blx	r7
 800a910:	3001      	adds	r0, #1
 800a912:	f43f ae36 	beq.w	800a582 <_printf_float+0xbe>
 800a916:	f108 0801 	add.w	r8, r8, #1
 800a91a:	68e3      	ldr	r3, [r4, #12]
 800a91c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a91e:	1a5b      	subs	r3, r3, r1
 800a920:	4543      	cmp	r3, r8
 800a922:	dcf0      	bgt.n	800a906 <_printf_float+0x442>
 800a924:	e6f8      	b.n	800a718 <_printf_float+0x254>
 800a926:	f04f 0800 	mov.w	r8, #0
 800a92a:	f104 0919 	add.w	r9, r4, #25
 800a92e:	e7f4      	b.n	800a91a <_printf_float+0x456>

0800a930 <_printf_common>:
 800a930:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a934:	4616      	mov	r6, r2
 800a936:	4699      	mov	r9, r3
 800a938:	688a      	ldr	r2, [r1, #8]
 800a93a:	690b      	ldr	r3, [r1, #16]
 800a93c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a940:	4293      	cmp	r3, r2
 800a942:	bfb8      	it	lt
 800a944:	4613      	movlt	r3, r2
 800a946:	6033      	str	r3, [r6, #0]
 800a948:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a94c:	4607      	mov	r7, r0
 800a94e:	460c      	mov	r4, r1
 800a950:	b10a      	cbz	r2, 800a956 <_printf_common+0x26>
 800a952:	3301      	adds	r3, #1
 800a954:	6033      	str	r3, [r6, #0]
 800a956:	6823      	ldr	r3, [r4, #0]
 800a958:	0699      	lsls	r1, r3, #26
 800a95a:	bf42      	ittt	mi
 800a95c:	6833      	ldrmi	r3, [r6, #0]
 800a95e:	3302      	addmi	r3, #2
 800a960:	6033      	strmi	r3, [r6, #0]
 800a962:	6825      	ldr	r5, [r4, #0]
 800a964:	f015 0506 	ands.w	r5, r5, #6
 800a968:	d106      	bne.n	800a978 <_printf_common+0x48>
 800a96a:	f104 0a19 	add.w	sl, r4, #25
 800a96e:	68e3      	ldr	r3, [r4, #12]
 800a970:	6832      	ldr	r2, [r6, #0]
 800a972:	1a9b      	subs	r3, r3, r2
 800a974:	42ab      	cmp	r3, r5
 800a976:	dc26      	bgt.n	800a9c6 <_printf_common+0x96>
 800a978:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a97c:	1e13      	subs	r3, r2, #0
 800a97e:	6822      	ldr	r2, [r4, #0]
 800a980:	bf18      	it	ne
 800a982:	2301      	movne	r3, #1
 800a984:	0692      	lsls	r2, r2, #26
 800a986:	d42b      	bmi.n	800a9e0 <_printf_common+0xb0>
 800a988:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a98c:	4649      	mov	r1, r9
 800a98e:	4638      	mov	r0, r7
 800a990:	47c0      	blx	r8
 800a992:	3001      	adds	r0, #1
 800a994:	d01e      	beq.n	800a9d4 <_printf_common+0xa4>
 800a996:	6823      	ldr	r3, [r4, #0]
 800a998:	6922      	ldr	r2, [r4, #16]
 800a99a:	f003 0306 	and.w	r3, r3, #6
 800a99e:	2b04      	cmp	r3, #4
 800a9a0:	bf02      	ittt	eq
 800a9a2:	68e5      	ldreq	r5, [r4, #12]
 800a9a4:	6833      	ldreq	r3, [r6, #0]
 800a9a6:	1aed      	subeq	r5, r5, r3
 800a9a8:	68a3      	ldr	r3, [r4, #8]
 800a9aa:	bf0c      	ite	eq
 800a9ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a9b0:	2500      	movne	r5, #0
 800a9b2:	4293      	cmp	r3, r2
 800a9b4:	bfc4      	itt	gt
 800a9b6:	1a9b      	subgt	r3, r3, r2
 800a9b8:	18ed      	addgt	r5, r5, r3
 800a9ba:	2600      	movs	r6, #0
 800a9bc:	341a      	adds	r4, #26
 800a9be:	42b5      	cmp	r5, r6
 800a9c0:	d11a      	bne.n	800a9f8 <_printf_common+0xc8>
 800a9c2:	2000      	movs	r0, #0
 800a9c4:	e008      	b.n	800a9d8 <_printf_common+0xa8>
 800a9c6:	2301      	movs	r3, #1
 800a9c8:	4652      	mov	r2, sl
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	4638      	mov	r0, r7
 800a9ce:	47c0      	blx	r8
 800a9d0:	3001      	adds	r0, #1
 800a9d2:	d103      	bne.n	800a9dc <_printf_common+0xac>
 800a9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800a9d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a9dc:	3501      	adds	r5, #1
 800a9de:	e7c6      	b.n	800a96e <_printf_common+0x3e>
 800a9e0:	18e1      	adds	r1, r4, r3
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	2030      	movs	r0, #48	; 0x30
 800a9e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a9ea:	4422      	add	r2, r4
 800a9ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a9f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a9f4:	3302      	adds	r3, #2
 800a9f6:	e7c7      	b.n	800a988 <_printf_common+0x58>
 800a9f8:	2301      	movs	r3, #1
 800a9fa:	4622      	mov	r2, r4
 800a9fc:	4649      	mov	r1, r9
 800a9fe:	4638      	mov	r0, r7
 800aa00:	47c0      	blx	r8
 800aa02:	3001      	adds	r0, #1
 800aa04:	d0e6      	beq.n	800a9d4 <_printf_common+0xa4>
 800aa06:	3601      	adds	r6, #1
 800aa08:	e7d9      	b.n	800a9be <_printf_common+0x8e>
	...

0800aa0c <_printf_i>:
 800aa0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800aa10:	7e0f      	ldrb	r7, [r1, #24]
 800aa12:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800aa14:	2f78      	cmp	r7, #120	; 0x78
 800aa16:	4691      	mov	r9, r2
 800aa18:	4680      	mov	r8, r0
 800aa1a:	460c      	mov	r4, r1
 800aa1c:	469a      	mov	sl, r3
 800aa1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800aa22:	d807      	bhi.n	800aa34 <_printf_i+0x28>
 800aa24:	2f62      	cmp	r7, #98	; 0x62
 800aa26:	d80a      	bhi.n	800aa3e <_printf_i+0x32>
 800aa28:	2f00      	cmp	r7, #0
 800aa2a:	f000 80d4 	beq.w	800abd6 <_printf_i+0x1ca>
 800aa2e:	2f58      	cmp	r7, #88	; 0x58
 800aa30:	f000 80c0 	beq.w	800abb4 <_printf_i+0x1a8>
 800aa34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aa38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800aa3c:	e03a      	b.n	800aab4 <_printf_i+0xa8>
 800aa3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800aa42:	2b15      	cmp	r3, #21
 800aa44:	d8f6      	bhi.n	800aa34 <_printf_i+0x28>
 800aa46:	a101      	add	r1, pc, #4	; (adr r1, 800aa4c <_printf_i+0x40>)
 800aa48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800aa4c:	0800aaa5 	.word	0x0800aaa5
 800aa50:	0800aab9 	.word	0x0800aab9
 800aa54:	0800aa35 	.word	0x0800aa35
 800aa58:	0800aa35 	.word	0x0800aa35
 800aa5c:	0800aa35 	.word	0x0800aa35
 800aa60:	0800aa35 	.word	0x0800aa35
 800aa64:	0800aab9 	.word	0x0800aab9
 800aa68:	0800aa35 	.word	0x0800aa35
 800aa6c:	0800aa35 	.word	0x0800aa35
 800aa70:	0800aa35 	.word	0x0800aa35
 800aa74:	0800aa35 	.word	0x0800aa35
 800aa78:	0800abbd 	.word	0x0800abbd
 800aa7c:	0800aae5 	.word	0x0800aae5
 800aa80:	0800ab77 	.word	0x0800ab77
 800aa84:	0800aa35 	.word	0x0800aa35
 800aa88:	0800aa35 	.word	0x0800aa35
 800aa8c:	0800abdf 	.word	0x0800abdf
 800aa90:	0800aa35 	.word	0x0800aa35
 800aa94:	0800aae5 	.word	0x0800aae5
 800aa98:	0800aa35 	.word	0x0800aa35
 800aa9c:	0800aa35 	.word	0x0800aa35
 800aaa0:	0800ab7f 	.word	0x0800ab7f
 800aaa4:	682b      	ldr	r3, [r5, #0]
 800aaa6:	1d1a      	adds	r2, r3, #4
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	602a      	str	r2, [r5, #0]
 800aaac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800aab0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800aab4:	2301      	movs	r3, #1
 800aab6:	e09f      	b.n	800abf8 <_printf_i+0x1ec>
 800aab8:	6820      	ldr	r0, [r4, #0]
 800aaba:	682b      	ldr	r3, [r5, #0]
 800aabc:	0607      	lsls	r7, r0, #24
 800aabe:	f103 0104 	add.w	r1, r3, #4
 800aac2:	6029      	str	r1, [r5, #0]
 800aac4:	d501      	bpl.n	800aaca <_printf_i+0xbe>
 800aac6:	681e      	ldr	r6, [r3, #0]
 800aac8:	e003      	b.n	800aad2 <_printf_i+0xc6>
 800aaca:	0646      	lsls	r6, r0, #25
 800aacc:	d5fb      	bpl.n	800aac6 <_printf_i+0xba>
 800aace:	f9b3 6000 	ldrsh.w	r6, [r3]
 800aad2:	2e00      	cmp	r6, #0
 800aad4:	da03      	bge.n	800aade <_printf_i+0xd2>
 800aad6:	232d      	movs	r3, #45	; 0x2d
 800aad8:	4276      	negs	r6, r6
 800aada:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aade:	485a      	ldr	r0, [pc, #360]	; (800ac48 <_printf_i+0x23c>)
 800aae0:	230a      	movs	r3, #10
 800aae2:	e012      	b.n	800ab0a <_printf_i+0xfe>
 800aae4:	682b      	ldr	r3, [r5, #0]
 800aae6:	6820      	ldr	r0, [r4, #0]
 800aae8:	1d19      	adds	r1, r3, #4
 800aaea:	6029      	str	r1, [r5, #0]
 800aaec:	0605      	lsls	r5, r0, #24
 800aaee:	d501      	bpl.n	800aaf4 <_printf_i+0xe8>
 800aaf0:	681e      	ldr	r6, [r3, #0]
 800aaf2:	e002      	b.n	800aafa <_printf_i+0xee>
 800aaf4:	0641      	lsls	r1, r0, #25
 800aaf6:	d5fb      	bpl.n	800aaf0 <_printf_i+0xe4>
 800aaf8:	881e      	ldrh	r6, [r3, #0]
 800aafa:	4853      	ldr	r0, [pc, #332]	; (800ac48 <_printf_i+0x23c>)
 800aafc:	2f6f      	cmp	r7, #111	; 0x6f
 800aafe:	bf0c      	ite	eq
 800ab00:	2308      	moveq	r3, #8
 800ab02:	230a      	movne	r3, #10
 800ab04:	2100      	movs	r1, #0
 800ab06:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800ab0a:	6865      	ldr	r5, [r4, #4]
 800ab0c:	60a5      	str	r5, [r4, #8]
 800ab0e:	2d00      	cmp	r5, #0
 800ab10:	bfa2      	ittt	ge
 800ab12:	6821      	ldrge	r1, [r4, #0]
 800ab14:	f021 0104 	bicge.w	r1, r1, #4
 800ab18:	6021      	strge	r1, [r4, #0]
 800ab1a:	b90e      	cbnz	r6, 800ab20 <_printf_i+0x114>
 800ab1c:	2d00      	cmp	r5, #0
 800ab1e:	d04b      	beq.n	800abb8 <_printf_i+0x1ac>
 800ab20:	4615      	mov	r5, r2
 800ab22:	fbb6 f1f3 	udiv	r1, r6, r3
 800ab26:	fb03 6711 	mls	r7, r3, r1, r6
 800ab2a:	5dc7      	ldrb	r7, [r0, r7]
 800ab2c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800ab30:	4637      	mov	r7, r6
 800ab32:	42bb      	cmp	r3, r7
 800ab34:	460e      	mov	r6, r1
 800ab36:	d9f4      	bls.n	800ab22 <_printf_i+0x116>
 800ab38:	2b08      	cmp	r3, #8
 800ab3a:	d10b      	bne.n	800ab54 <_printf_i+0x148>
 800ab3c:	6823      	ldr	r3, [r4, #0]
 800ab3e:	07de      	lsls	r6, r3, #31
 800ab40:	d508      	bpl.n	800ab54 <_printf_i+0x148>
 800ab42:	6923      	ldr	r3, [r4, #16]
 800ab44:	6861      	ldr	r1, [r4, #4]
 800ab46:	4299      	cmp	r1, r3
 800ab48:	bfde      	ittt	le
 800ab4a:	2330      	movle	r3, #48	; 0x30
 800ab4c:	f805 3c01 	strble.w	r3, [r5, #-1]
 800ab50:	f105 35ff 	addle.w	r5, r5, #4294967295
 800ab54:	1b52      	subs	r2, r2, r5
 800ab56:	6122      	str	r2, [r4, #16]
 800ab58:	f8cd a000 	str.w	sl, [sp]
 800ab5c:	464b      	mov	r3, r9
 800ab5e:	aa03      	add	r2, sp, #12
 800ab60:	4621      	mov	r1, r4
 800ab62:	4640      	mov	r0, r8
 800ab64:	f7ff fee4 	bl	800a930 <_printf_common>
 800ab68:	3001      	adds	r0, #1
 800ab6a:	d14a      	bne.n	800ac02 <_printf_i+0x1f6>
 800ab6c:	f04f 30ff 	mov.w	r0, #4294967295
 800ab70:	b004      	add	sp, #16
 800ab72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ab76:	6823      	ldr	r3, [r4, #0]
 800ab78:	f043 0320 	orr.w	r3, r3, #32
 800ab7c:	6023      	str	r3, [r4, #0]
 800ab7e:	4833      	ldr	r0, [pc, #204]	; (800ac4c <_printf_i+0x240>)
 800ab80:	2778      	movs	r7, #120	; 0x78
 800ab82:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800ab86:	6823      	ldr	r3, [r4, #0]
 800ab88:	6829      	ldr	r1, [r5, #0]
 800ab8a:	061f      	lsls	r7, r3, #24
 800ab8c:	f851 6b04 	ldr.w	r6, [r1], #4
 800ab90:	d402      	bmi.n	800ab98 <_printf_i+0x18c>
 800ab92:	065f      	lsls	r7, r3, #25
 800ab94:	bf48      	it	mi
 800ab96:	b2b6      	uxthmi	r6, r6
 800ab98:	07df      	lsls	r7, r3, #31
 800ab9a:	bf48      	it	mi
 800ab9c:	f043 0320 	orrmi.w	r3, r3, #32
 800aba0:	6029      	str	r1, [r5, #0]
 800aba2:	bf48      	it	mi
 800aba4:	6023      	strmi	r3, [r4, #0]
 800aba6:	b91e      	cbnz	r6, 800abb0 <_printf_i+0x1a4>
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	f023 0320 	bic.w	r3, r3, #32
 800abae:	6023      	str	r3, [r4, #0]
 800abb0:	2310      	movs	r3, #16
 800abb2:	e7a7      	b.n	800ab04 <_printf_i+0xf8>
 800abb4:	4824      	ldr	r0, [pc, #144]	; (800ac48 <_printf_i+0x23c>)
 800abb6:	e7e4      	b.n	800ab82 <_printf_i+0x176>
 800abb8:	4615      	mov	r5, r2
 800abba:	e7bd      	b.n	800ab38 <_printf_i+0x12c>
 800abbc:	682b      	ldr	r3, [r5, #0]
 800abbe:	6826      	ldr	r6, [r4, #0]
 800abc0:	6961      	ldr	r1, [r4, #20]
 800abc2:	1d18      	adds	r0, r3, #4
 800abc4:	6028      	str	r0, [r5, #0]
 800abc6:	0635      	lsls	r5, r6, #24
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	d501      	bpl.n	800abd0 <_printf_i+0x1c4>
 800abcc:	6019      	str	r1, [r3, #0]
 800abce:	e002      	b.n	800abd6 <_printf_i+0x1ca>
 800abd0:	0670      	lsls	r0, r6, #25
 800abd2:	d5fb      	bpl.n	800abcc <_printf_i+0x1c0>
 800abd4:	8019      	strh	r1, [r3, #0]
 800abd6:	2300      	movs	r3, #0
 800abd8:	6123      	str	r3, [r4, #16]
 800abda:	4615      	mov	r5, r2
 800abdc:	e7bc      	b.n	800ab58 <_printf_i+0x14c>
 800abde:	682b      	ldr	r3, [r5, #0]
 800abe0:	1d1a      	adds	r2, r3, #4
 800abe2:	602a      	str	r2, [r5, #0]
 800abe4:	681d      	ldr	r5, [r3, #0]
 800abe6:	6862      	ldr	r2, [r4, #4]
 800abe8:	2100      	movs	r1, #0
 800abea:	4628      	mov	r0, r5
 800abec:	f7f5 fb10 	bl	8000210 <memchr>
 800abf0:	b108      	cbz	r0, 800abf6 <_printf_i+0x1ea>
 800abf2:	1b40      	subs	r0, r0, r5
 800abf4:	6060      	str	r0, [r4, #4]
 800abf6:	6863      	ldr	r3, [r4, #4]
 800abf8:	6123      	str	r3, [r4, #16]
 800abfa:	2300      	movs	r3, #0
 800abfc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ac00:	e7aa      	b.n	800ab58 <_printf_i+0x14c>
 800ac02:	6923      	ldr	r3, [r4, #16]
 800ac04:	462a      	mov	r2, r5
 800ac06:	4649      	mov	r1, r9
 800ac08:	4640      	mov	r0, r8
 800ac0a:	47d0      	blx	sl
 800ac0c:	3001      	adds	r0, #1
 800ac0e:	d0ad      	beq.n	800ab6c <_printf_i+0x160>
 800ac10:	6823      	ldr	r3, [r4, #0]
 800ac12:	079b      	lsls	r3, r3, #30
 800ac14:	d413      	bmi.n	800ac3e <_printf_i+0x232>
 800ac16:	68e0      	ldr	r0, [r4, #12]
 800ac18:	9b03      	ldr	r3, [sp, #12]
 800ac1a:	4298      	cmp	r0, r3
 800ac1c:	bfb8      	it	lt
 800ac1e:	4618      	movlt	r0, r3
 800ac20:	e7a6      	b.n	800ab70 <_printf_i+0x164>
 800ac22:	2301      	movs	r3, #1
 800ac24:	4632      	mov	r2, r6
 800ac26:	4649      	mov	r1, r9
 800ac28:	4640      	mov	r0, r8
 800ac2a:	47d0      	blx	sl
 800ac2c:	3001      	adds	r0, #1
 800ac2e:	d09d      	beq.n	800ab6c <_printf_i+0x160>
 800ac30:	3501      	adds	r5, #1
 800ac32:	68e3      	ldr	r3, [r4, #12]
 800ac34:	9903      	ldr	r1, [sp, #12]
 800ac36:	1a5b      	subs	r3, r3, r1
 800ac38:	42ab      	cmp	r3, r5
 800ac3a:	dcf2      	bgt.n	800ac22 <_printf_i+0x216>
 800ac3c:	e7eb      	b.n	800ac16 <_printf_i+0x20a>
 800ac3e:	2500      	movs	r5, #0
 800ac40:	f104 0619 	add.w	r6, r4, #25
 800ac44:	e7f5      	b.n	800ac32 <_printf_i+0x226>
 800ac46:	bf00      	nop
 800ac48:	08045be2 	.word	0x08045be2
 800ac4c:	08045bf3 	.word	0x08045bf3

0800ac50 <_scanf_float>:
 800ac50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac54:	b087      	sub	sp, #28
 800ac56:	4617      	mov	r7, r2
 800ac58:	9303      	str	r3, [sp, #12]
 800ac5a:	688b      	ldr	r3, [r1, #8]
 800ac5c:	1e5a      	subs	r2, r3, #1
 800ac5e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ac62:	bf83      	ittte	hi
 800ac64:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ac68:	195b      	addhi	r3, r3, r5
 800ac6a:	9302      	strhi	r3, [sp, #8]
 800ac6c:	2300      	movls	r3, #0
 800ac6e:	bf86      	itte	hi
 800ac70:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ac74:	608b      	strhi	r3, [r1, #8]
 800ac76:	9302      	strls	r3, [sp, #8]
 800ac78:	680b      	ldr	r3, [r1, #0]
 800ac7a:	468b      	mov	fp, r1
 800ac7c:	2500      	movs	r5, #0
 800ac7e:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800ac82:	f84b 3b1c 	str.w	r3, [fp], #28
 800ac86:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800ac8a:	4680      	mov	r8, r0
 800ac8c:	460c      	mov	r4, r1
 800ac8e:	465e      	mov	r6, fp
 800ac90:	46aa      	mov	sl, r5
 800ac92:	46a9      	mov	r9, r5
 800ac94:	9501      	str	r5, [sp, #4]
 800ac96:	68a2      	ldr	r2, [r4, #8]
 800ac98:	b152      	cbz	r2, 800acb0 <_scanf_float+0x60>
 800ac9a:	683b      	ldr	r3, [r7, #0]
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	2b4e      	cmp	r3, #78	; 0x4e
 800aca0:	d864      	bhi.n	800ad6c <_scanf_float+0x11c>
 800aca2:	2b40      	cmp	r3, #64	; 0x40
 800aca4:	d83c      	bhi.n	800ad20 <_scanf_float+0xd0>
 800aca6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800acaa:	b2c8      	uxtb	r0, r1
 800acac:	280e      	cmp	r0, #14
 800acae:	d93a      	bls.n	800ad26 <_scanf_float+0xd6>
 800acb0:	f1b9 0f00 	cmp.w	r9, #0
 800acb4:	d003      	beq.n	800acbe <_scanf_float+0x6e>
 800acb6:	6823      	ldr	r3, [r4, #0]
 800acb8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800acbc:	6023      	str	r3, [r4, #0]
 800acbe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800acc2:	f1ba 0f01 	cmp.w	sl, #1
 800acc6:	f200 8113 	bhi.w	800aef0 <_scanf_float+0x2a0>
 800acca:	455e      	cmp	r6, fp
 800accc:	f200 8105 	bhi.w	800aeda <_scanf_float+0x28a>
 800acd0:	2501      	movs	r5, #1
 800acd2:	4628      	mov	r0, r5
 800acd4:	b007      	add	sp, #28
 800acd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acda:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800acde:	2a0d      	cmp	r2, #13
 800ace0:	d8e6      	bhi.n	800acb0 <_scanf_float+0x60>
 800ace2:	a101      	add	r1, pc, #4	; (adr r1, 800ace8 <_scanf_float+0x98>)
 800ace4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800ace8:	0800ae27 	.word	0x0800ae27
 800acec:	0800acb1 	.word	0x0800acb1
 800acf0:	0800acb1 	.word	0x0800acb1
 800acf4:	0800acb1 	.word	0x0800acb1
 800acf8:	0800ae87 	.word	0x0800ae87
 800acfc:	0800ae5f 	.word	0x0800ae5f
 800ad00:	0800acb1 	.word	0x0800acb1
 800ad04:	0800acb1 	.word	0x0800acb1
 800ad08:	0800ae35 	.word	0x0800ae35
 800ad0c:	0800acb1 	.word	0x0800acb1
 800ad10:	0800acb1 	.word	0x0800acb1
 800ad14:	0800acb1 	.word	0x0800acb1
 800ad18:	0800acb1 	.word	0x0800acb1
 800ad1c:	0800aded 	.word	0x0800aded
 800ad20:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800ad24:	e7db      	b.n	800acde <_scanf_float+0x8e>
 800ad26:	290e      	cmp	r1, #14
 800ad28:	d8c2      	bhi.n	800acb0 <_scanf_float+0x60>
 800ad2a:	a001      	add	r0, pc, #4	; (adr r0, 800ad30 <_scanf_float+0xe0>)
 800ad2c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800ad30:	0800addf 	.word	0x0800addf
 800ad34:	0800acb1 	.word	0x0800acb1
 800ad38:	0800addf 	.word	0x0800addf
 800ad3c:	0800ae73 	.word	0x0800ae73
 800ad40:	0800acb1 	.word	0x0800acb1
 800ad44:	0800ad8d 	.word	0x0800ad8d
 800ad48:	0800adc9 	.word	0x0800adc9
 800ad4c:	0800adc9 	.word	0x0800adc9
 800ad50:	0800adc9 	.word	0x0800adc9
 800ad54:	0800adc9 	.word	0x0800adc9
 800ad58:	0800adc9 	.word	0x0800adc9
 800ad5c:	0800adc9 	.word	0x0800adc9
 800ad60:	0800adc9 	.word	0x0800adc9
 800ad64:	0800adc9 	.word	0x0800adc9
 800ad68:	0800adc9 	.word	0x0800adc9
 800ad6c:	2b6e      	cmp	r3, #110	; 0x6e
 800ad6e:	d809      	bhi.n	800ad84 <_scanf_float+0x134>
 800ad70:	2b60      	cmp	r3, #96	; 0x60
 800ad72:	d8b2      	bhi.n	800acda <_scanf_float+0x8a>
 800ad74:	2b54      	cmp	r3, #84	; 0x54
 800ad76:	d077      	beq.n	800ae68 <_scanf_float+0x218>
 800ad78:	2b59      	cmp	r3, #89	; 0x59
 800ad7a:	d199      	bne.n	800acb0 <_scanf_float+0x60>
 800ad7c:	2d07      	cmp	r5, #7
 800ad7e:	d197      	bne.n	800acb0 <_scanf_float+0x60>
 800ad80:	2508      	movs	r5, #8
 800ad82:	e029      	b.n	800add8 <_scanf_float+0x188>
 800ad84:	2b74      	cmp	r3, #116	; 0x74
 800ad86:	d06f      	beq.n	800ae68 <_scanf_float+0x218>
 800ad88:	2b79      	cmp	r3, #121	; 0x79
 800ad8a:	e7f6      	b.n	800ad7a <_scanf_float+0x12a>
 800ad8c:	6821      	ldr	r1, [r4, #0]
 800ad8e:	05c8      	lsls	r0, r1, #23
 800ad90:	d51a      	bpl.n	800adc8 <_scanf_float+0x178>
 800ad92:	9b02      	ldr	r3, [sp, #8]
 800ad94:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800ad98:	6021      	str	r1, [r4, #0]
 800ad9a:	f109 0901 	add.w	r9, r9, #1
 800ad9e:	b11b      	cbz	r3, 800ada8 <_scanf_float+0x158>
 800ada0:	3b01      	subs	r3, #1
 800ada2:	3201      	adds	r2, #1
 800ada4:	9302      	str	r3, [sp, #8]
 800ada6:	60a2      	str	r2, [r4, #8]
 800ada8:	68a3      	ldr	r3, [r4, #8]
 800adaa:	3b01      	subs	r3, #1
 800adac:	60a3      	str	r3, [r4, #8]
 800adae:	6923      	ldr	r3, [r4, #16]
 800adb0:	3301      	adds	r3, #1
 800adb2:	6123      	str	r3, [r4, #16]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	3b01      	subs	r3, #1
 800adb8:	2b00      	cmp	r3, #0
 800adba:	607b      	str	r3, [r7, #4]
 800adbc:	f340 8084 	ble.w	800aec8 <_scanf_float+0x278>
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	3301      	adds	r3, #1
 800adc4:	603b      	str	r3, [r7, #0]
 800adc6:	e766      	b.n	800ac96 <_scanf_float+0x46>
 800adc8:	eb1a 0f05 	cmn.w	sl, r5
 800adcc:	f47f af70 	bne.w	800acb0 <_scanf_float+0x60>
 800add0:	6822      	ldr	r2, [r4, #0]
 800add2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800add6:	6022      	str	r2, [r4, #0]
 800add8:	f806 3b01 	strb.w	r3, [r6], #1
 800addc:	e7e4      	b.n	800ada8 <_scanf_float+0x158>
 800adde:	6822      	ldr	r2, [r4, #0]
 800ade0:	0610      	lsls	r0, r2, #24
 800ade2:	f57f af65 	bpl.w	800acb0 <_scanf_float+0x60>
 800ade6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adea:	e7f4      	b.n	800add6 <_scanf_float+0x186>
 800adec:	f1ba 0f00 	cmp.w	sl, #0
 800adf0:	d10e      	bne.n	800ae10 <_scanf_float+0x1c0>
 800adf2:	f1b9 0f00 	cmp.w	r9, #0
 800adf6:	d10e      	bne.n	800ae16 <_scanf_float+0x1c6>
 800adf8:	6822      	ldr	r2, [r4, #0]
 800adfa:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800adfe:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae02:	d108      	bne.n	800ae16 <_scanf_float+0x1c6>
 800ae04:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae08:	6022      	str	r2, [r4, #0]
 800ae0a:	f04f 0a01 	mov.w	sl, #1
 800ae0e:	e7e3      	b.n	800add8 <_scanf_float+0x188>
 800ae10:	f1ba 0f02 	cmp.w	sl, #2
 800ae14:	d055      	beq.n	800aec2 <_scanf_float+0x272>
 800ae16:	2d01      	cmp	r5, #1
 800ae18:	d002      	beq.n	800ae20 <_scanf_float+0x1d0>
 800ae1a:	2d04      	cmp	r5, #4
 800ae1c:	f47f af48 	bne.w	800acb0 <_scanf_float+0x60>
 800ae20:	3501      	adds	r5, #1
 800ae22:	b2ed      	uxtb	r5, r5
 800ae24:	e7d8      	b.n	800add8 <_scanf_float+0x188>
 800ae26:	f1ba 0f01 	cmp.w	sl, #1
 800ae2a:	f47f af41 	bne.w	800acb0 <_scanf_float+0x60>
 800ae2e:	f04f 0a02 	mov.w	sl, #2
 800ae32:	e7d1      	b.n	800add8 <_scanf_float+0x188>
 800ae34:	b97d      	cbnz	r5, 800ae56 <_scanf_float+0x206>
 800ae36:	f1b9 0f00 	cmp.w	r9, #0
 800ae3a:	f47f af3c 	bne.w	800acb6 <_scanf_float+0x66>
 800ae3e:	6822      	ldr	r2, [r4, #0]
 800ae40:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800ae44:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800ae48:	f47f af39 	bne.w	800acbe <_scanf_float+0x6e>
 800ae4c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800ae50:	6022      	str	r2, [r4, #0]
 800ae52:	2501      	movs	r5, #1
 800ae54:	e7c0      	b.n	800add8 <_scanf_float+0x188>
 800ae56:	2d03      	cmp	r5, #3
 800ae58:	d0e2      	beq.n	800ae20 <_scanf_float+0x1d0>
 800ae5a:	2d05      	cmp	r5, #5
 800ae5c:	e7de      	b.n	800ae1c <_scanf_float+0x1cc>
 800ae5e:	2d02      	cmp	r5, #2
 800ae60:	f47f af26 	bne.w	800acb0 <_scanf_float+0x60>
 800ae64:	2503      	movs	r5, #3
 800ae66:	e7b7      	b.n	800add8 <_scanf_float+0x188>
 800ae68:	2d06      	cmp	r5, #6
 800ae6a:	f47f af21 	bne.w	800acb0 <_scanf_float+0x60>
 800ae6e:	2507      	movs	r5, #7
 800ae70:	e7b2      	b.n	800add8 <_scanf_float+0x188>
 800ae72:	6822      	ldr	r2, [r4, #0]
 800ae74:	0591      	lsls	r1, r2, #22
 800ae76:	f57f af1b 	bpl.w	800acb0 <_scanf_float+0x60>
 800ae7a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800ae7e:	6022      	str	r2, [r4, #0]
 800ae80:	f8cd 9004 	str.w	r9, [sp, #4]
 800ae84:	e7a8      	b.n	800add8 <_scanf_float+0x188>
 800ae86:	6822      	ldr	r2, [r4, #0]
 800ae88:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800ae8c:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800ae90:	d006      	beq.n	800aea0 <_scanf_float+0x250>
 800ae92:	0550      	lsls	r0, r2, #21
 800ae94:	f57f af0c 	bpl.w	800acb0 <_scanf_float+0x60>
 800ae98:	f1b9 0f00 	cmp.w	r9, #0
 800ae9c:	f43f af0f 	beq.w	800acbe <_scanf_float+0x6e>
 800aea0:	0591      	lsls	r1, r2, #22
 800aea2:	bf58      	it	pl
 800aea4:	9901      	ldrpl	r1, [sp, #4]
 800aea6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aeaa:	bf58      	it	pl
 800aeac:	eba9 0101 	subpl.w	r1, r9, r1
 800aeb0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aeb4:	bf58      	it	pl
 800aeb6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aeba:	6022      	str	r2, [r4, #0]
 800aebc:	f04f 0900 	mov.w	r9, #0
 800aec0:	e78a      	b.n	800add8 <_scanf_float+0x188>
 800aec2:	f04f 0a03 	mov.w	sl, #3
 800aec6:	e787      	b.n	800add8 <_scanf_float+0x188>
 800aec8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aecc:	4639      	mov	r1, r7
 800aece:	4640      	mov	r0, r8
 800aed0:	4798      	blx	r3
 800aed2:	2800      	cmp	r0, #0
 800aed4:	f43f aedf 	beq.w	800ac96 <_scanf_float+0x46>
 800aed8:	e6ea      	b.n	800acb0 <_scanf_float+0x60>
 800aeda:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aede:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aee2:	463a      	mov	r2, r7
 800aee4:	4640      	mov	r0, r8
 800aee6:	4798      	blx	r3
 800aee8:	6923      	ldr	r3, [r4, #16]
 800aeea:	3b01      	subs	r3, #1
 800aeec:	6123      	str	r3, [r4, #16]
 800aeee:	e6ec      	b.n	800acca <_scanf_float+0x7a>
 800aef0:	1e6b      	subs	r3, r5, #1
 800aef2:	2b06      	cmp	r3, #6
 800aef4:	d825      	bhi.n	800af42 <_scanf_float+0x2f2>
 800aef6:	2d02      	cmp	r5, #2
 800aef8:	d836      	bhi.n	800af68 <_scanf_float+0x318>
 800aefa:	455e      	cmp	r6, fp
 800aefc:	f67f aee8 	bls.w	800acd0 <_scanf_float+0x80>
 800af00:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af04:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af08:	463a      	mov	r2, r7
 800af0a:	4640      	mov	r0, r8
 800af0c:	4798      	blx	r3
 800af0e:	6923      	ldr	r3, [r4, #16]
 800af10:	3b01      	subs	r3, #1
 800af12:	6123      	str	r3, [r4, #16]
 800af14:	e7f1      	b.n	800aefa <_scanf_float+0x2aa>
 800af16:	9802      	ldr	r0, [sp, #8]
 800af18:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af1c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800af20:	9002      	str	r0, [sp, #8]
 800af22:	463a      	mov	r2, r7
 800af24:	4640      	mov	r0, r8
 800af26:	4798      	blx	r3
 800af28:	6923      	ldr	r3, [r4, #16]
 800af2a:	3b01      	subs	r3, #1
 800af2c:	6123      	str	r3, [r4, #16]
 800af2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800af32:	fa5f fa8a 	uxtb.w	sl, sl
 800af36:	f1ba 0f02 	cmp.w	sl, #2
 800af3a:	d1ec      	bne.n	800af16 <_scanf_float+0x2c6>
 800af3c:	3d03      	subs	r5, #3
 800af3e:	b2ed      	uxtb	r5, r5
 800af40:	1b76      	subs	r6, r6, r5
 800af42:	6823      	ldr	r3, [r4, #0]
 800af44:	05da      	lsls	r2, r3, #23
 800af46:	d52f      	bpl.n	800afa8 <_scanf_float+0x358>
 800af48:	055b      	lsls	r3, r3, #21
 800af4a:	d510      	bpl.n	800af6e <_scanf_float+0x31e>
 800af4c:	455e      	cmp	r6, fp
 800af4e:	f67f aebf 	bls.w	800acd0 <_scanf_float+0x80>
 800af52:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af56:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800af5a:	463a      	mov	r2, r7
 800af5c:	4640      	mov	r0, r8
 800af5e:	4798      	blx	r3
 800af60:	6923      	ldr	r3, [r4, #16]
 800af62:	3b01      	subs	r3, #1
 800af64:	6123      	str	r3, [r4, #16]
 800af66:	e7f1      	b.n	800af4c <_scanf_float+0x2fc>
 800af68:	46aa      	mov	sl, r5
 800af6a:	9602      	str	r6, [sp, #8]
 800af6c:	e7df      	b.n	800af2e <_scanf_float+0x2de>
 800af6e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800af72:	6923      	ldr	r3, [r4, #16]
 800af74:	2965      	cmp	r1, #101	; 0x65
 800af76:	f103 33ff 	add.w	r3, r3, #4294967295
 800af7a:	f106 35ff 	add.w	r5, r6, #4294967295
 800af7e:	6123      	str	r3, [r4, #16]
 800af80:	d00c      	beq.n	800af9c <_scanf_float+0x34c>
 800af82:	2945      	cmp	r1, #69	; 0x45
 800af84:	d00a      	beq.n	800af9c <_scanf_float+0x34c>
 800af86:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800af8a:	463a      	mov	r2, r7
 800af8c:	4640      	mov	r0, r8
 800af8e:	4798      	blx	r3
 800af90:	6923      	ldr	r3, [r4, #16]
 800af92:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800af96:	3b01      	subs	r3, #1
 800af98:	1eb5      	subs	r5, r6, #2
 800af9a:	6123      	str	r3, [r4, #16]
 800af9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800afa0:	463a      	mov	r2, r7
 800afa2:	4640      	mov	r0, r8
 800afa4:	4798      	blx	r3
 800afa6:	462e      	mov	r6, r5
 800afa8:	6825      	ldr	r5, [r4, #0]
 800afaa:	f015 0510 	ands.w	r5, r5, #16
 800afae:	d158      	bne.n	800b062 <_scanf_float+0x412>
 800afb0:	7035      	strb	r5, [r6, #0]
 800afb2:	6823      	ldr	r3, [r4, #0]
 800afb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800afb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afbc:	d11c      	bne.n	800aff8 <_scanf_float+0x3a8>
 800afbe:	9b01      	ldr	r3, [sp, #4]
 800afc0:	454b      	cmp	r3, r9
 800afc2:	eba3 0209 	sub.w	r2, r3, r9
 800afc6:	d124      	bne.n	800b012 <_scanf_float+0x3c2>
 800afc8:	2200      	movs	r2, #0
 800afca:	4659      	mov	r1, fp
 800afcc:	4640      	mov	r0, r8
 800afce:	f7ff f9c7 	bl	800a360 <_strtod_r>
 800afd2:	9b03      	ldr	r3, [sp, #12]
 800afd4:	6821      	ldr	r1, [r4, #0]
 800afd6:	681b      	ldr	r3, [r3, #0]
 800afd8:	f011 0f02 	tst.w	r1, #2
 800afdc:	ec57 6b10 	vmov	r6, r7, d0
 800afe0:	f103 0204 	add.w	r2, r3, #4
 800afe4:	d020      	beq.n	800b028 <_scanf_float+0x3d8>
 800afe6:	9903      	ldr	r1, [sp, #12]
 800afe8:	600a      	str	r2, [r1, #0]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	e9c3 6700 	strd	r6, r7, [r3]
 800aff0:	68e3      	ldr	r3, [r4, #12]
 800aff2:	3301      	adds	r3, #1
 800aff4:	60e3      	str	r3, [r4, #12]
 800aff6:	e66c      	b.n	800acd2 <_scanf_float+0x82>
 800aff8:	9b04      	ldr	r3, [sp, #16]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d0e4      	beq.n	800afc8 <_scanf_float+0x378>
 800affe:	9905      	ldr	r1, [sp, #20]
 800b000:	230a      	movs	r3, #10
 800b002:	462a      	mov	r2, r5
 800b004:	3101      	adds	r1, #1
 800b006:	4640      	mov	r0, r8
 800b008:	f002 fab6 	bl	800d578 <_strtol_r>
 800b00c:	9b04      	ldr	r3, [sp, #16]
 800b00e:	9e05      	ldr	r6, [sp, #20]
 800b010:	1ac2      	subs	r2, r0, r3
 800b012:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b016:	429e      	cmp	r6, r3
 800b018:	bf28      	it	cs
 800b01a:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b01e:	4912      	ldr	r1, [pc, #72]	; (800b068 <_scanf_float+0x418>)
 800b020:	4630      	mov	r0, r6
 800b022:	f000 f989 	bl	800b338 <siprintf>
 800b026:	e7cf      	b.n	800afc8 <_scanf_float+0x378>
 800b028:	f011 0f04 	tst.w	r1, #4
 800b02c:	9903      	ldr	r1, [sp, #12]
 800b02e:	600a      	str	r2, [r1, #0]
 800b030:	d1db      	bne.n	800afea <_scanf_float+0x39a>
 800b032:	f8d3 8000 	ldr.w	r8, [r3]
 800b036:	ee10 2a10 	vmov	r2, s0
 800b03a:	ee10 0a10 	vmov	r0, s0
 800b03e:	463b      	mov	r3, r7
 800b040:	4639      	mov	r1, r7
 800b042:	f7f5 fd93 	bl	8000b6c <__aeabi_dcmpun>
 800b046:	b128      	cbz	r0, 800b054 <_scanf_float+0x404>
 800b048:	4808      	ldr	r0, [pc, #32]	; (800b06c <_scanf_float+0x41c>)
 800b04a:	f000 fb25 	bl	800b698 <nanf>
 800b04e:	ed88 0a00 	vstr	s0, [r8]
 800b052:	e7cd      	b.n	800aff0 <_scanf_float+0x3a0>
 800b054:	4630      	mov	r0, r6
 800b056:	4639      	mov	r1, r7
 800b058:	f7f5 fde6 	bl	8000c28 <__aeabi_d2f>
 800b05c:	f8c8 0000 	str.w	r0, [r8]
 800b060:	e7c6      	b.n	800aff0 <_scanf_float+0x3a0>
 800b062:	2500      	movs	r5, #0
 800b064:	e635      	b.n	800acd2 <_scanf_float+0x82>
 800b066:	bf00      	nop
 800b068:	08045c04 	.word	0x08045c04
 800b06c:	08045fa1 	.word	0x08045fa1

0800b070 <std>:
 800b070:	2300      	movs	r3, #0
 800b072:	b510      	push	{r4, lr}
 800b074:	4604      	mov	r4, r0
 800b076:	e9c0 3300 	strd	r3, r3, [r0]
 800b07a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b07e:	6083      	str	r3, [r0, #8]
 800b080:	8181      	strh	r1, [r0, #12]
 800b082:	6643      	str	r3, [r0, #100]	; 0x64
 800b084:	81c2      	strh	r2, [r0, #14]
 800b086:	6183      	str	r3, [r0, #24]
 800b088:	4619      	mov	r1, r3
 800b08a:	2208      	movs	r2, #8
 800b08c:	305c      	adds	r0, #92	; 0x5c
 800b08e:	f000 fa4b 	bl	800b528 <memset>
 800b092:	4b0d      	ldr	r3, [pc, #52]	; (800b0c8 <std+0x58>)
 800b094:	6263      	str	r3, [r4, #36]	; 0x24
 800b096:	4b0d      	ldr	r3, [pc, #52]	; (800b0cc <std+0x5c>)
 800b098:	62a3      	str	r3, [r4, #40]	; 0x28
 800b09a:	4b0d      	ldr	r3, [pc, #52]	; (800b0d0 <std+0x60>)
 800b09c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800b09e:	4b0d      	ldr	r3, [pc, #52]	; (800b0d4 <std+0x64>)
 800b0a0:	6323      	str	r3, [r4, #48]	; 0x30
 800b0a2:	4b0d      	ldr	r3, [pc, #52]	; (800b0d8 <std+0x68>)
 800b0a4:	6224      	str	r4, [r4, #32]
 800b0a6:	429c      	cmp	r4, r3
 800b0a8:	d006      	beq.n	800b0b8 <std+0x48>
 800b0aa:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800b0ae:	4294      	cmp	r4, r2
 800b0b0:	d002      	beq.n	800b0b8 <std+0x48>
 800b0b2:	33d0      	adds	r3, #208	; 0xd0
 800b0b4:	429c      	cmp	r4, r3
 800b0b6:	d105      	bne.n	800b0c4 <std+0x54>
 800b0b8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800b0bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b0c0:	f000 bad0 	b.w	800b664 <__retarget_lock_init_recursive>
 800b0c4:	bd10      	pop	{r4, pc}
 800b0c6:	bf00      	nop
 800b0c8:	0800b379 	.word	0x0800b379
 800b0cc:	0800b39b 	.word	0x0800b39b
 800b0d0:	0800b3d3 	.word	0x0800b3d3
 800b0d4:	0800b3f7 	.word	0x0800b3f7
 800b0d8:	20004488 	.word	0x20004488

0800b0dc <stdio_exit_handler>:
 800b0dc:	4a02      	ldr	r2, [pc, #8]	; (800b0e8 <stdio_exit_handler+0xc>)
 800b0de:	4903      	ldr	r1, [pc, #12]	; (800b0ec <stdio_exit_handler+0x10>)
 800b0e0:	4803      	ldr	r0, [pc, #12]	; (800b0f0 <stdio_exit_handler+0x14>)
 800b0e2:	f000 b869 	b.w	800b1b8 <_fwalk_sglue>
 800b0e6:	bf00      	nop
 800b0e8:	20000c60 	.word	0x20000c60
 800b0ec:	0800dbdd 	.word	0x0800dbdd
 800b0f0:	20000dd8 	.word	0x20000dd8

0800b0f4 <cleanup_stdio>:
 800b0f4:	6841      	ldr	r1, [r0, #4]
 800b0f6:	4b0c      	ldr	r3, [pc, #48]	; (800b128 <cleanup_stdio+0x34>)
 800b0f8:	4299      	cmp	r1, r3
 800b0fa:	b510      	push	{r4, lr}
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	d001      	beq.n	800b104 <cleanup_stdio+0x10>
 800b100:	f002 fd6c 	bl	800dbdc <_fflush_r>
 800b104:	68a1      	ldr	r1, [r4, #8]
 800b106:	4b09      	ldr	r3, [pc, #36]	; (800b12c <cleanup_stdio+0x38>)
 800b108:	4299      	cmp	r1, r3
 800b10a:	d002      	beq.n	800b112 <cleanup_stdio+0x1e>
 800b10c:	4620      	mov	r0, r4
 800b10e:	f002 fd65 	bl	800dbdc <_fflush_r>
 800b112:	68e1      	ldr	r1, [r4, #12]
 800b114:	4b06      	ldr	r3, [pc, #24]	; (800b130 <cleanup_stdio+0x3c>)
 800b116:	4299      	cmp	r1, r3
 800b118:	d004      	beq.n	800b124 <cleanup_stdio+0x30>
 800b11a:	4620      	mov	r0, r4
 800b11c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b120:	f002 bd5c 	b.w	800dbdc <_fflush_r>
 800b124:	bd10      	pop	{r4, pc}
 800b126:	bf00      	nop
 800b128:	20004488 	.word	0x20004488
 800b12c:	200044f0 	.word	0x200044f0
 800b130:	20004558 	.word	0x20004558

0800b134 <global_stdio_init.part.0>:
 800b134:	b510      	push	{r4, lr}
 800b136:	4b0b      	ldr	r3, [pc, #44]	; (800b164 <global_stdio_init.part.0+0x30>)
 800b138:	4c0b      	ldr	r4, [pc, #44]	; (800b168 <global_stdio_init.part.0+0x34>)
 800b13a:	4a0c      	ldr	r2, [pc, #48]	; (800b16c <global_stdio_init.part.0+0x38>)
 800b13c:	601a      	str	r2, [r3, #0]
 800b13e:	4620      	mov	r0, r4
 800b140:	2200      	movs	r2, #0
 800b142:	2104      	movs	r1, #4
 800b144:	f7ff ff94 	bl	800b070 <std>
 800b148:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800b14c:	2201      	movs	r2, #1
 800b14e:	2109      	movs	r1, #9
 800b150:	f7ff ff8e 	bl	800b070 <std>
 800b154:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800b158:	2202      	movs	r2, #2
 800b15a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b15e:	2112      	movs	r1, #18
 800b160:	f7ff bf86 	b.w	800b070 <std>
 800b164:	200045c0 	.word	0x200045c0
 800b168:	20004488 	.word	0x20004488
 800b16c:	0800b0dd 	.word	0x0800b0dd

0800b170 <__sfp_lock_acquire>:
 800b170:	4801      	ldr	r0, [pc, #4]	; (800b178 <__sfp_lock_acquire+0x8>)
 800b172:	f000 ba78 	b.w	800b666 <__retarget_lock_acquire_recursive>
 800b176:	bf00      	nop
 800b178:	200045c9 	.word	0x200045c9

0800b17c <__sfp_lock_release>:
 800b17c:	4801      	ldr	r0, [pc, #4]	; (800b184 <__sfp_lock_release+0x8>)
 800b17e:	f000 ba73 	b.w	800b668 <__retarget_lock_release_recursive>
 800b182:	bf00      	nop
 800b184:	200045c9 	.word	0x200045c9

0800b188 <__sinit>:
 800b188:	b510      	push	{r4, lr}
 800b18a:	4604      	mov	r4, r0
 800b18c:	f7ff fff0 	bl	800b170 <__sfp_lock_acquire>
 800b190:	6a23      	ldr	r3, [r4, #32]
 800b192:	b11b      	cbz	r3, 800b19c <__sinit+0x14>
 800b194:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b198:	f7ff bff0 	b.w	800b17c <__sfp_lock_release>
 800b19c:	4b04      	ldr	r3, [pc, #16]	; (800b1b0 <__sinit+0x28>)
 800b19e:	6223      	str	r3, [r4, #32]
 800b1a0:	4b04      	ldr	r3, [pc, #16]	; (800b1b4 <__sinit+0x2c>)
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	2b00      	cmp	r3, #0
 800b1a6:	d1f5      	bne.n	800b194 <__sinit+0xc>
 800b1a8:	f7ff ffc4 	bl	800b134 <global_stdio_init.part.0>
 800b1ac:	e7f2      	b.n	800b194 <__sinit+0xc>
 800b1ae:	bf00      	nop
 800b1b0:	0800b0f5 	.word	0x0800b0f5
 800b1b4:	200045c0 	.word	0x200045c0

0800b1b8 <_fwalk_sglue>:
 800b1b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b1bc:	4607      	mov	r7, r0
 800b1be:	4688      	mov	r8, r1
 800b1c0:	4614      	mov	r4, r2
 800b1c2:	2600      	movs	r6, #0
 800b1c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b1c8:	f1b9 0901 	subs.w	r9, r9, #1
 800b1cc:	d505      	bpl.n	800b1da <_fwalk_sglue+0x22>
 800b1ce:	6824      	ldr	r4, [r4, #0]
 800b1d0:	2c00      	cmp	r4, #0
 800b1d2:	d1f7      	bne.n	800b1c4 <_fwalk_sglue+0xc>
 800b1d4:	4630      	mov	r0, r6
 800b1d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b1da:	89ab      	ldrh	r3, [r5, #12]
 800b1dc:	2b01      	cmp	r3, #1
 800b1de:	d907      	bls.n	800b1f0 <_fwalk_sglue+0x38>
 800b1e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b1e4:	3301      	adds	r3, #1
 800b1e6:	d003      	beq.n	800b1f0 <_fwalk_sglue+0x38>
 800b1e8:	4629      	mov	r1, r5
 800b1ea:	4638      	mov	r0, r7
 800b1ec:	47c0      	blx	r8
 800b1ee:	4306      	orrs	r6, r0
 800b1f0:	3568      	adds	r5, #104	; 0x68
 800b1f2:	e7e9      	b.n	800b1c8 <_fwalk_sglue+0x10>

0800b1f4 <iprintf>:
 800b1f4:	b40f      	push	{r0, r1, r2, r3}
 800b1f6:	b507      	push	{r0, r1, r2, lr}
 800b1f8:	4906      	ldr	r1, [pc, #24]	; (800b214 <iprintf+0x20>)
 800b1fa:	ab04      	add	r3, sp, #16
 800b1fc:	6808      	ldr	r0, [r1, #0]
 800b1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800b202:	6881      	ldr	r1, [r0, #8]
 800b204:	9301      	str	r3, [sp, #4]
 800b206:	f002 fb49 	bl	800d89c <_vfiprintf_r>
 800b20a:	b003      	add	sp, #12
 800b20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800b210:	b004      	add	sp, #16
 800b212:	4770      	bx	lr
 800b214:	20000e24 	.word	0x20000e24

0800b218 <_puts_r>:
 800b218:	6a03      	ldr	r3, [r0, #32]
 800b21a:	b570      	push	{r4, r5, r6, lr}
 800b21c:	6884      	ldr	r4, [r0, #8]
 800b21e:	4605      	mov	r5, r0
 800b220:	460e      	mov	r6, r1
 800b222:	b90b      	cbnz	r3, 800b228 <_puts_r+0x10>
 800b224:	f7ff ffb0 	bl	800b188 <__sinit>
 800b228:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b22a:	07db      	lsls	r3, r3, #31
 800b22c:	d405      	bmi.n	800b23a <_puts_r+0x22>
 800b22e:	89a3      	ldrh	r3, [r4, #12]
 800b230:	0598      	lsls	r0, r3, #22
 800b232:	d402      	bmi.n	800b23a <_puts_r+0x22>
 800b234:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b236:	f000 fa16 	bl	800b666 <__retarget_lock_acquire_recursive>
 800b23a:	89a3      	ldrh	r3, [r4, #12]
 800b23c:	0719      	lsls	r1, r3, #28
 800b23e:	d513      	bpl.n	800b268 <_puts_r+0x50>
 800b240:	6923      	ldr	r3, [r4, #16]
 800b242:	b18b      	cbz	r3, 800b268 <_puts_r+0x50>
 800b244:	3e01      	subs	r6, #1
 800b246:	68a3      	ldr	r3, [r4, #8]
 800b248:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b24c:	3b01      	subs	r3, #1
 800b24e:	60a3      	str	r3, [r4, #8]
 800b250:	b9e9      	cbnz	r1, 800b28e <_puts_r+0x76>
 800b252:	2b00      	cmp	r3, #0
 800b254:	da2e      	bge.n	800b2b4 <_puts_r+0x9c>
 800b256:	4622      	mov	r2, r4
 800b258:	210a      	movs	r1, #10
 800b25a:	4628      	mov	r0, r5
 800b25c:	f000 f8cf 	bl	800b3fe <__swbuf_r>
 800b260:	3001      	adds	r0, #1
 800b262:	d007      	beq.n	800b274 <_puts_r+0x5c>
 800b264:	250a      	movs	r5, #10
 800b266:	e007      	b.n	800b278 <_puts_r+0x60>
 800b268:	4621      	mov	r1, r4
 800b26a:	4628      	mov	r0, r5
 800b26c:	f000 f904 	bl	800b478 <__swsetup_r>
 800b270:	2800      	cmp	r0, #0
 800b272:	d0e7      	beq.n	800b244 <_puts_r+0x2c>
 800b274:	f04f 35ff 	mov.w	r5, #4294967295
 800b278:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800b27a:	07da      	lsls	r2, r3, #31
 800b27c:	d405      	bmi.n	800b28a <_puts_r+0x72>
 800b27e:	89a3      	ldrh	r3, [r4, #12]
 800b280:	059b      	lsls	r3, r3, #22
 800b282:	d402      	bmi.n	800b28a <_puts_r+0x72>
 800b284:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800b286:	f000 f9ef 	bl	800b668 <__retarget_lock_release_recursive>
 800b28a:	4628      	mov	r0, r5
 800b28c:	bd70      	pop	{r4, r5, r6, pc}
 800b28e:	2b00      	cmp	r3, #0
 800b290:	da04      	bge.n	800b29c <_puts_r+0x84>
 800b292:	69a2      	ldr	r2, [r4, #24]
 800b294:	429a      	cmp	r2, r3
 800b296:	dc06      	bgt.n	800b2a6 <_puts_r+0x8e>
 800b298:	290a      	cmp	r1, #10
 800b29a:	d004      	beq.n	800b2a6 <_puts_r+0x8e>
 800b29c:	6823      	ldr	r3, [r4, #0]
 800b29e:	1c5a      	adds	r2, r3, #1
 800b2a0:	6022      	str	r2, [r4, #0]
 800b2a2:	7019      	strb	r1, [r3, #0]
 800b2a4:	e7cf      	b.n	800b246 <_puts_r+0x2e>
 800b2a6:	4622      	mov	r2, r4
 800b2a8:	4628      	mov	r0, r5
 800b2aa:	f000 f8a8 	bl	800b3fe <__swbuf_r>
 800b2ae:	3001      	adds	r0, #1
 800b2b0:	d1c9      	bne.n	800b246 <_puts_r+0x2e>
 800b2b2:	e7df      	b.n	800b274 <_puts_r+0x5c>
 800b2b4:	6823      	ldr	r3, [r4, #0]
 800b2b6:	250a      	movs	r5, #10
 800b2b8:	1c5a      	adds	r2, r3, #1
 800b2ba:	6022      	str	r2, [r4, #0]
 800b2bc:	701d      	strb	r5, [r3, #0]
 800b2be:	e7db      	b.n	800b278 <_puts_r+0x60>

0800b2c0 <puts>:
 800b2c0:	4b02      	ldr	r3, [pc, #8]	; (800b2cc <puts+0xc>)
 800b2c2:	4601      	mov	r1, r0
 800b2c4:	6818      	ldr	r0, [r3, #0]
 800b2c6:	f7ff bfa7 	b.w	800b218 <_puts_r>
 800b2ca:	bf00      	nop
 800b2cc:	20000e24 	.word	0x20000e24

0800b2d0 <sniprintf>:
 800b2d0:	b40c      	push	{r2, r3}
 800b2d2:	b530      	push	{r4, r5, lr}
 800b2d4:	4b17      	ldr	r3, [pc, #92]	; (800b334 <sniprintf+0x64>)
 800b2d6:	1e0c      	subs	r4, r1, #0
 800b2d8:	681d      	ldr	r5, [r3, #0]
 800b2da:	b09d      	sub	sp, #116	; 0x74
 800b2dc:	da08      	bge.n	800b2f0 <sniprintf+0x20>
 800b2de:	238b      	movs	r3, #139	; 0x8b
 800b2e0:	602b      	str	r3, [r5, #0]
 800b2e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b2e6:	b01d      	add	sp, #116	; 0x74
 800b2e8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b2ec:	b002      	add	sp, #8
 800b2ee:	4770      	bx	lr
 800b2f0:	f44f 7302 	mov.w	r3, #520	; 0x208
 800b2f4:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b2f8:	bf14      	ite	ne
 800b2fa:	f104 33ff 	addne.w	r3, r4, #4294967295
 800b2fe:	4623      	moveq	r3, r4
 800b300:	9304      	str	r3, [sp, #16]
 800b302:	9307      	str	r3, [sp, #28]
 800b304:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b308:	9002      	str	r0, [sp, #8]
 800b30a:	9006      	str	r0, [sp, #24]
 800b30c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b310:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800b312:	ab21      	add	r3, sp, #132	; 0x84
 800b314:	a902      	add	r1, sp, #8
 800b316:	4628      	mov	r0, r5
 800b318:	9301      	str	r3, [sp, #4]
 800b31a:	f002 f997 	bl	800d64c <_svfiprintf_r>
 800b31e:	1c43      	adds	r3, r0, #1
 800b320:	bfbc      	itt	lt
 800b322:	238b      	movlt	r3, #139	; 0x8b
 800b324:	602b      	strlt	r3, [r5, #0]
 800b326:	2c00      	cmp	r4, #0
 800b328:	d0dd      	beq.n	800b2e6 <sniprintf+0x16>
 800b32a:	9b02      	ldr	r3, [sp, #8]
 800b32c:	2200      	movs	r2, #0
 800b32e:	701a      	strb	r2, [r3, #0]
 800b330:	e7d9      	b.n	800b2e6 <sniprintf+0x16>
 800b332:	bf00      	nop
 800b334:	20000e24 	.word	0x20000e24

0800b338 <siprintf>:
 800b338:	b40e      	push	{r1, r2, r3}
 800b33a:	b500      	push	{lr}
 800b33c:	b09c      	sub	sp, #112	; 0x70
 800b33e:	ab1d      	add	r3, sp, #116	; 0x74
 800b340:	9002      	str	r0, [sp, #8]
 800b342:	9006      	str	r0, [sp, #24]
 800b344:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b348:	4809      	ldr	r0, [pc, #36]	; (800b370 <siprintf+0x38>)
 800b34a:	9107      	str	r1, [sp, #28]
 800b34c:	9104      	str	r1, [sp, #16]
 800b34e:	4909      	ldr	r1, [pc, #36]	; (800b374 <siprintf+0x3c>)
 800b350:	f853 2b04 	ldr.w	r2, [r3], #4
 800b354:	9105      	str	r1, [sp, #20]
 800b356:	6800      	ldr	r0, [r0, #0]
 800b358:	9301      	str	r3, [sp, #4]
 800b35a:	a902      	add	r1, sp, #8
 800b35c:	f002 f976 	bl	800d64c <_svfiprintf_r>
 800b360:	9b02      	ldr	r3, [sp, #8]
 800b362:	2200      	movs	r2, #0
 800b364:	701a      	strb	r2, [r3, #0]
 800b366:	b01c      	add	sp, #112	; 0x70
 800b368:	f85d eb04 	ldr.w	lr, [sp], #4
 800b36c:	b003      	add	sp, #12
 800b36e:	4770      	bx	lr
 800b370:	20000e24 	.word	0x20000e24
 800b374:	ffff0208 	.word	0xffff0208

0800b378 <__sread>:
 800b378:	b510      	push	{r4, lr}
 800b37a:	460c      	mov	r4, r1
 800b37c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b380:	f000 f912 	bl	800b5a8 <_read_r>
 800b384:	2800      	cmp	r0, #0
 800b386:	bfab      	itete	ge
 800b388:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800b38a:	89a3      	ldrhlt	r3, [r4, #12]
 800b38c:	181b      	addge	r3, r3, r0
 800b38e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800b392:	bfac      	ite	ge
 800b394:	6563      	strge	r3, [r4, #84]	; 0x54
 800b396:	81a3      	strhlt	r3, [r4, #12]
 800b398:	bd10      	pop	{r4, pc}

0800b39a <__swrite>:
 800b39a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b39e:	461f      	mov	r7, r3
 800b3a0:	898b      	ldrh	r3, [r1, #12]
 800b3a2:	05db      	lsls	r3, r3, #23
 800b3a4:	4605      	mov	r5, r0
 800b3a6:	460c      	mov	r4, r1
 800b3a8:	4616      	mov	r6, r2
 800b3aa:	d505      	bpl.n	800b3b8 <__swrite+0x1e>
 800b3ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3b0:	2302      	movs	r3, #2
 800b3b2:	2200      	movs	r2, #0
 800b3b4:	f000 f8e6 	bl	800b584 <_lseek_r>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b3be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b3c2:	81a3      	strh	r3, [r4, #12]
 800b3c4:	4632      	mov	r2, r6
 800b3c6:	463b      	mov	r3, r7
 800b3c8:	4628      	mov	r0, r5
 800b3ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b3ce:	f000 b90d 	b.w	800b5ec <_write_r>

0800b3d2 <__sseek>:
 800b3d2:	b510      	push	{r4, lr}
 800b3d4:	460c      	mov	r4, r1
 800b3d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3da:	f000 f8d3 	bl	800b584 <_lseek_r>
 800b3de:	1c43      	adds	r3, r0, #1
 800b3e0:	89a3      	ldrh	r3, [r4, #12]
 800b3e2:	bf15      	itete	ne
 800b3e4:	6560      	strne	r0, [r4, #84]	; 0x54
 800b3e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800b3ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800b3ee:	81a3      	strheq	r3, [r4, #12]
 800b3f0:	bf18      	it	ne
 800b3f2:	81a3      	strhne	r3, [r4, #12]
 800b3f4:	bd10      	pop	{r4, pc}

0800b3f6 <__sclose>:
 800b3f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b3fa:	f000 b8b3 	b.w	800b564 <_close_r>

0800b3fe <__swbuf_r>:
 800b3fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b400:	460e      	mov	r6, r1
 800b402:	4614      	mov	r4, r2
 800b404:	4605      	mov	r5, r0
 800b406:	b118      	cbz	r0, 800b410 <__swbuf_r+0x12>
 800b408:	6a03      	ldr	r3, [r0, #32]
 800b40a:	b90b      	cbnz	r3, 800b410 <__swbuf_r+0x12>
 800b40c:	f7ff febc 	bl	800b188 <__sinit>
 800b410:	69a3      	ldr	r3, [r4, #24]
 800b412:	60a3      	str	r3, [r4, #8]
 800b414:	89a3      	ldrh	r3, [r4, #12]
 800b416:	071a      	lsls	r2, r3, #28
 800b418:	d525      	bpl.n	800b466 <__swbuf_r+0x68>
 800b41a:	6923      	ldr	r3, [r4, #16]
 800b41c:	b31b      	cbz	r3, 800b466 <__swbuf_r+0x68>
 800b41e:	6823      	ldr	r3, [r4, #0]
 800b420:	6922      	ldr	r2, [r4, #16]
 800b422:	1a98      	subs	r0, r3, r2
 800b424:	6963      	ldr	r3, [r4, #20]
 800b426:	b2f6      	uxtb	r6, r6
 800b428:	4283      	cmp	r3, r0
 800b42a:	4637      	mov	r7, r6
 800b42c:	dc04      	bgt.n	800b438 <__swbuf_r+0x3a>
 800b42e:	4621      	mov	r1, r4
 800b430:	4628      	mov	r0, r5
 800b432:	f002 fbd3 	bl	800dbdc <_fflush_r>
 800b436:	b9e0      	cbnz	r0, 800b472 <__swbuf_r+0x74>
 800b438:	68a3      	ldr	r3, [r4, #8]
 800b43a:	3b01      	subs	r3, #1
 800b43c:	60a3      	str	r3, [r4, #8]
 800b43e:	6823      	ldr	r3, [r4, #0]
 800b440:	1c5a      	adds	r2, r3, #1
 800b442:	6022      	str	r2, [r4, #0]
 800b444:	701e      	strb	r6, [r3, #0]
 800b446:	6962      	ldr	r2, [r4, #20]
 800b448:	1c43      	adds	r3, r0, #1
 800b44a:	429a      	cmp	r2, r3
 800b44c:	d004      	beq.n	800b458 <__swbuf_r+0x5a>
 800b44e:	89a3      	ldrh	r3, [r4, #12]
 800b450:	07db      	lsls	r3, r3, #31
 800b452:	d506      	bpl.n	800b462 <__swbuf_r+0x64>
 800b454:	2e0a      	cmp	r6, #10
 800b456:	d104      	bne.n	800b462 <__swbuf_r+0x64>
 800b458:	4621      	mov	r1, r4
 800b45a:	4628      	mov	r0, r5
 800b45c:	f002 fbbe 	bl	800dbdc <_fflush_r>
 800b460:	b938      	cbnz	r0, 800b472 <__swbuf_r+0x74>
 800b462:	4638      	mov	r0, r7
 800b464:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b466:	4621      	mov	r1, r4
 800b468:	4628      	mov	r0, r5
 800b46a:	f000 f805 	bl	800b478 <__swsetup_r>
 800b46e:	2800      	cmp	r0, #0
 800b470:	d0d5      	beq.n	800b41e <__swbuf_r+0x20>
 800b472:	f04f 37ff 	mov.w	r7, #4294967295
 800b476:	e7f4      	b.n	800b462 <__swbuf_r+0x64>

0800b478 <__swsetup_r>:
 800b478:	b538      	push	{r3, r4, r5, lr}
 800b47a:	4b2a      	ldr	r3, [pc, #168]	; (800b524 <__swsetup_r+0xac>)
 800b47c:	4605      	mov	r5, r0
 800b47e:	6818      	ldr	r0, [r3, #0]
 800b480:	460c      	mov	r4, r1
 800b482:	b118      	cbz	r0, 800b48c <__swsetup_r+0x14>
 800b484:	6a03      	ldr	r3, [r0, #32]
 800b486:	b90b      	cbnz	r3, 800b48c <__swsetup_r+0x14>
 800b488:	f7ff fe7e 	bl	800b188 <__sinit>
 800b48c:	89a3      	ldrh	r3, [r4, #12]
 800b48e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b492:	0718      	lsls	r0, r3, #28
 800b494:	d422      	bmi.n	800b4dc <__swsetup_r+0x64>
 800b496:	06d9      	lsls	r1, r3, #27
 800b498:	d407      	bmi.n	800b4aa <__swsetup_r+0x32>
 800b49a:	2309      	movs	r3, #9
 800b49c:	602b      	str	r3, [r5, #0]
 800b49e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b4a2:	81a3      	strh	r3, [r4, #12]
 800b4a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b4a8:	e034      	b.n	800b514 <__swsetup_r+0x9c>
 800b4aa:	0758      	lsls	r0, r3, #29
 800b4ac:	d512      	bpl.n	800b4d4 <__swsetup_r+0x5c>
 800b4ae:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b4b0:	b141      	cbz	r1, 800b4c4 <__swsetup_r+0x4c>
 800b4b2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b4b6:	4299      	cmp	r1, r3
 800b4b8:	d002      	beq.n	800b4c0 <__swsetup_r+0x48>
 800b4ba:	4628      	mov	r0, r5
 800b4bc:	f000 ff6e 	bl	800c39c <_free_r>
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	6363      	str	r3, [r4, #52]	; 0x34
 800b4c4:	89a3      	ldrh	r3, [r4, #12]
 800b4c6:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b4ca:	81a3      	strh	r3, [r4, #12]
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	6063      	str	r3, [r4, #4]
 800b4d0:	6923      	ldr	r3, [r4, #16]
 800b4d2:	6023      	str	r3, [r4, #0]
 800b4d4:	89a3      	ldrh	r3, [r4, #12]
 800b4d6:	f043 0308 	orr.w	r3, r3, #8
 800b4da:	81a3      	strh	r3, [r4, #12]
 800b4dc:	6923      	ldr	r3, [r4, #16]
 800b4de:	b94b      	cbnz	r3, 800b4f4 <__swsetup_r+0x7c>
 800b4e0:	89a3      	ldrh	r3, [r4, #12]
 800b4e2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b4e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b4ea:	d003      	beq.n	800b4f4 <__swsetup_r+0x7c>
 800b4ec:	4621      	mov	r1, r4
 800b4ee:	4628      	mov	r0, r5
 800b4f0:	f002 fbc2 	bl	800dc78 <__smakebuf_r>
 800b4f4:	89a0      	ldrh	r0, [r4, #12]
 800b4f6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b4fa:	f010 0301 	ands.w	r3, r0, #1
 800b4fe:	d00a      	beq.n	800b516 <__swsetup_r+0x9e>
 800b500:	2300      	movs	r3, #0
 800b502:	60a3      	str	r3, [r4, #8]
 800b504:	6963      	ldr	r3, [r4, #20]
 800b506:	425b      	negs	r3, r3
 800b508:	61a3      	str	r3, [r4, #24]
 800b50a:	6923      	ldr	r3, [r4, #16]
 800b50c:	b943      	cbnz	r3, 800b520 <__swsetup_r+0xa8>
 800b50e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b512:	d1c4      	bne.n	800b49e <__swsetup_r+0x26>
 800b514:	bd38      	pop	{r3, r4, r5, pc}
 800b516:	0781      	lsls	r1, r0, #30
 800b518:	bf58      	it	pl
 800b51a:	6963      	ldrpl	r3, [r4, #20]
 800b51c:	60a3      	str	r3, [r4, #8]
 800b51e:	e7f4      	b.n	800b50a <__swsetup_r+0x92>
 800b520:	2000      	movs	r0, #0
 800b522:	e7f7      	b.n	800b514 <__swsetup_r+0x9c>
 800b524:	20000e24 	.word	0x20000e24

0800b528 <memset>:
 800b528:	4402      	add	r2, r0
 800b52a:	4603      	mov	r3, r0
 800b52c:	4293      	cmp	r3, r2
 800b52e:	d100      	bne.n	800b532 <memset+0xa>
 800b530:	4770      	bx	lr
 800b532:	f803 1b01 	strb.w	r1, [r3], #1
 800b536:	e7f9      	b.n	800b52c <memset+0x4>

0800b538 <strncmp>:
 800b538:	b510      	push	{r4, lr}
 800b53a:	b16a      	cbz	r2, 800b558 <strncmp+0x20>
 800b53c:	3901      	subs	r1, #1
 800b53e:	1884      	adds	r4, r0, r2
 800b540:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b544:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800b548:	429a      	cmp	r2, r3
 800b54a:	d103      	bne.n	800b554 <strncmp+0x1c>
 800b54c:	42a0      	cmp	r0, r4
 800b54e:	d001      	beq.n	800b554 <strncmp+0x1c>
 800b550:	2a00      	cmp	r2, #0
 800b552:	d1f5      	bne.n	800b540 <strncmp+0x8>
 800b554:	1ad0      	subs	r0, r2, r3
 800b556:	bd10      	pop	{r4, pc}
 800b558:	4610      	mov	r0, r2
 800b55a:	e7fc      	b.n	800b556 <strncmp+0x1e>

0800b55c <_localeconv_r>:
 800b55c:	4800      	ldr	r0, [pc, #0]	; (800b560 <_localeconv_r+0x4>)
 800b55e:	4770      	bx	lr
 800b560:	20000d5c 	.word	0x20000d5c

0800b564 <_close_r>:
 800b564:	b538      	push	{r3, r4, r5, lr}
 800b566:	4d06      	ldr	r5, [pc, #24]	; (800b580 <_close_r+0x1c>)
 800b568:	2300      	movs	r3, #0
 800b56a:	4604      	mov	r4, r0
 800b56c:	4608      	mov	r0, r1
 800b56e:	602b      	str	r3, [r5, #0]
 800b570:	f7f6 fc05 	bl	8001d7e <_close>
 800b574:	1c43      	adds	r3, r0, #1
 800b576:	d102      	bne.n	800b57e <_close_r+0x1a>
 800b578:	682b      	ldr	r3, [r5, #0]
 800b57a:	b103      	cbz	r3, 800b57e <_close_r+0x1a>
 800b57c:	6023      	str	r3, [r4, #0]
 800b57e:	bd38      	pop	{r3, r4, r5, pc}
 800b580:	200045c4 	.word	0x200045c4

0800b584 <_lseek_r>:
 800b584:	b538      	push	{r3, r4, r5, lr}
 800b586:	4d07      	ldr	r5, [pc, #28]	; (800b5a4 <_lseek_r+0x20>)
 800b588:	4604      	mov	r4, r0
 800b58a:	4608      	mov	r0, r1
 800b58c:	4611      	mov	r1, r2
 800b58e:	2200      	movs	r2, #0
 800b590:	602a      	str	r2, [r5, #0]
 800b592:	461a      	mov	r2, r3
 800b594:	f7f6 fc1a 	bl	8001dcc <_lseek>
 800b598:	1c43      	adds	r3, r0, #1
 800b59a:	d102      	bne.n	800b5a2 <_lseek_r+0x1e>
 800b59c:	682b      	ldr	r3, [r5, #0]
 800b59e:	b103      	cbz	r3, 800b5a2 <_lseek_r+0x1e>
 800b5a0:	6023      	str	r3, [r4, #0]
 800b5a2:	bd38      	pop	{r3, r4, r5, pc}
 800b5a4:	200045c4 	.word	0x200045c4

0800b5a8 <_read_r>:
 800b5a8:	b538      	push	{r3, r4, r5, lr}
 800b5aa:	4d07      	ldr	r5, [pc, #28]	; (800b5c8 <_read_r+0x20>)
 800b5ac:	4604      	mov	r4, r0
 800b5ae:	4608      	mov	r0, r1
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	602a      	str	r2, [r5, #0]
 800b5b6:	461a      	mov	r2, r3
 800b5b8:	f7f6 fba8 	bl	8001d0c <_read>
 800b5bc:	1c43      	adds	r3, r0, #1
 800b5be:	d102      	bne.n	800b5c6 <_read_r+0x1e>
 800b5c0:	682b      	ldr	r3, [r5, #0]
 800b5c2:	b103      	cbz	r3, 800b5c6 <_read_r+0x1e>
 800b5c4:	6023      	str	r3, [r4, #0]
 800b5c6:	bd38      	pop	{r3, r4, r5, pc}
 800b5c8:	200045c4 	.word	0x200045c4

0800b5cc <_sbrk_r>:
 800b5cc:	b538      	push	{r3, r4, r5, lr}
 800b5ce:	4d06      	ldr	r5, [pc, #24]	; (800b5e8 <_sbrk_r+0x1c>)
 800b5d0:	2300      	movs	r3, #0
 800b5d2:	4604      	mov	r4, r0
 800b5d4:	4608      	mov	r0, r1
 800b5d6:	602b      	str	r3, [r5, #0]
 800b5d8:	f7f6 fc06 	bl	8001de8 <_sbrk>
 800b5dc:	1c43      	adds	r3, r0, #1
 800b5de:	d102      	bne.n	800b5e6 <_sbrk_r+0x1a>
 800b5e0:	682b      	ldr	r3, [r5, #0]
 800b5e2:	b103      	cbz	r3, 800b5e6 <_sbrk_r+0x1a>
 800b5e4:	6023      	str	r3, [r4, #0]
 800b5e6:	bd38      	pop	{r3, r4, r5, pc}
 800b5e8:	200045c4 	.word	0x200045c4

0800b5ec <_write_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d07      	ldr	r5, [pc, #28]	; (800b60c <_write_r+0x20>)
 800b5f0:	4604      	mov	r4, r0
 800b5f2:	4608      	mov	r0, r1
 800b5f4:	4611      	mov	r1, r2
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	602a      	str	r2, [r5, #0]
 800b5fa:	461a      	mov	r2, r3
 800b5fc:	f7f6 fba3 	bl	8001d46 <_write>
 800b600:	1c43      	adds	r3, r0, #1
 800b602:	d102      	bne.n	800b60a <_write_r+0x1e>
 800b604:	682b      	ldr	r3, [r5, #0]
 800b606:	b103      	cbz	r3, 800b60a <_write_r+0x1e>
 800b608:	6023      	str	r3, [r4, #0]
 800b60a:	bd38      	pop	{r3, r4, r5, pc}
 800b60c:	200045c4 	.word	0x200045c4

0800b610 <__errno>:
 800b610:	4b01      	ldr	r3, [pc, #4]	; (800b618 <__errno+0x8>)
 800b612:	6818      	ldr	r0, [r3, #0]
 800b614:	4770      	bx	lr
 800b616:	bf00      	nop
 800b618:	20000e24 	.word	0x20000e24

0800b61c <__libc_init_array>:
 800b61c:	b570      	push	{r4, r5, r6, lr}
 800b61e:	4d0d      	ldr	r5, [pc, #52]	; (800b654 <__libc_init_array+0x38>)
 800b620:	4c0d      	ldr	r4, [pc, #52]	; (800b658 <__libc_init_array+0x3c>)
 800b622:	1b64      	subs	r4, r4, r5
 800b624:	10a4      	asrs	r4, r4, #2
 800b626:	2600      	movs	r6, #0
 800b628:	42a6      	cmp	r6, r4
 800b62a:	d109      	bne.n	800b640 <__libc_init_array+0x24>
 800b62c:	4d0b      	ldr	r5, [pc, #44]	; (800b65c <__libc_init_array+0x40>)
 800b62e:	4c0c      	ldr	r4, [pc, #48]	; (800b660 <__libc_init_array+0x44>)
 800b630:	f002 feee 	bl	800e410 <_init>
 800b634:	1b64      	subs	r4, r4, r5
 800b636:	10a4      	asrs	r4, r4, #2
 800b638:	2600      	movs	r6, #0
 800b63a:	42a6      	cmp	r6, r4
 800b63c:	d105      	bne.n	800b64a <__libc_init_array+0x2e>
 800b63e:	bd70      	pop	{r4, r5, r6, pc}
 800b640:	f855 3b04 	ldr.w	r3, [r5], #4
 800b644:	4798      	blx	r3
 800b646:	3601      	adds	r6, #1
 800b648:	e7ee      	b.n	800b628 <__libc_init_array+0xc>
 800b64a:	f855 3b04 	ldr.w	r3, [r5], #4
 800b64e:	4798      	blx	r3
 800b650:	3601      	adds	r6, #1
 800b652:	e7f2      	b.n	800b63a <__libc_init_array+0x1e>
 800b654:	08045fc4 	.word	0x08045fc4
 800b658:	08045fc4 	.word	0x08045fc4
 800b65c:	08045fc4 	.word	0x08045fc4
 800b660:	08045fc8 	.word	0x08045fc8

0800b664 <__retarget_lock_init_recursive>:
 800b664:	4770      	bx	lr

0800b666 <__retarget_lock_acquire_recursive>:
 800b666:	4770      	bx	lr

0800b668 <__retarget_lock_release_recursive>:
 800b668:	4770      	bx	lr

0800b66a <memcpy>:
 800b66a:	440a      	add	r2, r1
 800b66c:	4291      	cmp	r1, r2
 800b66e:	f100 33ff 	add.w	r3, r0, #4294967295
 800b672:	d100      	bne.n	800b676 <memcpy+0xc>
 800b674:	4770      	bx	lr
 800b676:	b510      	push	{r4, lr}
 800b678:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b67c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800b680:	4291      	cmp	r1, r2
 800b682:	d1f9      	bne.n	800b678 <memcpy+0xe>
 800b684:	bd10      	pop	{r4, pc}
	...

0800b688 <nan>:
 800b688:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b690 <nan+0x8>
 800b68c:	4770      	bx	lr
 800b68e:	bf00      	nop
 800b690:	00000000 	.word	0x00000000
 800b694:	7ff80000 	.word	0x7ff80000

0800b698 <nanf>:
 800b698:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b6a0 <nanf+0x8>
 800b69c:	4770      	bx	lr
 800b69e:	bf00      	nop
 800b6a0:	7fc00000 	.word	0x7fc00000

0800b6a4 <quorem>:
 800b6a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6a8:	6903      	ldr	r3, [r0, #16]
 800b6aa:	690c      	ldr	r4, [r1, #16]
 800b6ac:	42a3      	cmp	r3, r4
 800b6ae:	4607      	mov	r7, r0
 800b6b0:	db7e      	blt.n	800b7b0 <quorem+0x10c>
 800b6b2:	3c01      	subs	r4, #1
 800b6b4:	f101 0814 	add.w	r8, r1, #20
 800b6b8:	f100 0514 	add.w	r5, r0, #20
 800b6bc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b6c0:	9301      	str	r3, [sp, #4]
 800b6c2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b6c6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	429a      	cmp	r2, r3
 800b6ce:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b6d2:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b6d6:	fbb2 f6f3 	udiv	r6, r2, r3
 800b6da:	d331      	bcc.n	800b740 <quorem+0x9c>
 800b6dc:	f04f 0e00 	mov.w	lr, #0
 800b6e0:	4640      	mov	r0, r8
 800b6e2:	46ac      	mov	ip, r5
 800b6e4:	46f2      	mov	sl, lr
 800b6e6:	f850 2b04 	ldr.w	r2, [r0], #4
 800b6ea:	b293      	uxth	r3, r2
 800b6ec:	fb06 e303 	mla	r3, r6, r3, lr
 800b6f0:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b6f4:	0c1a      	lsrs	r2, r3, #16
 800b6f6:	b29b      	uxth	r3, r3
 800b6f8:	ebaa 0303 	sub.w	r3, sl, r3
 800b6fc:	f8dc a000 	ldr.w	sl, [ip]
 800b700:	fa13 f38a 	uxtah	r3, r3, sl
 800b704:	fb06 220e 	mla	r2, r6, lr, r2
 800b708:	9300      	str	r3, [sp, #0]
 800b70a:	9b00      	ldr	r3, [sp, #0]
 800b70c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b710:	b292      	uxth	r2, r2
 800b712:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b716:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b71a:	f8bd 3000 	ldrh.w	r3, [sp]
 800b71e:	4581      	cmp	r9, r0
 800b720:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b724:	f84c 3b04 	str.w	r3, [ip], #4
 800b728:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b72c:	d2db      	bcs.n	800b6e6 <quorem+0x42>
 800b72e:	f855 300b 	ldr.w	r3, [r5, fp]
 800b732:	b92b      	cbnz	r3, 800b740 <quorem+0x9c>
 800b734:	9b01      	ldr	r3, [sp, #4]
 800b736:	3b04      	subs	r3, #4
 800b738:	429d      	cmp	r5, r3
 800b73a:	461a      	mov	r2, r3
 800b73c:	d32c      	bcc.n	800b798 <quorem+0xf4>
 800b73e:	613c      	str	r4, [r7, #16]
 800b740:	4638      	mov	r0, r7
 800b742:	f001 fca7 	bl	800d094 <__mcmp>
 800b746:	2800      	cmp	r0, #0
 800b748:	db22      	blt.n	800b790 <quorem+0xec>
 800b74a:	3601      	adds	r6, #1
 800b74c:	4629      	mov	r1, r5
 800b74e:	2000      	movs	r0, #0
 800b750:	f858 2b04 	ldr.w	r2, [r8], #4
 800b754:	f8d1 c000 	ldr.w	ip, [r1]
 800b758:	b293      	uxth	r3, r2
 800b75a:	1ac3      	subs	r3, r0, r3
 800b75c:	0c12      	lsrs	r2, r2, #16
 800b75e:	fa13 f38c 	uxtah	r3, r3, ip
 800b762:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800b766:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b770:	45c1      	cmp	r9, r8
 800b772:	f841 3b04 	str.w	r3, [r1], #4
 800b776:	ea4f 4022 	mov.w	r0, r2, asr #16
 800b77a:	d2e9      	bcs.n	800b750 <quorem+0xac>
 800b77c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b780:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b784:	b922      	cbnz	r2, 800b790 <quorem+0xec>
 800b786:	3b04      	subs	r3, #4
 800b788:	429d      	cmp	r5, r3
 800b78a:	461a      	mov	r2, r3
 800b78c:	d30a      	bcc.n	800b7a4 <quorem+0x100>
 800b78e:	613c      	str	r4, [r7, #16]
 800b790:	4630      	mov	r0, r6
 800b792:	b003      	add	sp, #12
 800b794:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b798:	6812      	ldr	r2, [r2, #0]
 800b79a:	3b04      	subs	r3, #4
 800b79c:	2a00      	cmp	r2, #0
 800b79e:	d1ce      	bne.n	800b73e <quorem+0x9a>
 800b7a0:	3c01      	subs	r4, #1
 800b7a2:	e7c9      	b.n	800b738 <quorem+0x94>
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	3b04      	subs	r3, #4
 800b7a8:	2a00      	cmp	r2, #0
 800b7aa:	d1f0      	bne.n	800b78e <quorem+0xea>
 800b7ac:	3c01      	subs	r4, #1
 800b7ae:	e7eb      	b.n	800b788 <quorem+0xe4>
 800b7b0:	2000      	movs	r0, #0
 800b7b2:	e7ee      	b.n	800b792 <quorem+0xee>
 800b7b4:	0000      	movs	r0, r0
	...

0800b7b8 <_dtoa_r>:
 800b7b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7bc:	ed2d 8b04 	vpush	{d8-d9}
 800b7c0:	69c5      	ldr	r5, [r0, #28]
 800b7c2:	b093      	sub	sp, #76	; 0x4c
 800b7c4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800b7c8:	ec57 6b10 	vmov	r6, r7, d0
 800b7cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800b7d0:	9107      	str	r1, [sp, #28]
 800b7d2:	4604      	mov	r4, r0
 800b7d4:	920a      	str	r2, [sp, #40]	; 0x28
 800b7d6:	930d      	str	r3, [sp, #52]	; 0x34
 800b7d8:	b975      	cbnz	r5, 800b7f8 <_dtoa_r+0x40>
 800b7da:	2010      	movs	r0, #16
 800b7dc:	f7fd fed0 	bl	8009580 <malloc>
 800b7e0:	4602      	mov	r2, r0
 800b7e2:	61e0      	str	r0, [r4, #28]
 800b7e4:	b920      	cbnz	r0, 800b7f0 <_dtoa_r+0x38>
 800b7e6:	4bae      	ldr	r3, [pc, #696]	; (800baa0 <_dtoa_r+0x2e8>)
 800b7e8:	21ef      	movs	r1, #239	; 0xef
 800b7ea:	48ae      	ldr	r0, [pc, #696]	; (800baa4 <_dtoa_r+0x2ec>)
 800b7ec:	f002 fabc 	bl	800dd68 <__assert_func>
 800b7f0:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b7f4:	6005      	str	r5, [r0, #0]
 800b7f6:	60c5      	str	r5, [r0, #12]
 800b7f8:	69e3      	ldr	r3, [r4, #28]
 800b7fa:	6819      	ldr	r1, [r3, #0]
 800b7fc:	b151      	cbz	r1, 800b814 <_dtoa_r+0x5c>
 800b7fe:	685a      	ldr	r2, [r3, #4]
 800b800:	604a      	str	r2, [r1, #4]
 800b802:	2301      	movs	r3, #1
 800b804:	4093      	lsls	r3, r2
 800b806:	608b      	str	r3, [r1, #8]
 800b808:	4620      	mov	r0, r4
 800b80a:	f001 f9bd 	bl	800cb88 <_Bfree>
 800b80e:	69e3      	ldr	r3, [r4, #28]
 800b810:	2200      	movs	r2, #0
 800b812:	601a      	str	r2, [r3, #0]
 800b814:	1e3b      	subs	r3, r7, #0
 800b816:	bfbb      	ittet	lt
 800b818:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b81c:	9303      	strlt	r3, [sp, #12]
 800b81e:	2300      	movge	r3, #0
 800b820:	2201      	movlt	r2, #1
 800b822:	bfac      	ite	ge
 800b824:	f8c8 3000 	strge.w	r3, [r8]
 800b828:	f8c8 2000 	strlt.w	r2, [r8]
 800b82c:	4b9e      	ldr	r3, [pc, #632]	; (800baa8 <_dtoa_r+0x2f0>)
 800b82e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800b832:	ea33 0308 	bics.w	r3, r3, r8
 800b836:	d11b      	bne.n	800b870 <_dtoa_r+0xb8>
 800b838:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b83a:	f242 730f 	movw	r3, #9999	; 0x270f
 800b83e:	6013      	str	r3, [r2, #0]
 800b840:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800b844:	4333      	orrs	r3, r6
 800b846:	f000 8593 	beq.w	800c370 <_dtoa_r+0xbb8>
 800b84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b84c:	b963      	cbnz	r3, 800b868 <_dtoa_r+0xb0>
 800b84e:	4b97      	ldr	r3, [pc, #604]	; (800baac <_dtoa_r+0x2f4>)
 800b850:	e027      	b.n	800b8a2 <_dtoa_r+0xea>
 800b852:	4b97      	ldr	r3, [pc, #604]	; (800bab0 <_dtoa_r+0x2f8>)
 800b854:	9300      	str	r3, [sp, #0]
 800b856:	3308      	adds	r3, #8
 800b858:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b85a:	6013      	str	r3, [r2, #0]
 800b85c:	9800      	ldr	r0, [sp, #0]
 800b85e:	b013      	add	sp, #76	; 0x4c
 800b860:	ecbd 8b04 	vpop	{d8-d9}
 800b864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b868:	4b90      	ldr	r3, [pc, #576]	; (800baac <_dtoa_r+0x2f4>)
 800b86a:	9300      	str	r3, [sp, #0]
 800b86c:	3303      	adds	r3, #3
 800b86e:	e7f3      	b.n	800b858 <_dtoa_r+0xa0>
 800b870:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b874:	2200      	movs	r2, #0
 800b876:	ec51 0b17 	vmov	r0, r1, d7
 800b87a:	eeb0 8a47 	vmov.f32	s16, s14
 800b87e:	eef0 8a67 	vmov.f32	s17, s15
 800b882:	2300      	movs	r3, #0
 800b884:	f7f5 f940 	bl	8000b08 <__aeabi_dcmpeq>
 800b888:	4681      	mov	r9, r0
 800b88a:	b160      	cbz	r0, 800b8a6 <_dtoa_r+0xee>
 800b88c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b88e:	2301      	movs	r3, #1
 800b890:	6013      	str	r3, [r2, #0]
 800b892:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b894:	2b00      	cmp	r3, #0
 800b896:	f000 8568 	beq.w	800c36a <_dtoa_r+0xbb2>
 800b89a:	4b86      	ldr	r3, [pc, #536]	; (800bab4 <_dtoa_r+0x2fc>)
 800b89c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b89e:	6013      	str	r3, [r2, #0]
 800b8a0:	3b01      	subs	r3, #1
 800b8a2:	9300      	str	r3, [sp, #0]
 800b8a4:	e7da      	b.n	800b85c <_dtoa_r+0xa4>
 800b8a6:	aa10      	add	r2, sp, #64	; 0x40
 800b8a8:	a911      	add	r1, sp, #68	; 0x44
 800b8aa:	4620      	mov	r0, r4
 800b8ac:	eeb0 0a48 	vmov.f32	s0, s16
 800b8b0:	eef0 0a68 	vmov.f32	s1, s17
 800b8b4:	f001 fd04 	bl	800d2c0 <__d2b>
 800b8b8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800b8bc:	4682      	mov	sl, r0
 800b8be:	2d00      	cmp	r5, #0
 800b8c0:	d07f      	beq.n	800b9c2 <_dtoa_r+0x20a>
 800b8c2:	ee18 3a90 	vmov	r3, s17
 800b8c6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b8ca:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800b8ce:	ec51 0b18 	vmov	r0, r1, d8
 800b8d2:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b8d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b8da:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800b8de:	4619      	mov	r1, r3
 800b8e0:	2200      	movs	r2, #0
 800b8e2:	4b75      	ldr	r3, [pc, #468]	; (800bab8 <_dtoa_r+0x300>)
 800b8e4:	f7f4 fcf0 	bl	80002c8 <__aeabi_dsub>
 800b8e8:	a367      	add	r3, pc, #412	; (adr r3, 800ba88 <_dtoa_r+0x2d0>)
 800b8ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ee:	f7f4 fea3 	bl	8000638 <__aeabi_dmul>
 800b8f2:	a367      	add	r3, pc, #412	; (adr r3, 800ba90 <_dtoa_r+0x2d8>)
 800b8f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8f8:	f7f4 fce8 	bl	80002cc <__adddf3>
 800b8fc:	4606      	mov	r6, r0
 800b8fe:	4628      	mov	r0, r5
 800b900:	460f      	mov	r7, r1
 800b902:	f7f4 fe2f 	bl	8000564 <__aeabi_i2d>
 800b906:	a364      	add	r3, pc, #400	; (adr r3, 800ba98 <_dtoa_r+0x2e0>)
 800b908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b90c:	f7f4 fe94 	bl	8000638 <__aeabi_dmul>
 800b910:	4602      	mov	r2, r0
 800b912:	460b      	mov	r3, r1
 800b914:	4630      	mov	r0, r6
 800b916:	4639      	mov	r1, r7
 800b918:	f7f4 fcd8 	bl	80002cc <__adddf3>
 800b91c:	4606      	mov	r6, r0
 800b91e:	460f      	mov	r7, r1
 800b920:	f7f5 f93a 	bl	8000b98 <__aeabi_d2iz>
 800b924:	2200      	movs	r2, #0
 800b926:	4683      	mov	fp, r0
 800b928:	2300      	movs	r3, #0
 800b92a:	4630      	mov	r0, r6
 800b92c:	4639      	mov	r1, r7
 800b92e:	f7f5 f8f5 	bl	8000b1c <__aeabi_dcmplt>
 800b932:	b148      	cbz	r0, 800b948 <_dtoa_r+0x190>
 800b934:	4658      	mov	r0, fp
 800b936:	f7f4 fe15 	bl	8000564 <__aeabi_i2d>
 800b93a:	4632      	mov	r2, r6
 800b93c:	463b      	mov	r3, r7
 800b93e:	f7f5 f8e3 	bl	8000b08 <__aeabi_dcmpeq>
 800b942:	b908      	cbnz	r0, 800b948 <_dtoa_r+0x190>
 800b944:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b948:	f1bb 0f16 	cmp.w	fp, #22
 800b94c:	d857      	bhi.n	800b9fe <_dtoa_r+0x246>
 800b94e:	4b5b      	ldr	r3, [pc, #364]	; (800babc <_dtoa_r+0x304>)
 800b950:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b958:	ec51 0b18 	vmov	r0, r1, d8
 800b95c:	f7f5 f8de 	bl	8000b1c <__aeabi_dcmplt>
 800b960:	2800      	cmp	r0, #0
 800b962:	d04e      	beq.n	800ba02 <_dtoa_r+0x24a>
 800b964:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b968:	2300      	movs	r3, #0
 800b96a:	930c      	str	r3, [sp, #48]	; 0x30
 800b96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b96e:	1b5b      	subs	r3, r3, r5
 800b970:	1e5a      	subs	r2, r3, #1
 800b972:	bf45      	ittet	mi
 800b974:	f1c3 0301 	rsbmi	r3, r3, #1
 800b978:	9305      	strmi	r3, [sp, #20]
 800b97a:	2300      	movpl	r3, #0
 800b97c:	2300      	movmi	r3, #0
 800b97e:	9206      	str	r2, [sp, #24]
 800b980:	bf54      	ite	pl
 800b982:	9305      	strpl	r3, [sp, #20]
 800b984:	9306      	strmi	r3, [sp, #24]
 800b986:	f1bb 0f00 	cmp.w	fp, #0
 800b98a:	db3c      	blt.n	800ba06 <_dtoa_r+0x24e>
 800b98c:	9b06      	ldr	r3, [sp, #24]
 800b98e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800b992:	445b      	add	r3, fp
 800b994:	9306      	str	r3, [sp, #24]
 800b996:	2300      	movs	r3, #0
 800b998:	9308      	str	r3, [sp, #32]
 800b99a:	9b07      	ldr	r3, [sp, #28]
 800b99c:	2b09      	cmp	r3, #9
 800b99e:	d868      	bhi.n	800ba72 <_dtoa_r+0x2ba>
 800b9a0:	2b05      	cmp	r3, #5
 800b9a2:	bfc4      	itt	gt
 800b9a4:	3b04      	subgt	r3, #4
 800b9a6:	9307      	strgt	r3, [sp, #28]
 800b9a8:	9b07      	ldr	r3, [sp, #28]
 800b9aa:	f1a3 0302 	sub.w	r3, r3, #2
 800b9ae:	bfcc      	ite	gt
 800b9b0:	2500      	movgt	r5, #0
 800b9b2:	2501      	movle	r5, #1
 800b9b4:	2b03      	cmp	r3, #3
 800b9b6:	f200 8085 	bhi.w	800bac4 <_dtoa_r+0x30c>
 800b9ba:	e8df f003 	tbb	[pc, r3]
 800b9be:	3b2e      	.short	0x3b2e
 800b9c0:	5839      	.short	0x5839
 800b9c2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b9c6:	441d      	add	r5, r3
 800b9c8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b9cc:	2b20      	cmp	r3, #32
 800b9ce:	bfc1      	itttt	gt
 800b9d0:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b9d4:	fa08 f803 	lslgt.w	r8, r8, r3
 800b9d8:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800b9dc:	fa26 f303 	lsrgt.w	r3, r6, r3
 800b9e0:	bfd6      	itet	le
 800b9e2:	f1c3 0320 	rsble	r3, r3, #32
 800b9e6:	ea48 0003 	orrgt.w	r0, r8, r3
 800b9ea:	fa06 f003 	lslle.w	r0, r6, r3
 800b9ee:	f7f4 fda9 	bl	8000544 <__aeabi_ui2d>
 800b9f2:	2201      	movs	r2, #1
 800b9f4:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800b9f8:	3d01      	subs	r5, #1
 800b9fa:	920e      	str	r2, [sp, #56]	; 0x38
 800b9fc:	e76f      	b.n	800b8de <_dtoa_r+0x126>
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e7b3      	b.n	800b96a <_dtoa_r+0x1b2>
 800ba02:	900c      	str	r0, [sp, #48]	; 0x30
 800ba04:	e7b2      	b.n	800b96c <_dtoa_r+0x1b4>
 800ba06:	9b05      	ldr	r3, [sp, #20]
 800ba08:	eba3 030b 	sub.w	r3, r3, fp
 800ba0c:	9305      	str	r3, [sp, #20]
 800ba0e:	f1cb 0300 	rsb	r3, fp, #0
 800ba12:	9308      	str	r3, [sp, #32]
 800ba14:	2300      	movs	r3, #0
 800ba16:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba18:	e7bf      	b.n	800b99a <_dtoa_r+0x1e2>
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba1e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba20:	2b00      	cmp	r3, #0
 800ba22:	dc52      	bgt.n	800baca <_dtoa_r+0x312>
 800ba24:	2301      	movs	r3, #1
 800ba26:	9301      	str	r3, [sp, #4]
 800ba28:	9304      	str	r3, [sp, #16]
 800ba2a:	461a      	mov	r2, r3
 800ba2c:	920a      	str	r2, [sp, #40]	; 0x28
 800ba2e:	e00b      	b.n	800ba48 <_dtoa_r+0x290>
 800ba30:	2301      	movs	r3, #1
 800ba32:	e7f3      	b.n	800ba1c <_dtoa_r+0x264>
 800ba34:	2300      	movs	r3, #0
 800ba36:	9309      	str	r3, [sp, #36]	; 0x24
 800ba38:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba3a:	445b      	add	r3, fp
 800ba3c:	9301      	str	r3, [sp, #4]
 800ba3e:	3301      	adds	r3, #1
 800ba40:	2b01      	cmp	r3, #1
 800ba42:	9304      	str	r3, [sp, #16]
 800ba44:	bfb8      	it	lt
 800ba46:	2301      	movlt	r3, #1
 800ba48:	69e0      	ldr	r0, [r4, #28]
 800ba4a:	2100      	movs	r1, #0
 800ba4c:	2204      	movs	r2, #4
 800ba4e:	f102 0614 	add.w	r6, r2, #20
 800ba52:	429e      	cmp	r6, r3
 800ba54:	d93d      	bls.n	800bad2 <_dtoa_r+0x31a>
 800ba56:	6041      	str	r1, [r0, #4]
 800ba58:	4620      	mov	r0, r4
 800ba5a:	f001 f855 	bl	800cb08 <_Balloc>
 800ba5e:	9000      	str	r0, [sp, #0]
 800ba60:	2800      	cmp	r0, #0
 800ba62:	d139      	bne.n	800bad8 <_dtoa_r+0x320>
 800ba64:	4b16      	ldr	r3, [pc, #88]	; (800bac0 <_dtoa_r+0x308>)
 800ba66:	4602      	mov	r2, r0
 800ba68:	f240 11af 	movw	r1, #431	; 0x1af
 800ba6c:	e6bd      	b.n	800b7ea <_dtoa_r+0x32>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	e7e1      	b.n	800ba36 <_dtoa_r+0x27e>
 800ba72:	2501      	movs	r5, #1
 800ba74:	2300      	movs	r3, #0
 800ba76:	9307      	str	r3, [sp, #28]
 800ba78:	9509      	str	r5, [sp, #36]	; 0x24
 800ba7a:	f04f 33ff 	mov.w	r3, #4294967295
 800ba7e:	9301      	str	r3, [sp, #4]
 800ba80:	9304      	str	r3, [sp, #16]
 800ba82:	2200      	movs	r2, #0
 800ba84:	2312      	movs	r3, #18
 800ba86:	e7d1      	b.n	800ba2c <_dtoa_r+0x274>
 800ba88:	636f4361 	.word	0x636f4361
 800ba8c:	3fd287a7 	.word	0x3fd287a7
 800ba90:	8b60c8b3 	.word	0x8b60c8b3
 800ba94:	3fc68a28 	.word	0x3fc68a28
 800ba98:	509f79fb 	.word	0x509f79fb
 800ba9c:	3fd34413 	.word	0x3fd34413
 800baa0:	08045c1e 	.word	0x08045c1e
 800baa4:	08045c35 	.word	0x08045c35
 800baa8:	7ff00000 	.word	0x7ff00000
 800baac:	08045c1a 	.word	0x08045c1a
 800bab0:	08045c11 	.word	0x08045c11
 800bab4:	08045be1 	.word	0x08045be1
 800bab8:	3ff80000 	.word	0x3ff80000
 800babc:	08045d80 	.word	0x08045d80
 800bac0:	08045c8d 	.word	0x08045c8d
 800bac4:	2301      	movs	r3, #1
 800bac6:	9309      	str	r3, [sp, #36]	; 0x24
 800bac8:	e7d7      	b.n	800ba7a <_dtoa_r+0x2c2>
 800baca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bacc:	9301      	str	r3, [sp, #4]
 800bace:	9304      	str	r3, [sp, #16]
 800bad0:	e7ba      	b.n	800ba48 <_dtoa_r+0x290>
 800bad2:	3101      	adds	r1, #1
 800bad4:	0052      	lsls	r2, r2, #1
 800bad6:	e7ba      	b.n	800ba4e <_dtoa_r+0x296>
 800bad8:	69e3      	ldr	r3, [r4, #28]
 800bada:	9a00      	ldr	r2, [sp, #0]
 800badc:	601a      	str	r2, [r3, #0]
 800bade:	9b04      	ldr	r3, [sp, #16]
 800bae0:	2b0e      	cmp	r3, #14
 800bae2:	f200 80a8 	bhi.w	800bc36 <_dtoa_r+0x47e>
 800bae6:	2d00      	cmp	r5, #0
 800bae8:	f000 80a5 	beq.w	800bc36 <_dtoa_r+0x47e>
 800baec:	f1bb 0f00 	cmp.w	fp, #0
 800baf0:	dd38      	ble.n	800bb64 <_dtoa_r+0x3ac>
 800baf2:	4bc0      	ldr	r3, [pc, #768]	; (800bdf4 <_dtoa_r+0x63c>)
 800baf4:	f00b 020f 	and.w	r2, fp, #15
 800baf8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bafc:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800bb00:	e9d3 6700 	ldrd	r6, r7, [r3]
 800bb04:	ea4f 182b 	mov.w	r8, fp, asr #4
 800bb08:	d019      	beq.n	800bb3e <_dtoa_r+0x386>
 800bb0a:	4bbb      	ldr	r3, [pc, #748]	; (800bdf8 <_dtoa_r+0x640>)
 800bb0c:	ec51 0b18 	vmov	r0, r1, d8
 800bb10:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bb14:	f7f4 feba 	bl	800088c <__aeabi_ddiv>
 800bb18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb1c:	f008 080f 	and.w	r8, r8, #15
 800bb20:	2503      	movs	r5, #3
 800bb22:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800bdf8 <_dtoa_r+0x640>
 800bb26:	f1b8 0f00 	cmp.w	r8, #0
 800bb2a:	d10a      	bne.n	800bb42 <_dtoa_r+0x38a>
 800bb2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bb30:	4632      	mov	r2, r6
 800bb32:	463b      	mov	r3, r7
 800bb34:	f7f4 feaa 	bl	800088c <__aeabi_ddiv>
 800bb38:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb3c:	e02b      	b.n	800bb96 <_dtoa_r+0x3de>
 800bb3e:	2502      	movs	r5, #2
 800bb40:	e7ef      	b.n	800bb22 <_dtoa_r+0x36a>
 800bb42:	f018 0f01 	tst.w	r8, #1
 800bb46:	d008      	beq.n	800bb5a <_dtoa_r+0x3a2>
 800bb48:	4630      	mov	r0, r6
 800bb4a:	4639      	mov	r1, r7
 800bb4c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800bb50:	f7f4 fd72 	bl	8000638 <__aeabi_dmul>
 800bb54:	3501      	adds	r5, #1
 800bb56:	4606      	mov	r6, r0
 800bb58:	460f      	mov	r7, r1
 800bb5a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bb5e:	f109 0908 	add.w	r9, r9, #8
 800bb62:	e7e0      	b.n	800bb26 <_dtoa_r+0x36e>
 800bb64:	f000 809f 	beq.w	800bca6 <_dtoa_r+0x4ee>
 800bb68:	f1cb 0600 	rsb	r6, fp, #0
 800bb6c:	4ba1      	ldr	r3, [pc, #644]	; (800bdf4 <_dtoa_r+0x63c>)
 800bb6e:	4fa2      	ldr	r7, [pc, #648]	; (800bdf8 <_dtoa_r+0x640>)
 800bb70:	f006 020f 	and.w	r2, r6, #15
 800bb74:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	ec51 0b18 	vmov	r0, r1, d8
 800bb80:	f7f4 fd5a 	bl	8000638 <__aeabi_dmul>
 800bb84:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb88:	1136      	asrs	r6, r6, #4
 800bb8a:	2300      	movs	r3, #0
 800bb8c:	2502      	movs	r5, #2
 800bb8e:	2e00      	cmp	r6, #0
 800bb90:	d17e      	bne.n	800bc90 <_dtoa_r+0x4d8>
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d1d0      	bne.n	800bb38 <_dtoa_r+0x380>
 800bb96:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bb98:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	f000 8084 	beq.w	800bcaa <_dtoa_r+0x4f2>
 800bba2:	4b96      	ldr	r3, [pc, #600]	; (800bdfc <_dtoa_r+0x644>)
 800bba4:	2200      	movs	r2, #0
 800bba6:	4640      	mov	r0, r8
 800bba8:	4649      	mov	r1, r9
 800bbaa:	f7f4 ffb7 	bl	8000b1c <__aeabi_dcmplt>
 800bbae:	2800      	cmp	r0, #0
 800bbb0:	d07b      	beq.n	800bcaa <_dtoa_r+0x4f2>
 800bbb2:	9b04      	ldr	r3, [sp, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d078      	beq.n	800bcaa <_dtoa_r+0x4f2>
 800bbb8:	9b01      	ldr	r3, [sp, #4]
 800bbba:	2b00      	cmp	r3, #0
 800bbbc:	dd39      	ble.n	800bc32 <_dtoa_r+0x47a>
 800bbbe:	4b90      	ldr	r3, [pc, #576]	; (800be00 <_dtoa_r+0x648>)
 800bbc0:	2200      	movs	r2, #0
 800bbc2:	4640      	mov	r0, r8
 800bbc4:	4649      	mov	r1, r9
 800bbc6:	f7f4 fd37 	bl	8000638 <__aeabi_dmul>
 800bbca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbce:	9e01      	ldr	r6, [sp, #4]
 800bbd0:	f10b 37ff 	add.w	r7, fp, #4294967295
 800bbd4:	3501      	adds	r5, #1
 800bbd6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800bbda:	4628      	mov	r0, r5
 800bbdc:	f7f4 fcc2 	bl	8000564 <__aeabi_i2d>
 800bbe0:	4642      	mov	r2, r8
 800bbe2:	464b      	mov	r3, r9
 800bbe4:	f7f4 fd28 	bl	8000638 <__aeabi_dmul>
 800bbe8:	4b86      	ldr	r3, [pc, #536]	; (800be04 <_dtoa_r+0x64c>)
 800bbea:	2200      	movs	r2, #0
 800bbec:	f7f4 fb6e 	bl	80002cc <__adddf3>
 800bbf0:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800bbf4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbf8:	9303      	str	r3, [sp, #12]
 800bbfa:	2e00      	cmp	r6, #0
 800bbfc:	d158      	bne.n	800bcb0 <_dtoa_r+0x4f8>
 800bbfe:	4b82      	ldr	r3, [pc, #520]	; (800be08 <_dtoa_r+0x650>)
 800bc00:	2200      	movs	r2, #0
 800bc02:	4640      	mov	r0, r8
 800bc04:	4649      	mov	r1, r9
 800bc06:	f7f4 fb5f 	bl	80002c8 <__aeabi_dsub>
 800bc0a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc0e:	4680      	mov	r8, r0
 800bc10:	4689      	mov	r9, r1
 800bc12:	f7f4 ffa1 	bl	8000b58 <__aeabi_dcmpgt>
 800bc16:	2800      	cmp	r0, #0
 800bc18:	f040 8296 	bne.w	800c148 <_dtoa_r+0x990>
 800bc1c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800bc20:	4640      	mov	r0, r8
 800bc22:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bc26:	4649      	mov	r1, r9
 800bc28:	f7f4 ff78 	bl	8000b1c <__aeabi_dcmplt>
 800bc2c:	2800      	cmp	r0, #0
 800bc2e:	f040 8289 	bne.w	800c144 <_dtoa_r+0x98c>
 800bc32:	ed8d 8b02 	vstr	d8, [sp, #8]
 800bc36:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc38:	2b00      	cmp	r3, #0
 800bc3a:	f2c0 814e 	blt.w	800beda <_dtoa_r+0x722>
 800bc3e:	f1bb 0f0e 	cmp.w	fp, #14
 800bc42:	f300 814a 	bgt.w	800beda <_dtoa_r+0x722>
 800bc46:	4b6b      	ldr	r3, [pc, #428]	; (800bdf4 <_dtoa_r+0x63c>)
 800bc48:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800bc4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bc50:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	f280 80dc 	bge.w	800be10 <_dtoa_r+0x658>
 800bc58:	9b04      	ldr	r3, [sp, #16]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	f300 80d8 	bgt.w	800be10 <_dtoa_r+0x658>
 800bc60:	f040 826f 	bne.w	800c142 <_dtoa_r+0x98a>
 800bc64:	4b68      	ldr	r3, [pc, #416]	; (800be08 <_dtoa_r+0x650>)
 800bc66:	2200      	movs	r2, #0
 800bc68:	4640      	mov	r0, r8
 800bc6a:	4649      	mov	r1, r9
 800bc6c:	f7f4 fce4 	bl	8000638 <__aeabi_dmul>
 800bc70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bc74:	f7f4 ff66 	bl	8000b44 <__aeabi_dcmpge>
 800bc78:	9e04      	ldr	r6, [sp, #16]
 800bc7a:	4637      	mov	r7, r6
 800bc7c:	2800      	cmp	r0, #0
 800bc7e:	f040 8245 	bne.w	800c10c <_dtoa_r+0x954>
 800bc82:	9d00      	ldr	r5, [sp, #0]
 800bc84:	2331      	movs	r3, #49	; 0x31
 800bc86:	f805 3b01 	strb.w	r3, [r5], #1
 800bc8a:	f10b 0b01 	add.w	fp, fp, #1
 800bc8e:	e241      	b.n	800c114 <_dtoa_r+0x95c>
 800bc90:	07f2      	lsls	r2, r6, #31
 800bc92:	d505      	bpl.n	800bca0 <_dtoa_r+0x4e8>
 800bc94:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc98:	f7f4 fcce 	bl	8000638 <__aeabi_dmul>
 800bc9c:	3501      	adds	r5, #1
 800bc9e:	2301      	movs	r3, #1
 800bca0:	1076      	asrs	r6, r6, #1
 800bca2:	3708      	adds	r7, #8
 800bca4:	e773      	b.n	800bb8e <_dtoa_r+0x3d6>
 800bca6:	2502      	movs	r5, #2
 800bca8:	e775      	b.n	800bb96 <_dtoa_r+0x3de>
 800bcaa:	9e04      	ldr	r6, [sp, #16]
 800bcac:	465f      	mov	r7, fp
 800bcae:	e792      	b.n	800bbd6 <_dtoa_r+0x41e>
 800bcb0:	9900      	ldr	r1, [sp, #0]
 800bcb2:	4b50      	ldr	r3, [pc, #320]	; (800bdf4 <_dtoa_r+0x63c>)
 800bcb4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bcb8:	4431      	add	r1, r6
 800bcba:	9102      	str	r1, [sp, #8]
 800bcbc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bcbe:	eeb0 9a47 	vmov.f32	s18, s14
 800bcc2:	eef0 9a67 	vmov.f32	s19, s15
 800bcc6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800bcca:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800bcce:	2900      	cmp	r1, #0
 800bcd0:	d044      	beq.n	800bd5c <_dtoa_r+0x5a4>
 800bcd2:	494e      	ldr	r1, [pc, #312]	; (800be0c <_dtoa_r+0x654>)
 800bcd4:	2000      	movs	r0, #0
 800bcd6:	f7f4 fdd9 	bl	800088c <__aeabi_ddiv>
 800bcda:	ec53 2b19 	vmov	r2, r3, d9
 800bcde:	f7f4 faf3 	bl	80002c8 <__aeabi_dsub>
 800bce2:	9d00      	ldr	r5, [sp, #0]
 800bce4:	ec41 0b19 	vmov	d9, r0, r1
 800bce8:	4649      	mov	r1, r9
 800bcea:	4640      	mov	r0, r8
 800bcec:	f7f4 ff54 	bl	8000b98 <__aeabi_d2iz>
 800bcf0:	4606      	mov	r6, r0
 800bcf2:	f7f4 fc37 	bl	8000564 <__aeabi_i2d>
 800bcf6:	4602      	mov	r2, r0
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4640      	mov	r0, r8
 800bcfc:	4649      	mov	r1, r9
 800bcfe:	f7f4 fae3 	bl	80002c8 <__aeabi_dsub>
 800bd02:	3630      	adds	r6, #48	; 0x30
 800bd04:	f805 6b01 	strb.w	r6, [r5], #1
 800bd08:	ec53 2b19 	vmov	r2, r3, d9
 800bd0c:	4680      	mov	r8, r0
 800bd0e:	4689      	mov	r9, r1
 800bd10:	f7f4 ff04 	bl	8000b1c <__aeabi_dcmplt>
 800bd14:	2800      	cmp	r0, #0
 800bd16:	d164      	bne.n	800bde2 <_dtoa_r+0x62a>
 800bd18:	4642      	mov	r2, r8
 800bd1a:	464b      	mov	r3, r9
 800bd1c:	4937      	ldr	r1, [pc, #220]	; (800bdfc <_dtoa_r+0x644>)
 800bd1e:	2000      	movs	r0, #0
 800bd20:	f7f4 fad2 	bl	80002c8 <__aeabi_dsub>
 800bd24:	ec53 2b19 	vmov	r2, r3, d9
 800bd28:	f7f4 fef8 	bl	8000b1c <__aeabi_dcmplt>
 800bd2c:	2800      	cmp	r0, #0
 800bd2e:	f040 80b6 	bne.w	800be9e <_dtoa_r+0x6e6>
 800bd32:	9b02      	ldr	r3, [sp, #8]
 800bd34:	429d      	cmp	r5, r3
 800bd36:	f43f af7c 	beq.w	800bc32 <_dtoa_r+0x47a>
 800bd3a:	4b31      	ldr	r3, [pc, #196]	; (800be00 <_dtoa_r+0x648>)
 800bd3c:	ec51 0b19 	vmov	r0, r1, d9
 800bd40:	2200      	movs	r2, #0
 800bd42:	f7f4 fc79 	bl	8000638 <__aeabi_dmul>
 800bd46:	4b2e      	ldr	r3, [pc, #184]	; (800be00 <_dtoa_r+0x648>)
 800bd48:	ec41 0b19 	vmov	d9, r0, r1
 800bd4c:	2200      	movs	r2, #0
 800bd4e:	4640      	mov	r0, r8
 800bd50:	4649      	mov	r1, r9
 800bd52:	f7f4 fc71 	bl	8000638 <__aeabi_dmul>
 800bd56:	4680      	mov	r8, r0
 800bd58:	4689      	mov	r9, r1
 800bd5a:	e7c5      	b.n	800bce8 <_dtoa_r+0x530>
 800bd5c:	ec51 0b17 	vmov	r0, r1, d7
 800bd60:	f7f4 fc6a 	bl	8000638 <__aeabi_dmul>
 800bd64:	9b02      	ldr	r3, [sp, #8]
 800bd66:	9d00      	ldr	r5, [sp, #0]
 800bd68:	930f      	str	r3, [sp, #60]	; 0x3c
 800bd6a:	ec41 0b19 	vmov	d9, r0, r1
 800bd6e:	4649      	mov	r1, r9
 800bd70:	4640      	mov	r0, r8
 800bd72:	f7f4 ff11 	bl	8000b98 <__aeabi_d2iz>
 800bd76:	4606      	mov	r6, r0
 800bd78:	f7f4 fbf4 	bl	8000564 <__aeabi_i2d>
 800bd7c:	3630      	adds	r6, #48	; 0x30
 800bd7e:	4602      	mov	r2, r0
 800bd80:	460b      	mov	r3, r1
 800bd82:	4640      	mov	r0, r8
 800bd84:	4649      	mov	r1, r9
 800bd86:	f7f4 fa9f 	bl	80002c8 <__aeabi_dsub>
 800bd8a:	f805 6b01 	strb.w	r6, [r5], #1
 800bd8e:	9b02      	ldr	r3, [sp, #8]
 800bd90:	429d      	cmp	r5, r3
 800bd92:	4680      	mov	r8, r0
 800bd94:	4689      	mov	r9, r1
 800bd96:	f04f 0200 	mov.w	r2, #0
 800bd9a:	d124      	bne.n	800bde6 <_dtoa_r+0x62e>
 800bd9c:	4b1b      	ldr	r3, [pc, #108]	; (800be0c <_dtoa_r+0x654>)
 800bd9e:	ec51 0b19 	vmov	r0, r1, d9
 800bda2:	f7f4 fa93 	bl	80002cc <__adddf3>
 800bda6:	4602      	mov	r2, r0
 800bda8:	460b      	mov	r3, r1
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	f7f4 fed3 	bl	8000b58 <__aeabi_dcmpgt>
 800bdb2:	2800      	cmp	r0, #0
 800bdb4:	d173      	bne.n	800be9e <_dtoa_r+0x6e6>
 800bdb6:	ec53 2b19 	vmov	r2, r3, d9
 800bdba:	4914      	ldr	r1, [pc, #80]	; (800be0c <_dtoa_r+0x654>)
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f7f4 fa83 	bl	80002c8 <__aeabi_dsub>
 800bdc2:	4602      	mov	r2, r0
 800bdc4:	460b      	mov	r3, r1
 800bdc6:	4640      	mov	r0, r8
 800bdc8:	4649      	mov	r1, r9
 800bdca:	f7f4 fea7 	bl	8000b1c <__aeabi_dcmplt>
 800bdce:	2800      	cmp	r0, #0
 800bdd0:	f43f af2f 	beq.w	800bc32 <_dtoa_r+0x47a>
 800bdd4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800bdd6:	1e6b      	subs	r3, r5, #1
 800bdd8:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdda:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800bdde:	2b30      	cmp	r3, #48	; 0x30
 800bde0:	d0f8      	beq.n	800bdd4 <_dtoa_r+0x61c>
 800bde2:	46bb      	mov	fp, r7
 800bde4:	e04a      	b.n	800be7c <_dtoa_r+0x6c4>
 800bde6:	4b06      	ldr	r3, [pc, #24]	; (800be00 <_dtoa_r+0x648>)
 800bde8:	f7f4 fc26 	bl	8000638 <__aeabi_dmul>
 800bdec:	4680      	mov	r8, r0
 800bdee:	4689      	mov	r9, r1
 800bdf0:	e7bd      	b.n	800bd6e <_dtoa_r+0x5b6>
 800bdf2:	bf00      	nop
 800bdf4:	08045d80 	.word	0x08045d80
 800bdf8:	08045d58 	.word	0x08045d58
 800bdfc:	3ff00000 	.word	0x3ff00000
 800be00:	40240000 	.word	0x40240000
 800be04:	401c0000 	.word	0x401c0000
 800be08:	40140000 	.word	0x40140000
 800be0c:	3fe00000 	.word	0x3fe00000
 800be10:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800be14:	9d00      	ldr	r5, [sp, #0]
 800be16:	4642      	mov	r2, r8
 800be18:	464b      	mov	r3, r9
 800be1a:	4630      	mov	r0, r6
 800be1c:	4639      	mov	r1, r7
 800be1e:	f7f4 fd35 	bl	800088c <__aeabi_ddiv>
 800be22:	f7f4 feb9 	bl	8000b98 <__aeabi_d2iz>
 800be26:	9001      	str	r0, [sp, #4]
 800be28:	f7f4 fb9c 	bl	8000564 <__aeabi_i2d>
 800be2c:	4642      	mov	r2, r8
 800be2e:	464b      	mov	r3, r9
 800be30:	f7f4 fc02 	bl	8000638 <__aeabi_dmul>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 fa44 	bl	80002c8 <__aeabi_dsub>
 800be40:	9e01      	ldr	r6, [sp, #4]
 800be42:	9f04      	ldr	r7, [sp, #16]
 800be44:	3630      	adds	r6, #48	; 0x30
 800be46:	f805 6b01 	strb.w	r6, [r5], #1
 800be4a:	9e00      	ldr	r6, [sp, #0]
 800be4c:	1bae      	subs	r6, r5, r6
 800be4e:	42b7      	cmp	r7, r6
 800be50:	4602      	mov	r2, r0
 800be52:	460b      	mov	r3, r1
 800be54:	d134      	bne.n	800bec0 <_dtoa_r+0x708>
 800be56:	f7f4 fa39 	bl	80002cc <__adddf3>
 800be5a:	4642      	mov	r2, r8
 800be5c:	464b      	mov	r3, r9
 800be5e:	4606      	mov	r6, r0
 800be60:	460f      	mov	r7, r1
 800be62:	f7f4 fe79 	bl	8000b58 <__aeabi_dcmpgt>
 800be66:	b9c8      	cbnz	r0, 800be9c <_dtoa_r+0x6e4>
 800be68:	4642      	mov	r2, r8
 800be6a:	464b      	mov	r3, r9
 800be6c:	4630      	mov	r0, r6
 800be6e:	4639      	mov	r1, r7
 800be70:	f7f4 fe4a 	bl	8000b08 <__aeabi_dcmpeq>
 800be74:	b110      	cbz	r0, 800be7c <_dtoa_r+0x6c4>
 800be76:	9b01      	ldr	r3, [sp, #4]
 800be78:	07db      	lsls	r3, r3, #31
 800be7a:	d40f      	bmi.n	800be9c <_dtoa_r+0x6e4>
 800be7c:	4651      	mov	r1, sl
 800be7e:	4620      	mov	r0, r4
 800be80:	f000 fe82 	bl	800cb88 <_Bfree>
 800be84:	2300      	movs	r3, #0
 800be86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800be88:	702b      	strb	r3, [r5, #0]
 800be8a:	f10b 0301 	add.w	r3, fp, #1
 800be8e:	6013      	str	r3, [r2, #0]
 800be90:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800be92:	2b00      	cmp	r3, #0
 800be94:	f43f ace2 	beq.w	800b85c <_dtoa_r+0xa4>
 800be98:	601d      	str	r5, [r3, #0]
 800be9a:	e4df      	b.n	800b85c <_dtoa_r+0xa4>
 800be9c:	465f      	mov	r7, fp
 800be9e:	462b      	mov	r3, r5
 800bea0:	461d      	mov	r5, r3
 800bea2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bea6:	2a39      	cmp	r2, #57	; 0x39
 800bea8:	d106      	bne.n	800beb8 <_dtoa_r+0x700>
 800beaa:	9a00      	ldr	r2, [sp, #0]
 800beac:	429a      	cmp	r2, r3
 800beae:	d1f7      	bne.n	800bea0 <_dtoa_r+0x6e8>
 800beb0:	9900      	ldr	r1, [sp, #0]
 800beb2:	2230      	movs	r2, #48	; 0x30
 800beb4:	3701      	adds	r7, #1
 800beb6:	700a      	strb	r2, [r1, #0]
 800beb8:	781a      	ldrb	r2, [r3, #0]
 800beba:	3201      	adds	r2, #1
 800bebc:	701a      	strb	r2, [r3, #0]
 800bebe:	e790      	b.n	800bde2 <_dtoa_r+0x62a>
 800bec0:	4ba3      	ldr	r3, [pc, #652]	; (800c150 <_dtoa_r+0x998>)
 800bec2:	2200      	movs	r2, #0
 800bec4:	f7f4 fbb8 	bl	8000638 <__aeabi_dmul>
 800bec8:	2200      	movs	r2, #0
 800beca:	2300      	movs	r3, #0
 800becc:	4606      	mov	r6, r0
 800bece:	460f      	mov	r7, r1
 800bed0:	f7f4 fe1a 	bl	8000b08 <__aeabi_dcmpeq>
 800bed4:	2800      	cmp	r0, #0
 800bed6:	d09e      	beq.n	800be16 <_dtoa_r+0x65e>
 800bed8:	e7d0      	b.n	800be7c <_dtoa_r+0x6c4>
 800beda:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bedc:	2a00      	cmp	r2, #0
 800bede:	f000 80ca 	beq.w	800c076 <_dtoa_r+0x8be>
 800bee2:	9a07      	ldr	r2, [sp, #28]
 800bee4:	2a01      	cmp	r2, #1
 800bee6:	f300 80ad 	bgt.w	800c044 <_dtoa_r+0x88c>
 800beea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800beec:	2a00      	cmp	r2, #0
 800beee:	f000 80a5 	beq.w	800c03c <_dtoa_r+0x884>
 800bef2:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800bef6:	9e08      	ldr	r6, [sp, #32]
 800bef8:	9d05      	ldr	r5, [sp, #20]
 800befa:	9a05      	ldr	r2, [sp, #20]
 800befc:	441a      	add	r2, r3
 800befe:	9205      	str	r2, [sp, #20]
 800bf00:	9a06      	ldr	r2, [sp, #24]
 800bf02:	2101      	movs	r1, #1
 800bf04:	441a      	add	r2, r3
 800bf06:	4620      	mov	r0, r4
 800bf08:	9206      	str	r2, [sp, #24]
 800bf0a:	f000 ff3d 	bl	800cd88 <__i2b>
 800bf0e:	4607      	mov	r7, r0
 800bf10:	b165      	cbz	r5, 800bf2c <_dtoa_r+0x774>
 800bf12:	9b06      	ldr	r3, [sp, #24]
 800bf14:	2b00      	cmp	r3, #0
 800bf16:	dd09      	ble.n	800bf2c <_dtoa_r+0x774>
 800bf18:	42ab      	cmp	r3, r5
 800bf1a:	9a05      	ldr	r2, [sp, #20]
 800bf1c:	bfa8      	it	ge
 800bf1e:	462b      	movge	r3, r5
 800bf20:	1ad2      	subs	r2, r2, r3
 800bf22:	9205      	str	r2, [sp, #20]
 800bf24:	9a06      	ldr	r2, [sp, #24]
 800bf26:	1aed      	subs	r5, r5, r3
 800bf28:	1ad3      	subs	r3, r2, r3
 800bf2a:	9306      	str	r3, [sp, #24]
 800bf2c:	9b08      	ldr	r3, [sp, #32]
 800bf2e:	b1f3      	cbz	r3, 800bf6e <_dtoa_r+0x7b6>
 800bf30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	f000 80a3 	beq.w	800c07e <_dtoa_r+0x8c6>
 800bf38:	2e00      	cmp	r6, #0
 800bf3a:	dd10      	ble.n	800bf5e <_dtoa_r+0x7a6>
 800bf3c:	4639      	mov	r1, r7
 800bf3e:	4632      	mov	r2, r6
 800bf40:	4620      	mov	r0, r4
 800bf42:	f000 ffe1 	bl	800cf08 <__pow5mult>
 800bf46:	4652      	mov	r2, sl
 800bf48:	4601      	mov	r1, r0
 800bf4a:	4607      	mov	r7, r0
 800bf4c:	4620      	mov	r0, r4
 800bf4e:	f000 ff31 	bl	800cdb4 <__multiply>
 800bf52:	4651      	mov	r1, sl
 800bf54:	4680      	mov	r8, r0
 800bf56:	4620      	mov	r0, r4
 800bf58:	f000 fe16 	bl	800cb88 <_Bfree>
 800bf5c:	46c2      	mov	sl, r8
 800bf5e:	9b08      	ldr	r3, [sp, #32]
 800bf60:	1b9a      	subs	r2, r3, r6
 800bf62:	d004      	beq.n	800bf6e <_dtoa_r+0x7b6>
 800bf64:	4651      	mov	r1, sl
 800bf66:	4620      	mov	r0, r4
 800bf68:	f000 ffce 	bl	800cf08 <__pow5mult>
 800bf6c:	4682      	mov	sl, r0
 800bf6e:	2101      	movs	r1, #1
 800bf70:	4620      	mov	r0, r4
 800bf72:	f000 ff09 	bl	800cd88 <__i2b>
 800bf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	4606      	mov	r6, r0
 800bf7c:	f340 8081 	ble.w	800c082 <_dtoa_r+0x8ca>
 800bf80:	461a      	mov	r2, r3
 800bf82:	4601      	mov	r1, r0
 800bf84:	4620      	mov	r0, r4
 800bf86:	f000 ffbf 	bl	800cf08 <__pow5mult>
 800bf8a:	9b07      	ldr	r3, [sp, #28]
 800bf8c:	2b01      	cmp	r3, #1
 800bf8e:	4606      	mov	r6, r0
 800bf90:	dd7a      	ble.n	800c088 <_dtoa_r+0x8d0>
 800bf92:	f04f 0800 	mov.w	r8, #0
 800bf96:	6933      	ldr	r3, [r6, #16]
 800bf98:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800bf9c:	6918      	ldr	r0, [r3, #16]
 800bf9e:	f000 fea5 	bl	800ccec <__hi0bits>
 800bfa2:	f1c0 0020 	rsb	r0, r0, #32
 800bfa6:	9b06      	ldr	r3, [sp, #24]
 800bfa8:	4418      	add	r0, r3
 800bfaa:	f010 001f 	ands.w	r0, r0, #31
 800bfae:	f000 8094 	beq.w	800c0da <_dtoa_r+0x922>
 800bfb2:	f1c0 0320 	rsb	r3, r0, #32
 800bfb6:	2b04      	cmp	r3, #4
 800bfb8:	f340 8085 	ble.w	800c0c6 <_dtoa_r+0x90e>
 800bfbc:	9b05      	ldr	r3, [sp, #20]
 800bfbe:	f1c0 001c 	rsb	r0, r0, #28
 800bfc2:	4403      	add	r3, r0
 800bfc4:	9305      	str	r3, [sp, #20]
 800bfc6:	9b06      	ldr	r3, [sp, #24]
 800bfc8:	4403      	add	r3, r0
 800bfca:	4405      	add	r5, r0
 800bfcc:	9306      	str	r3, [sp, #24]
 800bfce:	9b05      	ldr	r3, [sp, #20]
 800bfd0:	2b00      	cmp	r3, #0
 800bfd2:	dd05      	ble.n	800bfe0 <_dtoa_r+0x828>
 800bfd4:	4651      	mov	r1, sl
 800bfd6:	461a      	mov	r2, r3
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 ffef 	bl	800cfbc <__lshift>
 800bfde:	4682      	mov	sl, r0
 800bfe0:	9b06      	ldr	r3, [sp, #24]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	dd05      	ble.n	800bff2 <_dtoa_r+0x83a>
 800bfe6:	4631      	mov	r1, r6
 800bfe8:	461a      	mov	r2, r3
 800bfea:	4620      	mov	r0, r4
 800bfec:	f000 ffe6 	bl	800cfbc <__lshift>
 800bff0:	4606      	mov	r6, r0
 800bff2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bff4:	2b00      	cmp	r3, #0
 800bff6:	d072      	beq.n	800c0de <_dtoa_r+0x926>
 800bff8:	4631      	mov	r1, r6
 800bffa:	4650      	mov	r0, sl
 800bffc:	f001 f84a 	bl	800d094 <__mcmp>
 800c000:	2800      	cmp	r0, #0
 800c002:	da6c      	bge.n	800c0de <_dtoa_r+0x926>
 800c004:	2300      	movs	r3, #0
 800c006:	4651      	mov	r1, sl
 800c008:	220a      	movs	r2, #10
 800c00a:	4620      	mov	r0, r4
 800c00c:	f000 fdde 	bl	800cbcc <__multadd>
 800c010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c012:	f10b 3bff 	add.w	fp, fp, #4294967295
 800c016:	4682      	mov	sl, r0
 800c018:	2b00      	cmp	r3, #0
 800c01a:	f000 81b0 	beq.w	800c37e <_dtoa_r+0xbc6>
 800c01e:	2300      	movs	r3, #0
 800c020:	4639      	mov	r1, r7
 800c022:	220a      	movs	r2, #10
 800c024:	4620      	mov	r0, r4
 800c026:	f000 fdd1 	bl	800cbcc <__multadd>
 800c02a:	9b01      	ldr	r3, [sp, #4]
 800c02c:	2b00      	cmp	r3, #0
 800c02e:	4607      	mov	r7, r0
 800c030:	f300 8096 	bgt.w	800c160 <_dtoa_r+0x9a8>
 800c034:	9b07      	ldr	r3, [sp, #28]
 800c036:	2b02      	cmp	r3, #2
 800c038:	dc59      	bgt.n	800c0ee <_dtoa_r+0x936>
 800c03a:	e091      	b.n	800c160 <_dtoa_r+0x9a8>
 800c03c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c03e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c042:	e758      	b.n	800bef6 <_dtoa_r+0x73e>
 800c044:	9b04      	ldr	r3, [sp, #16]
 800c046:	1e5e      	subs	r6, r3, #1
 800c048:	9b08      	ldr	r3, [sp, #32]
 800c04a:	42b3      	cmp	r3, r6
 800c04c:	bfbf      	itttt	lt
 800c04e:	9b08      	ldrlt	r3, [sp, #32]
 800c050:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800c052:	9608      	strlt	r6, [sp, #32]
 800c054:	1af3      	sublt	r3, r6, r3
 800c056:	bfb4      	ite	lt
 800c058:	18d2      	addlt	r2, r2, r3
 800c05a:	1b9e      	subge	r6, r3, r6
 800c05c:	9b04      	ldr	r3, [sp, #16]
 800c05e:	bfbc      	itt	lt
 800c060:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800c062:	2600      	movlt	r6, #0
 800c064:	2b00      	cmp	r3, #0
 800c066:	bfb7      	itett	lt
 800c068:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800c06c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800c070:	1a9d      	sublt	r5, r3, r2
 800c072:	2300      	movlt	r3, #0
 800c074:	e741      	b.n	800befa <_dtoa_r+0x742>
 800c076:	9e08      	ldr	r6, [sp, #32]
 800c078:	9d05      	ldr	r5, [sp, #20]
 800c07a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800c07c:	e748      	b.n	800bf10 <_dtoa_r+0x758>
 800c07e:	9a08      	ldr	r2, [sp, #32]
 800c080:	e770      	b.n	800bf64 <_dtoa_r+0x7ac>
 800c082:	9b07      	ldr	r3, [sp, #28]
 800c084:	2b01      	cmp	r3, #1
 800c086:	dc19      	bgt.n	800c0bc <_dtoa_r+0x904>
 800c088:	9b02      	ldr	r3, [sp, #8]
 800c08a:	b9bb      	cbnz	r3, 800c0bc <_dtoa_r+0x904>
 800c08c:	9b03      	ldr	r3, [sp, #12]
 800c08e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c092:	b99b      	cbnz	r3, 800c0bc <_dtoa_r+0x904>
 800c094:	9b03      	ldr	r3, [sp, #12]
 800c096:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800c09a:	0d1b      	lsrs	r3, r3, #20
 800c09c:	051b      	lsls	r3, r3, #20
 800c09e:	b183      	cbz	r3, 800c0c2 <_dtoa_r+0x90a>
 800c0a0:	9b05      	ldr	r3, [sp, #20]
 800c0a2:	3301      	adds	r3, #1
 800c0a4:	9305      	str	r3, [sp, #20]
 800c0a6:	9b06      	ldr	r3, [sp, #24]
 800c0a8:	3301      	adds	r3, #1
 800c0aa:	9306      	str	r3, [sp, #24]
 800c0ac:	f04f 0801 	mov.w	r8, #1
 800c0b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	f47f af6f 	bne.w	800bf96 <_dtoa_r+0x7de>
 800c0b8:	2001      	movs	r0, #1
 800c0ba:	e774      	b.n	800bfa6 <_dtoa_r+0x7ee>
 800c0bc:	f04f 0800 	mov.w	r8, #0
 800c0c0:	e7f6      	b.n	800c0b0 <_dtoa_r+0x8f8>
 800c0c2:	4698      	mov	r8, r3
 800c0c4:	e7f4      	b.n	800c0b0 <_dtoa_r+0x8f8>
 800c0c6:	d082      	beq.n	800bfce <_dtoa_r+0x816>
 800c0c8:	9a05      	ldr	r2, [sp, #20]
 800c0ca:	331c      	adds	r3, #28
 800c0cc:	441a      	add	r2, r3
 800c0ce:	9205      	str	r2, [sp, #20]
 800c0d0:	9a06      	ldr	r2, [sp, #24]
 800c0d2:	441a      	add	r2, r3
 800c0d4:	441d      	add	r5, r3
 800c0d6:	9206      	str	r2, [sp, #24]
 800c0d8:	e779      	b.n	800bfce <_dtoa_r+0x816>
 800c0da:	4603      	mov	r3, r0
 800c0dc:	e7f4      	b.n	800c0c8 <_dtoa_r+0x910>
 800c0de:	9b04      	ldr	r3, [sp, #16]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	dc37      	bgt.n	800c154 <_dtoa_r+0x99c>
 800c0e4:	9b07      	ldr	r3, [sp, #28]
 800c0e6:	2b02      	cmp	r3, #2
 800c0e8:	dd34      	ble.n	800c154 <_dtoa_r+0x99c>
 800c0ea:	9b04      	ldr	r3, [sp, #16]
 800c0ec:	9301      	str	r3, [sp, #4]
 800c0ee:	9b01      	ldr	r3, [sp, #4]
 800c0f0:	b963      	cbnz	r3, 800c10c <_dtoa_r+0x954>
 800c0f2:	4631      	mov	r1, r6
 800c0f4:	2205      	movs	r2, #5
 800c0f6:	4620      	mov	r0, r4
 800c0f8:	f000 fd68 	bl	800cbcc <__multadd>
 800c0fc:	4601      	mov	r1, r0
 800c0fe:	4606      	mov	r6, r0
 800c100:	4650      	mov	r0, sl
 800c102:	f000 ffc7 	bl	800d094 <__mcmp>
 800c106:	2800      	cmp	r0, #0
 800c108:	f73f adbb 	bgt.w	800bc82 <_dtoa_r+0x4ca>
 800c10c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c10e:	9d00      	ldr	r5, [sp, #0]
 800c110:	ea6f 0b03 	mvn.w	fp, r3
 800c114:	f04f 0800 	mov.w	r8, #0
 800c118:	4631      	mov	r1, r6
 800c11a:	4620      	mov	r0, r4
 800c11c:	f000 fd34 	bl	800cb88 <_Bfree>
 800c120:	2f00      	cmp	r7, #0
 800c122:	f43f aeab 	beq.w	800be7c <_dtoa_r+0x6c4>
 800c126:	f1b8 0f00 	cmp.w	r8, #0
 800c12a:	d005      	beq.n	800c138 <_dtoa_r+0x980>
 800c12c:	45b8      	cmp	r8, r7
 800c12e:	d003      	beq.n	800c138 <_dtoa_r+0x980>
 800c130:	4641      	mov	r1, r8
 800c132:	4620      	mov	r0, r4
 800c134:	f000 fd28 	bl	800cb88 <_Bfree>
 800c138:	4639      	mov	r1, r7
 800c13a:	4620      	mov	r0, r4
 800c13c:	f000 fd24 	bl	800cb88 <_Bfree>
 800c140:	e69c      	b.n	800be7c <_dtoa_r+0x6c4>
 800c142:	2600      	movs	r6, #0
 800c144:	4637      	mov	r7, r6
 800c146:	e7e1      	b.n	800c10c <_dtoa_r+0x954>
 800c148:	46bb      	mov	fp, r7
 800c14a:	4637      	mov	r7, r6
 800c14c:	e599      	b.n	800bc82 <_dtoa_r+0x4ca>
 800c14e:	bf00      	nop
 800c150:	40240000 	.word	0x40240000
 800c154:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c156:	2b00      	cmp	r3, #0
 800c158:	f000 80c8 	beq.w	800c2ec <_dtoa_r+0xb34>
 800c15c:	9b04      	ldr	r3, [sp, #16]
 800c15e:	9301      	str	r3, [sp, #4]
 800c160:	2d00      	cmp	r5, #0
 800c162:	dd05      	ble.n	800c170 <_dtoa_r+0x9b8>
 800c164:	4639      	mov	r1, r7
 800c166:	462a      	mov	r2, r5
 800c168:	4620      	mov	r0, r4
 800c16a:	f000 ff27 	bl	800cfbc <__lshift>
 800c16e:	4607      	mov	r7, r0
 800c170:	f1b8 0f00 	cmp.w	r8, #0
 800c174:	d05b      	beq.n	800c22e <_dtoa_r+0xa76>
 800c176:	6879      	ldr	r1, [r7, #4]
 800c178:	4620      	mov	r0, r4
 800c17a:	f000 fcc5 	bl	800cb08 <_Balloc>
 800c17e:	4605      	mov	r5, r0
 800c180:	b928      	cbnz	r0, 800c18e <_dtoa_r+0x9d6>
 800c182:	4b83      	ldr	r3, [pc, #524]	; (800c390 <_dtoa_r+0xbd8>)
 800c184:	4602      	mov	r2, r0
 800c186:	f240 21ef 	movw	r1, #751	; 0x2ef
 800c18a:	f7ff bb2e 	b.w	800b7ea <_dtoa_r+0x32>
 800c18e:	693a      	ldr	r2, [r7, #16]
 800c190:	3202      	adds	r2, #2
 800c192:	0092      	lsls	r2, r2, #2
 800c194:	f107 010c 	add.w	r1, r7, #12
 800c198:	300c      	adds	r0, #12
 800c19a:	f7ff fa66 	bl	800b66a <memcpy>
 800c19e:	2201      	movs	r2, #1
 800c1a0:	4629      	mov	r1, r5
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	f000 ff0a 	bl	800cfbc <__lshift>
 800c1a8:	9b00      	ldr	r3, [sp, #0]
 800c1aa:	3301      	adds	r3, #1
 800c1ac:	9304      	str	r3, [sp, #16]
 800c1ae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c1b2:	4413      	add	r3, r2
 800c1b4:	9308      	str	r3, [sp, #32]
 800c1b6:	9b02      	ldr	r3, [sp, #8]
 800c1b8:	f003 0301 	and.w	r3, r3, #1
 800c1bc:	46b8      	mov	r8, r7
 800c1be:	9306      	str	r3, [sp, #24]
 800c1c0:	4607      	mov	r7, r0
 800c1c2:	9b04      	ldr	r3, [sp, #16]
 800c1c4:	4631      	mov	r1, r6
 800c1c6:	3b01      	subs	r3, #1
 800c1c8:	4650      	mov	r0, sl
 800c1ca:	9301      	str	r3, [sp, #4]
 800c1cc:	f7ff fa6a 	bl	800b6a4 <quorem>
 800c1d0:	4641      	mov	r1, r8
 800c1d2:	9002      	str	r0, [sp, #8]
 800c1d4:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c1d8:	4650      	mov	r0, sl
 800c1da:	f000 ff5b 	bl	800d094 <__mcmp>
 800c1de:	463a      	mov	r2, r7
 800c1e0:	9005      	str	r0, [sp, #20]
 800c1e2:	4631      	mov	r1, r6
 800c1e4:	4620      	mov	r0, r4
 800c1e6:	f000 ff71 	bl	800d0cc <__mdiff>
 800c1ea:	68c2      	ldr	r2, [r0, #12]
 800c1ec:	4605      	mov	r5, r0
 800c1ee:	bb02      	cbnz	r2, 800c232 <_dtoa_r+0xa7a>
 800c1f0:	4601      	mov	r1, r0
 800c1f2:	4650      	mov	r0, sl
 800c1f4:	f000 ff4e 	bl	800d094 <__mcmp>
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	4629      	mov	r1, r5
 800c1fc:	4620      	mov	r0, r4
 800c1fe:	9209      	str	r2, [sp, #36]	; 0x24
 800c200:	f000 fcc2 	bl	800cb88 <_Bfree>
 800c204:	9b07      	ldr	r3, [sp, #28]
 800c206:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c208:	9d04      	ldr	r5, [sp, #16]
 800c20a:	ea43 0102 	orr.w	r1, r3, r2
 800c20e:	9b06      	ldr	r3, [sp, #24]
 800c210:	4319      	orrs	r1, r3
 800c212:	d110      	bne.n	800c236 <_dtoa_r+0xa7e>
 800c214:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c218:	d029      	beq.n	800c26e <_dtoa_r+0xab6>
 800c21a:	9b05      	ldr	r3, [sp, #20]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	dd02      	ble.n	800c226 <_dtoa_r+0xa6e>
 800c220:	9b02      	ldr	r3, [sp, #8]
 800c222:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800c226:	9b01      	ldr	r3, [sp, #4]
 800c228:	f883 9000 	strb.w	r9, [r3]
 800c22c:	e774      	b.n	800c118 <_dtoa_r+0x960>
 800c22e:	4638      	mov	r0, r7
 800c230:	e7ba      	b.n	800c1a8 <_dtoa_r+0x9f0>
 800c232:	2201      	movs	r2, #1
 800c234:	e7e1      	b.n	800c1fa <_dtoa_r+0xa42>
 800c236:	9b05      	ldr	r3, [sp, #20]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	db04      	blt.n	800c246 <_dtoa_r+0xa8e>
 800c23c:	9907      	ldr	r1, [sp, #28]
 800c23e:	430b      	orrs	r3, r1
 800c240:	9906      	ldr	r1, [sp, #24]
 800c242:	430b      	orrs	r3, r1
 800c244:	d120      	bne.n	800c288 <_dtoa_r+0xad0>
 800c246:	2a00      	cmp	r2, #0
 800c248:	dded      	ble.n	800c226 <_dtoa_r+0xa6e>
 800c24a:	4651      	mov	r1, sl
 800c24c:	2201      	movs	r2, #1
 800c24e:	4620      	mov	r0, r4
 800c250:	f000 feb4 	bl	800cfbc <__lshift>
 800c254:	4631      	mov	r1, r6
 800c256:	4682      	mov	sl, r0
 800c258:	f000 ff1c 	bl	800d094 <__mcmp>
 800c25c:	2800      	cmp	r0, #0
 800c25e:	dc03      	bgt.n	800c268 <_dtoa_r+0xab0>
 800c260:	d1e1      	bne.n	800c226 <_dtoa_r+0xa6e>
 800c262:	f019 0f01 	tst.w	r9, #1
 800c266:	d0de      	beq.n	800c226 <_dtoa_r+0xa6e>
 800c268:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c26c:	d1d8      	bne.n	800c220 <_dtoa_r+0xa68>
 800c26e:	9a01      	ldr	r2, [sp, #4]
 800c270:	2339      	movs	r3, #57	; 0x39
 800c272:	7013      	strb	r3, [r2, #0]
 800c274:	462b      	mov	r3, r5
 800c276:	461d      	mov	r5, r3
 800c278:	3b01      	subs	r3, #1
 800c27a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c27e:	2a39      	cmp	r2, #57	; 0x39
 800c280:	d06c      	beq.n	800c35c <_dtoa_r+0xba4>
 800c282:	3201      	adds	r2, #1
 800c284:	701a      	strb	r2, [r3, #0]
 800c286:	e747      	b.n	800c118 <_dtoa_r+0x960>
 800c288:	2a00      	cmp	r2, #0
 800c28a:	dd07      	ble.n	800c29c <_dtoa_r+0xae4>
 800c28c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800c290:	d0ed      	beq.n	800c26e <_dtoa_r+0xab6>
 800c292:	9a01      	ldr	r2, [sp, #4]
 800c294:	f109 0301 	add.w	r3, r9, #1
 800c298:	7013      	strb	r3, [r2, #0]
 800c29a:	e73d      	b.n	800c118 <_dtoa_r+0x960>
 800c29c:	9b04      	ldr	r3, [sp, #16]
 800c29e:	9a08      	ldr	r2, [sp, #32]
 800c2a0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800c2a4:	4293      	cmp	r3, r2
 800c2a6:	d043      	beq.n	800c330 <_dtoa_r+0xb78>
 800c2a8:	4651      	mov	r1, sl
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	220a      	movs	r2, #10
 800c2ae:	4620      	mov	r0, r4
 800c2b0:	f000 fc8c 	bl	800cbcc <__multadd>
 800c2b4:	45b8      	cmp	r8, r7
 800c2b6:	4682      	mov	sl, r0
 800c2b8:	f04f 0300 	mov.w	r3, #0
 800c2bc:	f04f 020a 	mov.w	r2, #10
 800c2c0:	4641      	mov	r1, r8
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	d107      	bne.n	800c2d6 <_dtoa_r+0xb1e>
 800c2c6:	f000 fc81 	bl	800cbcc <__multadd>
 800c2ca:	4680      	mov	r8, r0
 800c2cc:	4607      	mov	r7, r0
 800c2ce:	9b04      	ldr	r3, [sp, #16]
 800c2d0:	3301      	adds	r3, #1
 800c2d2:	9304      	str	r3, [sp, #16]
 800c2d4:	e775      	b.n	800c1c2 <_dtoa_r+0xa0a>
 800c2d6:	f000 fc79 	bl	800cbcc <__multadd>
 800c2da:	4639      	mov	r1, r7
 800c2dc:	4680      	mov	r8, r0
 800c2de:	2300      	movs	r3, #0
 800c2e0:	220a      	movs	r2, #10
 800c2e2:	4620      	mov	r0, r4
 800c2e4:	f000 fc72 	bl	800cbcc <__multadd>
 800c2e8:	4607      	mov	r7, r0
 800c2ea:	e7f0      	b.n	800c2ce <_dtoa_r+0xb16>
 800c2ec:	9b04      	ldr	r3, [sp, #16]
 800c2ee:	9301      	str	r3, [sp, #4]
 800c2f0:	9d00      	ldr	r5, [sp, #0]
 800c2f2:	4631      	mov	r1, r6
 800c2f4:	4650      	mov	r0, sl
 800c2f6:	f7ff f9d5 	bl	800b6a4 <quorem>
 800c2fa:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800c2fe:	9b00      	ldr	r3, [sp, #0]
 800c300:	f805 9b01 	strb.w	r9, [r5], #1
 800c304:	1aea      	subs	r2, r5, r3
 800c306:	9b01      	ldr	r3, [sp, #4]
 800c308:	4293      	cmp	r3, r2
 800c30a:	dd07      	ble.n	800c31c <_dtoa_r+0xb64>
 800c30c:	4651      	mov	r1, sl
 800c30e:	2300      	movs	r3, #0
 800c310:	220a      	movs	r2, #10
 800c312:	4620      	mov	r0, r4
 800c314:	f000 fc5a 	bl	800cbcc <__multadd>
 800c318:	4682      	mov	sl, r0
 800c31a:	e7ea      	b.n	800c2f2 <_dtoa_r+0xb3a>
 800c31c:	9b01      	ldr	r3, [sp, #4]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	bfc8      	it	gt
 800c322:	461d      	movgt	r5, r3
 800c324:	9b00      	ldr	r3, [sp, #0]
 800c326:	bfd8      	it	le
 800c328:	2501      	movle	r5, #1
 800c32a:	441d      	add	r5, r3
 800c32c:	f04f 0800 	mov.w	r8, #0
 800c330:	4651      	mov	r1, sl
 800c332:	2201      	movs	r2, #1
 800c334:	4620      	mov	r0, r4
 800c336:	f000 fe41 	bl	800cfbc <__lshift>
 800c33a:	4631      	mov	r1, r6
 800c33c:	4682      	mov	sl, r0
 800c33e:	f000 fea9 	bl	800d094 <__mcmp>
 800c342:	2800      	cmp	r0, #0
 800c344:	dc96      	bgt.n	800c274 <_dtoa_r+0xabc>
 800c346:	d102      	bne.n	800c34e <_dtoa_r+0xb96>
 800c348:	f019 0f01 	tst.w	r9, #1
 800c34c:	d192      	bne.n	800c274 <_dtoa_r+0xabc>
 800c34e:	462b      	mov	r3, r5
 800c350:	461d      	mov	r5, r3
 800c352:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c356:	2a30      	cmp	r2, #48	; 0x30
 800c358:	d0fa      	beq.n	800c350 <_dtoa_r+0xb98>
 800c35a:	e6dd      	b.n	800c118 <_dtoa_r+0x960>
 800c35c:	9a00      	ldr	r2, [sp, #0]
 800c35e:	429a      	cmp	r2, r3
 800c360:	d189      	bne.n	800c276 <_dtoa_r+0xabe>
 800c362:	f10b 0b01 	add.w	fp, fp, #1
 800c366:	2331      	movs	r3, #49	; 0x31
 800c368:	e796      	b.n	800c298 <_dtoa_r+0xae0>
 800c36a:	4b0a      	ldr	r3, [pc, #40]	; (800c394 <_dtoa_r+0xbdc>)
 800c36c:	f7ff ba99 	b.w	800b8a2 <_dtoa_r+0xea>
 800c370:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c372:	2b00      	cmp	r3, #0
 800c374:	f47f aa6d 	bne.w	800b852 <_dtoa_r+0x9a>
 800c378:	4b07      	ldr	r3, [pc, #28]	; (800c398 <_dtoa_r+0xbe0>)
 800c37a:	f7ff ba92 	b.w	800b8a2 <_dtoa_r+0xea>
 800c37e:	9b01      	ldr	r3, [sp, #4]
 800c380:	2b00      	cmp	r3, #0
 800c382:	dcb5      	bgt.n	800c2f0 <_dtoa_r+0xb38>
 800c384:	9b07      	ldr	r3, [sp, #28]
 800c386:	2b02      	cmp	r3, #2
 800c388:	f73f aeb1 	bgt.w	800c0ee <_dtoa_r+0x936>
 800c38c:	e7b0      	b.n	800c2f0 <_dtoa_r+0xb38>
 800c38e:	bf00      	nop
 800c390:	08045c8d 	.word	0x08045c8d
 800c394:	08045be0 	.word	0x08045be0
 800c398:	08045c11 	.word	0x08045c11

0800c39c <_free_r>:
 800c39c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c39e:	2900      	cmp	r1, #0
 800c3a0:	d044      	beq.n	800c42c <_free_r+0x90>
 800c3a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c3a6:	9001      	str	r0, [sp, #4]
 800c3a8:	2b00      	cmp	r3, #0
 800c3aa:	f1a1 0404 	sub.w	r4, r1, #4
 800c3ae:	bfb8      	it	lt
 800c3b0:	18e4      	addlt	r4, r4, r3
 800c3b2:	f7fd f98d 	bl	80096d0 <__malloc_lock>
 800c3b6:	4a1e      	ldr	r2, [pc, #120]	; (800c430 <_free_r+0x94>)
 800c3b8:	9801      	ldr	r0, [sp, #4]
 800c3ba:	6813      	ldr	r3, [r2, #0]
 800c3bc:	b933      	cbnz	r3, 800c3cc <_free_r+0x30>
 800c3be:	6063      	str	r3, [r4, #4]
 800c3c0:	6014      	str	r4, [r2, #0]
 800c3c2:	b003      	add	sp, #12
 800c3c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c3c8:	f7fd b988 	b.w	80096dc <__malloc_unlock>
 800c3cc:	42a3      	cmp	r3, r4
 800c3ce:	d908      	bls.n	800c3e2 <_free_r+0x46>
 800c3d0:	6825      	ldr	r5, [r4, #0]
 800c3d2:	1961      	adds	r1, r4, r5
 800c3d4:	428b      	cmp	r3, r1
 800c3d6:	bf01      	itttt	eq
 800c3d8:	6819      	ldreq	r1, [r3, #0]
 800c3da:	685b      	ldreq	r3, [r3, #4]
 800c3dc:	1949      	addeq	r1, r1, r5
 800c3de:	6021      	streq	r1, [r4, #0]
 800c3e0:	e7ed      	b.n	800c3be <_free_r+0x22>
 800c3e2:	461a      	mov	r2, r3
 800c3e4:	685b      	ldr	r3, [r3, #4]
 800c3e6:	b10b      	cbz	r3, 800c3ec <_free_r+0x50>
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d9fa      	bls.n	800c3e2 <_free_r+0x46>
 800c3ec:	6811      	ldr	r1, [r2, #0]
 800c3ee:	1855      	adds	r5, r2, r1
 800c3f0:	42a5      	cmp	r5, r4
 800c3f2:	d10b      	bne.n	800c40c <_free_r+0x70>
 800c3f4:	6824      	ldr	r4, [r4, #0]
 800c3f6:	4421      	add	r1, r4
 800c3f8:	1854      	adds	r4, r2, r1
 800c3fa:	42a3      	cmp	r3, r4
 800c3fc:	6011      	str	r1, [r2, #0]
 800c3fe:	d1e0      	bne.n	800c3c2 <_free_r+0x26>
 800c400:	681c      	ldr	r4, [r3, #0]
 800c402:	685b      	ldr	r3, [r3, #4]
 800c404:	6053      	str	r3, [r2, #4]
 800c406:	440c      	add	r4, r1
 800c408:	6014      	str	r4, [r2, #0]
 800c40a:	e7da      	b.n	800c3c2 <_free_r+0x26>
 800c40c:	d902      	bls.n	800c414 <_free_r+0x78>
 800c40e:	230c      	movs	r3, #12
 800c410:	6003      	str	r3, [r0, #0]
 800c412:	e7d6      	b.n	800c3c2 <_free_r+0x26>
 800c414:	6825      	ldr	r5, [r4, #0]
 800c416:	1961      	adds	r1, r4, r5
 800c418:	428b      	cmp	r3, r1
 800c41a:	bf04      	itt	eq
 800c41c:	6819      	ldreq	r1, [r3, #0]
 800c41e:	685b      	ldreq	r3, [r3, #4]
 800c420:	6063      	str	r3, [r4, #4]
 800c422:	bf04      	itt	eq
 800c424:	1949      	addeq	r1, r1, r5
 800c426:	6021      	streq	r1, [r4, #0]
 800c428:	6054      	str	r4, [r2, #4]
 800c42a:	e7ca      	b.n	800c3c2 <_free_r+0x26>
 800c42c:	b003      	add	sp, #12
 800c42e:	bd30      	pop	{r4, r5, pc}
 800c430:	20004480 	.word	0x20004480

0800c434 <rshift>:
 800c434:	6903      	ldr	r3, [r0, #16]
 800c436:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c43a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c43e:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c442:	f100 0414 	add.w	r4, r0, #20
 800c446:	dd45      	ble.n	800c4d4 <rshift+0xa0>
 800c448:	f011 011f 	ands.w	r1, r1, #31
 800c44c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c450:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c454:	d10c      	bne.n	800c470 <rshift+0x3c>
 800c456:	f100 0710 	add.w	r7, r0, #16
 800c45a:	4629      	mov	r1, r5
 800c45c:	42b1      	cmp	r1, r6
 800c45e:	d334      	bcc.n	800c4ca <rshift+0x96>
 800c460:	1a9b      	subs	r3, r3, r2
 800c462:	009b      	lsls	r3, r3, #2
 800c464:	1eea      	subs	r2, r5, #3
 800c466:	4296      	cmp	r6, r2
 800c468:	bf38      	it	cc
 800c46a:	2300      	movcc	r3, #0
 800c46c:	4423      	add	r3, r4
 800c46e:	e015      	b.n	800c49c <rshift+0x68>
 800c470:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c474:	f1c1 0820 	rsb	r8, r1, #32
 800c478:	40cf      	lsrs	r7, r1
 800c47a:	f105 0e04 	add.w	lr, r5, #4
 800c47e:	46a1      	mov	r9, r4
 800c480:	4576      	cmp	r6, lr
 800c482:	46f4      	mov	ip, lr
 800c484:	d815      	bhi.n	800c4b2 <rshift+0x7e>
 800c486:	1a9a      	subs	r2, r3, r2
 800c488:	0092      	lsls	r2, r2, #2
 800c48a:	3a04      	subs	r2, #4
 800c48c:	3501      	adds	r5, #1
 800c48e:	42ae      	cmp	r6, r5
 800c490:	bf38      	it	cc
 800c492:	2200      	movcc	r2, #0
 800c494:	18a3      	adds	r3, r4, r2
 800c496:	50a7      	str	r7, [r4, r2]
 800c498:	b107      	cbz	r7, 800c49c <rshift+0x68>
 800c49a:	3304      	adds	r3, #4
 800c49c:	1b1a      	subs	r2, r3, r4
 800c49e:	42a3      	cmp	r3, r4
 800c4a0:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c4a4:	bf08      	it	eq
 800c4a6:	2300      	moveq	r3, #0
 800c4a8:	6102      	str	r2, [r0, #16]
 800c4aa:	bf08      	it	eq
 800c4ac:	6143      	streq	r3, [r0, #20]
 800c4ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c4b2:	f8dc c000 	ldr.w	ip, [ip]
 800c4b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c4ba:	ea4c 0707 	orr.w	r7, ip, r7
 800c4be:	f849 7b04 	str.w	r7, [r9], #4
 800c4c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c4c6:	40cf      	lsrs	r7, r1
 800c4c8:	e7da      	b.n	800c480 <rshift+0x4c>
 800c4ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800c4ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800c4d2:	e7c3      	b.n	800c45c <rshift+0x28>
 800c4d4:	4623      	mov	r3, r4
 800c4d6:	e7e1      	b.n	800c49c <rshift+0x68>

0800c4d8 <__hexdig_fun>:
 800c4d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c4dc:	2b09      	cmp	r3, #9
 800c4de:	d802      	bhi.n	800c4e6 <__hexdig_fun+0xe>
 800c4e0:	3820      	subs	r0, #32
 800c4e2:	b2c0      	uxtb	r0, r0
 800c4e4:	4770      	bx	lr
 800c4e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c4ea:	2b05      	cmp	r3, #5
 800c4ec:	d801      	bhi.n	800c4f2 <__hexdig_fun+0x1a>
 800c4ee:	3847      	subs	r0, #71	; 0x47
 800c4f0:	e7f7      	b.n	800c4e2 <__hexdig_fun+0xa>
 800c4f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c4f6:	2b05      	cmp	r3, #5
 800c4f8:	d801      	bhi.n	800c4fe <__hexdig_fun+0x26>
 800c4fa:	3827      	subs	r0, #39	; 0x27
 800c4fc:	e7f1      	b.n	800c4e2 <__hexdig_fun+0xa>
 800c4fe:	2000      	movs	r0, #0
 800c500:	4770      	bx	lr
	...

0800c504 <__gethex>:
 800c504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c508:	4617      	mov	r7, r2
 800c50a:	680a      	ldr	r2, [r1, #0]
 800c50c:	b085      	sub	sp, #20
 800c50e:	f102 0b02 	add.w	fp, r2, #2
 800c512:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c516:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c51a:	4681      	mov	r9, r0
 800c51c:	468a      	mov	sl, r1
 800c51e:	9302      	str	r3, [sp, #8]
 800c520:	32fe      	adds	r2, #254	; 0xfe
 800c522:	eb02 030b 	add.w	r3, r2, fp
 800c526:	46d8      	mov	r8, fp
 800c528:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	2830      	cmp	r0, #48	; 0x30
 800c530:	d0f7      	beq.n	800c522 <__gethex+0x1e>
 800c532:	f7ff ffd1 	bl	800c4d8 <__hexdig_fun>
 800c536:	4604      	mov	r4, r0
 800c538:	2800      	cmp	r0, #0
 800c53a:	d138      	bne.n	800c5ae <__gethex+0xaa>
 800c53c:	49a7      	ldr	r1, [pc, #668]	; (800c7dc <__gethex+0x2d8>)
 800c53e:	2201      	movs	r2, #1
 800c540:	4640      	mov	r0, r8
 800c542:	f7fe fff9 	bl	800b538 <strncmp>
 800c546:	4606      	mov	r6, r0
 800c548:	2800      	cmp	r0, #0
 800c54a:	d169      	bne.n	800c620 <__gethex+0x11c>
 800c54c:	f898 0001 	ldrb.w	r0, [r8, #1]
 800c550:	465d      	mov	r5, fp
 800c552:	f7ff ffc1 	bl	800c4d8 <__hexdig_fun>
 800c556:	2800      	cmp	r0, #0
 800c558:	d064      	beq.n	800c624 <__gethex+0x120>
 800c55a:	465a      	mov	r2, fp
 800c55c:	7810      	ldrb	r0, [r2, #0]
 800c55e:	2830      	cmp	r0, #48	; 0x30
 800c560:	4690      	mov	r8, r2
 800c562:	f102 0201 	add.w	r2, r2, #1
 800c566:	d0f9      	beq.n	800c55c <__gethex+0x58>
 800c568:	f7ff ffb6 	bl	800c4d8 <__hexdig_fun>
 800c56c:	2301      	movs	r3, #1
 800c56e:	fab0 f480 	clz	r4, r0
 800c572:	0964      	lsrs	r4, r4, #5
 800c574:	465e      	mov	r6, fp
 800c576:	9301      	str	r3, [sp, #4]
 800c578:	4642      	mov	r2, r8
 800c57a:	4615      	mov	r5, r2
 800c57c:	3201      	adds	r2, #1
 800c57e:	7828      	ldrb	r0, [r5, #0]
 800c580:	f7ff ffaa 	bl	800c4d8 <__hexdig_fun>
 800c584:	2800      	cmp	r0, #0
 800c586:	d1f8      	bne.n	800c57a <__gethex+0x76>
 800c588:	4994      	ldr	r1, [pc, #592]	; (800c7dc <__gethex+0x2d8>)
 800c58a:	2201      	movs	r2, #1
 800c58c:	4628      	mov	r0, r5
 800c58e:	f7fe ffd3 	bl	800b538 <strncmp>
 800c592:	b978      	cbnz	r0, 800c5b4 <__gethex+0xb0>
 800c594:	b946      	cbnz	r6, 800c5a8 <__gethex+0xa4>
 800c596:	1c6e      	adds	r6, r5, #1
 800c598:	4632      	mov	r2, r6
 800c59a:	4615      	mov	r5, r2
 800c59c:	3201      	adds	r2, #1
 800c59e:	7828      	ldrb	r0, [r5, #0]
 800c5a0:	f7ff ff9a 	bl	800c4d8 <__hexdig_fun>
 800c5a4:	2800      	cmp	r0, #0
 800c5a6:	d1f8      	bne.n	800c59a <__gethex+0x96>
 800c5a8:	1b73      	subs	r3, r6, r5
 800c5aa:	009e      	lsls	r6, r3, #2
 800c5ac:	e004      	b.n	800c5b8 <__gethex+0xb4>
 800c5ae:	2400      	movs	r4, #0
 800c5b0:	4626      	mov	r6, r4
 800c5b2:	e7e1      	b.n	800c578 <__gethex+0x74>
 800c5b4:	2e00      	cmp	r6, #0
 800c5b6:	d1f7      	bne.n	800c5a8 <__gethex+0xa4>
 800c5b8:	782b      	ldrb	r3, [r5, #0]
 800c5ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c5be:	2b50      	cmp	r3, #80	; 0x50
 800c5c0:	d13d      	bne.n	800c63e <__gethex+0x13a>
 800c5c2:	786b      	ldrb	r3, [r5, #1]
 800c5c4:	2b2b      	cmp	r3, #43	; 0x2b
 800c5c6:	d02f      	beq.n	800c628 <__gethex+0x124>
 800c5c8:	2b2d      	cmp	r3, #45	; 0x2d
 800c5ca:	d031      	beq.n	800c630 <__gethex+0x12c>
 800c5cc:	1c69      	adds	r1, r5, #1
 800c5ce:	f04f 0b00 	mov.w	fp, #0
 800c5d2:	7808      	ldrb	r0, [r1, #0]
 800c5d4:	f7ff ff80 	bl	800c4d8 <__hexdig_fun>
 800c5d8:	1e42      	subs	r2, r0, #1
 800c5da:	b2d2      	uxtb	r2, r2
 800c5dc:	2a18      	cmp	r2, #24
 800c5de:	d82e      	bhi.n	800c63e <__gethex+0x13a>
 800c5e0:	f1a0 0210 	sub.w	r2, r0, #16
 800c5e4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c5e8:	f7ff ff76 	bl	800c4d8 <__hexdig_fun>
 800c5ec:	f100 3cff 	add.w	ip, r0, #4294967295
 800c5f0:	fa5f fc8c 	uxtb.w	ip, ip
 800c5f4:	f1bc 0f18 	cmp.w	ip, #24
 800c5f8:	d91d      	bls.n	800c636 <__gethex+0x132>
 800c5fa:	f1bb 0f00 	cmp.w	fp, #0
 800c5fe:	d000      	beq.n	800c602 <__gethex+0xfe>
 800c600:	4252      	negs	r2, r2
 800c602:	4416      	add	r6, r2
 800c604:	f8ca 1000 	str.w	r1, [sl]
 800c608:	b1dc      	cbz	r4, 800c642 <__gethex+0x13e>
 800c60a:	9b01      	ldr	r3, [sp, #4]
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bf14      	ite	ne
 800c610:	f04f 0800 	movne.w	r8, #0
 800c614:	f04f 0806 	moveq.w	r8, #6
 800c618:	4640      	mov	r0, r8
 800c61a:	b005      	add	sp, #20
 800c61c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c620:	4645      	mov	r5, r8
 800c622:	4626      	mov	r6, r4
 800c624:	2401      	movs	r4, #1
 800c626:	e7c7      	b.n	800c5b8 <__gethex+0xb4>
 800c628:	f04f 0b00 	mov.w	fp, #0
 800c62c:	1ca9      	adds	r1, r5, #2
 800c62e:	e7d0      	b.n	800c5d2 <__gethex+0xce>
 800c630:	f04f 0b01 	mov.w	fp, #1
 800c634:	e7fa      	b.n	800c62c <__gethex+0x128>
 800c636:	230a      	movs	r3, #10
 800c638:	fb03 0002 	mla	r0, r3, r2, r0
 800c63c:	e7d0      	b.n	800c5e0 <__gethex+0xdc>
 800c63e:	4629      	mov	r1, r5
 800c640:	e7e0      	b.n	800c604 <__gethex+0x100>
 800c642:	eba5 0308 	sub.w	r3, r5, r8
 800c646:	3b01      	subs	r3, #1
 800c648:	4621      	mov	r1, r4
 800c64a:	2b07      	cmp	r3, #7
 800c64c:	dc0a      	bgt.n	800c664 <__gethex+0x160>
 800c64e:	4648      	mov	r0, r9
 800c650:	f000 fa5a 	bl	800cb08 <_Balloc>
 800c654:	4604      	mov	r4, r0
 800c656:	b940      	cbnz	r0, 800c66a <__gethex+0x166>
 800c658:	4b61      	ldr	r3, [pc, #388]	; (800c7e0 <__gethex+0x2dc>)
 800c65a:	4602      	mov	r2, r0
 800c65c:	21e4      	movs	r1, #228	; 0xe4
 800c65e:	4861      	ldr	r0, [pc, #388]	; (800c7e4 <__gethex+0x2e0>)
 800c660:	f001 fb82 	bl	800dd68 <__assert_func>
 800c664:	3101      	adds	r1, #1
 800c666:	105b      	asrs	r3, r3, #1
 800c668:	e7ef      	b.n	800c64a <__gethex+0x146>
 800c66a:	f100 0a14 	add.w	sl, r0, #20
 800c66e:	2300      	movs	r3, #0
 800c670:	495a      	ldr	r1, [pc, #360]	; (800c7dc <__gethex+0x2d8>)
 800c672:	f8cd a004 	str.w	sl, [sp, #4]
 800c676:	469b      	mov	fp, r3
 800c678:	45a8      	cmp	r8, r5
 800c67a:	d342      	bcc.n	800c702 <__gethex+0x1fe>
 800c67c:	9801      	ldr	r0, [sp, #4]
 800c67e:	f840 bb04 	str.w	fp, [r0], #4
 800c682:	eba0 000a 	sub.w	r0, r0, sl
 800c686:	1080      	asrs	r0, r0, #2
 800c688:	6120      	str	r0, [r4, #16]
 800c68a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c68e:	4658      	mov	r0, fp
 800c690:	f000 fb2c 	bl	800ccec <__hi0bits>
 800c694:	683d      	ldr	r5, [r7, #0]
 800c696:	eba8 0000 	sub.w	r0, r8, r0
 800c69a:	42a8      	cmp	r0, r5
 800c69c:	dd59      	ble.n	800c752 <__gethex+0x24e>
 800c69e:	eba0 0805 	sub.w	r8, r0, r5
 800c6a2:	4641      	mov	r1, r8
 800c6a4:	4620      	mov	r0, r4
 800c6a6:	f000 febb 	bl	800d420 <__any_on>
 800c6aa:	4683      	mov	fp, r0
 800c6ac:	b1b8      	cbz	r0, 800c6de <__gethex+0x1da>
 800c6ae:	f108 33ff 	add.w	r3, r8, #4294967295
 800c6b2:	1159      	asrs	r1, r3, #5
 800c6b4:	f003 021f 	and.w	r2, r3, #31
 800c6b8:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c6bc:	f04f 0b01 	mov.w	fp, #1
 800c6c0:	fa0b f202 	lsl.w	r2, fp, r2
 800c6c4:	420a      	tst	r2, r1
 800c6c6:	d00a      	beq.n	800c6de <__gethex+0x1da>
 800c6c8:	455b      	cmp	r3, fp
 800c6ca:	dd06      	ble.n	800c6da <__gethex+0x1d6>
 800c6cc:	f1a8 0102 	sub.w	r1, r8, #2
 800c6d0:	4620      	mov	r0, r4
 800c6d2:	f000 fea5 	bl	800d420 <__any_on>
 800c6d6:	2800      	cmp	r0, #0
 800c6d8:	d138      	bne.n	800c74c <__gethex+0x248>
 800c6da:	f04f 0b02 	mov.w	fp, #2
 800c6de:	4641      	mov	r1, r8
 800c6e0:	4620      	mov	r0, r4
 800c6e2:	f7ff fea7 	bl	800c434 <rshift>
 800c6e6:	4446      	add	r6, r8
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	42b3      	cmp	r3, r6
 800c6ec:	da41      	bge.n	800c772 <__gethex+0x26e>
 800c6ee:	4621      	mov	r1, r4
 800c6f0:	4648      	mov	r0, r9
 800c6f2:	f000 fa49 	bl	800cb88 <_Bfree>
 800c6f6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	6013      	str	r3, [r2, #0]
 800c6fc:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c700:	e78a      	b.n	800c618 <__gethex+0x114>
 800c702:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c706:	2a2e      	cmp	r2, #46	; 0x2e
 800c708:	d014      	beq.n	800c734 <__gethex+0x230>
 800c70a:	2b20      	cmp	r3, #32
 800c70c:	d106      	bne.n	800c71c <__gethex+0x218>
 800c70e:	9b01      	ldr	r3, [sp, #4]
 800c710:	f843 bb04 	str.w	fp, [r3], #4
 800c714:	f04f 0b00 	mov.w	fp, #0
 800c718:	9301      	str	r3, [sp, #4]
 800c71a:	465b      	mov	r3, fp
 800c71c:	7828      	ldrb	r0, [r5, #0]
 800c71e:	9303      	str	r3, [sp, #12]
 800c720:	f7ff feda 	bl	800c4d8 <__hexdig_fun>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	f000 000f 	and.w	r0, r0, #15
 800c72a:	4098      	lsls	r0, r3
 800c72c:	ea4b 0b00 	orr.w	fp, fp, r0
 800c730:	3304      	adds	r3, #4
 800c732:	e7a1      	b.n	800c678 <__gethex+0x174>
 800c734:	45a8      	cmp	r8, r5
 800c736:	d8e8      	bhi.n	800c70a <__gethex+0x206>
 800c738:	2201      	movs	r2, #1
 800c73a:	4628      	mov	r0, r5
 800c73c:	9303      	str	r3, [sp, #12]
 800c73e:	f7fe fefb 	bl	800b538 <strncmp>
 800c742:	4926      	ldr	r1, [pc, #152]	; (800c7dc <__gethex+0x2d8>)
 800c744:	9b03      	ldr	r3, [sp, #12]
 800c746:	2800      	cmp	r0, #0
 800c748:	d1df      	bne.n	800c70a <__gethex+0x206>
 800c74a:	e795      	b.n	800c678 <__gethex+0x174>
 800c74c:	f04f 0b03 	mov.w	fp, #3
 800c750:	e7c5      	b.n	800c6de <__gethex+0x1da>
 800c752:	da0b      	bge.n	800c76c <__gethex+0x268>
 800c754:	eba5 0800 	sub.w	r8, r5, r0
 800c758:	4621      	mov	r1, r4
 800c75a:	4642      	mov	r2, r8
 800c75c:	4648      	mov	r0, r9
 800c75e:	f000 fc2d 	bl	800cfbc <__lshift>
 800c762:	eba6 0608 	sub.w	r6, r6, r8
 800c766:	4604      	mov	r4, r0
 800c768:	f100 0a14 	add.w	sl, r0, #20
 800c76c:	f04f 0b00 	mov.w	fp, #0
 800c770:	e7ba      	b.n	800c6e8 <__gethex+0x1e4>
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	42b3      	cmp	r3, r6
 800c776:	dd73      	ble.n	800c860 <__gethex+0x35c>
 800c778:	1b9e      	subs	r6, r3, r6
 800c77a:	42b5      	cmp	r5, r6
 800c77c:	dc34      	bgt.n	800c7e8 <__gethex+0x2e4>
 800c77e:	68fb      	ldr	r3, [r7, #12]
 800c780:	2b02      	cmp	r3, #2
 800c782:	d023      	beq.n	800c7cc <__gethex+0x2c8>
 800c784:	2b03      	cmp	r3, #3
 800c786:	d025      	beq.n	800c7d4 <__gethex+0x2d0>
 800c788:	2b01      	cmp	r3, #1
 800c78a:	d115      	bne.n	800c7b8 <__gethex+0x2b4>
 800c78c:	42b5      	cmp	r5, r6
 800c78e:	d113      	bne.n	800c7b8 <__gethex+0x2b4>
 800c790:	2d01      	cmp	r5, #1
 800c792:	d10b      	bne.n	800c7ac <__gethex+0x2a8>
 800c794:	9a02      	ldr	r2, [sp, #8]
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6013      	str	r3, [r2, #0]
 800c79a:	2301      	movs	r3, #1
 800c79c:	6123      	str	r3, [r4, #16]
 800c79e:	f8ca 3000 	str.w	r3, [sl]
 800c7a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7a4:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c7a8:	601c      	str	r4, [r3, #0]
 800c7aa:	e735      	b.n	800c618 <__gethex+0x114>
 800c7ac:	1e69      	subs	r1, r5, #1
 800c7ae:	4620      	mov	r0, r4
 800c7b0:	f000 fe36 	bl	800d420 <__any_on>
 800c7b4:	2800      	cmp	r0, #0
 800c7b6:	d1ed      	bne.n	800c794 <__gethex+0x290>
 800c7b8:	4621      	mov	r1, r4
 800c7ba:	4648      	mov	r0, r9
 800c7bc:	f000 f9e4 	bl	800cb88 <_Bfree>
 800c7c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7c2:	2300      	movs	r3, #0
 800c7c4:	6013      	str	r3, [r2, #0]
 800c7c6:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c7ca:	e725      	b.n	800c618 <__gethex+0x114>
 800c7cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7ce:	2b00      	cmp	r3, #0
 800c7d0:	d1f2      	bne.n	800c7b8 <__gethex+0x2b4>
 800c7d2:	e7df      	b.n	800c794 <__gethex+0x290>
 800c7d4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c7d6:	2b00      	cmp	r3, #0
 800c7d8:	d1dc      	bne.n	800c794 <__gethex+0x290>
 800c7da:	e7ed      	b.n	800c7b8 <__gethex+0x2b4>
 800c7dc:	08045b78 	.word	0x08045b78
 800c7e0:	08045c8d 	.word	0x08045c8d
 800c7e4:	08045c9e 	.word	0x08045c9e
 800c7e8:	f106 38ff 	add.w	r8, r6, #4294967295
 800c7ec:	f1bb 0f00 	cmp.w	fp, #0
 800c7f0:	d133      	bne.n	800c85a <__gethex+0x356>
 800c7f2:	f1b8 0f00 	cmp.w	r8, #0
 800c7f6:	d004      	beq.n	800c802 <__gethex+0x2fe>
 800c7f8:	4641      	mov	r1, r8
 800c7fa:	4620      	mov	r0, r4
 800c7fc:	f000 fe10 	bl	800d420 <__any_on>
 800c800:	4683      	mov	fp, r0
 800c802:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c806:	2301      	movs	r3, #1
 800c808:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c80c:	f008 081f 	and.w	r8, r8, #31
 800c810:	fa03 f308 	lsl.w	r3, r3, r8
 800c814:	4213      	tst	r3, r2
 800c816:	4631      	mov	r1, r6
 800c818:	4620      	mov	r0, r4
 800c81a:	bf18      	it	ne
 800c81c:	f04b 0b02 	orrne.w	fp, fp, #2
 800c820:	1bad      	subs	r5, r5, r6
 800c822:	f7ff fe07 	bl	800c434 <rshift>
 800c826:	687e      	ldr	r6, [r7, #4]
 800c828:	f04f 0802 	mov.w	r8, #2
 800c82c:	f1bb 0f00 	cmp.w	fp, #0
 800c830:	d04a      	beq.n	800c8c8 <__gethex+0x3c4>
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	2b02      	cmp	r3, #2
 800c836:	d016      	beq.n	800c866 <__gethex+0x362>
 800c838:	2b03      	cmp	r3, #3
 800c83a:	d018      	beq.n	800c86e <__gethex+0x36a>
 800c83c:	2b01      	cmp	r3, #1
 800c83e:	d109      	bne.n	800c854 <__gethex+0x350>
 800c840:	f01b 0f02 	tst.w	fp, #2
 800c844:	d006      	beq.n	800c854 <__gethex+0x350>
 800c846:	f8da 3000 	ldr.w	r3, [sl]
 800c84a:	ea4b 0b03 	orr.w	fp, fp, r3
 800c84e:	f01b 0f01 	tst.w	fp, #1
 800c852:	d10f      	bne.n	800c874 <__gethex+0x370>
 800c854:	f048 0810 	orr.w	r8, r8, #16
 800c858:	e036      	b.n	800c8c8 <__gethex+0x3c4>
 800c85a:	f04f 0b01 	mov.w	fp, #1
 800c85e:	e7d0      	b.n	800c802 <__gethex+0x2fe>
 800c860:	f04f 0801 	mov.w	r8, #1
 800c864:	e7e2      	b.n	800c82c <__gethex+0x328>
 800c866:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c868:	f1c3 0301 	rsb	r3, r3, #1
 800c86c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c86e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c870:	2b00      	cmp	r3, #0
 800c872:	d0ef      	beq.n	800c854 <__gethex+0x350>
 800c874:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c878:	f104 0214 	add.w	r2, r4, #20
 800c87c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c880:	9301      	str	r3, [sp, #4]
 800c882:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c886:	2300      	movs	r3, #0
 800c888:	4694      	mov	ip, r2
 800c88a:	f852 1b04 	ldr.w	r1, [r2], #4
 800c88e:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c892:	d01e      	beq.n	800c8d2 <__gethex+0x3ce>
 800c894:	3101      	adds	r1, #1
 800c896:	f8cc 1000 	str.w	r1, [ip]
 800c89a:	f1b8 0f02 	cmp.w	r8, #2
 800c89e:	f104 0214 	add.w	r2, r4, #20
 800c8a2:	d13d      	bne.n	800c920 <__gethex+0x41c>
 800c8a4:	683b      	ldr	r3, [r7, #0]
 800c8a6:	3b01      	subs	r3, #1
 800c8a8:	42ab      	cmp	r3, r5
 800c8aa:	d10b      	bne.n	800c8c4 <__gethex+0x3c0>
 800c8ac:	1169      	asrs	r1, r5, #5
 800c8ae:	2301      	movs	r3, #1
 800c8b0:	f005 051f 	and.w	r5, r5, #31
 800c8b4:	fa03 f505 	lsl.w	r5, r3, r5
 800c8b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c8bc:	421d      	tst	r5, r3
 800c8be:	bf18      	it	ne
 800c8c0:	f04f 0801 	movne.w	r8, #1
 800c8c4:	f048 0820 	orr.w	r8, r8, #32
 800c8c8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c8ca:	601c      	str	r4, [r3, #0]
 800c8cc:	9b02      	ldr	r3, [sp, #8]
 800c8ce:	601e      	str	r6, [r3, #0]
 800c8d0:	e6a2      	b.n	800c618 <__gethex+0x114>
 800c8d2:	4290      	cmp	r0, r2
 800c8d4:	f842 3c04 	str.w	r3, [r2, #-4]
 800c8d8:	d8d6      	bhi.n	800c888 <__gethex+0x384>
 800c8da:	68a2      	ldr	r2, [r4, #8]
 800c8dc:	4593      	cmp	fp, r2
 800c8de:	db17      	blt.n	800c910 <__gethex+0x40c>
 800c8e0:	6861      	ldr	r1, [r4, #4]
 800c8e2:	4648      	mov	r0, r9
 800c8e4:	3101      	adds	r1, #1
 800c8e6:	f000 f90f 	bl	800cb08 <_Balloc>
 800c8ea:	4682      	mov	sl, r0
 800c8ec:	b918      	cbnz	r0, 800c8f6 <__gethex+0x3f2>
 800c8ee:	4b1b      	ldr	r3, [pc, #108]	; (800c95c <__gethex+0x458>)
 800c8f0:	4602      	mov	r2, r0
 800c8f2:	2184      	movs	r1, #132	; 0x84
 800c8f4:	e6b3      	b.n	800c65e <__gethex+0x15a>
 800c8f6:	6922      	ldr	r2, [r4, #16]
 800c8f8:	3202      	adds	r2, #2
 800c8fa:	f104 010c 	add.w	r1, r4, #12
 800c8fe:	0092      	lsls	r2, r2, #2
 800c900:	300c      	adds	r0, #12
 800c902:	f7fe feb2 	bl	800b66a <memcpy>
 800c906:	4621      	mov	r1, r4
 800c908:	4648      	mov	r0, r9
 800c90a:	f000 f93d 	bl	800cb88 <_Bfree>
 800c90e:	4654      	mov	r4, sl
 800c910:	6922      	ldr	r2, [r4, #16]
 800c912:	1c51      	adds	r1, r2, #1
 800c914:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c918:	6121      	str	r1, [r4, #16]
 800c91a:	2101      	movs	r1, #1
 800c91c:	6151      	str	r1, [r2, #20]
 800c91e:	e7bc      	b.n	800c89a <__gethex+0x396>
 800c920:	6921      	ldr	r1, [r4, #16]
 800c922:	4559      	cmp	r1, fp
 800c924:	dd0b      	ble.n	800c93e <__gethex+0x43a>
 800c926:	2101      	movs	r1, #1
 800c928:	4620      	mov	r0, r4
 800c92a:	f7ff fd83 	bl	800c434 <rshift>
 800c92e:	68bb      	ldr	r3, [r7, #8]
 800c930:	3601      	adds	r6, #1
 800c932:	42b3      	cmp	r3, r6
 800c934:	f6ff aedb 	blt.w	800c6ee <__gethex+0x1ea>
 800c938:	f04f 0801 	mov.w	r8, #1
 800c93c:	e7c2      	b.n	800c8c4 <__gethex+0x3c0>
 800c93e:	f015 051f 	ands.w	r5, r5, #31
 800c942:	d0f9      	beq.n	800c938 <__gethex+0x434>
 800c944:	9b01      	ldr	r3, [sp, #4]
 800c946:	441a      	add	r2, r3
 800c948:	f1c5 0520 	rsb	r5, r5, #32
 800c94c:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c950:	f000 f9cc 	bl	800ccec <__hi0bits>
 800c954:	42a8      	cmp	r0, r5
 800c956:	dbe6      	blt.n	800c926 <__gethex+0x422>
 800c958:	e7ee      	b.n	800c938 <__gethex+0x434>
 800c95a:	bf00      	nop
 800c95c:	08045c8d 	.word	0x08045c8d

0800c960 <L_shift>:
 800c960:	f1c2 0208 	rsb	r2, r2, #8
 800c964:	0092      	lsls	r2, r2, #2
 800c966:	b570      	push	{r4, r5, r6, lr}
 800c968:	f1c2 0620 	rsb	r6, r2, #32
 800c96c:	6843      	ldr	r3, [r0, #4]
 800c96e:	6804      	ldr	r4, [r0, #0]
 800c970:	fa03 f506 	lsl.w	r5, r3, r6
 800c974:	432c      	orrs	r4, r5
 800c976:	40d3      	lsrs	r3, r2
 800c978:	6004      	str	r4, [r0, #0]
 800c97a:	f840 3f04 	str.w	r3, [r0, #4]!
 800c97e:	4288      	cmp	r0, r1
 800c980:	d3f4      	bcc.n	800c96c <L_shift+0xc>
 800c982:	bd70      	pop	{r4, r5, r6, pc}

0800c984 <__match>:
 800c984:	b530      	push	{r4, r5, lr}
 800c986:	6803      	ldr	r3, [r0, #0]
 800c988:	3301      	adds	r3, #1
 800c98a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c98e:	b914      	cbnz	r4, 800c996 <__match+0x12>
 800c990:	6003      	str	r3, [r0, #0]
 800c992:	2001      	movs	r0, #1
 800c994:	bd30      	pop	{r4, r5, pc}
 800c996:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c99a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c99e:	2d19      	cmp	r5, #25
 800c9a0:	bf98      	it	ls
 800c9a2:	3220      	addls	r2, #32
 800c9a4:	42a2      	cmp	r2, r4
 800c9a6:	d0f0      	beq.n	800c98a <__match+0x6>
 800c9a8:	2000      	movs	r0, #0
 800c9aa:	e7f3      	b.n	800c994 <__match+0x10>

0800c9ac <__hexnan>:
 800c9ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b0:	680b      	ldr	r3, [r1, #0]
 800c9b2:	6801      	ldr	r1, [r0, #0]
 800c9b4:	115e      	asrs	r6, r3, #5
 800c9b6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c9ba:	f013 031f 	ands.w	r3, r3, #31
 800c9be:	b087      	sub	sp, #28
 800c9c0:	bf18      	it	ne
 800c9c2:	3604      	addne	r6, #4
 800c9c4:	2500      	movs	r5, #0
 800c9c6:	1f37      	subs	r7, r6, #4
 800c9c8:	4682      	mov	sl, r0
 800c9ca:	4690      	mov	r8, r2
 800c9cc:	9301      	str	r3, [sp, #4]
 800c9ce:	f846 5c04 	str.w	r5, [r6, #-4]
 800c9d2:	46b9      	mov	r9, r7
 800c9d4:	463c      	mov	r4, r7
 800c9d6:	9502      	str	r5, [sp, #8]
 800c9d8:	46ab      	mov	fp, r5
 800c9da:	784a      	ldrb	r2, [r1, #1]
 800c9dc:	1c4b      	adds	r3, r1, #1
 800c9de:	9303      	str	r3, [sp, #12]
 800c9e0:	b342      	cbz	r2, 800ca34 <__hexnan+0x88>
 800c9e2:	4610      	mov	r0, r2
 800c9e4:	9105      	str	r1, [sp, #20]
 800c9e6:	9204      	str	r2, [sp, #16]
 800c9e8:	f7ff fd76 	bl	800c4d8 <__hexdig_fun>
 800c9ec:	2800      	cmp	r0, #0
 800c9ee:	d14f      	bne.n	800ca90 <__hexnan+0xe4>
 800c9f0:	9a04      	ldr	r2, [sp, #16]
 800c9f2:	9905      	ldr	r1, [sp, #20]
 800c9f4:	2a20      	cmp	r2, #32
 800c9f6:	d818      	bhi.n	800ca2a <__hexnan+0x7e>
 800c9f8:	9b02      	ldr	r3, [sp, #8]
 800c9fa:	459b      	cmp	fp, r3
 800c9fc:	dd13      	ble.n	800ca26 <__hexnan+0x7a>
 800c9fe:	454c      	cmp	r4, r9
 800ca00:	d206      	bcs.n	800ca10 <__hexnan+0x64>
 800ca02:	2d07      	cmp	r5, #7
 800ca04:	dc04      	bgt.n	800ca10 <__hexnan+0x64>
 800ca06:	462a      	mov	r2, r5
 800ca08:	4649      	mov	r1, r9
 800ca0a:	4620      	mov	r0, r4
 800ca0c:	f7ff ffa8 	bl	800c960 <L_shift>
 800ca10:	4544      	cmp	r4, r8
 800ca12:	d950      	bls.n	800cab6 <__hexnan+0x10a>
 800ca14:	2300      	movs	r3, #0
 800ca16:	f1a4 0904 	sub.w	r9, r4, #4
 800ca1a:	f844 3c04 	str.w	r3, [r4, #-4]
 800ca1e:	f8cd b008 	str.w	fp, [sp, #8]
 800ca22:	464c      	mov	r4, r9
 800ca24:	461d      	mov	r5, r3
 800ca26:	9903      	ldr	r1, [sp, #12]
 800ca28:	e7d7      	b.n	800c9da <__hexnan+0x2e>
 800ca2a:	2a29      	cmp	r2, #41	; 0x29
 800ca2c:	d155      	bne.n	800cada <__hexnan+0x12e>
 800ca2e:	3102      	adds	r1, #2
 800ca30:	f8ca 1000 	str.w	r1, [sl]
 800ca34:	f1bb 0f00 	cmp.w	fp, #0
 800ca38:	d04f      	beq.n	800cada <__hexnan+0x12e>
 800ca3a:	454c      	cmp	r4, r9
 800ca3c:	d206      	bcs.n	800ca4c <__hexnan+0xa0>
 800ca3e:	2d07      	cmp	r5, #7
 800ca40:	dc04      	bgt.n	800ca4c <__hexnan+0xa0>
 800ca42:	462a      	mov	r2, r5
 800ca44:	4649      	mov	r1, r9
 800ca46:	4620      	mov	r0, r4
 800ca48:	f7ff ff8a 	bl	800c960 <L_shift>
 800ca4c:	4544      	cmp	r4, r8
 800ca4e:	d934      	bls.n	800caba <__hexnan+0x10e>
 800ca50:	f1a8 0204 	sub.w	r2, r8, #4
 800ca54:	4623      	mov	r3, r4
 800ca56:	f853 1b04 	ldr.w	r1, [r3], #4
 800ca5a:	f842 1f04 	str.w	r1, [r2, #4]!
 800ca5e:	429f      	cmp	r7, r3
 800ca60:	d2f9      	bcs.n	800ca56 <__hexnan+0xaa>
 800ca62:	1b3b      	subs	r3, r7, r4
 800ca64:	f023 0303 	bic.w	r3, r3, #3
 800ca68:	3304      	adds	r3, #4
 800ca6a:	3e03      	subs	r6, #3
 800ca6c:	3401      	adds	r4, #1
 800ca6e:	42a6      	cmp	r6, r4
 800ca70:	bf38      	it	cc
 800ca72:	2304      	movcc	r3, #4
 800ca74:	4443      	add	r3, r8
 800ca76:	2200      	movs	r2, #0
 800ca78:	f843 2b04 	str.w	r2, [r3], #4
 800ca7c:	429f      	cmp	r7, r3
 800ca7e:	d2fb      	bcs.n	800ca78 <__hexnan+0xcc>
 800ca80:	683b      	ldr	r3, [r7, #0]
 800ca82:	b91b      	cbnz	r3, 800ca8c <__hexnan+0xe0>
 800ca84:	4547      	cmp	r7, r8
 800ca86:	d126      	bne.n	800cad6 <__hexnan+0x12a>
 800ca88:	2301      	movs	r3, #1
 800ca8a:	603b      	str	r3, [r7, #0]
 800ca8c:	2005      	movs	r0, #5
 800ca8e:	e025      	b.n	800cadc <__hexnan+0x130>
 800ca90:	3501      	adds	r5, #1
 800ca92:	2d08      	cmp	r5, #8
 800ca94:	f10b 0b01 	add.w	fp, fp, #1
 800ca98:	dd06      	ble.n	800caa8 <__hexnan+0xfc>
 800ca9a:	4544      	cmp	r4, r8
 800ca9c:	d9c3      	bls.n	800ca26 <__hexnan+0x7a>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f844 3c04 	str.w	r3, [r4, #-4]
 800caa4:	2501      	movs	r5, #1
 800caa6:	3c04      	subs	r4, #4
 800caa8:	6822      	ldr	r2, [r4, #0]
 800caaa:	f000 000f 	and.w	r0, r0, #15
 800caae:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800cab2:	6020      	str	r0, [r4, #0]
 800cab4:	e7b7      	b.n	800ca26 <__hexnan+0x7a>
 800cab6:	2508      	movs	r5, #8
 800cab8:	e7b5      	b.n	800ca26 <__hexnan+0x7a>
 800caba:	9b01      	ldr	r3, [sp, #4]
 800cabc:	2b00      	cmp	r3, #0
 800cabe:	d0df      	beq.n	800ca80 <__hexnan+0xd4>
 800cac0:	f1c3 0320 	rsb	r3, r3, #32
 800cac4:	f04f 32ff 	mov.w	r2, #4294967295
 800cac8:	40da      	lsrs	r2, r3
 800caca:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800cace:	4013      	ands	r3, r2
 800cad0:	f846 3c04 	str.w	r3, [r6, #-4]
 800cad4:	e7d4      	b.n	800ca80 <__hexnan+0xd4>
 800cad6:	3f04      	subs	r7, #4
 800cad8:	e7d2      	b.n	800ca80 <__hexnan+0xd4>
 800cada:	2004      	movs	r0, #4
 800cadc:	b007      	add	sp, #28
 800cade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cae2 <__ascii_mbtowc>:
 800cae2:	b082      	sub	sp, #8
 800cae4:	b901      	cbnz	r1, 800cae8 <__ascii_mbtowc+0x6>
 800cae6:	a901      	add	r1, sp, #4
 800cae8:	b142      	cbz	r2, 800cafc <__ascii_mbtowc+0x1a>
 800caea:	b14b      	cbz	r3, 800cb00 <__ascii_mbtowc+0x1e>
 800caec:	7813      	ldrb	r3, [r2, #0]
 800caee:	600b      	str	r3, [r1, #0]
 800caf0:	7812      	ldrb	r2, [r2, #0]
 800caf2:	1e10      	subs	r0, r2, #0
 800caf4:	bf18      	it	ne
 800caf6:	2001      	movne	r0, #1
 800caf8:	b002      	add	sp, #8
 800cafa:	4770      	bx	lr
 800cafc:	4610      	mov	r0, r2
 800cafe:	e7fb      	b.n	800caf8 <__ascii_mbtowc+0x16>
 800cb00:	f06f 0001 	mvn.w	r0, #1
 800cb04:	e7f8      	b.n	800caf8 <__ascii_mbtowc+0x16>
	...

0800cb08 <_Balloc>:
 800cb08:	b570      	push	{r4, r5, r6, lr}
 800cb0a:	69c6      	ldr	r6, [r0, #28]
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	460d      	mov	r5, r1
 800cb10:	b976      	cbnz	r6, 800cb30 <_Balloc+0x28>
 800cb12:	2010      	movs	r0, #16
 800cb14:	f7fc fd34 	bl	8009580 <malloc>
 800cb18:	4602      	mov	r2, r0
 800cb1a:	61e0      	str	r0, [r4, #28]
 800cb1c:	b920      	cbnz	r0, 800cb28 <_Balloc+0x20>
 800cb1e:	4b18      	ldr	r3, [pc, #96]	; (800cb80 <_Balloc+0x78>)
 800cb20:	4818      	ldr	r0, [pc, #96]	; (800cb84 <_Balloc+0x7c>)
 800cb22:	216b      	movs	r1, #107	; 0x6b
 800cb24:	f001 f920 	bl	800dd68 <__assert_func>
 800cb28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cb2c:	6006      	str	r6, [r0, #0]
 800cb2e:	60c6      	str	r6, [r0, #12]
 800cb30:	69e6      	ldr	r6, [r4, #28]
 800cb32:	68f3      	ldr	r3, [r6, #12]
 800cb34:	b183      	cbz	r3, 800cb58 <_Balloc+0x50>
 800cb36:	69e3      	ldr	r3, [r4, #28]
 800cb38:	68db      	ldr	r3, [r3, #12]
 800cb3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cb3e:	b9b8      	cbnz	r0, 800cb70 <_Balloc+0x68>
 800cb40:	2101      	movs	r1, #1
 800cb42:	fa01 f605 	lsl.w	r6, r1, r5
 800cb46:	1d72      	adds	r2, r6, #5
 800cb48:	0092      	lsls	r2, r2, #2
 800cb4a:	4620      	mov	r0, r4
 800cb4c:	f001 f92a 	bl	800dda4 <_calloc_r>
 800cb50:	b160      	cbz	r0, 800cb6c <_Balloc+0x64>
 800cb52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cb56:	e00e      	b.n	800cb76 <_Balloc+0x6e>
 800cb58:	2221      	movs	r2, #33	; 0x21
 800cb5a:	2104      	movs	r1, #4
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f001 f921 	bl	800dda4 <_calloc_r>
 800cb62:	69e3      	ldr	r3, [r4, #28]
 800cb64:	60f0      	str	r0, [r6, #12]
 800cb66:	68db      	ldr	r3, [r3, #12]
 800cb68:	2b00      	cmp	r3, #0
 800cb6a:	d1e4      	bne.n	800cb36 <_Balloc+0x2e>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}
 800cb70:	6802      	ldr	r2, [r0, #0]
 800cb72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cb76:	2300      	movs	r3, #0
 800cb78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cb7c:	e7f7      	b.n	800cb6e <_Balloc+0x66>
 800cb7e:	bf00      	nop
 800cb80:	08045c1e 	.word	0x08045c1e
 800cb84:	08045cfe 	.word	0x08045cfe

0800cb88 <_Bfree>:
 800cb88:	b570      	push	{r4, r5, r6, lr}
 800cb8a:	69c6      	ldr	r6, [r0, #28]
 800cb8c:	4605      	mov	r5, r0
 800cb8e:	460c      	mov	r4, r1
 800cb90:	b976      	cbnz	r6, 800cbb0 <_Bfree+0x28>
 800cb92:	2010      	movs	r0, #16
 800cb94:	f7fc fcf4 	bl	8009580 <malloc>
 800cb98:	4602      	mov	r2, r0
 800cb9a:	61e8      	str	r0, [r5, #28]
 800cb9c:	b920      	cbnz	r0, 800cba8 <_Bfree+0x20>
 800cb9e:	4b09      	ldr	r3, [pc, #36]	; (800cbc4 <_Bfree+0x3c>)
 800cba0:	4809      	ldr	r0, [pc, #36]	; (800cbc8 <_Bfree+0x40>)
 800cba2:	218f      	movs	r1, #143	; 0x8f
 800cba4:	f001 f8e0 	bl	800dd68 <__assert_func>
 800cba8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cbac:	6006      	str	r6, [r0, #0]
 800cbae:	60c6      	str	r6, [r0, #12]
 800cbb0:	b13c      	cbz	r4, 800cbc2 <_Bfree+0x3a>
 800cbb2:	69eb      	ldr	r3, [r5, #28]
 800cbb4:	6862      	ldr	r2, [r4, #4]
 800cbb6:	68db      	ldr	r3, [r3, #12]
 800cbb8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cbbc:	6021      	str	r1, [r4, #0]
 800cbbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	08045c1e 	.word	0x08045c1e
 800cbc8:	08045cfe 	.word	0x08045cfe

0800cbcc <__multadd>:
 800cbcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cbd0:	690d      	ldr	r5, [r1, #16]
 800cbd2:	4607      	mov	r7, r0
 800cbd4:	460c      	mov	r4, r1
 800cbd6:	461e      	mov	r6, r3
 800cbd8:	f101 0c14 	add.w	ip, r1, #20
 800cbdc:	2000      	movs	r0, #0
 800cbde:	f8dc 3000 	ldr.w	r3, [ip]
 800cbe2:	b299      	uxth	r1, r3
 800cbe4:	fb02 6101 	mla	r1, r2, r1, r6
 800cbe8:	0c1e      	lsrs	r6, r3, #16
 800cbea:	0c0b      	lsrs	r3, r1, #16
 800cbec:	fb02 3306 	mla	r3, r2, r6, r3
 800cbf0:	b289      	uxth	r1, r1
 800cbf2:	3001      	adds	r0, #1
 800cbf4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cbf8:	4285      	cmp	r5, r0
 800cbfa:	f84c 1b04 	str.w	r1, [ip], #4
 800cbfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cc02:	dcec      	bgt.n	800cbde <__multadd+0x12>
 800cc04:	b30e      	cbz	r6, 800cc4a <__multadd+0x7e>
 800cc06:	68a3      	ldr	r3, [r4, #8]
 800cc08:	42ab      	cmp	r3, r5
 800cc0a:	dc19      	bgt.n	800cc40 <__multadd+0x74>
 800cc0c:	6861      	ldr	r1, [r4, #4]
 800cc0e:	4638      	mov	r0, r7
 800cc10:	3101      	adds	r1, #1
 800cc12:	f7ff ff79 	bl	800cb08 <_Balloc>
 800cc16:	4680      	mov	r8, r0
 800cc18:	b928      	cbnz	r0, 800cc26 <__multadd+0x5a>
 800cc1a:	4602      	mov	r2, r0
 800cc1c:	4b0c      	ldr	r3, [pc, #48]	; (800cc50 <__multadd+0x84>)
 800cc1e:	480d      	ldr	r0, [pc, #52]	; (800cc54 <__multadd+0x88>)
 800cc20:	21ba      	movs	r1, #186	; 0xba
 800cc22:	f001 f8a1 	bl	800dd68 <__assert_func>
 800cc26:	6922      	ldr	r2, [r4, #16]
 800cc28:	3202      	adds	r2, #2
 800cc2a:	f104 010c 	add.w	r1, r4, #12
 800cc2e:	0092      	lsls	r2, r2, #2
 800cc30:	300c      	adds	r0, #12
 800cc32:	f7fe fd1a 	bl	800b66a <memcpy>
 800cc36:	4621      	mov	r1, r4
 800cc38:	4638      	mov	r0, r7
 800cc3a:	f7ff ffa5 	bl	800cb88 <_Bfree>
 800cc3e:	4644      	mov	r4, r8
 800cc40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cc44:	3501      	adds	r5, #1
 800cc46:	615e      	str	r6, [r3, #20]
 800cc48:	6125      	str	r5, [r4, #16]
 800cc4a:	4620      	mov	r0, r4
 800cc4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cc50:	08045c8d 	.word	0x08045c8d
 800cc54:	08045cfe 	.word	0x08045cfe

0800cc58 <__s2b>:
 800cc58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cc5c:	460c      	mov	r4, r1
 800cc5e:	4615      	mov	r5, r2
 800cc60:	461f      	mov	r7, r3
 800cc62:	2209      	movs	r2, #9
 800cc64:	3308      	adds	r3, #8
 800cc66:	4606      	mov	r6, r0
 800cc68:	fb93 f3f2 	sdiv	r3, r3, r2
 800cc6c:	2100      	movs	r1, #0
 800cc6e:	2201      	movs	r2, #1
 800cc70:	429a      	cmp	r2, r3
 800cc72:	db09      	blt.n	800cc88 <__s2b+0x30>
 800cc74:	4630      	mov	r0, r6
 800cc76:	f7ff ff47 	bl	800cb08 <_Balloc>
 800cc7a:	b940      	cbnz	r0, 800cc8e <__s2b+0x36>
 800cc7c:	4602      	mov	r2, r0
 800cc7e:	4b19      	ldr	r3, [pc, #100]	; (800cce4 <__s2b+0x8c>)
 800cc80:	4819      	ldr	r0, [pc, #100]	; (800cce8 <__s2b+0x90>)
 800cc82:	21d3      	movs	r1, #211	; 0xd3
 800cc84:	f001 f870 	bl	800dd68 <__assert_func>
 800cc88:	0052      	lsls	r2, r2, #1
 800cc8a:	3101      	adds	r1, #1
 800cc8c:	e7f0      	b.n	800cc70 <__s2b+0x18>
 800cc8e:	9b08      	ldr	r3, [sp, #32]
 800cc90:	6143      	str	r3, [r0, #20]
 800cc92:	2d09      	cmp	r5, #9
 800cc94:	f04f 0301 	mov.w	r3, #1
 800cc98:	6103      	str	r3, [r0, #16]
 800cc9a:	dd16      	ble.n	800ccca <__s2b+0x72>
 800cc9c:	f104 0909 	add.w	r9, r4, #9
 800cca0:	46c8      	mov	r8, r9
 800cca2:	442c      	add	r4, r5
 800cca4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cca8:	4601      	mov	r1, r0
 800ccaa:	3b30      	subs	r3, #48	; 0x30
 800ccac:	220a      	movs	r2, #10
 800ccae:	4630      	mov	r0, r6
 800ccb0:	f7ff ff8c 	bl	800cbcc <__multadd>
 800ccb4:	45a0      	cmp	r8, r4
 800ccb6:	d1f5      	bne.n	800cca4 <__s2b+0x4c>
 800ccb8:	f1a5 0408 	sub.w	r4, r5, #8
 800ccbc:	444c      	add	r4, r9
 800ccbe:	1b2d      	subs	r5, r5, r4
 800ccc0:	1963      	adds	r3, r4, r5
 800ccc2:	42bb      	cmp	r3, r7
 800ccc4:	db04      	blt.n	800ccd0 <__s2b+0x78>
 800ccc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ccca:	340a      	adds	r4, #10
 800cccc:	2509      	movs	r5, #9
 800ccce:	e7f6      	b.n	800ccbe <__s2b+0x66>
 800ccd0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ccd4:	4601      	mov	r1, r0
 800ccd6:	3b30      	subs	r3, #48	; 0x30
 800ccd8:	220a      	movs	r2, #10
 800ccda:	4630      	mov	r0, r6
 800ccdc:	f7ff ff76 	bl	800cbcc <__multadd>
 800cce0:	e7ee      	b.n	800ccc0 <__s2b+0x68>
 800cce2:	bf00      	nop
 800cce4:	08045c8d 	.word	0x08045c8d
 800cce8:	08045cfe 	.word	0x08045cfe

0800ccec <__hi0bits>:
 800ccec:	0c03      	lsrs	r3, r0, #16
 800ccee:	041b      	lsls	r3, r3, #16
 800ccf0:	b9d3      	cbnz	r3, 800cd28 <__hi0bits+0x3c>
 800ccf2:	0400      	lsls	r0, r0, #16
 800ccf4:	2310      	movs	r3, #16
 800ccf6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ccfa:	bf04      	itt	eq
 800ccfc:	0200      	lsleq	r0, r0, #8
 800ccfe:	3308      	addeq	r3, #8
 800cd00:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800cd04:	bf04      	itt	eq
 800cd06:	0100      	lsleq	r0, r0, #4
 800cd08:	3304      	addeq	r3, #4
 800cd0a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800cd0e:	bf04      	itt	eq
 800cd10:	0080      	lsleq	r0, r0, #2
 800cd12:	3302      	addeq	r3, #2
 800cd14:	2800      	cmp	r0, #0
 800cd16:	db05      	blt.n	800cd24 <__hi0bits+0x38>
 800cd18:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800cd1c:	f103 0301 	add.w	r3, r3, #1
 800cd20:	bf08      	it	eq
 800cd22:	2320      	moveq	r3, #32
 800cd24:	4618      	mov	r0, r3
 800cd26:	4770      	bx	lr
 800cd28:	2300      	movs	r3, #0
 800cd2a:	e7e4      	b.n	800ccf6 <__hi0bits+0xa>

0800cd2c <__lo0bits>:
 800cd2c:	6803      	ldr	r3, [r0, #0]
 800cd2e:	f013 0207 	ands.w	r2, r3, #7
 800cd32:	d00c      	beq.n	800cd4e <__lo0bits+0x22>
 800cd34:	07d9      	lsls	r1, r3, #31
 800cd36:	d422      	bmi.n	800cd7e <__lo0bits+0x52>
 800cd38:	079a      	lsls	r2, r3, #30
 800cd3a:	bf49      	itett	mi
 800cd3c:	085b      	lsrmi	r3, r3, #1
 800cd3e:	089b      	lsrpl	r3, r3, #2
 800cd40:	6003      	strmi	r3, [r0, #0]
 800cd42:	2201      	movmi	r2, #1
 800cd44:	bf5c      	itt	pl
 800cd46:	6003      	strpl	r3, [r0, #0]
 800cd48:	2202      	movpl	r2, #2
 800cd4a:	4610      	mov	r0, r2
 800cd4c:	4770      	bx	lr
 800cd4e:	b299      	uxth	r1, r3
 800cd50:	b909      	cbnz	r1, 800cd56 <__lo0bits+0x2a>
 800cd52:	0c1b      	lsrs	r3, r3, #16
 800cd54:	2210      	movs	r2, #16
 800cd56:	b2d9      	uxtb	r1, r3
 800cd58:	b909      	cbnz	r1, 800cd5e <__lo0bits+0x32>
 800cd5a:	3208      	adds	r2, #8
 800cd5c:	0a1b      	lsrs	r3, r3, #8
 800cd5e:	0719      	lsls	r1, r3, #28
 800cd60:	bf04      	itt	eq
 800cd62:	091b      	lsreq	r3, r3, #4
 800cd64:	3204      	addeq	r2, #4
 800cd66:	0799      	lsls	r1, r3, #30
 800cd68:	bf04      	itt	eq
 800cd6a:	089b      	lsreq	r3, r3, #2
 800cd6c:	3202      	addeq	r2, #2
 800cd6e:	07d9      	lsls	r1, r3, #31
 800cd70:	d403      	bmi.n	800cd7a <__lo0bits+0x4e>
 800cd72:	085b      	lsrs	r3, r3, #1
 800cd74:	f102 0201 	add.w	r2, r2, #1
 800cd78:	d003      	beq.n	800cd82 <__lo0bits+0x56>
 800cd7a:	6003      	str	r3, [r0, #0]
 800cd7c:	e7e5      	b.n	800cd4a <__lo0bits+0x1e>
 800cd7e:	2200      	movs	r2, #0
 800cd80:	e7e3      	b.n	800cd4a <__lo0bits+0x1e>
 800cd82:	2220      	movs	r2, #32
 800cd84:	e7e1      	b.n	800cd4a <__lo0bits+0x1e>
	...

0800cd88 <__i2b>:
 800cd88:	b510      	push	{r4, lr}
 800cd8a:	460c      	mov	r4, r1
 800cd8c:	2101      	movs	r1, #1
 800cd8e:	f7ff febb 	bl	800cb08 <_Balloc>
 800cd92:	4602      	mov	r2, r0
 800cd94:	b928      	cbnz	r0, 800cda2 <__i2b+0x1a>
 800cd96:	4b05      	ldr	r3, [pc, #20]	; (800cdac <__i2b+0x24>)
 800cd98:	4805      	ldr	r0, [pc, #20]	; (800cdb0 <__i2b+0x28>)
 800cd9a:	f240 1145 	movw	r1, #325	; 0x145
 800cd9e:	f000 ffe3 	bl	800dd68 <__assert_func>
 800cda2:	2301      	movs	r3, #1
 800cda4:	6144      	str	r4, [r0, #20]
 800cda6:	6103      	str	r3, [r0, #16]
 800cda8:	bd10      	pop	{r4, pc}
 800cdaa:	bf00      	nop
 800cdac:	08045c8d 	.word	0x08045c8d
 800cdb0:	08045cfe 	.word	0x08045cfe

0800cdb4 <__multiply>:
 800cdb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdb8:	4691      	mov	r9, r2
 800cdba:	690a      	ldr	r2, [r1, #16]
 800cdbc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cdc0:	429a      	cmp	r2, r3
 800cdc2:	bfb8      	it	lt
 800cdc4:	460b      	movlt	r3, r1
 800cdc6:	460c      	mov	r4, r1
 800cdc8:	bfbc      	itt	lt
 800cdca:	464c      	movlt	r4, r9
 800cdcc:	4699      	movlt	r9, r3
 800cdce:	6927      	ldr	r7, [r4, #16]
 800cdd0:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cdd4:	68a3      	ldr	r3, [r4, #8]
 800cdd6:	6861      	ldr	r1, [r4, #4]
 800cdd8:	eb07 060a 	add.w	r6, r7, sl
 800cddc:	42b3      	cmp	r3, r6
 800cdde:	b085      	sub	sp, #20
 800cde0:	bfb8      	it	lt
 800cde2:	3101      	addlt	r1, #1
 800cde4:	f7ff fe90 	bl	800cb08 <_Balloc>
 800cde8:	b930      	cbnz	r0, 800cdf8 <__multiply+0x44>
 800cdea:	4602      	mov	r2, r0
 800cdec:	4b44      	ldr	r3, [pc, #272]	; (800cf00 <__multiply+0x14c>)
 800cdee:	4845      	ldr	r0, [pc, #276]	; (800cf04 <__multiply+0x150>)
 800cdf0:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800cdf4:	f000 ffb8 	bl	800dd68 <__assert_func>
 800cdf8:	f100 0514 	add.w	r5, r0, #20
 800cdfc:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ce00:	462b      	mov	r3, r5
 800ce02:	2200      	movs	r2, #0
 800ce04:	4543      	cmp	r3, r8
 800ce06:	d321      	bcc.n	800ce4c <__multiply+0x98>
 800ce08:	f104 0314 	add.w	r3, r4, #20
 800ce0c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800ce10:	f109 0314 	add.w	r3, r9, #20
 800ce14:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800ce18:	9202      	str	r2, [sp, #8]
 800ce1a:	1b3a      	subs	r2, r7, r4
 800ce1c:	3a15      	subs	r2, #21
 800ce1e:	f022 0203 	bic.w	r2, r2, #3
 800ce22:	3204      	adds	r2, #4
 800ce24:	f104 0115 	add.w	r1, r4, #21
 800ce28:	428f      	cmp	r7, r1
 800ce2a:	bf38      	it	cc
 800ce2c:	2204      	movcc	r2, #4
 800ce2e:	9201      	str	r2, [sp, #4]
 800ce30:	9a02      	ldr	r2, [sp, #8]
 800ce32:	9303      	str	r3, [sp, #12]
 800ce34:	429a      	cmp	r2, r3
 800ce36:	d80c      	bhi.n	800ce52 <__multiply+0x9e>
 800ce38:	2e00      	cmp	r6, #0
 800ce3a:	dd03      	ble.n	800ce44 <__multiply+0x90>
 800ce3c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ce40:	2b00      	cmp	r3, #0
 800ce42:	d05b      	beq.n	800cefc <__multiply+0x148>
 800ce44:	6106      	str	r6, [r0, #16]
 800ce46:	b005      	add	sp, #20
 800ce48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce4c:	f843 2b04 	str.w	r2, [r3], #4
 800ce50:	e7d8      	b.n	800ce04 <__multiply+0x50>
 800ce52:	f8b3 a000 	ldrh.w	sl, [r3]
 800ce56:	f1ba 0f00 	cmp.w	sl, #0
 800ce5a:	d024      	beq.n	800cea6 <__multiply+0xf2>
 800ce5c:	f104 0e14 	add.w	lr, r4, #20
 800ce60:	46a9      	mov	r9, r5
 800ce62:	f04f 0c00 	mov.w	ip, #0
 800ce66:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ce6a:	f8d9 1000 	ldr.w	r1, [r9]
 800ce6e:	fa1f fb82 	uxth.w	fp, r2
 800ce72:	b289      	uxth	r1, r1
 800ce74:	fb0a 110b 	mla	r1, sl, fp, r1
 800ce78:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ce7c:	f8d9 2000 	ldr.w	r2, [r9]
 800ce80:	4461      	add	r1, ip
 800ce82:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce86:	fb0a c20b 	mla	r2, sl, fp, ip
 800ce8a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ce8e:	b289      	uxth	r1, r1
 800ce90:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ce94:	4577      	cmp	r7, lr
 800ce96:	f849 1b04 	str.w	r1, [r9], #4
 800ce9a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ce9e:	d8e2      	bhi.n	800ce66 <__multiply+0xb2>
 800cea0:	9a01      	ldr	r2, [sp, #4]
 800cea2:	f845 c002 	str.w	ip, [r5, r2]
 800cea6:	9a03      	ldr	r2, [sp, #12]
 800cea8:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ceac:	3304      	adds	r3, #4
 800ceae:	f1b9 0f00 	cmp.w	r9, #0
 800ceb2:	d021      	beq.n	800cef8 <__multiply+0x144>
 800ceb4:	6829      	ldr	r1, [r5, #0]
 800ceb6:	f104 0c14 	add.w	ip, r4, #20
 800ceba:	46ae      	mov	lr, r5
 800cebc:	f04f 0a00 	mov.w	sl, #0
 800cec0:	f8bc b000 	ldrh.w	fp, [ip]
 800cec4:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800cec8:	fb09 220b 	mla	r2, r9, fp, r2
 800cecc:	4452      	add	r2, sl
 800cece:	b289      	uxth	r1, r1
 800ced0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ced4:	f84e 1b04 	str.w	r1, [lr], #4
 800ced8:	f85c 1b04 	ldr.w	r1, [ip], #4
 800cedc:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cee0:	f8be 1000 	ldrh.w	r1, [lr]
 800cee4:	fb09 110a 	mla	r1, r9, sl, r1
 800cee8:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800ceec:	4567      	cmp	r7, ip
 800ceee:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800cef2:	d8e5      	bhi.n	800cec0 <__multiply+0x10c>
 800cef4:	9a01      	ldr	r2, [sp, #4]
 800cef6:	50a9      	str	r1, [r5, r2]
 800cef8:	3504      	adds	r5, #4
 800cefa:	e799      	b.n	800ce30 <__multiply+0x7c>
 800cefc:	3e01      	subs	r6, #1
 800cefe:	e79b      	b.n	800ce38 <__multiply+0x84>
 800cf00:	08045c8d 	.word	0x08045c8d
 800cf04:	08045cfe 	.word	0x08045cfe

0800cf08 <__pow5mult>:
 800cf08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cf0c:	4615      	mov	r5, r2
 800cf0e:	f012 0203 	ands.w	r2, r2, #3
 800cf12:	4606      	mov	r6, r0
 800cf14:	460f      	mov	r7, r1
 800cf16:	d007      	beq.n	800cf28 <__pow5mult+0x20>
 800cf18:	4c25      	ldr	r4, [pc, #148]	; (800cfb0 <__pow5mult+0xa8>)
 800cf1a:	3a01      	subs	r2, #1
 800cf1c:	2300      	movs	r3, #0
 800cf1e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800cf22:	f7ff fe53 	bl	800cbcc <__multadd>
 800cf26:	4607      	mov	r7, r0
 800cf28:	10ad      	asrs	r5, r5, #2
 800cf2a:	d03d      	beq.n	800cfa8 <__pow5mult+0xa0>
 800cf2c:	69f4      	ldr	r4, [r6, #28]
 800cf2e:	b97c      	cbnz	r4, 800cf50 <__pow5mult+0x48>
 800cf30:	2010      	movs	r0, #16
 800cf32:	f7fc fb25 	bl	8009580 <malloc>
 800cf36:	4602      	mov	r2, r0
 800cf38:	61f0      	str	r0, [r6, #28]
 800cf3a:	b928      	cbnz	r0, 800cf48 <__pow5mult+0x40>
 800cf3c:	4b1d      	ldr	r3, [pc, #116]	; (800cfb4 <__pow5mult+0xac>)
 800cf3e:	481e      	ldr	r0, [pc, #120]	; (800cfb8 <__pow5mult+0xb0>)
 800cf40:	f240 11b3 	movw	r1, #435	; 0x1b3
 800cf44:	f000 ff10 	bl	800dd68 <__assert_func>
 800cf48:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cf4c:	6004      	str	r4, [r0, #0]
 800cf4e:	60c4      	str	r4, [r0, #12]
 800cf50:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800cf54:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cf58:	b94c      	cbnz	r4, 800cf6e <__pow5mult+0x66>
 800cf5a:	f240 2171 	movw	r1, #625	; 0x271
 800cf5e:	4630      	mov	r0, r6
 800cf60:	f7ff ff12 	bl	800cd88 <__i2b>
 800cf64:	2300      	movs	r3, #0
 800cf66:	f8c8 0008 	str.w	r0, [r8, #8]
 800cf6a:	4604      	mov	r4, r0
 800cf6c:	6003      	str	r3, [r0, #0]
 800cf6e:	f04f 0900 	mov.w	r9, #0
 800cf72:	07eb      	lsls	r3, r5, #31
 800cf74:	d50a      	bpl.n	800cf8c <__pow5mult+0x84>
 800cf76:	4639      	mov	r1, r7
 800cf78:	4622      	mov	r2, r4
 800cf7a:	4630      	mov	r0, r6
 800cf7c:	f7ff ff1a 	bl	800cdb4 <__multiply>
 800cf80:	4639      	mov	r1, r7
 800cf82:	4680      	mov	r8, r0
 800cf84:	4630      	mov	r0, r6
 800cf86:	f7ff fdff 	bl	800cb88 <_Bfree>
 800cf8a:	4647      	mov	r7, r8
 800cf8c:	106d      	asrs	r5, r5, #1
 800cf8e:	d00b      	beq.n	800cfa8 <__pow5mult+0xa0>
 800cf90:	6820      	ldr	r0, [r4, #0]
 800cf92:	b938      	cbnz	r0, 800cfa4 <__pow5mult+0x9c>
 800cf94:	4622      	mov	r2, r4
 800cf96:	4621      	mov	r1, r4
 800cf98:	4630      	mov	r0, r6
 800cf9a:	f7ff ff0b 	bl	800cdb4 <__multiply>
 800cf9e:	6020      	str	r0, [r4, #0]
 800cfa0:	f8c0 9000 	str.w	r9, [r0]
 800cfa4:	4604      	mov	r4, r0
 800cfa6:	e7e4      	b.n	800cf72 <__pow5mult+0x6a>
 800cfa8:	4638      	mov	r0, r7
 800cfaa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cfae:	bf00      	nop
 800cfb0:	08045e48 	.word	0x08045e48
 800cfb4:	08045c1e 	.word	0x08045c1e
 800cfb8:	08045cfe 	.word	0x08045cfe

0800cfbc <__lshift>:
 800cfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cfc0:	460c      	mov	r4, r1
 800cfc2:	6849      	ldr	r1, [r1, #4]
 800cfc4:	6923      	ldr	r3, [r4, #16]
 800cfc6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cfca:	68a3      	ldr	r3, [r4, #8]
 800cfcc:	4607      	mov	r7, r0
 800cfce:	4691      	mov	r9, r2
 800cfd0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cfd4:	f108 0601 	add.w	r6, r8, #1
 800cfd8:	42b3      	cmp	r3, r6
 800cfda:	db0b      	blt.n	800cff4 <__lshift+0x38>
 800cfdc:	4638      	mov	r0, r7
 800cfde:	f7ff fd93 	bl	800cb08 <_Balloc>
 800cfe2:	4605      	mov	r5, r0
 800cfe4:	b948      	cbnz	r0, 800cffa <__lshift+0x3e>
 800cfe6:	4602      	mov	r2, r0
 800cfe8:	4b28      	ldr	r3, [pc, #160]	; (800d08c <__lshift+0xd0>)
 800cfea:	4829      	ldr	r0, [pc, #164]	; (800d090 <__lshift+0xd4>)
 800cfec:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800cff0:	f000 feba 	bl	800dd68 <__assert_func>
 800cff4:	3101      	adds	r1, #1
 800cff6:	005b      	lsls	r3, r3, #1
 800cff8:	e7ee      	b.n	800cfd8 <__lshift+0x1c>
 800cffa:	2300      	movs	r3, #0
 800cffc:	f100 0114 	add.w	r1, r0, #20
 800d000:	f100 0210 	add.w	r2, r0, #16
 800d004:	4618      	mov	r0, r3
 800d006:	4553      	cmp	r3, sl
 800d008:	db33      	blt.n	800d072 <__lshift+0xb6>
 800d00a:	6920      	ldr	r0, [r4, #16]
 800d00c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d010:	f104 0314 	add.w	r3, r4, #20
 800d014:	f019 091f 	ands.w	r9, r9, #31
 800d018:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d01c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800d020:	d02b      	beq.n	800d07a <__lshift+0xbe>
 800d022:	f1c9 0e20 	rsb	lr, r9, #32
 800d026:	468a      	mov	sl, r1
 800d028:	2200      	movs	r2, #0
 800d02a:	6818      	ldr	r0, [r3, #0]
 800d02c:	fa00 f009 	lsl.w	r0, r0, r9
 800d030:	4310      	orrs	r0, r2
 800d032:	f84a 0b04 	str.w	r0, [sl], #4
 800d036:	f853 2b04 	ldr.w	r2, [r3], #4
 800d03a:	459c      	cmp	ip, r3
 800d03c:	fa22 f20e 	lsr.w	r2, r2, lr
 800d040:	d8f3      	bhi.n	800d02a <__lshift+0x6e>
 800d042:	ebac 0304 	sub.w	r3, ip, r4
 800d046:	3b15      	subs	r3, #21
 800d048:	f023 0303 	bic.w	r3, r3, #3
 800d04c:	3304      	adds	r3, #4
 800d04e:	f104 0015 	add.w	r0, r4, #21
 800d052:	4584      	cmp	ip, r0
 800d054:	bf38      	it	cc
 800d056:	2304      	movcc	r3, #4
 800d058:	50ca      	str	r2, [r1, r3]
 800d05a:	b10a      	cbz	r2, 800d060 <__lshift+0xa4>
 800d05c:	f108 0602 	add.w	r6, r8, #2
 800d060:	3e01      	subs	r6, #1
 800d062:	4638      	mov	r0, r7
 800d064:	612e      	str	r6, [r5, #16]
 800d066:	4621      	mov	r1, r4
 800d068:	f7ff fd8e 	bl	800cb88 <_Bfree>
 800d06c:	4628      	mov	r0, r5
 800d06e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d072:	f842 0f04 	str.w	r0, [r2, #4]!
 800d076:	3301      	adds	r3, #1
 800d078:	e7c5      	b.n	800d006 <__lshift+0x4a>
 800d07a:	3904      	subs	r1, #4
 800d07c:	f853 2b04 	ldr.w	r2, [r3], #4
 800d080:	f841 2f04 	str.w	r2, [r1, #4]!
 800d084:	459c      	cmp	ip, r3
 800d086:	d8f9      	bhi.n	800d07c <__lshift+0xc0>
 800d088:	e7ea      	b.n	800d060 <__lshift+0xa4>
 800d08a:	bf00      	nop
 800d08c:	08045c8d 	.word	0x08045c8d
 800d090:	08045cfe 	.word	0x08045cfe

0800d094 <__mcmp>:
 800d094:	b530      	push	{r4, r5, lr}
 800d096:	6902      	ldr	r2, [r0, #16]
 800d098:	690c      	ldr	r4, [r1, #16]
 800d09a:	1b12      	subs	r2, r2, r4
 800d09c:	d10e      	bne.n	800d0bc <__mcmp+0x28>
 800d09e:	f100 0314 	add.w	r3, r0, #20
 800d0a2:	3114      	adds	r1, #20
 800d0a4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d0a8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d0ac:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d0b0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d0b4:	42a5      	cmp	r5, r4
 800d0b6:	d003      	beq.n	800d0c0 <__mcmp+0x2c>
 800d0b8:	d305      	bcc.n	800d0c6 <__mcmp+0x32>
 800d0ba:	2201      	movs	r2, #1
 800d0bc:	4610      	mov	r0, r2
 800d0be:	bd30      	pop	{r4, r5, pc}
 800d0c0:	4283      	cmp	r3, r0
 800d0c2:	d3f3      	bcc.n	800d0ac <__mcmp+0x18>
 800d0c4:	e7fa      	b.n	800d0bc <__mcmp+0x28>
 800d0c6:	f04f 32ff 	mov.w	r2, #4294967295
 800d0ca:	e7f7      	b.n	800d0bc <__mcmp+0x28>

0800d0cc <__mdiff>:
 800d0cc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0d0:	460c      	mov	r4, r1
 800d0d2:	4606      	mov	r6, r0
 800d0d4:	4611      	mov	r1, r2
 800d0d6:	4620      	mov	r0, r4
 800d0d8:	4690      	mov	r8, r2
 800d0da:	f7ff ffdb 	bl	800d094 <__mcmp>
 800d0de:	1e05      	subs	r5, r0, #0
 800d0e0:	d110      	bne.n	800d104 <__mdiff+0x38>
 800d0e2:	4629      	mov	r1, r5
 800d0e4:	4630      	mov	r0, r6
 800d0e6:	f7ff fd0f 	bl	800cb08 <_Balloc>
 800d0ea:	b930      	cbnz	r0, 800d0fa <__mdiff+0x2e>
 800d0ec:	4b3a      	ldr	r3, [pc, #232]	; (800d1d8 <__mdiff+0x10c>)
 800d0ee:	4602      	mov	r2, r0
 800d0f0:	f240 2137 	movw	r1, #567	; 0x237
 800d0f4:	4839      	ldr	r0, [pc, #228]	; (800d1dc <__mdiff+0x110>)
 800d0f6:	f000 fe37 	bl	800dd68 <__assert_func>
 800d0fa:	2301      	movs	r3, #1
 800d0fc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d100:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d104:	bfa4      	itt	ge
 800d106:	4643      	movge	r3, r8
 800d108:	46a0      	movge	r8, r4
 800d10a:	4630      	mov	r0, r6
 800d10c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d110:	bfa6      	itte	ge
 800d112:	461c      	movge	r4, r3
 800d114:	2500      	movge	r5, #0
 800d116:	2501      	movlt	r5, #1
 800d118:	f7ff fcf6 	bl	800cb08 <_Balloc>
 800d11c:	b920      	cbnz	r0, 800d128 <__mdiff+0x5c>
 800d11e:	4b2e      	ldr	r3, [pc, #184]	; (800d1d8 <__mdiff+0x10c>)
 800d120:	4602      	mov	r2, r0
 800d122:	f240 2145 	movw	r1, #581	; 0x245
 800d126:	e7e5      	b.n	800d0f4 <__mdiff+0x28>
 800d128:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d12c:	6926      	ldr	r6, [r4, #16]
 800d12e:	60c5      	str	r5, [r0, #12]
 800d130:	f104 0914 	add.w	r9, r4, #20
 800d134:	f108 0514 	add.w	r5, r8, #20
 800d138:	f100 0e14 	add.w	lr, r0, #20
 800d13c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d140:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d144:	f108 0210 	add.w	r2, r8, #16
 800d148:	46f2      	mov	sl, lr
 800d14a:	2100      	movs	r1, #0
 800d14c:	f859 3b04 	ldr.w	r3, [r9], #4
 800d150:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d154:	fa11 f88b 	uxtah	r8, r1, fp
 800d158:	b299      	uxth	r1, r3
 800d15a:	0c1b      	lsrs	r3, r3, #16
 800d15c:	eba8 0801 	sub.w	r8, r8, r1
 800d160:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d164:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d168:	fa1f f888 	uxth.w	r8, r8
 800d16c:	1419      	asrs	r1, r3, #16
 800d16e:	454e      	cmp	r6, r9
 800d170:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d174:	f84a 3b04 	str.w	r3, [sl], #4
 800d178:	d8e8      	bhi.n	800d14c <__mdiff+0x80>
 800d17a:	1b33      	subs	r3, r6, r4
 800d17c:	3b15      	subs	r3, #21
 800d17e:	f023 0303 	bic.w	r3, r3, #3
 800d182:	3304      	adds	r3, #4
 800d184:	3415      	adds	r4, #21
 800d186:	42a6      	cmp	r6, r4
 800d188:	bf38      	it	cc
 800d18a:	2304      	movcc	r3, #4
 800d18c:	441d      	add	r5, r3
 800d18e:	4473      	add	r3, lr
 800d190:	469e      	mov	lr, r3
 800d192:	462e      	mov	r6, r5
 800d194:	4566      	cmp	r6, ip
 800d196:	d30e      	bcc.n	800d1b6 <__mdiff+0xea>
 800d198:	f10c 0203 	add.w	r2, ip, #3
 800d19c:	1b52      	subs	r2, r2, r5
 800d19e:	f022 0203 	bic.w	r2, r2, #3
 800d1a2:	3d03      	subs	r5, #3
 800d1a4:	45ac      	cmp	ip, r5
 800d1a6:	bf38      	it	cc
 800d1a8:	2200      	movcc	r2, #0
 800d1aa:	4413      	add	r3, r2
 800d1ac:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800d1b0:	b17a      	cbz	r2, 800d1d2 <__mdiff+0x106>
 800d1b2:	6107      	str	r7, [r0, #16]
 800d1b4:	e7a4      	b.n	800d100 <__mdiff+0x34>
 800d1b6:	f856 8b04 	ldr.w	r8, [r6], #4
 800d1ba:	fa11 f288 	uxtah	r2, r1, r8
 800d1be:	1414      	asrs	r4, r2, #16
 800d1c0:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d1c4:	b292      	uxth	r2, r2
 800d1c6:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d1ca:	f84e 2b04 	str.w	r2, [lr], #4
 800d1ce:	1421      	asrs	r1, r4, #16
 800d1d0:	e7e0      	b.n	800d194 <__mdiff+0xc8>
 800d1d2:	3f01      	subs	r7, #1
 800d1d4:	e7ea      	b.n	800d1ac <__mdiff+0xe0>
 800d1d6:	bf00      	nop
 800d1d8:	08045c8d 	.word	0x08045c8d
 800d1dc:	08045cfe 	.word	0x08045cfe

0800d1e0 <__ulp>:
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	ed8d 0b00 	vstr	d0, [sp]
 800d1e6:	9a01      	ldr	r2, [sp, #4]
 800d1e8:	4b0f      	ldr	r3, [pc, #60]	; (800d228 <__ulp+0x48>)
 800d1ea:	4013      	ands	r3, r2
 800d1ec:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d1f0:	2b00      	cmp	r3, #0
 800d1f2:	dc08      	bgt.n	800d206 <__ulp+0x26>
 800d1f4:	425b      	negs	r3, r3
 800d1f6:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d1fa:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d1fe:	da04      	bge.n	800d20a <__ulp+0x2a>
 800d200:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d204:	4113      	asrs	r3, r2
 800d206:	2200      	movs	r2, #0
 800d208:	e008      	b.n	800d21c <__ulp+0x3c>
 800d20a:	f1a2 0314 	sub.w	r3, r2, #20
 800d20e:	2b1e      	cmp	r3, #30
 800d210:	bfda      	itte	le
 800d212:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d216:	40da      	lsrle	r2, r3
 800d218:	2201      	movgt	r2, #1
 800d21a:	2300      	movs	r3, #0
 800d21c:	4619      	mov	r1, r3
 800d21e:	4610      	mov	r0, r2
 800d220:	ec41 0b10 	vmov	d0, r0, r1
 800d224:	b002      	add	sp, #8
 800d226:	4770      	bx	lr
 800d228:	7ff00000 	.word	0x7ff00000

0800d22c <__b2d>:
 800d22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d230:	6906      	ldr	r6, [r0, #16]
 800d232:	f100 0814 	add.w	r8, r0, #20
 800d236:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800d23a:	1f37      	subs	r7, r6, #4
 800d23c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800d240:	4610      	mov	r0, r2
 800d242:	f7ff fd53 	bl	800ccec <__hi0bits>
 800d246:	f1c0 0320 	rsb	r3, r0, #32
 800d24a:	280a      	cmp	r0, #10
 800d24c:	600b      	str	r3, [r1, #0]
 800d24e:	491b      	ldr	r1, [pc, #108]	; (800d2bc <__b2d+0x90>)
 800d250:	dc15      	bgt.n	800d27e <__b2d+0x52>
 800d252:	f1c0 0c0b 	rsb	ip, r0, #11
 800d256:	fa22 f30c 	lsr.w	r3, r2, ip
 800d25a:	45b8      	cmp	r8, r7
 800d25c:	ea43 0501 	orr.w	r5, r3, r1
 800d260:	bf34      	ite	cc
 800d262:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d266:	2300      	movcs	r3, #0
 800d268:	3015      	adds	r0, #21
 800d26a:	fa02 f000 	lsl.w	r0, r2, r0
 800d26e:	fa23 f30c 	lsr.w	r3, r3, ip
 800d272:	4303      	orrs	r3, r0
 800d274:	461c      	mov	r4, r3
 800d276:	ec45 4b10 	vmov	d0, r4, r5
 800d27a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d27e:	45b8      	cmp	r8, r7
 800d280:	bf3a      	itte	cc
 800d282:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800d286:	f1a6 0708 	subcc.w	r7, r6, #8
 800d28a:	2300      	movcs	r3, #0
 800d28c:	380b      	subs	r0, #11
 800d28e:	d012      	beq.n	800d2b6 <__b2d+0x8a>
 800d290:	f1c0 0120 	rsb	r1, r0, #32
 800d294:	fa23 f401 	lsr.w	r4, r3, r1
 800d298:	4082      	lsls	r2, r0
 800d29a:	4322      	orrs	r2, r4
 800d29c:	4547      	cmp	r7, r8
 800d29e:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800d2a2:	bf8c      	ite	hi
 800d2a4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800d2a8:	2200      	movls	r2, #0
 800d2aa:	4083      	lsls	r3, r0
 800d2ac:	40ca      	lsrs	r2, r1
 800d2ae:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d2b2:	4313      	orrs	r3, r2
 800d2b4:	e7de      	b.n	800d274 <__b2d+0x48>
 800d2b6:	ea42 0501 	orr.w	r5, r2, r1
 800d2ba:	e7db      	b.n	800d274 <__b2d+0x48>
 800d2bc:	3ff00000 	.word	0x3ff00000

0800d2c0 <__d2b>:
 800d2c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d2c4:	460f      	mov	r7, r1
 800d2c6:	2101      	movs	r1, #1
 800d2c8:	ec59 8b10 	vmov	r8, r9, d0
 800d2cc:	4616      	mov	r6, r2
 800d2ce:	f7ff fc1b 	bl	800cb08 <_Balloc>
 800d2d2:	4604      	mov	r4, r0
 800d2d4:	b930      	cbnz	r0, 800d2e4 <__d2b+0x24>
 800d2d6:	4602      	mov	r2, r0
 800d2d8:	4b24      	ldr	r3, [pc, #144]	; (800d36c <__d2b+0xac>)
 800d2da:	4825      	ldr	r0, [pc, #148]	; (800d370 <__d2b+0xb0>)
 800d2dc:	f240 310f 	movw	r1, #783	; 0x30f
 800d2e0:	f000 fd42 	bl	800dd68 <__assert_func>
 800d2e4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800d2e8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800d2ec:	bb2d      	cbnz	r5, 800d33a <__d2b+0x7a>
 800d2ee:	9301      	str	r3, [sp, #4]
 800d2f0:	f1b8 0300 	subs.w	r3, r8, #0
 800d2f4:	d026      	beq.n	800d344 <__d2b+0x84>
 800d2f6:	4668      	mov	r0, sp
 800d2f8:	9300      	str	r3, [sp, #0]
 800d2fa:	f7ff fd17 	bl	800cd2c <__lo0bits>
 800d2fe:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d302:	b1e8      	cbz	r0, 800d340 <__d2b+0x80>
 800d304:	f1c0 0320 	rsb	r3, r0, #32
 800d308:	fa02 f303 	lsl.w	r3, r2, r3
 800d30c:	430b      	orrs	r3, r1
 800d30e:	40c2      	lsrs	r2, r0
 800d310:	6163      	str	r3, [r4, #20]
 800d312:	9201      	str	r2, [sp, #4]
 800d314:	9b01      	ldr	r3, [sp, #4]
 800d316:	61a3      	str	r3, [r4, #24]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bf14      	ite	ne
 800d31c:	2202      	movne	r2, #2
 800d31e:	2201      	moveq	r2, #1
 800d320:	6122      	str	r2, [r4, #16]
 800d322:	b1bd      	cbz	r5, 800d354 <__d2b+0x94>
 800d324:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d328:	4405      	add	r5, r0
 800d32a:	603d      	str	r5, [r7, #0]
 800d32c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d330:	6030      	str	r0, [r6, #0]
 800d332:	4620      	mov	r0, r4
 800d334:	b003      	add	sp, #12
 800d336:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d33a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d33e:	e7d6      	b.n	800d2ee <__d2b+0x2e>
 800d340:	6161      	str	r1, [r4, #20]
 800d342:	e7e7      	b.n	800d314 <__d2b+0x54>
 800d344:	a801      	add	r0, sp, #4
 800d346:	f7ff fcf1 	bl	800cd2c <__lo0bits>
 800d34a:	9b01      	ldr	r3, [sp, #4]
 800d34c:	6163      	str	r3, [r4, #20]
 800d34e:	3020      	adds	r0, #32
 800d350:	2201      	movs	r2, #1
 800d352:	e7e5      	b.n	800d320 <__d2b+0x60>
 800d354:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d358:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d35c:	6038      	str	r0, [r7, #0]
 800d35e:	6918      	ldr	r0, [r3, #16]
 800d360:	f7ff fcc4 	bl	800ccec <__hi0bits>
 800d364:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d368:	e7e2      	b.n	800d330 <__d2b+0x70>
 800d36a:	bf00      	nop
 800d36c:	08045c8d 	.word	0x08045c8d
 800d370:	08045cfe 	.word	0x08045cfe

0800d374 <__ratio>:
 800d374:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d378:	4688      	mov	r8, r1
 800d37a:	4669      	mov	r1, sp
 800d37c:	4681      	mov	r9, r0
 800d37e:	f7ff ff55 	bl	800d22c <__b2d>
 800d382:	a901      	add	r1, sp, #4
 800d384:	4640      	mov	r0, r8
 800d386:	ec55 4b10 	vmov	r4, r5, d0
 800d38a:	f7ff ff4f 	bl	800d22c <__b2d>
 800d38e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d392:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d396:	eba3 0c02 	sub.w	ip, r3, r2
 800d39a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d39e:	1a9b      	subs	r3, r3, r2
 800d3a0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d3a4:	ec51 0b10 	vmov	r0, r1, d0
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	bfd6      	itet	le
 800d3ac:	460a      	movle	r2, r1
 800d3ae:	462a      	movgt	r2, r5
 800d3b0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d3b4:	468b      	mov	fp, r1
 800d3b6:	462f      	mov	r7, r5
 800d3b8:	bfd4      	ite	le
 800d3ba:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d3be:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	ee10 2a10 	vmov	r2, s0
 800d3c8:	465b      	mov	r3, fp
 800d3ca:	4639      	mov	r1, r7
 800d3cc:	f7f3 fa5e 	bl	800088c <__aeabi_ddiv>
 800d3d0:	ec41 0b10 	vmov	d0, r0, r1
 800d3d4:	b003      	add	sp, #12
 800d3d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d3da <__copybits>:
 800d3da:	3901      	subs	r1, #1
 800d3dc:	b570      	push	{r4, r5, r6, lr}
 800d3de:	1149      	asrs	r1, r1, #5
 800d3e0:	6914      	ldr	r4, [r2, #16]
 800d3e2:	3101      	adds	r1, #1
 800d3e4:	f102 0314 	add.w	r3, r2, #20
 800d3e8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d3ec:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d3f0:	1f05      	subs	r5, r0, #4
 800d3f2:	42a3      	cmp	r3, r4
 800d3f4:	d30c      	bcc.n	800d410 <__copybits+0x36>
 800d3f6:	1aa3      	subs	r3, r4, r2
 800d3f8:	3b11      	subs	r3, #17
 800d3fa:	f023 0303 	bic.w	r3, r3, #3
 800d3fe:	3211      	adds	r2, #17
 800d400:	42a2      	cmp	r2, r4
 800d402:	bf88      	it	hi
 800d404:	2300      	movhi	r3, #0
 800d406:	4418      	add	r0, r3
 800d408:	2300      	movs	r3, #0
 800d40a:	4288      	cmp	r0, r1
 800d40c:	d305      	bcc.n	800d41a <__copybits+0x40>
 800d40e:	bd70      	pop	{r4, r5, r6, pc}
 800d410:	f853 6b04 	ldr.w	r6, [r3], #4
 800d414:	f845 6f04 	str.w	r6, [r5, #4]!
 800d418:	e7eb      	b.n	800d3f2 <__copybits+0x18>
 800d41a:	f840 3b04 	str.w	r3, [r0], #4
 800d41e:	e7f4      	b.n	800d40a <__copybits+0x30>

0800d420 <__any_on>:
 800d420:	f100 0214 	add.w	r2, r0, #20
 800d424:	6900      	ldr	r0, [r0, #16]
 800d426:	114b      	asrs	r3, r1, #5
 800d428:	4298      	cmp	r0, r3
 800d42a:	b510      	push	{r4, lr}
 800d42c:	db11      	blt.n	800d452 <__any_on+0x32>
 800d42e:	dd0a      	ble.n	800d446 <__any_on+0x26>
 800d430:	f011 011f 	ands.w	r1, r1, #31
 800d434:	d007      	beq.n	800d446 <__any_on+0x26>
 800d436:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d43a:	fa24 f001 	lsr.w	r0, r4, r1
 800d43e:	fa00 f101 	lsl.w	r1, r0, r1
 800d442:	428c      	cmp	r4, r1
 800d444:	d10b      	bne.n	800d45e <__any_on+0x3e>
 800d446:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d44a:	4293      	cmp	r3, r2
 800d44c:	d803      	bhi.n	800d456 <__any_on+0x36>
 800d44e:	2000      	movs	r0, #0
 800d450:	bd10      	pop	{r4, pc}
 800d452:	4603      	mov	r3, r0
 800d454:	e7f7      	b.n	800d446 <__any_on+0x26>
 800d456:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d45a:	2900      	cmp	r1, #0
 800d45c:	d0f5      	beq.n	800d44a <__any_on+0x2a>
 800d45e:	2001      	movs	r0, #1
 800d460:	e7f6      	b.n	800d450 <__any_on+0x30>

0800d462 <_malloc_usable_size_r>:
 800d462:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d466:	1f18      	subs	r0, r3, #4
 800d468:	2b00      	cmp	r3, #0
 800d46a:	bfbc      	itt	lt
 800d46c:	580b      	ldrlt	r3, [r1, r0]
 800d46e:	18c0      	addlt	r0, r0, r3
 800d470:	4770      	bx	lr
	...

0800d474 <_strtol_l.constprop.0>:
 800d474:	2b01      	cmp	r3, #1
 800d476:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d47a:	d001      	beq.n	800d480 <_strtol_l.constprop.0+0xc>
 800d47c:	2b24      	cmp	r3, #36	; 0x24
 800d47e:	d906      	bls.n	800d48e <_strtol_l.constprop.0+0x1a>
 800d480:	f7fe f8c6 	bl	800b610 <__errno>
 800d484:	2316      	movs	r3, #22
 800d486:	6003      	str	r3, [r0, #0]
 800d488:	2000      	movs	r0, #0
 800d48a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d48e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800d574 <_strtol_l.constprop.0+0x100>
 800d492:	460d      	mov	r5, r1
 800d494:	462e      	mov	r6, r5
 800d496:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d49a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800d49e:	f017 0708 	ands.w	r7, r7, #8
 800d4a2:	d1f7      	bne.n	800d494 <_strtol_l.constprop.0+0x20>
 800d4a4:	2c2d      	cmp	r4, #45	; 0x2d
 800d4a6:	d132      	bne.n	800d50e <_strtol_l.constprop.0+0x9a>
 800d4a8:	782c      	ldrb	r4, [r5, #0]
 800d4aa:	2701      	movs	r7, #1
 800d4ac:	1cb5      	adds	r5, r6, #2
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d05b      	beq.n	800d56a <_strtol_l.constprop.0+0xf6>
 800d4b2:	2b10      	cmp	r3, #16
 800d4b4:	d109      	bne.n	800d4ca <_strtol_l.constprop.0+0x56>
 800d4b6:	2c30      	cmp	r4, #48	; 0x30
 800d4b8:	d107      	bne.n	800d4ca <_strtol_l.constprop.0+0x56>
 800d4ba:	782c      	ldrb	r4, [r5, #0]
 800d4bc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800d4c0:	2c58      	cmp	r4, #88	; 0x58
 800d4c2:	d14d      	bne.n	800d560 <_strtol_l.constprop.0+0xec>
 800d4c4:	786c      	ldrb	r4, [r5, #1]
 800d4c6:	2310      	movs	r3, #16
 800d4c8:	3502      	adds	r5, #2
 800d4ca:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800d4ce:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4d2:	f04f 0e00 	mov.w	lr, #0
 800d4d6:	fbb8 f9f3 	udiv	r9, r8, r3
 800d4da:	4676      	mov	r6, lr
 800d4dc:	fb03 8a19 	mls	sl, r3, r9, r8
 800d4e0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800d4e4:	f1bc 0f09 	cmp.w	ip, #9
 800d4e8:	d816      	bhi.n	800d518 <_strtol_l.constprop.0+0xa4>
 800d4ea:	4664      	mov	r4, ip
 800d4ec:	42a3      	cmp	r3, r4
 800d4ee:	dd24      	ble.n	800d53a <_strtol_l.constprop.0+0xc6>
 800d4f0:	f1be 3fff 	cmp.w	lr, #4294967295
 800d4f4:	d008      	beq.n	800d508 <_strtol_l.constprop.0+0x94>
 800d4f6:	45b1      	cmp	r9, r6
 800d4f8:	d31c      	bcc.n	800d534 <_strtol_l.constprop.0+0xc0>
 800d4fa:	d101      	bne.n	800d500 <_strtol_l.constprop.0+0x8c>
 800d4fc:	45a2      	cmp	sl, r4
 800d4fe:	db19      	blt.n	800d534 <_strtol_l.constprop.0+0xc0>
 800d500:	fb06 4603 	mla	r6, r6, r3, r4
 800d504:	f04f 0e01 	mov.w	lr, #1
 800d508:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d50c:	e7e8      	b.n	800d4e0 <_strtol_l.constprop.0+0x6c>
 800d50e:	2c2b      	cmp	r4, #43	; 0x2b
 800d510:	bf04      	itt	eq
 800d512:	782c      	ldrbeq	r4, [r5, #0]
 800d514:	1cb5      	addeq	r5, r6, #2
 800d516:	e7ca      	b.n	800d4ae <_strtol_l.constprop.0+0x3a>
 800d518:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800d51c:	f1bc 0f19 	cmp.w	ip, #25
 800d520:	d801      	bhi.n	800d526 <_strtol_l.constprop.0+0xb2>
 800d522:	3c37      	subs	r4, #55	; 0x37
 800d524:	e7e2      	b.n	800d4ec <_strtol_l.constprop.0+0x78>
 800d526:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800d52a:	f1bc 0f19 	cmp.w	ip, #25
 800d52e:	d804      	bhi.n	800d53a <_strtol_l.constprop.0+0xc6>
 800d530:	3c57      	subs	r4, #87	; 0x57
 800d532:	e7db      	b.n	800d4ec <_strtol_l.constprop.0+0x78>
 800d534:	f04f 3eff 	mov.w	lr, #4294967295
 800d538:	e7e6      	b.n	800d508 <_strtol_l.constprop.0+0x94>
 800d53a:	f1be 3fff 	cmp.w	lr, #4294967295
 800d53e:	d105      	bne.n	800d54c <_strtol_l.constprop.0+0xd8>
 800d540:	2322      	movs	r3, #34	; 0x22
 800d542:	6003      	str	r3, [r0, #0]
 800d544:	4646      	mov	r6, r8
 800d546:	b942      	cbnz	r2, 800d55a <_strtol_l.constprop.0+0xe6>
 800d548:	4630      	mov	r0, r6
 800d54a:	e79e      	b.n	800d48a <_strtol_l.constprop.0+0x16>
 800d54c:	b107      	cbz	r7, 800d550 <_strtol_l.constprop.0+0xdc>
 800d54e:	4276      	negs	r6, r6
 800d550:	2a00      	cmp	r2, #0
 800d552:	d0f9      	beq.n	800d548 <_strtol_l.constprop.0+0xd4>
 800d554:	f1be 0f00 	cmp.w	lr, #0
 800d558:	d000      	beq.n	800d55c <_strtol_l.constprop.0+0xe8>
 800d55a:	1e69      	subs	r1, r5, #1
 800d55c:	6011      	str	r1, [r2, #0]
 800d55e:	e7f3      	b.n	800d548 <_strtol_l.constprop.0+0xd4>
 800d560:	2430      	movs	r4, #48	; 0x30
 800d562:	2b00      	cmp	r3, #0
 800d564:	d1b1      	bne.n	800d4ca <_strtol_l.constprop.0+0x56>
 800d566:	2308      	movs	r3, #8
 800d568:	e7af      	b.n	800d4ca <_strtol_l.constprop.0+0x56>
 800d56a:	2c30      	cmp	r4, #48	; 0x30
 800d56c:	d0a5      	beq.n	800d4ba <_strtol_l.constprop.0+0x46>
 800d56e:	230a      	movs	r3, #10
 800d570:	e7ab      	b.n	800d4ca <_strtol_l.constprop.0+0x56>
 800d572:	bf00      	nop
 800d574:	08045e55 	.word	0x08045e55

0800d578 <_strtol_r>:
 800d578:	f7ff bf7c 	b.w	800d474 <_strtol_l.constprop.0>

0800d57c <__ascii_wctomb>:
 800d57c:	b149      	cbz	r1, 800d592 <__ascii_wctomb+0x16>
 800d57e:	2aff      	cmp	r2, #255	; 0xff
 800d580:	bf85      	ittet	hi
 800d582:	238a      	movhi	r3, #138	; 0x8a
 800d584:	6003      	strhi	r3, [r0, #0]
 800d586:	700a      	strbls	r2, [r1, #0]
 800d588:	f04f 30ff 	movhi.w	r0, #4294967295
 800d58c:	bf98      	it	ls
 800d58e:	2001      	movls	r0, #1
 800d590:	4770      	bx	lr
 800d592:	4608      	mov	r0, r1
 800d594:	4770      	bx	lr

0800d596 <__ssputs_r>:
 800d596:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d59a:	688e      	ldr	r6, [r1, #8]
 800d59c:	461f      	mov	r7, r3
 800d59e:	42be      	cmp	r6, r7
 800d5a0:	680b      	ldr	r3, [r1, #0]
 800d5a2:	4682      	mov	sl, r0
 800d5a4:	460c      	mov	r4, r1
 800d5a6:	4690      	mov	r8, r2
 800d5a8:	d82c      	bhi.n	800d604 <__ssputs_r+0x6e>
 800d5aa:	898a      	ldrh	r2, [r1, #12]
 800d5ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d5b0:	d026      	beq.n	800d600 <__ssputs_r+0x6a>
 800d5b2:	6965      	ldr	r5, [r4, #20]
 800d5b4:	6909      	ldr	r1, [r1, #16]
 800d5b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d5ba:	eba3 0901 	sub.w	r9, r3, r1
 800d5be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d5c2:	1c7b      	adds	r3, r7, #1
 800d5c4:	444b      	add	r3, r9
 800d5c6:	106d      	asrs	r5, r5, #1
 800d5c8:	429d      	cmp	r5, r3
 800d5ca:	bf38      	it	cc
 800d5cc:	461d      	movcc	r5, r3
 800d5ce:	0553      	lsls	r3, r2, #21
 800d5d0:	d527      	bpl.n	800d622 <__ssputs_r+0x8c>
 800d5d2:	4629      	mov	r1, r5
 800d5d4:	f7fb fffc 	bl	80095d0 <_malloc_r>
 800d5d8:	4606      	mov	r6, r0
 800d5da:	b360      	cbz	r0, 800d636 <__ssputs_r+0xa0>
 800d5dc:	6921      	ldr	r1, [r4, #16]
 800d5de:	464a      	mov	r2, r9
 800d5e0:	f7fe f843 	bl	800b66a <memcpy>
 800d5e4:	89a3      	ldrh	r3, [r4, #12]
 800d5e6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d5ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d5ee:	81a3      	strh	r3, [r4, #12]
 800d5f0:	6126      	str	r6, [r4, #16]
 800d5f2:	6165      	str	r5, [r4, #20]
 800d5f4:	444e      	add	r6, r9
 800d5f6:	eba5 0509 	sub.w	r5, r5, r9
 800d5fa:	6026      	str	r6, [r4, #0]
 800d5fc:	60a5      	str	r5, [r4, #8]
 800d5fe:	463e      	mov	r6, r7
 800d600:	42be      	cmp	r6, r7
 800d602:	d900      	bls.n	800d606 <__ssputs_r+0x70>
 800d604:	463e      	mov	r6, r7
 800d606:	6820      	ldr	r0, [r4, #0]
 800d608:	4632      	mov	r2, r6
 800d60a:	4641      	mov	r1, r8
 800d60c:	f000 fb70 	bl	800dcf0 <memmove>
 800d610:	68a3      	ldr	r3, [r4, #8]
 800d612:	1b9b      	subs	r3, r3, r6
 800d614:	60a3      	str	r3, [r4, #8]
 800d616:	6823      	ldr	r3, [r4, #0]
 800d618:	4433      	add	r3, r6
 800d61a:	6023      	str	r3, [r4, #0]
 800d61c:	2000      	movs	r0, #0
 800d61e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d622:	462a      	mov	r2, r5
 800d624:	f7fc f860 	bl	80096e8 <_realloc_r>
 800d628:	4606      	mov	r6, r0
 800d62a:	2800      	cmp	r0, #0
 800d62c:	d1e0      	bne.n	800d5f0 <__ssputs_r+0x5a>
 800d62e:	6921      	ldr	r1, [r4, #16]
 800d630:	4650      	mov	r0, sl
 800d632:	f7fe feb3 	bl	800c39c <_free_r>
 800d636:	230c      	movs	r3, #12
 800d638:	f8ca 3000 	str.w	r3, [sl]
 800d63c:	89a3      	ldrh	r3, [r4, #12]
 800d63e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d642:	81a3      	strh	r3, [r4, #12]
 800d644:	f04f 30ff 	mov.w	r0, #4294967295
 800d648:	e7e9      	b.n	800d61e <__ssputs_r+0x88>
	...

0800d64c <_svfiprintf_r>:
 800d64c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d650:	4698      	mov	r8, r3
 800d652:	898b      	ldrh	r3, [r1, #12]
 800d654:	061b      	lsls	r3, r3, #24
 800d656:	b09d      	sub	sp, #116	; 0x74
 800d658:	4607      	mov	r7, r0
 800d65a:	460d      	mov	r5, r1
 800d65c:	4614      	mov	r4, r2
 800d65e:	d50e      	bpl.n	800d67e <_svfiprintf_r+0x32>
 800d660:	690b      	ldr	r3, [r1, #16]
 800d662:	b963      	cbnz	r3, 800d67e <_svfiprintf_r+0x32>
 800d664:	2140      	movs	r1, #64	; 0x40
 800d666:	f7fb ffb3 	bl	80095d0 <_malloc_r>
 800d66a:	6028      	str	r0, [r5, #0]
 800d66c:	6128      	str	r0, [r5, #16]
 800d66e:	b920      	cbnz	r0, 800d67a <_svfiprintf_r+0x2e>
 800d670:	230c      	movs	r3, #12
 800d672:	603b      	str	r3, [r7, #0]
 800d674:	f04f 30ff 	mov.w	r0, #4294967295
 800d678:	e0d0      	b.n	800d81c <_svfiprintf_r+0x1d0>
 800d67a:	2340      	movs	r3, #64	; 0x40
 800d67c:	616b      	str	r3, [r5, #20]
 800d67e:	2300      	movs	r3, #0
 800d680:	9309      	str	r3, [sp, #36]	; 0x24
 800d682:	2320      	movs	r3, #32
 800d684:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d688:	f8cd 800c 	str.w	r8, [sp, #12]
 800d68c:	2330      	movs	r3, #48	; 0x30
 800d68e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d834 <_svfiprintf_r+0x1e8>
 800d692:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d696:	f04f 0901 	mov.w	r9, #1
 800d69a:	4623      	mov	r3, r4
 800d69c:	469a      	mov	sl, r3
 800d69e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d6a2:	b10a      	cbz	r2, 800d6a8 <_svfiprintf_r+0x5c>
 800d6a4:	2a25      	cmp	r2, #37	; 0x25
 800d6a6:	d1f9      	bne.n	800d69c <_svfiprintf_r+0x50>
 800d6a8:	ebba 0b04 	subs.w	fp, sl, r4
 800d6ac:	d00b      	beq.n	800d6c6 <_svfiprintf_r+0x7a>
 800d6ae:	465b      	mov	r3, fp
 800d6b0:	4622      	mov	r2, r4
 800d6b2:	4629      	mov	r1, r5
 800d6b4:	4638      	mov	r0, r7
 800d6b6:	f7ff ff6e 	bl	800d596 <__ssputs_r>
 800d6ba:	3001      	adds	r0, #1
 800d6bc:	f000 80a9 	beq.w	800d812 <_svfiprintf_r+0x1c6>
 800d6c0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6c2:	445a      	add	r2, fp
 800d6c4:	9209      	str	r2, [sp, #36]	; 0x24
 800d6c6:	f89a 3000 	ldrb.w	r3, [sl]
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	f000 80a1 	beq.w	800d812 <_svfiprintf_r+0x1c6>
 800d6d0:	2300      	movs	r3, #0
 800d6d2:	f04f 32ff 	mov.w	r2, #4294967295
 800d6d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d6da:	f10a 0a01 	add.w	sl, sl, #1
 800d6de:	9304      	str	r3, [sp, #16]
 800d6e0:	9307      	str	r3, [sp, #28]
 800d6e2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d6e6:	931a      	str	r3, [sp, #104]	; 0x68
 800d6e8:	4654      	mov	r4, sl
 800d6ea:	2205      	movs	r2, #5
 800d6ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d6f0:	4850      	ldr	r0, [pc, #320]	; (800d834 <_svfiprintf_r+0x1e8>)
 800d6f2:	f7f2 fd8d 	bl	8000210 <memchr>
 800d6f6:	9a04      	ldr	r2, [sp, #16]
 800d6f8:	b9d8      	cbnz	r0, 800d732 <_svfiprintf_r+0xe6>
 800d6fa:	06d0      	lsls	r0, r2, #27
 800d6fc:	bf44      	itt	mi
 800d6fe:	2320      	movmi	r3, #32
 800d700:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d704:	0711      	lsls	r1, r2, #28
 800d706:	bf44      	itt	mi
 800d708:	232b      	movmi	r3, #43	; 0x2b
 800d70a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d70e:	f89a 3000 	ldrb.w	r3, [sl]
 800d712:	2b2a      	cmp	r3, #42	; 0x2a
 800d714:	d015      	beq.n	800d742 <_svfiprintf_r+0xf6>
 800d716:	9a07      	ldr	r2, [sp, #28]
 800d718:	4654      	mov	r4, sl
 800d71a:	2000      	movs	r0, #0
 800d71c:	f04f 0c0a 	mov.w	ip, #10
 800d720:	4621      	mov	r1, r4
 800d722:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d726:	3b30      	subs	r3, #48	; 0x30
 800d728:	2b09      	cmp	r3, #9
 800d72a:	d94d      	bls.n	800d7c8 <_svfiprintf_r+0x17c>
 800d72c:	b1b0      	cbz	r0, 800d75c <_svfiprintf_r+0x110>
 800d72e:	9207      	str	r2, [sp, #28]
 800d730:	e014      	b.n	800d75c <_svfiprintf_r+0x110>
 800d732:	eba0 0308 	sub.w	r3, r0, r8
 800d736:	fa09 f303 	lsl.w	r3, r9, r3
 800d73a:	4313      	orrs	r3, r2
 800d73c:	9304      	str	r3, [sp, #16]
 800d73e:	46a2      	mov	sl, r4
 800d740:	e7d2      	b.n	800d6e8 <_svfiprintf_r+0x9c>
 800d742:	9b03      	ldr	r3, [sp, #12]
 800d744:	1d19      	adds	r1, r3, #4
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	9103      	str	r1, [sp, #12]
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	bfbb      	ittet	lt
 800d74e:	425b      	neglt	r3, r3
 800d750:	f042 0202 	orrlt.w	r2, r2, #2
 800d754:	9307      	strge	r3, [sp, #28]
 800d756:	9307      	strlt	r3, [sp, #28]
 800d758:	bfb8      	it	lt
 800d75a:	9204      	strlt	r2, [sp, #16]
 800d75c:	7823      	ldrb	r3, [r4, #0]
 800d75e:	2b2e      	cmp	r3, #46	; 0x2e
 800d760:	d10c      	bne.n	800d77c <_svfiprintf_r+0x130>
 800d762:	7863      	ldrb	r3, [r4, #1]
 800d764:	2b2a      	cmp	r3, #42	; 0x2a
 800d766:	d134      	bne.n	800d7d2 <_svfiprintf_r+0x186>
 800d768:	9b03      	ldr	r3, [sp, #12]
 800d76a:	1d1a      	adds	r2, r3, #4
 800d76c:	681b      	ldr	r3, [r3, #0]
 800d76e:	9203      	str	r2, [sp, #12]
 800d770:	2b00      	cmp	r3, #0
 800d772:	bfb8      	it	lt
 800d774:	f04f 33ff 	movlt.w	r3, #4294967295
 800d778:	3402      	adds	r4, #2
 800d77a:	9305      	str	r3, [sp, #20]
 800d77c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800d844 <_svfiprintf_r+0x1f8>
 800d780:	7821      	ldrb	r1, [r4, #0]
 800d782:	2203      	movs	r2, #3
 800d784:	4650      	mov	r0, sl
 800d786:	f7f2 fd43 	bl	8000210 <memchr>
 800d78a:	b138      	cbz	r0, 800d79c <_svfiprintf_r+0x150>
 800d78c:	9b04      	ldr	r3, [sp, #16]
 800d78e:	eba0 000a 	sub.w	r0, r0, sl
 800d792:	2240      	movs	r2, #64	; 0x40
 800d794:	4082      	lsls	r2, r0
 800d796:	4313      	orrs	r3, r2
 800d798:	3401      	adds	r4, #1
 800d79a:	9304      	str	r3, [sp, #16]
 800d79c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d7a0:	4825      	ldr	r0, [pc, #148]	; (800d838 <_svfiprintf_r+0x1ec>)
 800d7a2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d7a6:	2206      	movs	r2, #6
 800d7a8:	f7f2 fd32 	bl	8000210 <memchr>
 800d7ac:	2800      	cmp	r0, #0
 800d7ae:	d038      	beq.n	800d822 <_svfiprintf_r+0x1d6>
 800d7b0:	4b22      	ldr	r3, [pc, #136]	; (800d83c <_svfiprintf_r+0x1f0>)
 800d7b2:	bb1b      	cbnz	r3, 800d7fc <_svfiprintf_r+0x1b0>
 800d7b4:	9b03      	ldr	r3, [sp, #12]
 800d7b6:	3307      	adds	r3, #7
 800d7b8:	f023 0307 	bic.w	r3, r3, #7
 800d7bc:	3308      	adds	r3, #8
 800d7be:	9303      	str	r3, [sp, #12]
 800d7c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d7c2:	4433      	add	r3, r6
 800d7c4:	9309      	str	r3, [sp, #36]	; 0x24
 800d7c6:	e768      	b.n	800d69a <_svfiprintf_r+0x4e>
 800d7c8:	fb0c 3202 	mla	r2, ip, r2, r3
 800d7cc:	460c      	mov	r4, r1
 800d7ce:	2001      	movs	r0, #1
 800d7d0:	e7a6      	b.n	800d720 <_svfiprintf_r+0xd4>
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	3401      	adds	r4, #1
 800d7d6:	9305      	str	r3, [sp, #20]
 800d7d8:	4619      	mov	r1, r3
 800d7da:	f04f 0c0a 	mov.w	ip, #10
 800d7de:	4620      	mov	r0, r4
 800d7e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d7e4:	3a30      	subs	r2, #48	; 0x30
 800d7e6:	2a09      	cmp	r2, #9
 800d7e8:	d903      	bls.n	800d7f2 <_svfiprintf_r+0x1a6>
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	d0c6      	beq.n	800d77c <_svfiprintf_r+0x130>
 800d7ee:	9105      	str	r1, [sp, #20]
 800d7f0:	e7c4      	b.n	800d77c <_svfiprintf_r+0x130>
 800d7f2:	fb0c 2101 	mla	r1, ip, r1, r2
 800d7f6:	4604      	mov	r4, r0
 800d7f8:	2301      	movs	r3, #1
 800d7fa:	e7f0      	b.n	800d7de <_svfiprintf_r+0x192>
 800d7fc:	ab03      	add	r3, sp, #12
 800d7fe:	9300      	str	r3, [sp, #0]
 800d800:	462a      	mov	r2, r5
 800d802:	4b0f      	ldr	r3, [pc, #60]	; (800d840 <_svfiprintf_r+0x1f4>)
 800d804:	a904      	add	r1, sp, #16
 800d806:	4638      	mov	r0, r7
 800d808:	f7fc fe5c 	bl	800a4c4 <_printf_float>
 800d80c:	1c42      	adds	r2, r0, #1
 800d80e:	4606      	mov	r6, r0
 800d810:	d1d6      	bne.n	800d7c0 <_svfiprintf_r+0x174>
 800d812:	89ab      	ldrh	r3, [r5, #12]
 800d814:	065b      	lsls	r3, r3, #25
 800d816:	f53f af2d 	bmi.w	800d674 <_svfiprintf_r+0x28>
 800d81a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d81c:	b01d      	add	sp, #116	; 0x74
 800d81e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d822:	ab03      	add	r3, sp, #12
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	462a      	mov	r2, r5
 800d828:	4b05      	ldr	r3, [pc, #20]	; (800d840 <_svfiprintf_r+0x1f4>)
 800d82a:	a904      	add	r1, sp, #16
 800d82c:	4638      	mov	r0, r7
 800d82e:	f7fd f8ed 	bl	800aa0c <_printf_i>
 800d832:	e7eb      	b.n	800d80c <_svfiprintf_r+0x1c0>
 800d834:	08045f55 	.word	0x08045f55
 800d838:	08045f5f 	.word	0x08045f5f
 800d83c:	0800a4c5 	.word	0x0800a4c5
 800d840:	0800d597 	.word	0x0800d597
 800d844:	08045f5b 	.word	0x08045f5b

0800d848 <__sfputc_r>:
 800d848:	6893      	ldr	r3, [r2, #8]
 800d84a:	3b01      	subs	r3, #1
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	b410      	push	{r4}
 800d850:	6093      	str	r3, [r2, #8]
 800d852:	da08      	bge.n	800d866 <__sfputc_r+0x1e>
 800d854:	6994      	ldr	r4, [r2, #24]
 800d856:	42a3      	cmp	r3, r4
 800d858:	db01      	blt.n	800d85e <__sfputc_r+0x16>
 800d85a:	290a      	cmp	r1, #10
 800d85c:	d103      	bne.n	800d866 <__sfputc_r+0x1e>
 800d85e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d862:	f7fd bdcc 	b.w	800b3fe <__swbuf_r>
 800d866:	6813      	ldr	r3, [r2, #0]
 800d868:	1c58      	adds	r0, r3, #1
 800d86a:	6010      	str	r0, [r2, #0]
 800d86c:	7019      	strb	r1, [r3, #0]
 800d86e:	4608      	mov	r0, r1
 800d870:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d874:	4770      	bx	lr

0800d876 <__sfputs_r>:
 800d876:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d878:	4606      	mov	r6, r0
 800d87a:	460f      	mov	r7, r1
 800d87c:	4614      	mov	r4, r2
 800d87e:	18d5      	adds	r5, r2, r3
 800d880:	42ac      	cmp	r4, r5
 800d882:	d101      	bne.n	800d888 <__sfputs_r+0x12>
 800d884:	2000      	movs	r0, #0
 800d886:	e007      	b.n	800d898 <__sfputs_r+0x22>
 800d888:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d88c:	463a      	mov	r2, r7
 800d88e:	4630      	mov	r0, r6
 800d890:	f7ff ffda 	bl	800d848 <__sfputc_r>
 800d894:	1c43      	adds	r3, r0, #1
 800d896:	d1f3      	bne.n	800d880 <__sfputs_r+0xa>
 800d898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d89c <_vfiprintf_r>:
 800d89c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d8a0:	460d      	mov	r5, r1
 800d8a2:	b09d      	sub	sp, #116	; 0x74
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	4698      	mov	r8, r3
 800d8a8:	4606      	mov	r6, r0
 800d8aa:	b118      	cbz	r0, 800d8b4 <_vfiprintf_r+0x18>
 800d8ac:	6a03      	ldr	r3, [r0, #32]
 800d8ae:	b90b      	cbnz	r3, 800d8b4 <_vfiprintf_r+0x18>
 800d8b0:	f7fd fc6a 	bl	800b188 <__sinit>
 800d8b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8b6:	07d9      	lsls	r1, r3, #31
 800d8b8:	d405      	bmi.n	800d8c6 <_vfiprintf_r+0x2a>
 800d8ba:	89ab      	ldrh	r3, [r5, #12]
 800d8bc:	059a      	lsls	r2, r3, #22
 800d8be:	d402      	bmi.n	800d8c6 <_vfiprintf_r+0x2a>
 800d8c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8c2:	f7fd fed0 	bl	800b666 <__retarget_lock_acquire_recursive>
 800d8c6:	89ab      	ldrh	r3, [r5, #12]
 800d8c8:	071b      	lsls	r3, r3, #28
 800d8ca:	d501      	bpl.n	800d8d0 <_vfiprintf_r+0x34>
 800d8cc:	692b      	ldr	r3, [r5, #16]
 800d8ce:	b99b      	cbnz	r3, 800d8f8 <_vfiprintf_r+0x5c>
 800d8d0:	4629      	mov	r1, r5
 800d8d2:	4630      	mov	r0, r6
 800d8d4:	f7fd fdd0 	bl	800b478 <__swsetup_r>
 800d8d8:	b170      	cbz	r0, 800d8f8 <_vfiprintf_r+0x5c>
 800d8da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d8dc:	07dc      	lsls	r4, r3, #31
 800d8de:	d504      	bpl.n	800d8ea <_vfiprintf_r+0x4e>
 800d8e0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8e4:	b01d      	add	sp, #116	; 0x74
 800d8e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d8ea:	89ab      	ldrh	r3, [r5, #12]
 800d8ec:	0598      	lsls	r0, r3, #22
 800d8ee:	d4f7      	bmi.n	800d8e0 <_vfiprintf_r+0x44>
 800d8f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d8f2:	f7fd feb9 	bl	800b668 <__retarget_lock_release_recursive>
 800d8f6:	e7f3      	b.n	800d8e0 <_vfiprintf_r+0x44>
 800d8f8:	2300      	movs	r3, #0
 800d8fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d8fc:	2320      	movs	r3, #32
 800d8fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d902:	f8cd 800c 	str.w	r8, [sp, #12]
 800d906:	2330      	movs	r3, #48	; 0x30
 800d908:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800dabc <_vfiprintf_r+0x220>
 800d90c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d910:	f04f 0901 	mov.w	r9, #1
 800d914:	4623      	mov	r3, r4
 800d916:	469a      	mov	sl, r3
 800d918:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d91c:	b10a      	cbz	r2, 800d922 <_vfiprintf_r+0x86>
 800d91e:	2a25      	cmp	r2, #37	; 0x25
 800d920:	d1f9      	bne.n	800d916 <_vfiprintf_r+0x7a>
 800d922:	ebba 0b04 	subs.w	fp, sl, r4
 800d926:	d00b      	beq.n	800d940 <_vfiprintf_r+0xa4>
 800d928:	465b      	mov	r3, fp
 800d92a:	4622      	mov	r2, r4
 800d92c:	4629      	mov	r1, r5
 800d92e:	4630      	mov	r0, r6
 800d930:	f7ff ffa1 	bl	800d876 <__sfputs_r>
 800d934:	3001      	adds	r0, #1
 800d936:	f000 80a9 	beq.w	800da8c <_vfiprintf_r+0x1f0>
 800d93a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d93c:	445a      	add	r2, fp
 800d93e:	9209      	str	r2, [sp, #36]	; 0x24
 800d940:	f89a 3000 	ldrb.w	r3, [sl]
 800d944:	2b00      	cmp	r3, #0
 800d946:	f000 80a1 	beq.w	800da8c <_vfiprintf_r+0x1f0>
 800d94a:	2300      	movs	r3, #0
 800d94c:	f04f 32ff 	mov.w	r2, #4294967295
 800d950:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d954:	f10a 0a01 	add.w	sl, sl, #1
 800d958:	9304      	str	r3, [sp, #16]
 800d95a:	9307      	str	r3, [sp, #28]
 800d95c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d960:	931a      	str	r3, [sp, #104]	; 0x68
 800d962:	4654      	mov	r4, sl
 800d964:	2205      	movs	r2, #5
 800d966:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d96a:	4854      	ldr	r0, [pc, #336]	; (800dabc <_vfiprintf_r+0x220>)
 800d96c:	f7f2 fc50 	bl	8000210 <memchr>
 800d970:	9a04      	ldr	r2, [sp, #16]
 800d972:	b9d8      	cbnz	r0, 800d9ac <_vfiprintf_r+0x110>
 800d974:	06d1      	lsls	r1, r2, #27
 800d976:	bf44      	itt	mi
 800d978:	2320      	movmi	r3, #32
 800d97a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d97e:	0713      	lsls	r3, r2, #28
 800d980:	bf44      	itt	mi
 800d982:	232b      	movmi	r3, #43	; 0x2b
 800d984:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d988:	f89a 3000 	ldrb.w	r3, [sl]
 800d98c:	2b2a      	cmp	r3, #42	; 0x2a
 800d98e:	d015      	beq.n	800d9bc <_vfiprintf_r+0x120>
 800d990:	9a07      	ldr	r2, [sp, #28]
 800d992:	4654      	mov	r4, sl
 800d994:	2000      	movs	r0, #0
 800d996:	f04f 0c0a 	mov.w	ip, #10
 800d99a:	4621      	mov	r1, r4
 800d99c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d9a0:	3b30      	subs	r3, #48	; 0x30
 800d9a2:	2b09      	cmp	r3, #9
 800d9a4:	d94d      	bls.n	800da42 <_vfiprintf_r+0x1a6>
 800d9a6:	b1b0      	cbz	r0, 800d9d6 <_vfiprintf_r+0x13a>
 800d9a8:	9207      	str	r2, [sp, #28]
 800d9aa:	e014      	b.n	800d9d6 <_vfiprintf_r+0x13a>
 800d9ac:	eba0 0308 	sub.w	r3, r0, r8
 800d9b0:	fa09 f303 	lsl.w	r3, r9, r3
 800d9b4:	4313      	orrs	r3, r2
 800d9b6:	9304      	str	r3, [sp, #16]
 800d9b8:	46a2      	mov	sl, r4
 800d9ba:	e7d2      	b.n	800d962 <_vfiprintf_r+0xc6>
 800d9bc:	9b03      	ldr	r3, [sp, #12]
 800d9be:	1d19      	adds	r1, r3, #4
 800d9c0:	681b      	ldr	r3, [r3, #0]
 800d9c2:	9103      	str	r1, [sp, #12]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	bfbb      	ittet	lt
 800d9c8:	425b      	neglt	r3, r3
 800d9ca:	f042 0202 	orrlt.w	r2, r2, #2
 800d9ce:	9307      	strge	r3, [sp, #28]
 800d9d0:	9307      	strlt	r3, [sp, #28]
 800d9d2:	bfb8      	it	lt
 800d9d4:	9204      	strlt	r2, [sp, #16]
 800d9d6:	7823      	ldrb	r3, [r4, #0]
 800d9d8:	2b2e      	cmp	r3, #46	; 0x2e
 800d9da:	d10c      	bne.n	800d9f6 <_vfiprintf_r+0x15a>
 800d9dc:	7863      	ldrb	r3, [r4, #1]
 800d9de:	2b2a      	cmp	r3, #42	; 0x2a
 800d9e0:	d134      	bne.n	800da4c <_vfiprintf_r+0x1b0>
 800d9e2:	9b03      	ldr	r3, [sp, #12]
 800d9e4:	1d1a      	adds	r2, r3, #4
 800d9e6:	681b      	ldr	r3, [r3, #0]
 800d9e8:	9203      	str	r2, [sp, #12]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	bfb8      	it	lt
 800d9ee:	f04f 33ff 	movlt.w	r3, #4294967295
 800d9f2:	3402      	adds	r4, #2
 800d9f4:	9305      	str	r3, [sp, #20]
 800d9f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800dacc <_vfiprintf_r+0x230>
 800d9fa:	7821      	ldrb	r1, [r4, #0]
 800d9fc:	2203      	movs	r2, #3
 800d9fe:	4650      	mov	r0, sl
 800da00:	f7f2 fc06 	bl	8000210 <memchr>
 800da04:	b138      	cbz	r0, 800da16 <_vfiprintf_r+0x17a>
 800da06:	9b04      	ldr	r3, [sp, #16]
 800da08:	eba0 000a 	sub.w	r0, r0, sl
 800da0c:	2240      	movs	r2, #64	; 0x40
 800da0e:	4082      	lsls	r2, r0
 800da10:	4313      	orrs	r3, r2
 800da12:	3401      	adds	r4, #1
 800da14:	9304      	str	r3, [sp, #16]
 800da16:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da1a:	4829      	ldr	r0, [pc, #164]	; (800dac0 <_vfiprintf_r+0x224>)
 800da1c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800da20:	2206      	movs	r2, #6
 800da22:	f7f2 fbf5 	bl	8000210 <memchr>
 800da26:	2800      	cmp	r0, #0
 800da28:	d03f      	beq.n	800daaa <_vfiprintf_r+0x20e>
 800da2a:	4b26      	ldr	r3, [pc, #152]	; (800dac4 <_vfiprintf_r+0x228>)
 800da2c:	bb1b      	cbnz	r3, 800da76 <_vfiprintf_r+0x1da>
 800da2e:	9b03      	ldr	r3, [sp, #12]
 800da30:	3307      	adds	r3, #7
 800da32:	f023 0307 	bic.w	r3, r3, #7
 800da36:	3308      	adds	r3, #8
 800da38:	9303      	str	r3, [sp, #12]
 800da3a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800da3c:	443b      	add	r3, r7
 800da3e:	9309      	str	r3, [sp, #36]	; 0x24
 800da40:	e768      	b.n	800d914 <_vfiprintf_r+0x78>
 800da42:	fb0c 3202 	mla	r2, ip, r2, r3
 800da46:	460c      	mov	r4, r1
 800da48:	2001      	movs	r0, #1
 800da4a:	e7a6      	b.n	800d99a <_vfiprintf_r+0xfe>
 800da4c:	2300      	movs	r3, #0
 800da4e:	3401      	adds	r4, #1
 800da50:	9305      	str	r3, [sp, #20]
 800da52:	4619      	mov	r1, r3
 800da54:	f04f 0c0a 	mov.w	ip, #10
 800da58:	4620      	mov	r0, r4
 800da5a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800da5e:	3a30      	subs	r2, #48	; 0x30
 800da60:	2a09      	cmp	r2, #9
 800da62:	d903      	bls.n	800da6c <_vfiprintf_r+0x1d0>
 800da64:	2b00      	cmp	r3, #0
 800da66:	d0c6      	beq.n	800d9f6 <_vfiprintf_r+0x15a>
 800da68:	9105      	str	r1, [sp, #20]
 800da6a:	e7c4      	b.n	800d9f6 <_vfiprintf_r+0x15a>
 800da6c:	fb0c 2101 	mla	r1, ip, r1, r2
 800da70:	4604      	mov	r4, r0
 800da72:	2301      	movs	r3, #1
 800da74:	e7f0      	b.n	800da58 <_vfiprintf_r+0x1bc>
 800da76:	ab03      	add	r3, sp, #12
 800da78:	9300      	str	r3, [sp, #0]
 800da7a:	462a      	mov	r2, r5
 800da7c:	4b12      	ldr	r3, [pc, #72]	; (800dac8 <_vfiprintf_r+0x22c>)
 800da7e:	a904      	add	r1, sp, #16
 800da80:	4630      	mov	r0, r6
 800da82:	f7fc fd1f 	bl	800a4c4 <_printf_float>
 800da86:	4607      	mov	r7, r0
 800da88:	1c78      	adds	r0, r7, #1
 800da8a:	d1d6      	bne.n	800da3a <_vfiprintf_r+0x19e>
 800da8c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da8e:	07d9      	lsls	r1, r3, #31
 800da90:	d405      	bmi.n	800da9e <_vfiprintf_r+0x202>
 800da92:	89ab      	ldrh	r3, [r5, #12]
 800da94:	059a      	lsls	r2, r3, #22
 800da96:	d402      	bmi.n	800da9e <_vfiprintf_r+0x202>
 800da98:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800da9a:	f7fd fde5 	bl	800b668 <__retarget_lock_release_recursive>
 800da9e:	89ab      	ldrh	r3, [r5, #12]
 800daa0:	065b      	lsls	r3, r3, #25
 800daa2:	f53f af1d 	bmi.w	800d8e0 <_vfiprintf_r+0x44>
 800daa6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800daa8:	e71c      	b.n	800d8e4 <_vfiprintf_r+0x48>
 800daaa:	ab03      	add	r3, sp, #12
 800daac:	9300      	str	r3, [sp, #0]
 800daae:	462a      	mov	r2, r5
 800dab0:	4b05      	ldr	r3, [pc, #20]	; (800dac8 <_vfiprintf_r+0x22c>)
 800dab2:	a904      	add	r1, sp, #16
 800dab4:	4630      	mov	r0, r6
 800dab6:	f7fc ffa9 	bl	800aa0c <_printf_i>
 800daba:	e7e4      	b.n	800da86 <_vfiprintf_r+0x1ea>
 800dabc:	08045f55 	.word	0x08045f55
 800dac0:	08045f5f 	.word	0x08045f5f
 800dac4:	0800a4c5 	.word	0x0800a4c5
 800dac8:	0800d877 	.word	0x0800d877
 800dacc:	08045f5b 	.word	0x08045f5b

0800dad0 <__sflush_r>:
 800dad0:	898a      	ldrh	r2, [r1, #12]
 800dad2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dad6:	4605      	mov	r5, r0
 800dad8:	0710      	lsls	r0, r2, #28
 800dada:	460c      	mov	r4, r1
 800dadc:	d458      	bmi.n	800db90 <__sflush_r+0xc0>
 800dade:	684b      	ldr	r3, [r1, #4]
 800dae0:	2b00      	cmp	r3, #0
 800dae2:	dc05      	bgt.n	800daf0 <__sflush_r+0x20>
 800dae4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800dae6:	2b00      	cmp	r3, #0
 800dae8:	dc02      	bgt.n	800daf0 <__sflush_r+0x20>
 800daea:	2000      	movs	r0, #0
 800daec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800daf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800daf2:	2e00      	cmp	r6, #0
 800daf4:	d0f9      	beq.n	800daea <__sflush_r+0x1a>
 800daf6:	2300      	movs	r3, #0
 800daf8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800dafc:	682f      	ldr	r7, [r5, #0]
 800dafe:	6a21      	ldr	r1, [r4, #32]
 800db00:	602b      	str	r3, [r5, #0]
 800db02:	d032      	beq.n	800db6a <__sflush_r+0x9a>
 800db04:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800db06:	89a3      	ldrh	r3, [r4, #12]
 800db08:	075a      	lsls	r2, r3, #29
 800db0a:	d505      	bpl.n	800db18 <__sflush_r+0x48>
 800db0c:	6863      	ldr	r3, [r4, #4]
 800db0e:	1ac0      	subs	r0, r0, r3
 800db10:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800db12:	b10b      	cbz	r3, 800db18 <__sflush_r+0x48>
 800db14:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800db16:	1ac0      	subs	r0, r0, r3
 800db18:	2300      	movs	r3, #0
 800db1a:	4602      	mov	r2, r0
 800db1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800db1e:	6a21      	ldr	r1, [r4, #32]
 800db20:	4628      	mov	r0, r5
 800db22:	47b0      	blx	r6
 800db24:	1c43      	adds	r3, r0, #1
 800db26:	89a3      	ldrh	r3, [r4, #12]
 800db28:	d106      	bne.n	800db38 <__sflush_r+0x68>
 800db2a:	6829      	ldr	r1, [r5, #0]
 800db2c:	291d      	cmp	r1, #29
 800db2e:	d82b      	bhi.n	800db88 <__sflush_r+0xb8>
 800db30:	4a29      	ldr	r2, [pc, #164]	; (800dbd8 <__sflush_r+0x108>)
 800db32:	410a      	asrs	r2, r1
 800db34:	07d6      	lsls	r6, r2, #31
 800db36:	d427      	bmi.n	800db88 <__sflush_r+0xb8>
 800db38:	2200      	movs	r2, #0
 800db3a:	6062      	str	r2, [r4, #4]
 800db3c:	04d9      	lsls	r1, r3, #19
 800db3e:	6922      	ldr	r2, [r4, #16]
 800db40:	6022      	str	r2, [r4, #0]
 800db42:	d504      	bpl.n	800db4e <__sflush_r+0x7e>
 800db44:	1c42      	adds	r2, r0, #1
 800db46:	d101      	bne.n	800db4c <__sflush_r+0x7c>
 800db48:	682b      	ldr	r3, [r5, #0]
 800db4a:	b903      	cbnz	r3, 800db4e <__sflush_r+0x7e>
 800db4c:	6560      	str	r0, [r4, #84]	; 0x54
 800db4e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800db50:	602f      	str	r7, [r5, #0]
 800db52:	2900      	cmp	r1, #0
 800db54:	d0c9      	beq.n	800daea <__sflush_r+0x1a>
 800db56:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800db5a:	4299      	cmp	r1, r3
 800db5c:	d002      	beq.n	800db64 <__sflush_r+0x94>
 800db5e:	4628      	mov	r0, r5
 800db60:	f7fe fc1c 	bl	800c39c <_free_r>
 800db64:	2000      	movs	r0, #0
 800db66:	6360      	str	r0, [r4, #52]	; 0x34
 800db68:	e7c0      	b.n	800daec <__sflush_r+0x1c>
 800db6a:	2301      	movs	r3, #1
 800db6c:	4628      	mov	r0, r5
 800db6e:	47b0      	blx	r6
 800db70:	1c41      	adds	r1, r0, #1
 800db72:	d1c8      	bne.n	800db06 <__sflush_r+0x36>
 800db74:	682b      	ldr	r3, [r5, #0]
 800db76:	2b00      	cmp	r3, #0
 800db78:	d0c5      	beq.n	800db06 <__sflush_r+0x36>
 800db7a:	2b1d      	cmp	r3, #29
 800db7c:	d001      	beq.n	800db82 <__sflush_r+0xb2>
 800db7e:	2b16      	cmp	r3, #22
 800db80:	d101      	bne.n	800db86 <__sflush_r+0xb6>
 800db82:	602f      	str	r7, [r5, #0]
 800db84:	e7b1      	b.n	800daea <__sflush_r+0x1a>
 800db86:	89a3      	ldrh	r3, [r4, #12]
 800db88:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db8c:	81a3      	strh	r3, [r4, #12]
 800db8e:	e7ad      	b.n	800daec <__sflush_r+0x1c>
 800db90:	690f      	ldr	r7, [r1, #16]
 800db92:	2f00      	cmp	r7, #0
 800db94:	d0a9      	beq.n	800daea <__sflush_r+0x1a>
 800db96:	0793      	lsls	r3, r2, #30
 800db98:	680e      	ldr	r6, [r1, #0]
 800db9a:	bf08      	it	eq
 800db9c:	694b      	ldreq	r3, [r1, #20]
 800db9e:	600f      	str	r7, [r1, #0]
 800dba0:	bf18      	it	ne
 800dba2:	2300      	movne	r3, #0
 800dba4:	eba6 0807 	sub.w	r8, r6, r7
 800dba8:	608b      	str	r3, [r1, #8]
 800dbaa:	f1b8 0f00 	cmp.w	r8, #0
 800dbae:	dd9c      	ble.n	800daea <__sflush_r+0x1a>
 800dbb0:	6a21      	ldr	r1, [r4, #32]
 800dbb2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800dbb4:	4643      	mov	r3, r8
 800dbb6:	463a      	mov	r2, r7
 800dbb8:	4628      	mov	r0, r5
 800dbba:	47b0      	blx	r6
 800dbbc:	2800      	cmp	r0, #0
 800dbbe:	dc06      	bgt.n	800dbce <__sflush_r+0xfe>
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbc6:	81a3      	strh	r3, [r4, #12]
 800dbc8:	f04f 30ff 	mov.w	r0, #4294967295
 800dbcc:	e78e      	b.n	800daec <__sflush_r+0x1c>
 800dbce:	4407      	add	r7, r0
 800dbd0:	eba8 0800 	sub.w	r8, r8, r0
 800dbd4:	e7e9      	b.n	800dbaa <__sflush_r+0xda>
 800dbd6:	bf00      	nop
 800dbd8:	dfbffffe 	.word	0xdfbffffe

0800dbdc <_fflush_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	690b      	ldr	r3, [r1, #16]
 800dbe0:	4605      	mov	r5, r0
 800dbe2:	460c      	mov	r4, r1
 800dbe4:	b913      	cbnz	r3, 800dbec <_fflush_r+0x10>
 800dbe6:	2500      	movs	r5, #0
 800dbe8:	4628      	mov	r0, r5
 800dbea:	bd38      	pop	{r3, r4, r5, pc}
 800dbec:	b118      	cbz	r0, 800dbf6 <_fflush_r+0x1a>
 800dbee:	6a03      	ldr	r3, [r0, #32]
 800dbf0:	b90b      	cbnz	r3, 800dbf6 <_fflush_r+0x1a>
 800dbf2:	f7fd fac9 	bl	800b188 <__sinit>
 800dbf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d0f3      	beq.n	800dbe6 <_fflush_r+0xa>
 800dbfe:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800dc00:	07d0      	lsls	r0, r2, #31
 800dc02:	d404      	bmi.n	800dc0e <_fflush_r+0x32>
 800dc04:	0599      	lsls	r1, r3, #22
 800dc06:	d402      	bmi.n	800dc0e <_fflush_r+0x32>
 800dc08:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc0a:	f7fd fd2c 	bl	800b666 <__retarget_lock_acquire_recursive>
 800dc0e:	4628      	mov	r0, r5
 800dc10:	4621      	mov	r1, r4
 800dc12:	f7ff ff5d 	bl	800dad0 <__sflush_r>
 800dc16:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800dc18:	07da      	lsls	r2, r3, #31
 800dc1a:	4605      	mov	r5, r0
 800dc1c:	d4e4      	bmi.n	800dbe8 <_fflush_r+0xc>
 800dc1e:	89a3      	ldrh	r3, [r4, #12]
 800dc20:	059b      	lsls	r3, r3, #22
 800dc22:	d4e1      	bmi.n	800dbe8 <_fflush_r+0xc>
 800dc24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800dc26:	f7fd fd1f 	bl	800b668 <__retarget_lock_release_recursive>
 800dc2a:	e7dd      	b.n	800dbe8 <_fflush_r+0xc>

0800dc2c <__swhatbuf_r>:
 800dc2c:	b570      	push	{r4, r5, r6, lr}
 800dc2e:	460c      	mov	r4, r1
 800dc30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dc34:	2900      	cmp	r1, #0
 800dc36:	b096      	sub	sp, #88	; 0x58
 800dc38:	4615      	mov	r5, r2
 800dc3a:	461e      	mov	r6, r3
 800dc3c:	da0d      	bge.n	800dc5a <__swhatbuf_r+0x2e>
 800dc3e:	89a3      	ldrh	r3, [r4, #12]
 800dc40:	f013 0f80 	tst.w	r3, #128	; 0x80
 800dc44:	f04f 0100 	mov.w	r1, #0
 800dc48:	bf0c      	ite	eq
 800dc4a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800dc4e:	2340      	movne	r3, #64	; 0x40
 800dc50:	2000      	movs	r0, #0
 800dc52:	6031      	str	r1, [r6, #0]
 800dc54:	602b      	str	r3, [r5, #0]
 800dc56:	b016      	add	sp, #88	; 0x58
 800dc58:	bd70      	pop	{r4, r5, r6, pc}
 800dc5a:	466a      	mov	r2, sp
 800dc5c:	f000 f862 	bl	800dd24 <_fstat_r>
 800dc60:	2800      	cmp	r0, #0
 800dc62:	dbec      	blt.n	800dc3e <__swhatbuf_r+0x12>
 800dc64:	9901      	ldr	r1, [sp, #4]
 800dc66:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800dc6a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800dc6e:	4259      	negs	r1, r3
 800dc70:	4159      	adcs	r1, r3
 800dc72:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800dc76:	e7eb      	b.n	800dc50 <__swhatbuf_r+0x24>

0800dc78 <__smakebuf_r>:
 800dc78:	898b      	ldrh	r3, [r1, #12]
 800dc7a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dc7c:	079d      	lsls	r5, r3, #30
 800dc7e:	4606      	mov	r6, r0
 800dc80:	460c      	mov	r4, r1
 800dc82:	d507      	bpl.n	800dc94 <__smakebuf_r+0x1c>
 800dc84:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800dc88:	6023      	str	r3, [r4, #0]
 800dc8a:	6123      	str	r3, [r4, #16]
 800dc8c:	2301      	movs	r3, #1
 800dc8e:	6163      	str	r3, [r4, #20]
 800dc90:	b002      	add	sp, #8
 800dc92:	bd70      	pop	{r4, r5, r6, pc}
 800dc94:	ab01      	add	r3, sp, #4
 800dc96:	466a      	mov	r2, sp
 800dc98:	f7ff ffc8 	bl	800dc2c <__swhatbuf_r>
 800dc9c:	9900      	ldr	r1, [sp, #0]
 800dc9e:	4605      	mov	r5, r0
 800dca0:	4630      	mov	r0, r6
 800dca2:	f7fb fc95 	bl	80095d0 <_malloc_r>
 800dca6:	b948      	cbnz	r0, 800dcbc <__smakebuf_r+0x44>
 800dca8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800dcac:	059a      	lsls	r2, r3, #22
 800dcae:	d4ef      	bmi.n	800dc90 <__smakebuf_r+0x18>
 800dcb0:	f023 0303 	bic.w	r3, r3, #3
 800dcb4:	f043 0302 	orr.w	r3, r3, #2
 800dcb8:	81a3      	strh	r3, [r4, #12]
 800dcba:	e7e3      	b.n	800dc84 <__smakebuf_r+0xc>
 800dcbc:	89a3      	ldrh	r3, [r4, #12]
 800dcbe:	6020      	str	r0, [r4, #0]
 800dcc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dcc4:	81a3      	strh	r3, [r4, #12]
 800dcc6:	9b00      	ldr	r3, [sp, #0]
 800dcc8:	6163      	str	r3, [r4, #20]
 800dcca:	9b01      	ldr	r3, [sp, #4]
 800dccc:	6120      	str	r0, [r4, #16]
 800dcce:	b15b      	cbz	r3, 800dce8 <__smakebuf_r+0x70>
 800dcd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dcd4:	4630      	mov	r0, r6
 800dcd6:	f000 f837 	bl	800dd48 <_isatty_r>
 800dcda:	b128      	cbz	r0, 800dce8 <__smakebuf_r+0x70>
 800dcdc:	89a3      	ldrh	r3, [r4, #12]
 800dcde:	f023 0303 	bic.w	r3, r3, #3
 800dce2:	f043 0301 	orr.w	r3, r3, #1
 800dce6:	81a3      	strh	r3, [r4, #12]
 800dce8:	89a3      	ldrh	r3, [r4, #12]
 800dcea:	431d      	orrs	r5, r3
 800dcec:	81a5      	strh	r5, [r4, #12]
 800dcee:	e7cf      	b.n	800dc90 <__smakebuf_r+0x18>

0800dcf0 <memmove>:
 800dcf0:	4288      	cmp	r0, r1
 800dcf2:	b510      	push	{r4, lr}
 800dcf4:	eb01 0402 	add.w	r4, r1, r2
 800dcf8:	d902      	bls.n	800dd00 <memmove+0x10>
 800dcfa:	4284      	cmp	r4, r0
 800dcfc:	4623      	mov	r3, r4
 800dcfe:	d807      	bhi.n	800dd10 <memmove+0x20>
 800dd00:	1e43      	subs	r3, r0, #1
 800dd02:	42a1      	cmp	r1, r4
 800dd04:	d008      	beq.n	800dd18 <memmove+0x28>
 800dd06:	f811 2b01 	ldrb.w	r2, [r1], #1
 800dd0a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800dd0e:	e7f8      	b.n	800dd02 <memmove+0x12>
 800dd10:	4402      	add	r2, r0
 800dd12:	4601      	mov	r1, r0
 800dd14:	428a      	cmp	r2, r1
 800dd16:	d100      	bne.n	800dd1a <memmove+0x2a>
 800dd18:	bd10      	pop	{r4, pc}
 800dd1a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800dd1e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800dd22:	e7f7      	b.n	800dd14 <memmove+0x24>

0800dd24 <_fstat_r>:
 800dd24:	b538      	push	{r3, r4, r5, lr}
 800dd26:	4d07      	ldr	r5, [pc, #28]	; (800dd44 <_fstat_r+0x20>)
 800dd28:	2300      	movs	r3, #0
 800dd2a:	4604      	mov	r4, r0
 800dd2c:	4608      	mov	r0, r1
 800dd2e:	4611      	mov	r1, r2
 800dd30:	602b      	str	r3, [r5, #0]
 800dd32:	f7f4 f830 	bl	8001d96 <_fstat>
 800dd36:	1c43      	adds	r3, r0, #1
 800dd38:	d102      	bne.n	800dd40 <_fstat_r+0x1c>
 800dd3a:	682b      	ldr	r3, [r5, #0]
 800dd3c:	b103      	cbz	r3, 800dd40 <_fstat_r+0x1c>
 800dd3e:	6023      	str	r3, [r4, #0]
 800dd40:	bd38      	pop	{r3, r4, r5, pc}
 800dd42:	bf00      	nop
 800dd44:	200045c4 	.word	0x200045c4

0800dd48 <_isatty_r>:
 800dd48:	b538      	push	{r3, r4, r5, lr}
 800dd4a:	4d06      	ldr	r5, [pc, #24]	; (800dd64 <_isatty_r+0x1c>)
 800dd4c:	2300      	movs	r3, #0
 800dd4e:	4604      	mov	r4, r0
 800dd50:	4608      	mov	r0, r1
 800dd52:	602b      	str	r3, [r5, #0]
 800dd54:	f7f4 f82f 	bl	8001db6 <_isatty>
 800dd58:	1c43      	adds	r3, r0, #1
 800dd5a:	d102      	bne.n	800dd62 <_isatty_r+0x1a>
 800dd5c:	682b      	ldr	r3, [r5, #0]
 800dd5e:	b103      	cbz	r3, 800dd62 <_isatty_r+0x1a>
 800dd60:	6023      	str	r3, [r4, #0]
 800dd62:	bd38      	pop	{r3, r4, r5, pc}
 800dd64:	200045c4 	.word	0x200045c4

0800dd68 <__assert_func>:
 800dd68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800dd6a:	4614      	mov	r4, r2
 800dd6c:	461a      	mov	r2, r3
 800dd6e:	4b09      	ldr	r3, [pc, #36]	; (800dd94 <__assert_func+0x2c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	4605      	mov	r5, r0
 800dd74:	68d8      	ldr	r0, [r3, #12]
 800dd76:	b14c      	cbz	r4, 800dd8c <__assert_func+0x24>
 800dd78:	4b07      	ldr	r3, [pc, #28]	; (800dd98 <__assert_func+0x30>)
 800dd7a:	9100      	str	r1, [sp, #0]
 800dd7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800dd80:	4906      	ldr	r1, [pc, #24]	; (800dd9c <__assert_func+0x34>)
 800dd82:	462b      	mov	r3, r5
 800dd84:	f000 f824 	bl	800ddd0 <fiprintf>
 800dd88:	f000 f834 	bl	800ddf4 <abort>
 800dd8c:	4b04      	ldr	r3, [pc, #16]	; (800dda0 <__assert_func+0x38>)
 800dd8e:	461c      	mov	r4, r3
 800dd90:	e7f3      	b.n	800dd7a <__assert_func+0x12>
 800dd92:	bf00      	nop
 800dd94:	20000e24 	.word	0x20000e24
 800dd98:	08045f66 	.word	0x08045f66
 800dd9c:	08045f73 	.word	0x08045f73
 800dda0:	08045fa1 	.word	0x08045fa1

0800dda4 <_calloc_r>:
 800dda4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dda6:	fba1 2402 	umull	r2, r4, r1, r2
 800ddaa:	b94c      	cbnz	r4, 800ddc0 <_calloc_r+0x1c>
 800ddac:	4611      	mov	r1, r2
 800ddae:	9201      	str	r2, [sp, #4]
 800ddb0:	f7fb fc0e 	bl	80095d0 <_malloc_r>
 800ddb4:	9a01      	ldr	r2, [sp, #4]
 800ddb6:	4605      	mov	r5, r0
 800ddb8:	b930      	cbnz	r0, 800ddc8 <_calloc_r+0x24>
 800ddba:	4628      	mov	r0, r5
 800ddbc:	b003      	add	sp, #12
 800ddbe:	bd30      	pop	{r4, r5, pc}
 800ddc0:	220c      	movs	r2, #12
 800ddc2:	6002      	str	r2, [r0, #0]
 800ddc4:	2500      	movs	r5, #0
 800ddc6:	e7f8      	b.n	800ddba <_calloc_r+0x16>
 800ddc8:	4621      	mov	r1, r4
 800ddca:	f7fd fbad 	bl	800b528 <memset>
 800ddce:	e7f4      	b.n	800ddba <_calloc_r+0x16>

0800ddd0 <fiprintf>:
 800ddd0:	b40e      	push	{r1, r2, r3}
 800ddd2:	b503      	push	{r0, r1, lr}
 800ddd4:	4601      	mov	r1, r0
 800ddd6:	ab03      	add	r3, sp, #12
 800ddd8:	4805      	ldr	r0, [pc, #20]	; (800ddf0 <fiprintf+0x20>)
 800ddda:	f853 2b04 	ldr.w	r2, [r3], #4
 800ddde:	6800      	ldr	r0, [r0, #0]
 800dde0:	9301      	str	r3, [sp, #4]
 800dde2:	f7ff fd5b 	bl	800d89c <_vfiprintf_r>
 800dde6:	b002      	add	sp, #8
 800dde8:	f85d eb04 	ldr.w	lr, [sp], #4
 800ddec:	b003      	add	sp, #12
 800ddee:	4770      	bx	lr
 800ddf0:	20000e24 	.word	0x20000e24

0800ddf4 <abort>:
 800ddf4:	b508      	push	{r3, lr}
 800ddf6:	2006      	movs	r0, #6
 800ddf8:	f000 f82c 	bl	800de54 <raise>
 800ddfc:	2001      	movs	r0, #1
 800ddfe:	f7f3 ff7b 	bl	8001cf8 <_exit>

0800de02 <_raise_r>:
 800de02:	291f      	cmp	r1, #31
 800de04:	b538      	push	{r3, r4, r5, lr}
 800de06:	4604      	mov	r4, r0
 800de08:	460d      	mov	r5, r1
 800de0a:	d904      	bls.n	800de16 <_raise_r+0x14>
 800de0c:	2316      	movs	r3, #22
 800de0e:	6003      	str	r3, [r0, #0]
 800de10:	f04f 30ff 	mov.w	r0, #4294967295
 800de14:	bd38      	pop	{r3, r4, r5, pc}
 800de16:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800de18:	b112      	cbz	r2, 800de20 <_raise_r+0x1e>
 800de1a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800de1e:	b94b      	cbnz	r3, 800de34 <_raise_r+0x32>
 800de20:	4620      	mov	r0, r4
 800de22:	f000 f831 	bl	800de88 <_getpid_r>
 800de26:	462a      	mov	r2, r5
 800de28:	4601      	mov	r1, r0
 800de2a:	4620      	mov	r0, r4
 800de2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800de30:	f000 b818 	b.w	800de64 <_kill_r>
 800de34:	2b01      	cmp	r3, #1
 800de36:	d00a      	beq.n	800de4e <_raise_r+0x4c>
 800de38:	1c59      	adds	r1, r3, #1
 800de3a:	d103      	bne.n	800de44 <_raise_r+0x42>
 800de3c:	2316      	movs	r3, #22
 800de3e:	6003      	str	r3, [r0, #0]
 800de40:	2001      	movs	r0, #1
 800de42:	e7e7      	b.n	800de14 <_raise_r+0x12>
 800de44:	2400      	movs	r4, #0
 800de46:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800de4a:	4628      	mov	r0, r5
 800de4c:	4798      	blx	r3
 800de4e:	2000      	movs	r0, #0
 800de50:	e7e0      	b.n	800de14 <_raise_r+0x12>
	...

0800de54 <raise>:
 800de54:	4b02      	ldr	r3, [pc, #8]	; (800de60 <raise+0xc>)
 800de56:	4601      	mov	r1, r0
 800de58:	6818      	ldr	r0, [r3, #0]
 800de5a:	f7ff bfd2 	b.w	800de02 <_raise_r>
 800de5e:	bf00      	nop
 800de60:	20000e24 	.word	0x20000e24

0800de64 <_kill_r>:
 800de64:	b538      	push	{r3, r4, r5, lr}
 800de66:	4d07      	ldr	r5, [pc, #28]	; (800de84 <_kill_r+0x20>)
 800de68:	2300      	movs	r3, #0
 800de6a:	4604      	mov	r4, r0
 800de6c:	4608      	mov	r0, r1
 800de6e:	4611      	mov	r1, r2
 800de70:	602b      	str	r3, [r5, #0]
 800de72:	f7f3 ff31 	bl	8001cd8 <_kill>
 800de76:	1c43      	adds	r3, r0, #1
 800de78:	d102      	bne.n	800de80 <_kill_r+0x1c>
 800de7a:	682b      	ldr	r3, [r5, #0]
 800de7c:	b103      	cbz	r3, 800de80 <_kill_r+0x1c>
 800de7e:	6023      	str	r3, [r4, #0]
 800de80:	bd38      	pop	{r3, r4, r5, pc}
 800de82:	bf00      	nop
 800de84:	200045c4 	.word	0x200045c4

0800de88 <_getpid_r>:
 800de88:	f7f3 bf1e 	b.w	8001cc8 <_getpid>

0800de8c <expf>:
 800de8c:	b508      	push	{r3, lr}
 800de8e:	ed2d 8b02 	vpush	{d8}
 800de92:	eef0 8a40 	vmov.f32	s17, s0
 800de96:	f000 f9ed 	bl	800e274 <__ieee754_expf>
 800de9a:	eeb0 8a40 	vmov.f32	s16, s0
 800de9e:	eeb0 0a68 	vmov.f32	s0, s17
 800dea2:	f000 f899 	bl	800dfd8 <finitef>
 800dea6:	b160      	cbz	r0, 800dec2 <expf+0x36>
 800dea8:	eddf 7a0f 	vldr	s15, [pc, #60]	; 800dee8 <expf+0x5c>
 800deac:	eef4 8ae7 	vcmpe.f32	s17, s15
 800deb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800deb4:	dd0a      	ble.n	800decc <expf+0x40>
 800deb6:	f7fd fbab 	bl	800b610 <__errno>
 800deba:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 800deec <expf+0x60>
 800debe:	2322      	movs	r3, #34	; 0x22
 800dec0:	6003      	str	r3, [r0, #0]
 800dec2:	eeb0 0a48 	vmov.f32	s0, s16
 800dec6:	ecbd 8b02 	vpop	{d8}
 800deca:	bd08      	pop	{r3, pc}
 800decc:	eddf 7a08 	vldr	s15, [pc, #32]	; 800def0 <expf+0x64>
 800ded0:	eef4 8ae7 	vcmpe.f32	s17, s15
 800ded4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ded8:	d5f3      	bpl.n	800dec2 <expf+0x36>
 800deda:	f7fd fb99 	bl	800b610 <__errno>
 800dede:	2322      	movs	r3, #34	; 0x22
 800dee0:	ed9f 8a04 	vldr	s16, [pc, #16]	; 800def4 <expf+0x68>
 800dee4:	6003      	str	r3, [r0, #0]
 800dee6:	e7ec      	b.n	800dec2 <expf+0x36>
 800dee8:	42b17217 	.word	0x42b17217
 800deec:	7f800000 	.word	0x7f800000
 800def0:	c2cff1b5 	.word	0xc2cff1b5
 800def4:	00000000 	.word	0x00000000

0800def8 <fabsf>:
 800def8:	ee10 3a10 	vmov	r3, s0
 800defc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800df00:	ee00 3a10 	vmov	s0, r3
 800df04:	4770      	bx	lr
	...

0800df08 <tanhf>:
 800df08:	b538      	push	{r3, r4, r5, lr}
 800df0a:	ee10 5a10 	vmov	r5, s0
 800df0e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800df12:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df16:	ed2d 8b02 	vpush	{d8}
 800df1a:	db0f      	blt.n	800df3c <tanhf+0x34>
 800df1c:	4b2a      	ldr	r3, [pc, #168]	; (800dfc8 <tanhf+0xc0>)
 800df1e:	ed93 6a00 	vldr	s12, [r3]
 800df22:	edd3 6a00 	vldr	s13, [r3]
 800df26:	eec6 7a00 	vdiv.f32	s15, s12, s0
 800df2a:	2d00      	cmp	r5, #0
 800df2c:	bfac      	ite	ge
 800df2e:	ee37 0aa6 	vaddge.f32	s0, s15, s13
 800df32:	ee37 0ae6 	vsublt.f32	s0, s15, s13
 800df36:	ecbd 8b02 	vpop	{d8}
 800df3a:	bd38      	pop	{r3, r4, r5, pc}
 800df3c:	4a23      	ldr	r2, [pc, #140]	; (800dfcc <tanhf+0xc4>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	dc39      	bgt.n	800dfb6 <tanhf+0xae>
 800df42:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800df46:	da07      	bge.n	800df58 <tanhf+0x50>
 800df48:	4b1f      	ldr	r3, [pc, #124]	; (800dfc8 <tanhf+0xc0>)
 800df4a:	edd3 7a00 	vldr	s15, [r3]
 800df4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 800df52:	ee27 0a80 	vmul.f32	s0, s15, s0
 800df56:	e7ee      	b.n	800df36 <tanhf+0x2e>
 800df58:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800df5c:	4c1c      	ldr	r4, [pc, #112]	; (800dfd0 <tanhf+0xc8>)
 800df5e:	db19      	blt.n	800df94 <tanhf+0x8c>
 800df60:	f7ff ffca 	bl	800def8 <fabsf>
 800df64:	edd4 7a00 	vldr	s15, [r4]
 800df68:	ee20 0a27 	vmul.f32	s0, s0, s15
 800df6c:	f000 f842 	bl	800dff4 <expm1f>
 800df70:	4b15      	ldr	r3, [pc, #84]	; (800dfc8 <tanhf+0xc0>)
 800df72:	edd3 7a00 	vldr	s15, [r3]
 800df76:	edd4 6a00 	vldr	s13, [r4]
 800df7a:	ed94 7a00 	vldr	s14, [r4]
 800df7e:	ee37 0a00 	vadd.f32	s0, s14, s0
 800df82:	ee86 7a80 	vdiv.f32	s14, s13, s0
 800df86:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800df8a:	2d00      	cmp	r5, #0
 800df8c:	bfb8      	it	lt
 800df8e:	eeb1 0a40 	vneglt.f32	s0, s0
 800df92:	e7d0      	b.n	800df36 <tanhf+0x2e>
 800df94:	ed94 8a00 	vldr	s16, [r4]
 800df98:	f7ff ffae 	bl	800def8 <fabsf>
 800df9c:	ee28 0a40 	vnmul.f32	s0, s16, s0
 800dfa0:	f000 f828 	bl	800dff4 <expm1f>
 800dfa4:	edd4 7a00 	vldr	s15, [r4]
 800dfa8:	ee77 7a80 	vadd.f32	s15, s15, s0
 800dfac:	eeb1 7a40 	vneg.f32	s14, s0
 800dfb0:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800dfb4:	e7e9      	b.n	800df8a <tanhf+0x82>
 800dfb6:	4b04      	ldr	r3, [pc, #16]	; (800dfc8 <tanhf+0xc0>)
 800dfb8:	ed93 0a00 	vldr	s0, [r3]
 800dfbc:	4b05      	ldr	r3, [pc, #20]	; (800dfd4 <tanhf+0xcc>)
 800dfbe:	edd3 7a00 	vldr	s15, [r3]
 800dfc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800dfc6:	e7e0      	b.n	800df8a <tanhf+0x82>
 800dfc8:	20000e28 	.word	0x20000e28
 800dfcc:	41afffff 	.word	0x41afffff
 800dfd0:	20000e30 	.word	0x20000e30
 800dfd4:	20000e2c 	.word	0x20000e2c

0800dfd8 <finitef>:
 800dfd8:	b082      	sub	sp, #8
 800dfda:	ed8d 0a01 	vstr	s0, [sp, #4]
 800dfde:	9801      	ldr	r0, [sp, #4]
 800dfe0:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800dfe4:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800dfe8:	bfac      	ite	ge
 800dfea:	2000      	movge	r0, #0
 800dfec:	2001      	movlt	r0, #1
 800dfee:	b002      	add	sp, #8
 800dff0:	4770      	bx	lr
	...

0800dff4 <expm1f>:
 800dff4:	ee10 2a10 	vmov	r2, s0
 800dff8:	497e      	ldr	r1, [pc, #504]	; (800e1f4 <expm1f+0x200>)
 800dffa:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800dffe:	428b      	cmp	r3, r1
 800e000:	d921      	bls.n	800e046 <expm1f+0x52>
 800e002:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e006:	d902      	bls.n	800e00e <expm1f+0x1a>
 800e008:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e00c:	4770      	bx	lr
 800e00e:	d106      	bne.n	800e01e <expm1f+0x2a>
 800e010:	2a00      	cmp	r2, #0
 800e012:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800e016:	bfb8      	it	lt
 800e018:	eeb0 0a67 	vmovlt.f32	s0, s15
 800e01c:	4770      	bx	lr
 800e01e:	2a00      	cmp	r2, #0
 800e020:	db05      	blt.n	800e02e <expm1f+0x3a>
 800e022:	4975      	ldr	r1, [pc, #468]	; (800e1f8 <expm1f+0x204>)
 800e024:	428b      	cmp	r3, r1
 800e026:	d95c      	bls.n	800e0e2 <expm1f+0xee>
 800e028:	2000      	movs	r0, #0
 800e02a:	f000 b91d 	b.w	800e268 <__math_oflowf>
 800e02e:	eddf 7a73 	vldr	s15, [pc, #460]	; 800e1fc <expm1f+0x208>
 800e032:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e036:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800e03a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e03e:	d550      	bpl.n	800e0e2 <expm1f+0xee>
 800e040:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800e044:	4770      	bx	lr
 800e046:	496e      	ldr	r1, [pc, #440]	; (800e200 <expm1f+0x20c>)
 800e048:	428b      	cmp	r3, r1
 800e04a:	d967      	bls.n	800e11c <expm1f+0x128>
 800e04c:	496d      	ldr	r1, [pc, #436]	; (800e204 <expm1f+0x210>)
 800e04e:	428b      	cmp	r3, r1
 800e050:	d847      	bhi.n	800e0e2 <expm1f+0xee>
 800e052:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800e208 <expm1f+0x214>
 800e056:	2a00      	cmp	r2, #0
 800e058:	bfa7      	ittee	ge
 800e05a:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800e05e:	eddf 6a6b 	vldrge	s13, [pc, #428]	; 800e20c <expm1f+0x218>
 800e062:	eddf 6a6b 	vldrlt	s13, [pc, #428]	; 800e210 <expm1f+0x21c>
 800e066:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800e06a:	bfac      	ite	ge
 800e06c:	2301      	movge	r3, #1
 800e06e:	f04f 33ff 	movlt.w	r3, #4294967295
 800e072:	ee37 0a66 	vsub.f32	s0, s14, s13
 800e076:	ee77 7a40 	vsub.f32	s15, s14, s0
 800e07a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e07e:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800e082:	ee20 4a25 	vmul.f32	s8, s0, s11
 800e086:	ed9f 6a63 	vldr	s12, [pc, #396]	; 800e214 <expm1f+0x220>
 800e08a:	eddf 6a63 	vldr	s13, [pc, #396]	; 800e218 <expm1f+0x224>
 800e08e:	ed9f 5a63 	vldr	s10, [pc, #396]	; 800e21c <expm1f+0x228>
 800e092:	ee20 7a04 	vmul.f32	s14, s0, s8
 800e096:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800e09a:	eee7 6a06 	vfma.f32	s13, s14, s12
 800e09e:	ed9f 6a60 	vldr	s12, [pc, #384]	; 800e220 <expm1f+0x22c>
 800e0a2:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e0a6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800e224 <expm1f+0x230>
 800e0aa:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e0ae:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e0b2:	eea6 5a87 	vfma.f32	s10, s13, s14
 800e0b6:	eef0 6a46 	vmov.f32	s13, s12
 800e0ba:	eee5 6a07 	vfma.f32	s13, s10, s14
 800e0be:	eee4 4a66 	vfms.f32	s9, s8, s13
 800e0c2:	eeb1 4a08 	vmov.f32	s8, #24	; 0x40c00000  6.0
 800e0c6:	eea0 4a64 	vfms.f32	s8, s0, s9
 800e0ca:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800e0ce:	eec5 6a04 	vdiv.f32	s13, s10, s8
 800e0d2:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e0d6:	bb7b      	cbnz	r3, 800e138 <expm1f+0x144>
 800e0d8:	ee90 7a26 	vfnms.f32	s14, s0, s13
 800e0dc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e0e0:	4770      	bx	lr
 800e0e2:	eebe 7a00 	vmov.f32	s14, #224	; 0xbf000000 -0.5
 800e0e6:	2a00      	cmp	r2, #0
 800e0e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e0ec:	bfb8      	it	lt
 800e0ee:	eef0 7a47 	vmovlt.f32	s15, s14
 800e0f2:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800e228 <expm1f+0x234>
 800e0f6:	ee40 7a07 	vmla.f32	s15, s0, s14
 800e0fa:	eeb0 7a40 	vmov.f32	s14, s0
 800e0fe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e102:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800e106:	ee17 3a90 	vmov	r3, s15
 800e10a:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800e208 <expm1f+0x214>
 800e10e:	eea6 7ae7 	vfms.f32	s14, s13, s15
 800e112:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800e20c <expm1f+0x218>
 800e116:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800e11a:	e7aa      	b.n	800e072 <expm1f+0x7e>
 800e11c:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800e120:	d208      	bcs.n	800e134 <expm1f+0x140>
 800e122:	eddf 7a42 	vldr	s15, [pc, #264]	; 800e22c <expm1f+0x238>
 800e126:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e12a:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800e12e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e132:	4770      	bx	lr
 800e134:	2300      	movs	r3, #0
 800e136:	e7a2      	b.n	800e07e <expm1f+0x8a>
 800e138:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e13c:	1c5a      	adds	r2, r3, #1
 800e13e:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800e142:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e146:	d106      	bne.n	800e156 <expm1f+0x162>
 800e148:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e14c:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800e150:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800e154:	4770      	bx	lr
 800e156:	2b01      	cmp	r3, #1
 800e158:	d118      	bne.n	800e18c <expm1f+0x198>
 800e15a:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800e15e:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e166:	bf5b      	ittet	pl
 800e168:	ee70 7a67 	vsubpl.f32	s15, s0, s15
 800e16c:	eeb0 7a00 	vmovpl.f32	s14, #0	; 0x40000000  2.0
 800e170:	ee70 5a25 	vaddmi.f32	s11, s0, s11
 800e174:	eea7 6a87 	vfmapl.f32	s12, s15, s14
 800e178:	bf43      	ittte	mi
 800e17a:	ee77 7ae5 	vsubmi.f32	s15, s15, s11
 800e17e:	eeb8 0a00 	vmovmi.f32	s0, #128	; 0xc0000000 -2.0
 800e182:	ee27 0a80 	vmulmi.f32	s0, s15, s0
 800e186:	eeb0 0a46 	vmovpl.f32	s0, s12
 800e18a:	4770      	bx	lr
 800e18c:	1c5a      	adds	r2, r3, #1
 800e18e:	2a39      	cmp	r2, #57	; 0x39
 800e190:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800e194:	d90b      	bls.n	800e1ae <expm1f+0x1ba>
 800e196:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e19a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800e19e:	ee17 3a90 	vmov	r3, s15
 800e1a2:	4419      	add	r1, r3
 800e1a4:	ee07 1a90 	vmov	s15, r1
 800e1a8:	ee37 0ac6 	vsub.f32	s0, s15, s12
 800e1ac:	4770      	bx	lr
 800e1ae:	2b16      	cmp	r3, #22
 800e1b0:	dc11      	bgt.n	800e1d6 <expm1f+0x1e2>
 800e1b2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e1b6:	fa42 f303 	asr.w	r3, r2, r3
 800e1ba:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800e1be:	ee07 3a10 	vmov	s14, r3
 800e1c2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800e1c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e1ca:	ee17 3a90 	vmov	r3, s15
 800e1ce:	440b      	add	r3, r1
 800e1d0:	ee00 3a10 	vmov	s0, r3
 800e1d4:	4770      	bx	lr
 800e1d6:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e1da:	05db      	lsls	r3, r3, #23
 800e1dc:	ee07 3a10 	vmov	s14, r3
 800e1e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e1e4:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e1e8:	ee77 7a86 	vadd.f32	s15, s15, s12
 800e1ec:	ee17 3a90 	vmov	r3, s15
 800e1f0:	e7ed      	b.n	800e1ce <expm1f+0x1da>
 800e1f2:	bf00      	nop
 800e1f4:	4195b843 	.word	0x4195b843
 800e1f8:	42b17217 	.word	0x42b17217
 800e1fc:	0da24260 	.word	0x0da24260
 800e200:	3eb17218 	.word	0x3eb17218
 800e204:	3f851591 	.word	0x3f851591
 800e208:	3f317180 	.word	0x3f317180
 800e20c:	3717f7d1 	.word	0x3717f7d1
 800e210:	b717f7d1 	.word	0xb717f7d1
 800e214:	b457edbb 	.word	0xb457edbb
 800e218:	36867e54 	.word	0x36867e54
 800e21c:	bd088889 	.word	0xbd088889
 800e220:	b8a670cd 	.word	0xb8a670cd
 800e224:	3ad00d01 	.word	0x3ad00d01
 800e228:	3fb8aa3b 	.word	0x3fb8aa3b
 800e22c:	7149f2ca 	.word	0x7149f2ca

0800e230 <with_errnof>:
 800e230:	b513      	push	{r0, r1, r4, lr}
 800e232:	4604      	mov	r4, r0
 800e234:	ed8d 0a01 	vstr	s0, [sp, #4]
 800e238:	f7fd f9ea 	bl	800b610 <__errno>
 800e23c:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e240:	6004      	str	r4, [r0, #0]
 800e242:	b002      	add	sp, #8
 800e244:	bd10      	pop	{r4, pc}

0800e246 <xflowf>:
 800e246:	b130      	cbz	r0, 800e256 <xflowf+0x10>
 800e248:	eef1 7a40 	vneg.f32	s15, s0
 800e24c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800e250:	2022      	movs	r0, #34	; 0x22
 800e252:	f7ff bfed 	b.w	800e230 <with_errnof>
 800e256:	eef0 7a40 	vmov.f32	s15, s0
 800e25a:	e7f7      	b.n	800e24c <xflowf+0x6>

0800e25c <__math_uflowf>:
 800e25c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e264 <__math_uflowf+0x8>
 800e260:	f7ff bff1 	b.w	800e246 <xflowf>
 800e264:	10000000 	.word	0x10000000

0800e268 <__math_oflowf>:
 800e268:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e270 <__math_oflowf+0x8>
 800e26c:	f7ff bfeb 	b.w	800e246 <xflowf>
 800e270:	70000000 	.word	0x70000000

0800e274 <__ieee754_expf>:
 800e274:	ee10 2a10 	vmov	r2, s0
 800e278:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800e27c:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e280:	d902      	bls.n	800e288 <__ieee754_expf+0x14>
 800e282:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e286:	4770      	bx	lr
 800e288:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 800e28c:	d106      	bne.n	800e29c <__ieee754_expf+0x28>
 800e28e:	eddf 7a4e 	vldr	s15, [pc, #312]	; 800e3c8 <__ieee754_expf+0x154>
 800e292:	2900      	cmp	r1, #0
 800e294:	bf18      	it	ne
 800e296:	eeb0 0a67 	vmovne.f32	s0, s15
 800e29a:	4770      	bx	lr
 800e29c:	484b      	ldr	r0, [pc, #300]	; (800e3cc <__ieee754_expf+0x158>)
 800e29e:	4282      	cmp	r2, r0
 800e2a0:	dd02      	ble.n	800e2a8 <__ieee754_expf+0x34>
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	f7ff bfe0 	b.w	800e268 <__math_oflowf>
 800e2a8:	2a00      	cmp	r2, #0
 800e2aa:	da05      	bge.n	800e2b8 <__ieee754_expf+0x44>
 800e2ac:	4a48      	ldr	r2, [pc, #288]	; (800e3d0 <__ieee754_expf+0x15c>)
 800e2ae:	4293      	cmp	r3, r2
 800e2b0:	d902      	bls.n	800e2b8 <__ieee754_expf+0x44>
 800e2b2:	2000      	movs	r0, #0
 800e2b4:	f7ff bfd2 	b.w	800e25c <__math_uflowf>
 800e2b8:	4a46      	ldr	r2, [pc, #280]	; (800e3d4 <__ieee754_expf+0x160>)
 800e2ba:	4293      	cmp	r3, r2
 800e2bc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800e2c0:	d952      	bls.n	800e368 <__ieee754_expf+0xf4>
 800e2c2:	4a45      	ldr	r2, [pc, #276]	; (800e3d8 <__ieee754_expf+0x164>)
 800e2c4:	4293      	cmp	r3, r2
 800e2c6:	ea4f 0281 	mov.w	r2, r1, lsl #2
 800e2ca:	d834      	bhi.n	800e336 <__ieee754_expf+0xc2>
 800e2cc:	4b43      	ldr	r3, [pc, #268]	; (800e3dc <__ieee754_expf+0x168>)
 800e2ce:	4413      	add	r3, r2
 800e2d0:	ed93 7a00 	vldr	s14, [r3]
 800e2d4:	4b42      	ldr	r3, [pc, #264]	; (800e3e0 <__ieee754_expf+0x16c>)
 800e2d6:	4413      	add	r3, r2
 800e2d8:	ee30 7a47 	vsub.f32	s14, s0, s14
 800e2dc:	f1c1 0201 	rsb	r2, r1, #1
 800e2e0:	edd3 7a00 	vldr	s15, [r3]
 800e2e4:	1a52      	subs	r2, r2, r1
 800e2e6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800e2ea:	ee20 6a00 	vmul.f32	s12, s0, s0
 800e2ee:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800e3e4 <__ieee754_expf+0x170>
 800e2f2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800e3e8 <__ieee754_expf+0x174>
 800e2f6:	eee6 6a05 	vfma.f32	s13, s12, s10
 800e2fa:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 800e3ec <__ieee754_expf+0x178>
 800e2fe:	eea6 5a86 	vfma.f32	s10, s13, s12
 800e302:	eddf 6a3b 	vldr	s13, [pc, #236]	; 800e3f0 <__ieee754_expf+0x17c>
 800e306:	eee5 6a06 	vfma.f32	s13, s10, s12
 800e30a:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 800e3f4 <__ieee754_expf+0x180>
 800e30e:	eea6 5a86 	vfma.f32	s10, s13, s12
 800e312:	eef0 6a40 	vmov.f32	s13, s0
 800e316:	eee5 6a46 	vfms.f32	s13, s10, s12
 800e31a:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 800e31e:	ee20 5a26 	vmul.f32	s10, s0, s13
 800e322:	bb92      	cbnz	r2, 800e38a <__ieee754_expf+0x116>
 800e324:	ee76 6ac6 	vsub.f32	s13, s13, s12
 800e328:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800e32c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e330:	ee35 0ac0 	vsub.f32	s0, s11, s0
 800e334:	4770      	bx	lr
 800e336:	4b30      	ldr	r3, [pc, #192]	; (800e3f8 <__ieee754_expf+0x184>)
 800e338:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800e3fc <__ieee754_expf+0x188>
 800e33c:	eddf 6a30 	vldr	s13, [pc, #192]	; 800e400 <__ieee754_expf+0x18c>
 800e340:	4413      	add	r3, r2
 800e342:	edd3 7a00 	vldr	s15, [r3]
 800e346:	eee0 7a07 	vfma.f32	s15, s0, s14
 800e34a:	eeb0 7a40 	vmov.f32	s14, s0
 800e34e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e352:	ee17 2a90 	vmov	r2, s15
 800e356:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e35a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800e35e:	eddf 6a29 	vldr	s13, [pc, #164]	; 800e404 <__ieee754_expf+0x190>
 800e362:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e366:	e7be      	b.n	800e2e6 <__ieee754_expf+0x72>
 800e368:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 800e36c:	d20b      	bcs.n	800e386 <__ieee754_expf+0x112>
 800e36e:	eddf 6a26 	vldr	s13, [pc, #152]	; 800e408 <__ieee754_expf+0x194>
 800e372:	ee70 6a26 	vadd.f32	s13, s0, s13
 800e376:	eef4 6ae5 	vcmpe.f32	s13, s11
 800e37a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e37e:	dd02      	ble.n	800e386 <__ieee754_expf+0x112>
 800e380:	ee30 0a25 	vadd.f32	s0, s0, s11
 800e384:	4770      	bx	lr
 800e386:	2200      	movs	r2, #0
 800e388:	e7af      	b.n	800e2ea <__ieee754_expf+0x76>
 800e38a:	ee36 6a66 	vsub.f32	s12, s12, s13
 800e38e:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800e392:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800e396:	bfb8      	it	lt
 800e398:	3264      	addlt	r2, #100	; 0x64
 800e39a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e39e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e3a2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800e3a6:	ee17 3a90 	vmov	r3, s15
 800e3aa:	bfab      	itete	ge
 800e3ac:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800e3b0:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800e3b4:	ee00 3a10 	vmovge	s0, r3
 800e3b8:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 800e40c <__ieee754_expf+0x198>
 800e3bc:	bfbc      	itt	lt
 800e3be:	ee00 3a10 	vmovlt	s0, r3
 800e3c2:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800e3c6:	4770      	bx	lr
 800e3c8:	00000000 	.word	0x00000000
 800e3cc:	42b17217 	.word	0x42b17217
 800e3d0:	42cff1b5 	.word	0x42cff1b5
 800e3d4:	3eb17218 	.word	0x3eb17218
 800e3d8:	3f851591 	.word	0x3f851591
 800e3dc:	08045fac 	.word	0x08045fac
 800e3e0:	08045fb4 	.word	0x08045fb4
 800e3e4:	3331bb4c 	.word	0x3331bb4c
 800e3e8:	b5ddea0e 	.word	0xb5ddea0e
 800e3ec:	388ab355 	.word	0x388ab355
 800e3f0:	bb360b61 	.word	0xbb360b61
 800e3f4:	3e2aaaab 	.word	0x3e2aaaab
 800e3f8:	08045fa4 	.word	0x08045fa4
 800e3fc:	3fb8aa3b 	.word	0x3fb8aa3b
 800e400:	3f317180 	.word	0x3f317180
 800e404:	3717f7d1 	.word	0x3717f7d1
 800e408:	7149f2ca 	.word	0x7149f2ca
 800e40c:	0d800000 	.word	0x0d800000

0800e410 <_init>:
 800e410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e412:	bf00      	nop
 800e414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e416:	bc08      	pop	{r3}
 800e418:	469e      	mov	lr, r3
 800e41a:	4770      	bx	lr

0800e41c <_fini>:
 800e41c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e41e:	bf00      	nop
 800e420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e422:	bc08      	pop	{r3}
 800e424:	469e      	mov	lr, r3
 800e426:	4770      	bx	lr
